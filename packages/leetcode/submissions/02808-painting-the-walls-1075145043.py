# Submission title: for Painting the Walls
# Submission url  : https://leetcode.com/submissions/detail/1075145043/
# Submission json : {"id": 1075145043, "status_display": "Accepted", "lang": "python3", "question_id": 2808, "title_slug": "painting-the-walls", "code": "class Solution:\n    def paintWalls(self, cost: List[int], time: List[int]) -> int:\n        @cache\n        def dp(i, remain):\n            if remain <= 0:\n                return 0\n            if i == n:\n                return inf\n            \n            paint = cost[i] + dp(i + 1, remain - 1 - time[i])\n            dont_paint = dp(i + 1, remain)\n            return min(paint, dont_paint)\n    \n        n = len(cost)\n        return dp(0, n)", "title": "Painting the Walls", "url": "/submissions/detail/1075145043/", "lang_name": "Python3", "time": "3\u00a0months, 3\u00a0weeks", "timestamp": 1697302406, "status": 10, "runtime": "2174 ms", "is_pending": "Not Pending", "memory": "445.6 MB", "compare_resulthas_notes": false, "flag_type": 1}


class Solution:
    def paintWalls(self, cost: List[int], time: List[int]) -> int:
        @cache
        def dp(i, remain):
            if remain <= 0:
                return 0
            if i == n:
                return inf

            paint = cost[i] + dp(i + 1, remain - 1 - time[i])
            dont_paint = dp(i + 1, remain)
            return min(paint, dont_paint)

        n = len(cost)
        return dp(0, n)
