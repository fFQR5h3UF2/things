#!/usr/bin/env sh
#
# tools

#######################################
# Bazel wrapper using bazelisk
# Globals:
#   GOPATH
#   HOME
#######################################
run_bazel() {
    package="github.com/bazelbuild/bazelisk"
    version="c7c6c19799ff408c48bdce6b7557217ad0050b17" # v1.19.0
    bin="${GOPATH:-${HOME}/go}/bin/bazelisk"
    if [ ! -x "${bin}" ]; then
        go install "${package}@${version}"
    fi
    cd "$(git rev-parse --show-toplevel)"
    . ./tools/env.sh
    exec "${bin}" "${@}"
}

#######################################
# Fix for generated golang files not available to IDEs
#   https://github.com/bazelbuild/rules_go/wiki/Editor-setup
#######################################
run_gopackagesdriver() {
    run_bazel run -- @io_bazel_rules_go//go/tools/gopackagesdriver "${@}"
}

get_functions() {
    _functions=$(grep -E '^[[:space:]]*[[:alnum:]_]+\(\)[[:space:]]*{[[:space:]]*$' "${0}")
    printf "functions:\n%s" "${_functions}" >&2
}

#######################################
# Calculate the current version and output it
# Outputs:
#   Writes current version to stdout
#######################################
get_cur_version() {
    git fetch origin --depth=100
    tag=$(git describe --tags --long --match="[0-9][0-9][0-9][0-9].[0-9][0-9].[0-9][0-9]")
    hash="${tag##*-}"
    patch="${tag#*-}"
    patch="${patch%-*}"
    major="${tag%%.*}"
    minor="${tag#*.}"
    minor="${minor%%.*}"
    version="${major}.${minor}.${patch}+${hash}"
    echo "tag: ${tag}, major: ${major}, patch: ${patch}, hash: ${hash}" >&2
    echo "${version}"
}

#######################################
# Calculate the new version and output it
# Outputs:
#   Writes new version to stdout
#######################################
get_new_version() {
    date "+%G.%-V.0"
}

if [ "${#}" -gt 0 ]; then
    set -o errexit -o nounset -o xtrace
    "${@}"
fi
