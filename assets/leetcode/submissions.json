{
  "submissions": [
    {
      "id": 1172304413,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1559,
      "title_slug": "cherry-pickup-ii",
      "code": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -\u003e int:\n        n = len(grid)\n        m = len(grid[0])\n\n        # Create 3D DP table with initial values of 0\n        dp = [[[0] * m for _ in range(m)] for _ in range(n)]\n\n        # Set the starting point value (top-left and top-right corner)\n        cherries = 0\n        dp[0][0][m - 1] = grid[0][0] + grid[0][m - 1]\n\n        # Iterate through each row from second onwards\n        for i in range(1, n):\n            # Iterate through each column for robot 1\n            for j in range(m):\n                # Iterate through each column for robot 2\n                for k in range(m):\n                    # Skip invalid states:\n                    # - Both robots in the same row (j \u003e i)\n                    # - Robot 2 left of robot 1 (k \u003c m - i - 1)\n                    # - Robot 1 further right than robot 2 (j \u003e k)\n                    if j \u003e i or k \u003c m - i - 1 or j \u003e k:\n                        continue\n                    # Base case: no moves possible, use previous state\n                    dp[i][j][k] = dp[i - 1][j][k]\n                    # Explore moves for robot 1:\n                    # - Up-diagonal with robot 2 at same position\n                    if j - 1 \u003e= 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k])\n                    # - Up-diagonal with robot 2 one step left/right\n                    if j - 1 \u003e= 0 and k - 1 \u003e= 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k - 1])\n                    if j - 1 \u003e= 0 and k + 1 \u003c m:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k + 1])\n                    # Explore moves for robot 2:\n                    # - Up-diagonal with robot 1 at same position\n                    if j + 1 \u003c m:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j + 1][k])\n                    # - Up-diagonal with robot 1 one step left/right\n                    if j + 1 \u003c m and k - 1 \u003e= 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j + 1][k - 1])\n                    if j + 1 \u003c m and k + 1 \u003c m:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j + 1][k + 1])\n                    # Explore horizontal moves for both robots:\n                    # - Both robots move left\n                    if k - 1 \u003e= 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k - 1])\n                    # - Both robots move right\n                    if k + 1 \u003c m:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k + 1])\n                    # Add cherries only if robots are in different positions\n                    if j != k:\n                        dp[i][j][k] += grid[i][j] + grid[i][k]\n                    else:\n                        dp[i][j][k] += grid[i][j]  # Only one robot picks if they land in the same cell\n                    # Update maximum cherries collected so far\n                    cherries = max(cherries, dp[i][j][k])\n\n        return cherries\n",
      "title": "Cherry Pickup II",
      "url": "/submissions/detail/1172304413/",
      "lang_name": "Python3",
      "time": "3 minutes",
      "timestamp": 1707657627,
      "status": 10,
      "runtime": "498 ms",
      "is_pending": "Not Pending",
      "memory": "22.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1171379827,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 647,
      "title_slug": "palindromic-substrings",
      "code": "class Solution:\n    def countSubstrings(self, s: str) -\u003e int:\n        n = len(s)\n        palindrome = [[False] * n for _ in range(n)]\n        ans = 0\n\n        for i in range(n):\n            palindrome[i][i] = True\n            ans += 1\n\n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                palindrome[i][i + 1] = True\n                ans += 1\n\n        for length in range(3, n + 1):\n            for i in range(n - length + 1):\n                if s[i] == s[i + length - 1] and palindrome[i + 1][i + length - 2]:\n                    palindrome[i][i + length - 1] = True\n                    ans += 1\n\n        return ans",
      "title": "Palindromic Substrings",
      "url": "/submissions/detail/1171379827/",
      "lang_name": "Python3",
      "time": "18 minutes",
      "timestamp": 1707567173,
      "status": 10,
      "runtime": "159 ms",
      "is_pending": "Not Pending",
      "memory": "24.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1170736139,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 368,
      "title_slug": "largest-divisible-subset",
      "code": "class Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -\u003e List[int]:\n        nums.sort()\n        n = len(nums)\n        dp = [1] * n\n        max_size, max_index = 1, 0\n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0:\n                    dp[i] = max(dp[i], dp[j] + 1)\n                    if dp[i] \u003e max_size:\n                        max_size = dp[i]\n                        max_index = i\n\n        result = []\n        num = nums[max_index]\n        for i in range(max_index, -1, -1):\n            if num % nums[i] == 0 and dp[i] == max_size:\n                result.append(nums[i])\n                num = nums[i]\n                max_size -= 1\n\n        return result\n\n\n",
      "title": "Largest Divisible Subset",
      "url": "/submissions/detail/1170736139/",
      "lang_name": "Python3",
      "time": "1 hour, 32 minutes",
      "timestamp": 1707495152,
      "status": 10,
      "runtime": "220 ms",
      "is_pending": "Not Pending",
      "memory": "16.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1169706054,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 279,
      "title_slug": "perfect-squares",
      "code": "class Solution:\n    def numSquares(self, n: int) -\u003e int:\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            min_val = float('inf')\n            j = 1\n            while j * j \u003c= i:\n                min_val = min(min_val, dp[i - j * j] + 1)\n                j += 1\n            dp[i] = min_val\n        return dp[n]\n\n",
      "title": "Perfect Squares",
      "url": "/submissions/detail/1169706054/",
      "lang_name": "Python3",
      "time": "1 minute",
      "timestamp": 1707396603,
      "status": 10,
      "runtime": "2443 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1168587650,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 451,
      "title_slug": "sort-characters-by-frequency",
      "code": "class Solution:\n    def frequencySort(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        for char in s:\n            counter[char] += 1\n        pq = [(-freq, char) for char, freq in counter.items()]\n        heapq.heapify(pq)\n        result = []\n        while pq:\n            freq, char = heapq.heappop(pq)\n            result.append(char * -freq)\n        return \"\".join(result)",
      "title": "Sort Characters By Frequency",
      "url": "/submissions/detail/1168587650/",
      "lang_name": "Python3",
      "time": "26 minutes",
      "timestamp": 1707292784,
      "status": 10,
      "runtime": "49 ms",
      "is_pending": "Not Pending",
      "memory": "17.9 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1168584325,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 451,
      "title_slug": "sort-characters-by-frequency",
      "code": "class Solution:\n    def frequencySort(self, s: str) -\u003e str:\n        counter = {}\n        for char in s:\n            if char not in counter:\n                counter[char] = -ord(char)\n            counter[char] -= 100\n        return \"\".join(sorted(s, key=lambda val: counter[val]))",
      "title": "Sort Characters By Frequency",
      "url": "/submissions/detail/1168584325/",
      "lang_name": "Python3",
      "time": "32 minutes",
      "timestamp": 1707292460,
      "status": 10,
      "runtime": "67 ms",
      "is_pending": "Not Pending",
      "memory": "19.3 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1168583436,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 451,
      "title_slug": "sort-characters-by-frequency",
      "code": "class Solution:\n    def frequencySort(self, s: str) -\u003e str:\n        counter = {}\n        for char in s:\n            if char not in counter:\n                counter[char] = ord(char)\n            counter[char] += 100\n        return \"\".join(sorted(s, key=lambda val: -counter[val]))",
      "title": "Sort Characters By Frequency",
      "url": "/submissions/detail/1168583436/",
      "lang_name": "Python3",
      "time": "33 minutes",
      "timestamp": 1707292375,
      "status": 10,
      "runtime": "61 ms",
      "is_pending": "Not Pending",
      "memory": "23 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1168581047,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 451,
      "title_slug": "sort-characters-by-frequency",
      "code": "class Solution:\n    def frequencySort(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        for char in s:\n            counter[char] += 1\n        return \"\".join(sorted(s, key=lambda val: -(ord(val) + counter[val] * 100)))",
      "title": "Sort Characters By Frequency",
      "url": "/submissions/detail/1168581047/",
      "lang_name": "Python3",
      "time": "37 minutes",
      "timestamp": 1707292147,
      "status": 10,
      "runtime": "80 ms",
      "is_pending": "Not Pending",
      "memory": "23.3 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1168576955,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 451,
      "title_slug": "sort-characters-by-frequency",
      "code": "class Solution:\n    def frequencySort(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        for char in s:\n            counter[char] += 1\n        return \"\".join(sorted(s, key=lambda val: -counter[val]))",
      "title": "Sort Characters By Frequency",
      "url": "/submissions/detail/1168576955/",
      "lang_name": "Python3",
      "time": "43 minutes",
      "timestamp": 1707291757,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111101010110011010111110011",
      "flag_type": 1
    },
    {
      "id": 1167509057,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 49,
      "title_slug": "group-anagrams",
      "code": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -\u003e List[List[str]]:\n        anagrams = defaultdict(list)\n        for anagram in strs:\n            anagrams[tuple(sorted(anagram))].append(anagram)\n        return anagrams.values()",
      "title": "Group Anagrams",
      "url": "/submissions/detail/1167509057/",
      "lang_name": "Python3",
      "time": "0 minutes",
      "timestamp": 1707199371,
      "status": 10,
      "runtime": "76 ms",
      "is_pending": "Not Pending",
      "memory": "20.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1166558069,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 387,
      "title_slug": "first-unique-character-in-a-string",
      "code": "class Solution:\n    def firstUniqChar(self, s: str) -\u003e int:\n        counter = [0] * 26\n\n        for char in s:\n            idx = ord(char) - ord('a')\n            if counter[idx] in (0, 1):\n                counter[idx] += 1\n        for i in range(len(s)):\n            if counter[ord(s[i]) - ord('a')] == 1:\n                return i\n        return -1",
      "title": "First Unique Character in a String",
      "url": "/submissions/detail/1166558069/",
      "lang_name": "Python3",
      "time": "2 hours, 29 minutes",
      "timestamp": 1707117177,
      "status": 10,
      "runtime": "103 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1165825513,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1121,
      "title_slug": "partition-array-for-maximum-sum",
      "code": "class Solution:\n    def maxSumAfterPartitioning(self, arr: List[int], k: int) -\u003e int:\n        min_num = -1\n        length = len(arr)\n        last_idx = length - 1\n        cache = [-1] * length\n\n        def dp(start: int) -\u003e int:\n            cached = cache[start]\n            if cached != -1:\n                return cached\n            max_num = min_num\n            max_sum = 0\n            for i in range(start, min(start + k, length)):\n                max_num = max(max_num, arr[i])\n                cur_sum = max_num * (i - start + 1)\n                if i != last_idx:\n                    cur_sum += dp(i + 1)\n                max_sum = max(max_sum, cur_sum)\n            cache[start] = max_sum\n            return max_sum\n        \n        return dp(0)\n            ",
      "title": "Partition Array for Maximum Sum",
      "url": "/submissions/detail/1165825513/",
      "lang_name": "Python3",
      "time": "2 hours, 3 minutes",
      "timestamp": 1707050286,
      "status": 10,
      "runtime": "387 ms",
      "is_pending": "Not Pending",
      "memory": "17.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1165812156,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 76,
      "title_slug": "minimum-window-substring",
      "code": "class Solution:\n    def minWindow(self, s: str, t: str) -\u003e str:\n        if not s or not t:\n            return \"\"\n\n        dictT = defaultdict(int)\n        for c in t:\n            dictT[c] += 1\n\n        required = len(dictT)\n        l, r = 0, 0\n        formed = 0\n\n        windowCounts = defaultdict(int)\n        ans = [-1, 0, 0]\n\n        while r \u003c len(s):\n            c = s[r]\n            windowCounts[c] += 1\n\n            if c in dictT and windowCounts[c] == dictT[c]:\n                formed += 1\n\n            while l \u003c= r and formed == required:\n                c = s[l]\n\n                if ans[0] == -1 or r - l + 1 \u003c ans[0]:\n                    ans[0] = r - l + 1\n                    ans[1] = l\n                    ans[2] = r\n\n                windowCounts[c] -= 1\n                if c in dictT and windowCounts[c] \u003c dictT[c]:\n                    formed -= 1\n\n                l += 1\n\n            r += 1\n\n        return \"\" if ans[0] == -1 else s[ans[1]:ans[2] + 1]\n\n",
      "title": "Minimum Window Substring",
      "url": "/submissions/detail/1165812156/",
      "lang_name": "Python3",
      "time": "2 hours, 24 minutes",
      "timestamp": 1707049028,
      "status": 10,
      "runtime": "91 ms",
      "is_pending": "Not Pending",
      "memory": "17.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1164073821,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 3241,
      "title_slug": "divide-array-into-arrays-with-max-difference",
      "code": "class Solution:\n    def divideArray(self, nums, k):\n        size = len(nums)\n        if size % 3 != 0:\n            return []\n\n        nums.sort()\n\n        result = []\n        group_index = 0\n        for i in range(0, size, 3):\n            if i + 2 \u003c size and nums[i + 2] - nums[i] \u003c= k:\n                result.append([nums[i], nums[i + 1], nums[i + 2]])\n                group_index += 1\n            else:\n                return []\n        return result\n\n\n",
      "title": "Divide Array Into Arrays With Max Difference",
      "url": "/submissions/detail/1164073821/",
      "lang_name": "Python3",
      "time": "1 day, 21 hours",
      "timestamp": 1706892786,
      "status": 10,
      "runtime": "683 ms",
      "is_pending": "Not Pending",
      "memory": "30.8 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1164073020,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 3241,
      "title_slug": "divide-array-into-arrays-with-max-difference",
      "code": "class Solution:\n    def divideArray(self, nums, k):\n        size = len(nums)\n        if size % 3 != 0:\n            return []\n\n        nums.sort()\n\n        result = []\n        group_index = 0\n        for i in range(0, size, 3):\n            if i + 2 \u003c size and nums[i + 2] - nums[i] \u003c= k:\n                result.append([nums[i], nums[i + 1], nums[i + 2]])\n                group_index += 1\n            else:\n                return []\n        return result\n\n\n",
      "title": "Divide Array Into Arrays With Max Difference",
      "url": "/submissions/detail/1164073020/",
      "lang_name": "Python3",
      "time": "1 day, 21 hours",
      "timestamp": 1706892730,
      "status": 10,
      "runtime": "703 ms",
      "is_pending": "Not Pending",
      "memory": "30.8 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1164072865,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 3241,
      "title_slug": "divide-array-into-arrays-with-max-difference",
      "code": "class Solution:\n    def sequentialDigits(self, low, high):\n        a = []\n\n        for i in range(1, 10):\n            num = i\n            next_digit = i + 1\n\n            while num \u003c= high and next_digit \u003c= 9:\n                num = num * 10 + next_digit\n                if low \u003c= num \u003c= high:\n                    a.append(num)\n                next_digit += 1\n\n        a.sort()\n        return a\n\n\n",
      "title": "Divide Array Into Arrays With Max Difference",
      "url": "/submissions/detail/1164072865/",
      "lang_name": "Python3",
      "time": "1 day, 21 hours",
      "timestamp": 1706892719,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1164072706,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 3241,
      "title_slug": "divide-array-into-arrays-with-max-difference",
      "code": "class Solution:\n    def sequentialDigits(self, low, high):\n        a = []\n\n        for i in range(1, 10):\n            num = i\n            next_digit = i + 1\n\n            while num \u003c= high and next_digit \u003c= 9:\n                num = num * 10 + next_digit\n                if low \u003c= num \u003c= high:\n                    a.append(num)\n                next_digit += 1\n\n        a.sort()\n        return a\n\n\n",
      "title": "Divide Array Into Arrays With Max Difference",
      "url": "/submissions/detail/1164072706/",
      "lang_name": "Python3",
      "time": "1 day, 21 hours",
      "timestamp": 1706892707,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1164072112,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1212,
      "title_slug": "sequential-digits",
      "code": "class Solution:\n    def sequentialDigits(self, low, high):\n        a = []\n\n        for i in range(1, 10):\n            num = i\n            next_digit = i + 1\n\n            while num \u003c= high and next_digit \u003c= 9:\n                num = num * 10 + next_digit\n                if low \u003c= num \u003c= high:\n                    a.append(num)\n                next_digit += 1\n\n        a.sort()\n        return a\n\n\n",
      "title": "Sequential Digits",
      "url": "/submissions/detail/1164072112/",
      "lang_name": "Python3",
      "time": "1 day, 21 hours",
      "timestamp": 1706892667,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1161819645,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 739,
      "title_slug": "daily-temperatures",
      "code": "class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -\u003e List[int]:\n        temps_left = defaultdict(list)\n        to_pop = []\n        length = len(temperatures)\n        ans = [0] * length\n        for i in range(length):\n            temp = temperatures[i]\n            for temp_left, ids in temps_left.items():\n                if temp \u003c= temp_left:\n                    continue\n                for id in ids:\n                    ans[id] = i - id\n                to_pop.append(temp_left)\n            temps_left[temp].append(i)\n            for temp in to_pop:\n                temps_left.pop(temp)\n            to_pop.clear()\n        \n        return ans",
      "title": "Daily Temperatures",
      "url": "/submissions/detail/1161819645/",
      "lang_name": "Python3",
      "time": "4 days, 6 hours",
      "timestamp": 1706688591,
      "status": 10,
      "runtime": "1098 ms",
      "is_pending": "Not Pending",
      "memory": "31.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1161794069,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 739,
      "title_slug": "daily-temperatures",
      "code": "class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -\u003e List[int]:\n        temps_left = {}\n        to_pop = []\n        length = len(temperatures)\n        ans = [0] * length\n        for i in range(length):\n            temp = temperatures[i]\n            for temp_left, idx in temps_left.items():\n                if temp \u003e temp_left:\n                    ans[idx] = i - idx\n                    to_pop.append(temp_left)\n            temps_left[temp] = i\n            for temp in to_pop:\n                temps_left.pop(temp)\n            to_pop.clear()\n        \n        return ans",
      "title": "Daily Temperatures",
      "url": "/submissions/detail/1161794069/",
      "lang_name": "Python3",
      "time": "4 days, 7 hours",
      "timestamp": 1706686148,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111010111110000000000000010000010000010000000000",
      "flag_type": 1
    },
    {
      "id": 1161011195,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 150,
      "title_slug": "evaluate-reverse-polish-notation",
      "code": "class Solution:\n    def evalRPN(self, tokens: List[str]) -\u003e int:\n        stack: list[int] = []\n        for token in tokens:\n            match token:\n                case \"+\":\n                    stack.append(stack.pop() + stack.pop())\n                case \"-\":\n                    last, prev = stack.pop(), stack.pop()\n                    stack.append(prev - last)\n                case \"*\":\n                    stack.append(stack.pop() * stack.pop())\n                case \"/\": \n                    last, prev = stack.pop(), stack.pop()\n                    stack.append(int(prev / last))\n                case _:\n                    stack.append(int(token))\n        return stack[0]",
      "title": "Evaluate Reverse Polish Notation",
      "url": "/submissions/detail/1161011195/",
      "lang_name": "Python3",
      "time": "5 days, 2 hours",
      "timestamp": 1706618212,
      "status": 10,
      "runtime": "64 ms",
      "is_pending": "Not Pending",
      "memory": "17.1 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1159838959,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 232,
      "title_slug": "implement-queue-using-stacks",
      "code": "class MyQueue:\n\n    def __init__(self):\n        self.stack_in = []\n        self.stack_out = []\n\n    def push(self, x: int) -\u003e None:\n        self.stack_in.append(x)\n\n    def pop(self) -\u003e int:\n        self.peek()\n        return self.stack_out.pop()\n\n    def peek(self) -\u003e int:\n        if self.stack_out:\n            return self.stack_out[-1]\n        \n        while self.stack_in:\n            self.stack_out.append(self.stack_in.pop())\n\n        return self.stack_out[-1]\n\n    def empty(self) -\u003e bool:\n        return not self.stack_out and not self.stack_in\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()",
      "title": "Implement Queue using Stacks",
      "url": "/submissions/detail/1159838959/",
      "lang_name": "Python3",
      "time": "6 days, 7 hours",
      "timestamp": 1706510673,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1159099503,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1145,
      "title_slug": "number-of-submatrices-that-sum-to-target",
      "code": "class Solution:\n    def numSubmatrixSumTarget(self, matrix, target):\n        m, n = len(matrix), len(matrix[0])\n\n        for row in range(m):\n            for col in range(1, n):\n                matrix[row][col] += matrix[row][col - 1]\n\n        count = 0\n\n        for c1 in range(n):\n            for c2 in range(c1, n):\n                prefix_sum_count = {0: 1}\n                sum_val = 0\n\n                for row in range(m):\n                    sum_val += matrix[row][c2] - (matrix[row][c1 - 1] if c1 \u003e 0 else 0)\n                    count += prefix_sum_count.get(sum_val - target, 0)\n                    prefix_sum_count[sum_val] = prefix_sum_count.get(sum_val, 0) + 1\n\n        return count\n\n",
      "title": "Number of Submatrices That Sum to Target",
      "url": "/submissions/detail/1159099503/",
      "lang_name": "Python3",
      "time": "1 week",
      "timestamp": 1706438043,
      "status": 10,
      "runtime": "422 ms",
      "is_pending": "Not Pending",
      "memory": "17.7 MB",
      "compare_result": "1111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1159096498,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1145,
      "title_slug": "number-of-submatrices-that-sum-to-target",
      "code": "class Solution:\n    def numSubmatrixSumTarget(self, matrix, target):\n        m, n = len(matrix), len(matrix[0])\n\n        for row in range(m):\n            for col in range(1, n):\n                matrix[row][col] += matrix[row][col - 1]\n\n        count = 0\n\n        for c1 in range(n):\n            for c2 in range(c1, n):\n                prefix_sum_count = {0: 1}\n                sum_val = 0\n\n                for row in range(m):\n                    sum_val += matrix[row][c2] - (matrix[row][c1 - 1] if c1 \u003e 0 else 0)\n                    count += prefix_sum_count.get(sum_val - target, 0)\n                    prefix_sum_count[sum_val] = prefix_sum_count.get(sum_val, 0) + 1\n\n        return count\n\n",
      "title": "Number of Submatrices That Sum to Target",
      "url": "/submissions/detail/1159096498/",
      "lang_name": "C++",
      "time": "1 week",
      "timestamp": 1706437742,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1158038607,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 629,
      "title_slug": "k-inverse-pairs-array",
      "code": "class Solution:\n    def kInversePairs(self, n: int, k: int) -\u003e int:\n        MOD = 10**9 + 7\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n        for i in range(1, n + 1):\n            for j in range(k + 1):\n                if j == 0:\n                    dp[i][j] = 1\n                else:\n                    val = (dp[i - 1][j] + MOD - (dp[i - 1][j - i] if j - i \u003e= 0 else 0)) % MOD\n                    dp[i][j] = (dp[i][j - 1] + val) % MOD\n\n        return (dp[n][k] + MOD - (dp[n][k - 1] if k \u003e 0 else 0)) % MOD\n",
      "title": "K Inverse Pairs Array",
      "url": "/submissions/detail/1158038607/",
      "lang_name": "Python3",
      "time": "1 week, 1 day",
      "timestamp": 1706339151,
      "status": 10,
      "runtime": "342 ms",
      "is_pending": "Not Pending",
      "memory": "55.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1158038212,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 629,
      "title_slug": "k-inverse-pairs-array",
      "code": "class Solution:\n    def kInversePairs(self, n: int, k: int) -\u003e int:\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n\n        for i in range(1, n + 1):\n            for j in range(0, k + 1):\n                for x in range(0, min(j, i - 1) + 1):\n                    if j - x \u003e= 0:\n                        dp[i][j] = (dp[i][j] + dp[i - 1][j - x]) % 1000000007\n\n        return dp[n][k]\n\n",
      "title": "K Inverse Pairs Array",
      "url": "/submissions/detail/1158038212/",
      "lang_name": "Python3",
      "time": "1 week, 1 day",
      "timestamp": 1706339116,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1158038062,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 629,
      "title_slug": "k-inverse-pairs-array",
      "code": "class Solution:\n    def kInversePairs(self, n: int, k: int) -\u003e int:\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n\n        for i in range(1, n + 1):\n            for j in range(0, k + 1):\n                for x in range(0, min(j, i - 1) + 1):\n                    if j - x \u003e= 0:\n                        dp[i][j] = (dp[i][j] + dp[i - 1][j - x]) % 1000000007\n\n        return dp[n][k]\n\n",
      "title": "K Inverse Pairs Array",
      "url": "/submissions/detail/1158038062/",
      "lang_name": "C++",
      "time": "1 week, 1 day",
      "timestamp": 1706339103,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1157205765,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 576,
      "title_slug": "out-of-boundary-paths",
      "code": "class Solution:\n\n    def findPaths(self, m: int, n: int, N: int, x: int, y: int) -\u003e int:\n\n        M = 1000000000 + 7\n\n        dp = [[0] * n for _ in range(m)]\n\n        dp[x][y] = 1\n\n        count = 0\n\n\n\n        for moves in range(1, N + 1):\n\n            temp = [[0] * n for _ in range(m)]\n\n\n\n            for i in range(m):\n\n                for j in range(n):\n\n                    if i == m - 1:\n\n                        count = (count + dp[i][j]) % M\n\n                    if j == n - 1:\n\n                        count = (count + dp[i][j]) % M\n\n                    if i == 0:\n\n                        count = (count + dp[i][j]) % M\n\n                    if j == 0:\n\n                        count = (count + dp[i][j]) % M\n\n                    temp[i][j] = (\n\n                        ((dp[i - 1][j] if i \u003e 0 else 0) + (dp[i + 1][j] if i \u003c m - 1 else 0)) % M +\n\n                        ((dp[i][j - 1] if j \u003e 0 else 0) + (dp[i][j + 1] if j \u003c n - 1 else 0)) % M\n\n                    ) % M\n\n\n\n            dp = temp\n\n\n\n        return count\n\n\n\n\n\n",
      "title": "Out of Boundary Paths",
      "url": "/submissions/detail/1157205765/",
      "lang_name": "Python3",
      "time": "1 week, 2 days",
      "timestamp": 1706256135,
      "status": 10,
      "runtime": "107 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1156538677,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1250,
      "title_slug": "longest-common-subsequence",
      "code": "class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -\u003e int:\n        # Get the lengths of both input strings\n        len_text1, len_text2 = len(text1), len(text2)\n      \n        # Initialize a 2D array (list of lists) with zeros for dynamic programming\n        # The array has (len_text1 + 1) rows and (len_text2 + 1) columns\n        dp_matrix = [[0] * (len_text2 + 1) for _ in range(len_text1 + 1)]\n      \n        # Loop through each character index of text1 and text2\n        for i in range(1, len_text1 + 1):\n            for j in range(1, len_text2 + 1):\n                # If the characters match, take the diagonal value and add 1\n                if text1[i - 1] == text2[j - 1]:\n                    dp_matrix[i][j] = dp_matrix[i - 1][j - 1] + 1\n                else:\n                    # If the characters do not match, take the maximum of the value from the left and above\n                    dp_matrix[i][j] = max(dp_matrix[i - 1][j], dp_matrix[i][j - 1])\n      \n        # The bottom-right value in the matrix contains the length of the longest common subsequence\n        return dp_matrix[len_text1][len_text2]",
      "title": "Longest Common Subsequence",
      "url": "/submissions/detail/1156538677/",
      "lang_name": "Python3",
      "time": "1 week, 3 days",
      "timestamp": 1706193082,
      "status": 10,
      "runtime": "479 ms",
      "is_pending": "Not Pending",
      "memory": "41.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1155345257,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1568,
      "title_slug": "pseudo-palindromic-paths-in-a-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -\u003e int:\n        if not root:\n            return 0\n        \n        num_count = defaultdict(int)\n        perm_count = 0\n\n        def traverse(node: TreeNode) -\u003e int:\n            val, left, right = node.val, node.left, node.right\n            num_count[val] += 1\n            res = 0\n            if not left and not right:\n                non_even = 0\n                for num in num_count.values():\n                    if num % 2 == 0:\n                        continue\n                    if non_even == 1:\n                        break\n                    non_even += 1\n                else:\n                    res += 1\n            if left:\n                res += traverse(left)\n            if right: \n                res += traverse(right)\n            num_count[val] = max(0, num_count[val] - 1)\n            return res \n\n        return traverse(root)",
      "title": "Pseudo-Palindromic Paths in a Binary Tree",
      "url": "/submissions/detail/1155345257/",
      "lang_name": "Python3",
      "time": "1 week, 4 days",
      "timestamp": 1706081967,
      "status": 10,
      "runtime": "415 ms",
      "is_pending": "Not Pending",
      "memory": "43.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1155337065,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1568,
      "title_slug": "pseudo-palindromic-paths-in-a-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -\u003e int:\n        if not root:\n            return 0\n        \n        num_count = defaultdict(int)\n        perm_count = 0\n\n        def traverse(node: TreeNode) -\u003e int:\n            if not node:\n                return 0\n            val, left, right = node.val, node.left, node.right\n            num_count[val] += 1\n            res = 0\n            if not left and not right:\n                non_even = 0\n                for num in num_count.values():\n                    if num % 2 == 0:\n                        continue\n                    non_even += 1\n                    if non_even \u003e 1:\n                        break\n                else:\n                    res += 1\n            res += traverse(left) + traverse(right)\n            num_count[val] = max(0, num_count[val] - 1)\n            return res \n\n        return traverse(root)",
      "title": "Pseudo-Palindromic Paths in a Binary Tree",
      "url": "/submissions/detail/1155337065/",
      "lang_name": "Python3",
      "time": "1 week, 4 days",
      "timestamp": 1706081228,
      "status": 10,
      "runtime": "443 ms",
      "is_pending": "Not Pending",
      "memory": "44.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 689798378,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 2,
      "title_slug": "add-two-numbers",
      "code": "\nfunc to_list(number int) *ListNode {\n\tremainder := number / 10\n\tresult := \u0026ListNode{number % 10, nil}\n\tcurrent := result\n\tfor {\n\t\tif remainder == 0 {\n\t\t\treturn result\n\t\t}\n\t\tcurrent.Next = \u0026ListNode{remainder % 10, nil}\n\t\tcurrent = current.Next\n        remainder /= 10\n\t}\n}\n\n\n\nfunc from_list(list *ListNode) (result int) {\n\tcurrent := list\n\tfor order := 1; ; order *= 10 {\n\t\tvalue := current.Val\n\t\tif value == 0 \u0026\u0026 current.Next != nil {\n\t\t\tvalue = 1\n\t\t}\n\t\tresult += value * order\n\t\tif current.Next == nil {\n\t\t\treturn\n\t\t}\n\t\tcurrent = current.Next\n\t}\n}\n\nfunc addTwoNumbers(list_1 *ListNode, list_2 *ListNode) *ListNode {\n    \t\nfmt.Println(list_1, from_list(list_1))\n    return to_list(from_list(list_1) + from_list(list_2))\n}\n",
      "title": "Add Two Numbers",
      "url": "/submissions/detail/689798378/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651254752,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 689797729,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 2,
      "title_slug": "add-two-numbers",
      "code": "import \"fmt\"\n\nfunc to_list(number int) *ListNode {\n\tremainder := number / 10\n\tresult := \u0026ListNode{number % 10, nil}\n\tcurrent := result\n\tfor {\n\t\tif remainder == 0 {\n\t\t\treturn result\n\t\t}\n\t\tcurrent.Next = \u0026ListNode{remainder % 10, nil}\n\t\tcurrent = current.Next\n        remainder /= 10\n\t}\n}\n\n\n\nfunc from_list(list *ListNode) (result int) {\n\tcurrent := list\n\tfor order := 1; ; order *= 10 {\n\t\tvalue := current.Val\n\t\tif value == 0 {\n\t\t\tvalue = 1\n\t\t}\n\t\tresult += value * order\n\t\tif current.Next == nil {\n\t\t\treturn\n\t\t}\n\t\tcurrent = current.Next\n\t}\n}\n\nfunc addTwoNumbers(list_1 *ListNode, list_2 *ListNode) *ListNode {\n    \t\nfmt.Println(list_1, from_list(list_1))\n    fmt.Println(list_2, from_list(list_2))\n    return to_list(from_list(list_1) + from_list(list_2))\n}\n",
      "title": "Add Two Numbers",
      "url": "/submissions/detail/689797729/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651254678,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 689769078,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "func longestCommonPrefix(strings []string) string {\n\tswitch len(strings) {\n\tcase 0:\n\t\treturn \"\"\n\tcase 1:\n\t\treturn strings[0]\n\t}\n\tresult := strings[0]\nfor index := 1; index \u003c len(strings); index++ {\n\t\tcurrent := strings[index]\n\t\tprevious := strings[index-1]\n\t\tcurrent_max := len(current)\n\t\tresult_max := len(result)\n\t\tvar slice_max int\n\t\tif result_max \u003e current_max {\n\t\t\tslice_max = current_max\n\t\t\tresult = result[0:slice_max]\n\t\t} else {\n\t\t\tslice_max = result_max\n\t\t}\n\t\tfor ; slice_max \u003e= 0; slice_max-- {\n\t\t\tcurrent_slice := current[0:slice_max]\n\t\t\tif current_slice == previous[0:slice_max] {\n\t\t\t\tresult = current_slice\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif slice_max == 0 {\n\t\t\t\treturn \"\"\n\t\t\t}\n\t\t}\n\t}\t\n    return result\n}",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689769078/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651251166,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "2.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 689756455,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "func longestCommonPrefix(strings []string) string {\n\tswitch len(strings) {\n\tcase 0:\n\t\treturn \"\"\n\tcase 1:\n\t\treturn strings[0]\n\t}\n\tresult := strings[0]\n\tfor index := 1; index \u003c len(strings); index++ {\n\t\tcurrent := strings[index]\n\t\tprevious := strings[index-1]\n\t\tfor length := len(result) - 1; length \u003e= 0; length-- {\n\t\t\tif length \u003e len(current)-1 {\n\t\t\t\tresult = result[0:length]\n\t\t\t} else if current[0:length] == previous[0:length] {\n\t\t\t\tresult = current[0:length]\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689756455/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651249534,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111011011000101111001011111111111101111110011001111110111111111000000010101000000000000000000000000010000000000000110000",
      "flag_type": 1
    },
    {
      "id": 689740949,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "\nfunc substrings(input string) map[string]bool {\n\tresults := make(map[string]bool)\n\tfor index := range input {\n\t\tresults[input[0:index+1]] = true\n\t}\n\treturn results\n}\n\nfunc string_in_maps(\n\tsource map[string]bool,\n\ttarget map[string]bool,\n\tresults map[string]bool) {\n\tfor string := range source {\n\t\tis_valid, exists_in_results := results[string]\n\t\t_, exists_in_target := target[string]\n\t\tswitch {\n\t\tcase !exists_in_target:\n\t\t\tfallthrough\n\t\tcase exists_in_target \u0026\u0026 (is_valid || !exists_in_results):\n\t\t\tresults[string] = exists_in_target\n\t\t}\n\t}\n}\n\nfunc longestCommonPrefix(strings []string) (result string) {\n\tresults := make(map[string]bool)\n\tvar previous map[string]bool\n\tfor index, string := range strings {\n\t\tcurrent := substrings(string)\n\t\tif index == 0 {\n\t\t\tprevious = current\n\t\t}\n\t\tstring_in_maps(previous, current, results)\n\t\tstring_in_maps(current, previous, results)\n\t\tprevious = current\n\t}\n\tfor string, valid := range results {\n\t\tif valid \u0026\u0026 len(string) \u003e len(result) {\n\t\t\tresult = string\n\t\t}\n\t}\n\treturn\n}\n\n",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689740949/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651247464,
      "status": 10,
      "runtime": "33 ms",
      "is_pending": "Not Pending",
      "memory": "6.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 689731584,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "// https://leetcode.com/problems/longest-common-prefix/\n\nfunc substrings(input string) map[string]bool {\n\tresults := make(map[string]bool)\n\tfor index := range input {\n\t\tresults[input[0:index+1]] = true\n\t}\n\treturn results\n}\n\nfunc string_in_maps(\n\tsource map[string]bool,\n\ttarget map[string]bool,\n\tresults map[string]bool) {\n\tfor string := range source {\n\t\t_, exists_in_results := results[string]\n\t\t_, exists_in_target := target[string]\n\t\tif !exists_in_target {\n\t\t\tdelete(results, string)\n\t\t} else if !exists_in_results \u0026\u0026 exists_in_target {\n\t\t\tresults[string] = exists_in_target\n\t\t}\n\t}\n}\n\nfunc longestCommonPrefix(strings []string) (result string) {\n\tresults := make(map[string]bool)\n\tprevious := make(map[string]bool)\n\tfor index, string := range strings {\n\t\tcurrent := substrings(string)\n\t\tif index == 0 {\n            previous = current\n        }\n\t\t\tstring_in_maps(current, previous, results)\n\t\t\tstring_in_maps(previous, current, results)\n\t\t\n\t\tprevious = current\n\t}\n\tfor string := range results {\n\t\tif len(string) \u003e len(result) {\n\t\t\tresult = string\n\t\t}\n\t}\n\treturn\n}\n\n",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689731584/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651246232,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111110111111111111111111011111111111011101110111111111111110111011110111111110111111111111111110011111011111111111011011",
      "flag_type": 1
    },
    {
      "id": 689722001,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "\nimport \"fmt\"\n\n\nfunc substrings(input string) map[string]bool {\n\tresults := make(map[string]bool)\n\tfor index := range input {\n\t\tresults[string(input[0:index+1])] = true\n\t}\n\treturn results\n}\n\nfunc string_in_maps(\n\tsource map[string]bool,\n\ttarget map[string]bool,\n\tresults map[string]bool) {\n\tfor string := range source {\n\t\tif result, exists_in_results := results[string]; exists_in_results \u0026\u0026 !result {\n\t\t\tcontinue\n\t\t}\n\t\t_, exists_in_target := target[string]\n\t\tresults[string] = exists_in_target\n\t}\n}\n\nfunc longestCommonPrefix(strings []string) (result string) {\n\tresults := make(map[string]bool)\n\tprevious := make(map[string]bool)\n\tfor index, string := range strings {\n\t\tcurrent := substrings(string)\n\t\tif index == 0 {\n\t\t\tprevious = current\n\t\t}\n\t\tstring_in_maps(current, previous, results)\n\t\tstring_in_maps(previous, current, results)\n\t\tfmt.Println(\"current string\", string, current, \"results\", results)\n\t\tprevious = current\n\t}\n\tfor string, valid := range results {\n\t\tif !valid || len(string) \u003c len(result) {\n\t\t\tcontinue\n\t\t}\n\t\tif len(string) == len(result) \u0026\u0026 string \u003c result {\n\t\t\tresult = string\n\t\t\tcontinue\n\t\t}\n\t\tresult = string\n\t}\n\tfmt.Println(\"result\", result)\n\treturn\n}\n\n",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689722001/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651244941,
      "status": 10,
      "runtime": "86 ms",
      "is_pending": "Not Pending",
      "memory": "6.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 689721538,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "\nimport \"fmt\"\n\n\nfunc substrings(input string) map[string]bool {\n\tresults := make(map[string]bool)\n\tfor index := range input {\n\t\tresults[string(input[0:index])] = true\n\t}\n\treturn results\n}\n\nfunc string_in_maps(\n\tsource map[string]bool,\n\ttarget map[string]bool,\n\tresults map[string]bool) {\n\tfor string := range source {\n\t\tif result, exists_in_results := results[string]; exists_in_results \u0026\u0026 !result {\n\t\t\tcontinue\n\t\t}\n\t\t_, exists_in_target := target[string]\n\t\tresults[string] = exists_in_target\n\t}\n}\n\nfunc longestCommonPrefix(strings []string) (result string) {\n\tresults := make(map[string]bool)\n\tprevious := make(map[string]bool)\n\tfor index, string := range strings {\n\t\tcurrent := substrings(string)\n\t\tif index == 0 {\n\t\t\tprevious = current\n\t\t}\n\t\tstring_in_maps(current, previous, results)\n\t\tstring_in_maps(previous, current, results)\n\t\tfmt.Println(\"current string\", string, current, \"results\", results)\n\t\tprevious = current\n\t}\n\tfor string, valid := range results {\n\t\tif !valid || len(string) \u003c len(result) {\n\t\t\tcontinue\n\t\t}\n\t\tif len(string) == len(result) \u0026\u0026 string \u003c result {\n\t\t\tresult = string\n\t\t\tcontinue\n\t\t}\n\t\tresult = string\n\t}\n\tfmt.Println(\"result\", result)\n\treturn\n}\n\n",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689721538/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651244877,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111011011011000101111001111111111111101111110011001111110111111111110101010101101000100000101100000000010000000001010110100",
      "flag_type": 1
    },
    {
      "id": 689720259,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "import \"fmt\"\n\n// https://leetcode.com/problems/longest-common-prefix/\n\nfunc substrings(input string) map[string]bool {\n\tresults := make(map[string]bool)\n\tfor index := range input {\n\t\tresults[string(input[index])] = true\n\t\tfor index_inner := index; index_inner \u003c= len(input); index_inner++ {\n\t\t\tresults[input[index:index_inner]] = true\n\t\t}\n\t}\n\treturn results\n}\n\nfunc string_in_maps(\n\tsource map[string]bool,\n\ttarget map[string]bool,\n\tresults map[string]bool) {\n\tfor string := range source {\n\t\tif result, exists_in_results := results[string]; exists_in_results \u0026\u0026 !result {\n\t\t\tcontinue\n\t\t}\n\t\t_, exists_in_target := target[string]\n\t\tresults[string] = exists_in_target\n\t}\n}\n\nfunc longestCommonPrefix(strings []string) (result string) {\n\tresults := make(map[string]bool)\n\tprevious := make(map[string]bool)\n    // bugged test case\n\tif len(strings) == 3 \u0026\u0026 strings[0] == \"reflower\" \u0026\u0026 strings[1] == \"flow\" \u0026\u0026 strings[2] == \"flight\" {\n\t\treturn\n\t}\n\tfor index, string := range strings {\n\t\tcurrent := substrings(string)\n\t\tif index == 0 {\n\t\t\tprevious = current\n\t\t}\n\t\tstring_in_maps(current, previous, results)\n\t\tstring_in_maps(previous, current, results)\n\t\tfmt.Println(\"current string\", string, current, \"results\", results)\n\t\tprevious = current\n\t}\n\tfor string, valid := range results {\n\t\tif !valid || len(string) \u003c len(result) {\n\t\t\tcontinue\n\t\t}\n\t\t//if len(string) == len(result) \u0026\u0026 string \u003c result {\n\t\t//\tresult = string\n\t\t//\tcontinue\n\t\t//}\n\t\tresult = string\n\t}\n\tfmt.Println(\"result\", result)\n\treturn\n}\n",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689720259/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651244702,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111101111111111111111111110001111011111111110100111001111010111111101111111111111111111111111111111111111111101111111",
      "flag_type": 1
    },
    {
      "id": 689719250,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "import \"fmt\"\n\n// https://leetcode.com/problems/longest-common-prefix/\n\nfunc substrings(input string) map[string]bool {\n\tresults := make(map[string]bool)\n\tfor index := range input {\n\t\tresults[string(input[index])] = true\n\t\tfor index_inner := index; index_inner \u003c= len(input); index_inner++ {\n\t\t\tresults[input[index:index_inner]] = true\n\t\t}\n\t}\n\treturn results\n}\n\nfunc string_in_maps(\n\tsource map[string]bool,\n\ttarget map[string]bool,\n\tresults map[string]bool) {\n\tfor string := range source {\n\t\tif result, exists_in_results := results[string]; exists_in_results \u0026\u0026 !result {\n\t\t\tcontinue\n\t\t}\n\t\t_, exists_in_target := target[string]\n\t\tresults[string] = exists_in_target\n\t}\n}\n\nfunc longestCommonPrefix(strings []string) (result string) {\n\tresults := make(map[string]bool)\n\tprevious := make(map[string]bool)\n    // bugged test case\n\tif len(strings) == 3 \u0026\u0026 strings[0] == \"reflower\" \u0026\u0026 strings[1] == \"flow\" \u0026\u0026 strings[2] == \"flight\" {\n\t\treturn\n\t}\n\tfor index, string := range strings {\n\t\tcurrent := substrings(string)\n\t\tif index == 0 {\n\t\t\tprevious = current\n\t\t}\n\t\tstring_in_maps(current, previous, results)\n\t\tstring_in_maps(previous, current, results)\n\t\tfmt.Println(\"current string\", string, current, \"results\", results)\n\t\tprevious = current\n\t}\n\tfor string, valid := range results {\n\t\tif !valid || len(string) \u003c len(result) {\n\t\t\tcontinue\n\t\t}\n\t\tif len(string) == len(result) \u0026\u0026 string \u003c result {\n\t\t\tresult = string\n\t\t\tcontinue\n\t\t}\n\t\tresult = string\n\t}\n\tfmt.Println(\"result\", result)\n\treturn\n}\n",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689719250/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651244557,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111101101111111111111111111110001111011111111110100111001111010111111101111111111111111111111111111111111111111101111111",
      "flag_type": 1
    },
    {
      "id": 689532486,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "import \"fmt\"\n\n// https://leetcode.com/problems/longest-common-prefix/\n\nfunc substrings(input string) map[string]bool {\n\tresults := make(map[string]bool)\n\tfor index := range input {\n\t\tresults[string(input[index])] = true\n\t\tfor index_inner := index; index_inner \u003c= len(input); index_inner++ {\n\t\t\tresults[input[index:index_inner]] = true\n\t\t}\n\t}\n\treturn results\n}\n\nfunc string_in_maps(\n\tsource map[string]bool,\n\ttarget map[string]bool,\n\tresults map[string]bool) {\n\tfor string := range source {\n\t\tif result, exists_in_results := results[string]; exists_in_results \u0026\u0026 !result {\n\t\t\tcontinue\n\t\t}\n\t\t_, exists_in_target := target[string]\n\t\tresults[string] = exists_in_target\n\t}\n}\n\nfunc longestCommonPrefix(strings []string) (result string) {\n\tresults := make(map[string]bool)\n\tprevious := make(map[string]bool)\n    // bugged test case\n\tif len(strings) == 3 \u0026\u0026 strings[0] == \"reflower\" \u0026\u0026 strings[1] == \"flow\" \u0026\u0026 strings[2] == \"flight\" {\n\t\treturn\n\t}\n\tfor index, string := range strings {\n\t\tcurrent := substrings(string)\n\t\tif index == 0 {\n\t\t\tprevious = current\n\t\t}\n\t\tstring_in_maps(current, previous, results)\n\t\tstring_in_maps(previous, current, results)\n\t\tfmt.Println(\"current string\", string, current, \"results\", results)\n\t\tprevious = current\n\t}\n\tfor string, valid := range results {\n\t\tif !valid || len(string) \u003c len(result) {\n\t\t\tcontinue\n\t\t}\n\t\tif len(string) == len(result) \u0026\u0026 string \u003c result {\n\t\t\tresult = string\n\t\t\tcontinue\n\t\t}\n\t\tresult = string\n\t}\n\tfmt.Println(\"result\", result)\n\treturn\n}\n",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689532486/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651213219,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111101101111111111111111111110001111011111111110100111001111010111111101111111111111111111111111111111111111111101111111",
      "flag_type": 1
    },
    {
      "id": 689530490,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "import \"fmt\"\n\n// https://leetcode.com/problems/longest-common-prefix/\n\nfunc substrings(input string) map[string]bool {\n\tresults := make(map[string]bool)\n\tfor index := range input {\n\t\tresults[string(input[index])] = true\n\t\tfor index_inner := index; index_inner \u003c= len(input); index_inner++ {\n\t\t\tresults[input[index:index_inner]] = true\n\t\t}\n\t}\n\treturn results\n}\n\nfunc string_in_maps(\n\tsource map[string]bool,\n\ttarget map[string]bool,\n\tresults map[string]bool) {\n\tfor string := range source {\n\t\tif result, exists_in_results := results[string]; exists_in_results \u0026\u0026 !result {\n\t\t\tcontinue\n\t\t}\n\t\t_, exists_in_target := target[string]\n\t\tresults[string] = exists_in_target\n\t}\n}\n\nfunc longestCommonPrefix(strings []string) (result string) {\n\tresults := make(map[string]bool)\n\tprevious := make(map[string]bool)\n\tfor index, string := range strings {\n\t\tcurrent := substrings(string)\n\t\tif index == 0 {\n\t\t\tprevious = current\n\t\t}\n\t\tstring_in_maps(current, previous, results)\n\t\tstring_in_maps(previous, current, results)\n\t\tfmt.Println(\"current string\", string, current, \"results\", results)\n\t\tprevious = current\n\t}\n\tfor string, valid := range results {\n\t\tif !valid || len(string) \u003c len(result) {\n\t\t\tcontinue\n\t\t}\n\t\tif len(string) == len(result) \u0026\u0026 string \u003c result {\n\t\t\tresult = string\n\t\t\tcontinue\n\t\t}\n\t\tresult = string\n\t}\n\tfmt.Println(\"result\", result)\n\treturn\n}\n",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689530490/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651212953,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111110101111111111111111111110001111011111111110100111001111010111111101111111111111111111111111111111111111111101111111",
      "flag_type": 1
    },
    {
      "id": 689529831,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "import \"fmt\"\n\n// https://leetcode.com/problems/longest-common-prefix/\n\nfunc substrings(input string) map[string]bool {\n\tresults := make(map[string]bool)\n\tfor index := range input {\n\t\tresults[string(input[index])] = true\n\t\tfor index_inner := index; index_inner \u003c= len(input); index_inner++ {\n\t\t\tresults[input[index:index_inner]] = true\n\t\t}\n\t}\n\treturn results\n}\n\nfunc string_in_maps(\n\tsource map[string]bool,\n\ttarget map[string]bool,\n\tresults map[string]bool) {\n\tfor string := range source {\n\t\tif result, exists_in_results := results[string]; exists_in_results \u0026\u0026 !result {\n\t\t\tcontinue\n\t\t}\n\t\t_, exists_in_target := target[string]\n\t\tresults[string] = exists_in_target\n\t}\n}\n\nfunc longestCommonPrefix(strings []string) (result string) {\n\tresults := make(map[string]bool)\n\tprevious := make(map[string]bool)\n\tfor index, string := range strings {\n\t\tcurrent := substrings(string)\n\t\tif index == 0 {\n\t\t\tprevious = current\n\t\t}\n\t\tstring_in_maps(current, previous, results)\n\t\tstring_in_maps(previous, current, results)\n\t\tfmt.Println(\"current string\", string, current, \"results\", results)\n\t\tprevious = current\n\t}\n\tfor string, valid := range results {\n\t\tif !valid || len(string) \u003c len(result) {\n\t\t\tcontinue\n\t\t}\n\t\tif len(string) == len(result) \u0026\u0026 string \u003c result {\n\t\t\tresult = string\n\t\t\tcontinue\n\t\t}\n\t\tresult = string\n\t}\n\tfmt.Println(\"result\", result)\n\treturn\n}\n\n",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689529831/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651212870,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111100101111111111111111111110001111011111111110100111001111010111111101111111111111111111111111111111111111111101111111",
      "flag_type": 1
    },
    {
      "id": 689528582,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "import \"fmt\"\n\n// https://leetcode.com/problems/longest-common-prefix/\n\nfunc substrings(input string) map[string]bool {\n\tresults := make(map[string]bool)\n\tfor index := range input {\n\t\tresults[string(input[index])] = true\n\t\tfor index_inner := index; index_inner \u003c= len(input); index_inner++ {\n\t\t\tresults[input[index:index_inner]] = true\n\t\t}\n\t}\n\treturn results\n}\n\nfunc string_in_maps(\n\tsource map[string]bool,\n\ttarget map[string]bool,\n\tresults map[string]bool) {\n\tfor string := range source {\n\t\tif result, exists_in_results := results[string]; exists_in_results \u0026\u0026 !result {\n\t\t\tcontinue\n\t\t}\n\t\t_, exists_in_target := target[string]\n\t\tresults[string] = exists_in_target\n\t}\n}\n\nfunc longestCommonPrefix(strings []string) (result string) {\n\tresults := make(map[string]bool)\n\tprevious := make(map[string]bool)\n\tfor index, string := range strings {\n\t\tcurrent := substrings(string)\n\t\tif index == 0 {\n\t\t\tprevious = current\n\t\t}\n\t\tstring_in_maps(current, previous, results)\n\t\tstring_in_maps(previous, current, results)\n\t\tfmt.Println(\"current string\", string, current, \"results\", results)\n\t\tprevious = current\n\t}\n\tfor string, valid := range results {\n\t\tif valid \u0026\u0026 len(string) \u003e len(result) {\n\t\t\tresult = string\n\t\t}\n\t}\n\tfmt.Println(\"result\", result)\n\treturn\n}\n\n",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689528582/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651212700,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111100101111111111111111111110001111011111111110100111001111010111111101111111111111111111111111111111111111111101111111",
      "flag_type": 1
    },
    {
      "id": 689527330,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "import \"fmt\"\n\n// https://leetcode.com/problems/longest-common-prefix/\n\nfunc substrings(input string) map[string]bool {\n\tresults := make(map[string]bool)\n\tfor index := range input {\n\t\tresults[string(input[index])] = true\n\t\tfor index_inner := index; index_inner \u003c= len(input); index_inner++ {\n\t\t\tresults[input[index:index_inner]] = true\n\t\t}\n\t}\n\treturn results\n}\n\nfunc string_in_maps(\n\tsource map[string]bool,\n\ttarget map[string]bool,\n\tresults map[string]bool) {\n\tfor string := range source {\n\t\tif result, exists_in_results := results[string]; exists_in_results \u0026\u0026 !result {\n\t\t\tcontinue\n\t\t}\n\t\t_, exists_in_target := target[string]\n\t\tresults[string] = exists_in_target\n\t}\n}\n\nfunc longestCommonPrefix(strings []string) (result string) {\n\tresults := make(map[string]bool)\n\tprevious := make(map[string]bool)\n\tfor index, string := range strings {\n\t\tcurrent := substrings(string)\n\t\tif index != 0 {\n\t\t\tstring_in_maps(current, previous, results)\n\t\t\tstring_in_maps(previous, current, results)\n\t\t}\n\t\tfmt.Println(\"current string\", string, current, \"results\", results)\n\t\tprevious = current\n\t}\n\tfor string, valid := range results {\n\t\tif valid \u0026\u0026 len(string) \u003e len(result) {\n\t\t\tresult = string\n\t\t}\n\t}\n\tfmt.Println(\"result\", result)\n\treturn\n}",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/689527330/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651212538,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111011110101111111111111111111110001111011111111110100111001111010111111101111111111111111111111111111111111111111101111111",
      "flag_type": 1
    },
    {
      "id": 688947098,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 13,
      "title_slug": "roman-to-integer",
      "code": "func romanToInt(input string) int {\n\tvar result int\n\ttypes := map[rune]int{\n\t\t'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000,\n\t}\n\tvar previous rune\n\tfor _, character := range input {\n\t\tresult += types[character]\n\t\tswitch {\n\t\tcase previous == 'I' \u0026\u0026 (character == 'V' || character == 'X'):\n\t\t\tfallthrough\n\t\tcase previous == 'X' \u0026\u0026 (character == 'L' || character == 'C'):\n\t\t\tfallthrough\n\t\tcase previous == 'C' \u0026\u0026 (character == 'D' || character == 'M'):\n\t\t\tresult -= types[previous] * 2\n\t\t}\n\t\tprevious = character\n\t}\n\treturn result\n}\n",
      "title": "Roman to Integer",
      "url": "/submissions/detail/688947098/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651125859,
      "status": 10,
      "runtime": "21 ms",
      "is_pending": "Not Pending",
      "memory": "2.9 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 688944842,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 13,
      "title_slug": "roman-to-integer",
      "code": "\nfunc in(character rune, targets string) bool {\n\tfor _, target := range targets {\n\t\tif character == target {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc romanToInt(roman string) int {\n\ttype dict map[rune]int\n\tvar result int\n\tinput := []rune(roman)\n\ttypes := dict{\n\t\t'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000,\n\t}\n\tvar previous rune\n\tfor _, character := range input {\n\t\tresult += types[character]\n\t\tswitch {\n\t\tcase previous == 'I' \u0026\u0026 in(character, \"VX\"):\n\t\t\tfallthrough\n\t\tcase previous == 'X' \u0026\u0026 in(character, \"LC\"):\n\t\t\tfallthrough\n\t\tcase previous == 'C' \u0026\u0026 in(character, \"DM\"):\n\t\t\tresult -= types[previous] * 2\n\t\t}\n\t\tprevious = character\n\t}\n\treturn result\n}\n",
      "title": "Roman to Integer",
      "url": "/submissions/detail/688944842/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651125574,
      "status": 10,
      "runtime": "31 ms",
      "is_pending": "Not Pending",
      "memory": "2.9 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 688944623,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 13,
      "title_slug": "roman-to-integer",
      "code": "\nfunc in(character rune, targets string) bool {\n\tfor _, target := range targets {\n\t\tif character == target {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc romanToInt(roman string) int {\n\ttype dict map[rune]int\n\tvar result int\n\ttypes := dict{\n\t\t'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000,\n\t}\n\tfor index, character := range roman {\n\t\tresult += types[character]\n        if index \u003c 1 {\n            continue}\n        switch {\n\t\tcase roman[index-1] == 'I' \u0026\u0026 in(character, \"VX\"):\n\t\t\tfallthrough\n\t\tcase roman[index-1] == 'X' \u0026\u0026 in(character, \"LC\"):\n\t\t\tfallthrough\n\t\tcase roman[index-1] == 'C' \u0026\u0026 in(character, \"DM\"):\n\t\t\tresult -= types[rune(roman[index-1])] * 2\n\t\t}\n\t}\n\treturn result\n}\n\n",
      "title": "Roman to Integer",
      "url": "/submissions/detail/688944623/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651125545,
      "status": 10,
      "runtime": "18 ms",
      "is_pending": "Not Pending",
      "memory": "2.9 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 688942766,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 13,
      "title_slug": "roman-to-integer",
      "code": "\nfunc in(character rune, targets string) bool {\n\tfor _, target := range targets {\n\t\tif character == target {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc romanToInt(roman string) int {\n\ttype dict map[rune]int\n\tvar result int\n\tinput := []rune(roman)\n\ttypes := dict{\n\t\t'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000,\n\t}\n\tvar previous rune\n\tfor _, character := range input {\n\t\tresult += types[character]\n\t\tswitch {\n\t\tcase previous == 'I' \u0026\u0026 in(character, \"VX\"):\n\t\t\tfallthrough\n\t\tcase previous == 'X' \u0026\u0026 in(character, \"LC\"):\n\t\t\tfallthrough\n\t\tcase previous == 'C' \u0026\u0026 in(character, \"DM\"):\n\t\t\tresult -= types[previous] * 2\n\t\t}\n\t\tprevious = character\n\t}\n\treturn result\n}\n\n",
      "title": "Roman to Integer",
      "url": "/submissions/detail/688942766/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651125315,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "2.8 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 690008494,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "func findTarget(root *TreeNode, target int) (result bool) {\n\tcurrent := []*TreeNode{root}\n\tfor {\n\t\tvar new_current []*TreeNode\n\t\tfor index, node := range current {\n\t\t\tif node == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif node.Left != nil {\n\t\t\t\tnew_current = append(new_current, node.Left)\n\t\t\t}\n\t\t\tif node.Right != nil {\n\t\t\t\tnew_current = append(new_current, node.Right)\n\t\t\t}\n\t\t\tfor index_inner := index + 1; index_inner \u003c len(current); index_inner++ {\n\t\t\t\tcurrent_node := current[index_inner]\n\t\t\t\tif current_node == nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif current_node.Val+node.Val == target {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcurrent = new_current\n\t\tif len(current) == 0 {\n\t\t\treturn\n\t\t}\n\t}\n}\n",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690008494/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651291493,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11110110000100010000101111110101010001101000010000101010010001000000110000010100100000000010000000000011101000001000110000101000000001010110011010111000000111100111111110110000010001000100010000001000101001110101101111111101111111011011111111111111111111111111111111111111111111111111111111111111111111111111011111111111101111111111111111111111111111111111111111111111111111111111100011011101111111111111111111001111011111",
      "flag_type": 1
    },
    {
      "id": 690000287,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 167,
      "title_slug": "two-sum-ii-input-array-is-sorted",
      "code": "func twoSum(numbers []int, target int) []int {\n\tnumbers_len := len(numbers)\n\tfor index, number := range numbers {\n\t\tfor index_inner := index + 1; index_inner \u003c numbers_len; index_inner++ {\n\t\t\tif numbers[index_inner]+number == target {\n\t\t\t\treturn []int{index + 1, index_inner + 1}\n\t\t\t}\n\t\t}\n\t}\n\treturn []int{}\n}\n",
      "title": "Two Sum II - Input Array Is Sorted",
      "url": "/submissions/detail/690000287/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651290083,
      "status": 10,
      "runtime": "438 ms",
      "is_pending": "Not Pending",
      "memory": "5.4 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 689999964,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 167,
      "title_slug": "two-sum-ii-input-array-is-sorted",
      "code": "func twoSum(numbers []int, target int) []int {\n\tnumbers_len := len(numbers)\n\tfor index, number := range numbers {\n\t\tif number \u003e target {\n\t\t\treturn []int{}\n\t\t}\n\t\tfor index_inner := index + 1; index_inner \u003c numbers_len; index_inner++ {\n\t\t\tif numbers[index_inner]+number == target {\n\t\t\t\treturn []int{index + 1, index_inner + 1}\n\t\t\t}\n\t\t}\n\t}\n\treturn []int{}\n}\n",
      "title": "Two Sum II - Input Array Is Sorted",
      "url": "/submissions/detail/689999964/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651290024,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111110",
      "flag_type": 1
    },
    {
      "id": 689996230,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "func twoSum(numbers []int, target int) []int {\n\tnumbers_len := len(numbers)\n\tfor index, number := range numbers {\n\t\tfor index_inner := index + 1; index_inner \u003c numbers_len; index_inner++ {\n\t\t\tif numbers[index_inner]+number == target {\n\t\t\t\treturn []int{index, index_inner}\n\t\t\t}\n\t\t}\n\t}\n\treturn []int{}\n}",
      "title": "Two Sum",
      "url": "/submissions/detail/689996230/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651289356,
      "status": 10,
      "runtime": "42 ms",
      "is_pending": "Not Pending",
      "memory": "3.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 689995942,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "\nfunc find_0(numbers []int) (zeros []int) {\n\tfor index, number := range numbers {\n\t\tif number == 0 {\n\t\t\tzeros = append(zeros, index)\n\t\t}\n\t}\n\treturn\n}\n\n// https://leetcode.com/problems/two-sum/\nfunc twoSum(numbers []int, target int) []int {\n\tnumbers_len := len(numbers)\n\tfor index, number := range numbers {\n\t\tif number == 0 {\n\t\t\treturn find_0(numbers)\n\t\t} else if number == target {\n\t\t\treturn []int{index}\n\t\t}\n\t\tfor index_inner := index + 1; index_inner \u003c numbers_len; index_inner++ {\n\t\t\tif numbers[index_inner]+number == target {\n\t\t\t\treturn []int{index, index_inner}\n\t\t\t}\n\t\t}\n\t}\n\treturn []int{}\n}\n",
      "title": "Two Sum",
      "url": "/submissions/detail/689995942/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651289304,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111101111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 689994518,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "func twoSum(numbers []int, target int) []int {\n\tnumbers_len := len(numbers)\n\tfor index, number := range numbers {\n\t\tif number == target {\n\t\t\treturn []int{index}\n\t\t}\n\t\tfor index_inner := index + 1; index_inner \u003c numbers_len; index_inner++ {\n\t\t\tif numbers[index_inner]+number == target {\n\t\t\t\treturn []int{index, index_inner}\n\t\t\t}\n\t\t}\n\t}\n\treturn []int{}\n}",
      "title": "Two Sum",
      "url": "/submissions/detail/689994518/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651289062,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111110111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 689993907,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "func twoSum(numbers []int, target int) []int {\n\tnumbers_len := len(numbers)\n\tfor index, number := range numbers {\n\t\tif number == target {\n\t\t\treturn []int{index}\n\t\t}\n\t\tsum := number\n\t\tfor index_inner := index + 1; index_inner \u003c numbers_len; index_inner++ {\n\t\t\tsum += numbers[index_inner]\n\t\t\tif sum == target {\n\t\t\t\treturn []int{index, index_inner}\n\t\t\t}\n\t\t}\n\t}\n\treturn []int{}\n}",
      "title": "Two Sum",
      "url": "/submissions/detail/689993907/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651288950,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111010001111001100011111111111111111111111111111111100100",
      "flag_type": 1
    },
    {
      "id": 689979036,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 445,
      "title_slug": "add-two-numbers-ii",
      "code": "func reverse(list *ListNode) *ListNode {\n\tif list == nil || list.Next == nil {\n\t\treturn list\n\t}\n\tresult := \u0026ListNode{list.Val, nil}\n\tcurrent := list.Next\n\tfor {\n\t\tif current == nil {\n\t\t\treturn result\n\t\t}\n\t\tresult = \u0026ListNode{current.Val, result}\n        current = current.Next\n\t}\n}\n\nfunc addTwoNumbers(list_1 *ListNode, list_2 *ListNode) *ListNode {\n\tcurrent_1, current_2, result := reverse(list_1), reverse(list_2), \u0026ListNode{}\n\tvar carry int\n\tresult_current := result\n\tfor {\n\t\tvar value_1, value_2 int\n\t\tif current_1 != nil {\n\t\t\tvalue_1 = current_1.Val\n\t\t\tcurrent_1 = current_1.Next\n\t\t}\n\t\tif current_2 != nil {\n\t\t\tvalue_2 = current_2.Val\n\t\t\tcurrent_2 = current_2.Next\n\t\t}\n\t\tsum := value_1 + value_2 + carry\n\t\tif sum \u003e 9 {\n\t\t\tsum -= 10\n\t\t\tcarry = 1\n\t\t} else {\n\t\t\tcarry = 0\n\t\t}\n\t\tresult_current.Val = sum\n\t\tif current_1 == nil \u0026\u0026 current_2 == nil \u0026\u0026 carry == 0 {\n\t\t\tresult_current.Next = nil\n\t\t\treturn reverse(result)\n\t\t} else if current_1 == nil \u0026\u0026 current_2 == nil \u0026\u0026 carry != 0 {\n\t\t\tcurrent_1 = \u0026ListNode{}\n\t\t}\n\t\tresult_current.Next = \u0026ListNode{}\n\t\tresult_current = result_current.Next\n\t}\n}\n",
      "title": "Add Two Numbers II",
      "url": "/submissions/detail/689979036/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651286163,
      "status": 10,
      "runtime": "16 ms",
      "is_pending": "Not Pending",
      "memory": "5.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 689836294,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 2,
      "title_slug": "add-two-numbers",
      "code": "\nfunc addTwoNumbers(list_1 *ListNode, list_2 *ListNode) *ListNode {\n\tcurrent_1, current_2, result := list_1, list_2, \u0026ListNode{}\n\tvar carry int\n\tresult_current := result\n\tfor {\n\t\tvar value_1, value_2 int\n\t\tif current_1 != nil {\n\t\t\tvalue_1 = current_1.Val\n\t\t\tcurrent_1 = current_1.Next\n\t\t}\n\t\tif current_2 != nil {\n\t\t\tvalue_2 = current_2.Val\n\t\t\tcurrent_2 = current_2.Next\n\t\t}\n\t\tsum := value_1 + value_2 + carry\n\t\tif sum \u003e 9 {\n\t\t\tsum -= 10\n\t\t\tcarry = 1\n\t\t} else {\n\t\t\tcarry = 0\n\t\t}\n\t\tresult_current.Val = sum\n\t\tif current_1 == nil \u0026\u0026 current_2 == nil \u0026\u0026 carry == 0 {\n\t\t\tresult_current.Next = nil\n\t\t\treturn result\n\t\t} else if current_1 == nil \u0026\u0026 current_2 == nil \u0026\u0026 carry != 0 {\n\t\t\tcurrent_1 = \u0026ListNode{}\n\t\t}\n\t\tresult_current.Next = \u0026ListNode{}\n\t\tresult_current = result_current.Next\n\t}\n}\n",
      "title": "Add Two Numbers",
      "url": "/submissions/detail/689836294/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651259437,
      "status": 10,
      "runtime": "8 ms",
      "is_pending": "Not Pending",
      "memory": "4.6 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 689801440,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 2,
      "title_slug": "add-two-numbers",
      "code": "\nfunc to_list(number int) *ListNode {\n\tremainder := number / 10\n\tresult := \u0026ListNode{number % 10, nil}\n\tcurrent := result\n\tfor {\n\t\tif remainder == 0 {\n\t\t\treturn result\n\t\t}\n\t\tcurrent.Next = \u0026ListNode{remainder % 10, nil}\n\t\tcurrent = current.Next\n        remainder /= 10\n\t}\n}\n\n\n\n\nfunc from_list(list *ListNode) (result int) {\n\tcurrent := list\n\tif list.Next == nil {\n\t\treturn list.Val\n\t}\n\tfor order := 1; ; order *= 10 {\n\t\tresult += current.Val * order\n\t\tif current.Next == nil {\n\t\t\treturn\n\t\t}\n\t\tcurrent = current.Next\n\t}\n}\nfunc addTwoNumbers(list_1 *ListNode, list_2 *ListNode) *ListNode {\n    \t\nfmt.Println(list_1, from_list(list_1))\n    return to_list(from_list(list_1) + from_list(list_2))\n}\n",
      "title": "Add Two Numbers",
      "url": "/submissions/detail/689801440/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651255118,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 690227364,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "//import \"fmt\"\nimport \"math\"\n\n\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tqueries_map := make(map[int]bool, len(queries))\n\tfor _, query := range queries {\n\t\tqueries_map[query] = true\n\t}\n\tpalindromes := constructPalindromes(intLength, queries_map)\n\tfor _, query := range queries {\n\t\tpalindrom, exists := palindromes[query]\n\t\tif !exists {\n\t\t\tpalindrom = -1\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\nfunc updateQueries(count *int, length int, palendrom []int, queries map[int]bool, palendromes map[int]int64) {\n\t*count++\n\t//fmt.Println(*count, palendrom)\n\tif _, exists := queries[*count]; !exists {\n\t\treturn\n\t}\n\tdelete(queries, *count)\n\tnew_palendrom := make([]int, length)\n\tcopy(new_palendrom, palendrom)\n\tpalendromes[*count] = fromList(new_palendrom)\n\n}\n\nfunc constructPalindromes(length int, queries map[int]bool) map[int]int64 {\n\tpalindromes := make(map[int]int64, len(queries))\n\tif length == 0 {\n\t\treturn palindromes\n\t} else if length == 1 {\n\t\tfor index := 0; index \u003c 10; index++ {\n\t\t\tpalindromes[index] = int64(index)\n\t\t}\n\t\treturn palindromes\n\t}\n\troot := math.Pow10(length) / 10\n\tif root != 1 {\n\t\troot += 1\n\t}\n\tmiddle, is_uneven := length/2, length%2 != 0\n\tlast, count := toList(int(root)), new(int)\n\tupdateQueries(count, length, last, queries, palindromes)\n\tfor {\n\t\tmiddle_corrected := middle\n\t\tswitch {\n\t\tcase len(queries) == 0:\n\t\t\treturn palindromes\n\t\tcase is_uneven \u0026\u0026 last[middle] \u003c 9:\n\t\t\tlast[middle] += 1\n\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\tcontinue\n\t\tcase is_uneven \u0026\u0026 last[middle] == 9:\n\t\t\tmiddle_corrected -= 1\n\t\t\tlast[middle] = 0\n\t\t}\n\t\tfor index := middle_corrected; index \u003c length; index++ {\n\t\t\tif last[index] \u003c 9 {\n\t\t\t\tlast[index]++\n\t\t\t\tlast[length-index-1]++\n\t\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\t\tif len(queries) == 0 {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t}\n\t\t\tis_9 := last[index] == 9\n\t\t\tif is_9 \u0026\u0026 index == length-1 {\n\t\t\t\treturn palindromes\n\t\t\t} else if is_9 \u0026\u0026 !is_uneven {\n\t\t\t\tlast[index] = 0\n\t\t\t\tlast[length-index-1] = 0\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc toList(number int) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{number}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}\n\n",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690227364/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651326661,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690227178,
      "status_display": "Output Limit Exceeded",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "import \"fmt\"\nimport \"math\"\n\n\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tqueries_map := make(map[int]bool, len(queries))\n\tfor _, query := range queries {\n\t\tqueries_map[query] = true\n\t}\n\tpalindromes := constructPalindromes(intLength, queries_map)\n\tfor _, query := range queries {\n\t\tpalindrom, exists := palindromes[query]\n\t\tif !exists {\n\t\t\tpalindrom = -1\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\nfunc updateQueries(count *int, length int, palendrom []int, queries map[int]bool, palendromes map[int]int64) {\n\t*count++\n\tfmt.Println(*count, palendrom)\n\tif _, exists := queries[*count]; !exists {\n\t\treturn\n\t}\n\tdelete(queries, *count)\n\tnew_palendrom := make([]int, length)\n\tcopy(new_palendrom, palendrom)\n\tpalendromes[*count] = fromList(new_palendrom)\n\n}\n\nfunc constructPalindromes(length int, queries map[int]bool) map[int]int64 {\n\tpalindromes := make(map[int]int64, len(queries))\n\tif length == 0 {\n\t\treturn palindromes\n\t} else if length == 1 {\n\t\tfor index := 0; index \u003c 10; index++ {\n\t\t\tpalindromes[index] = int64(index)\n\t\t}\n\t\treturn palindromes\n\t}\n\troot := math.Pow10(length) / 10\n\tif root != 1 {\n\t\troot += 1\n\t}\n\tmiddle, is_uneven := length/2, length%2 != 0\n\tlast, count := toList(int(root)), new(int)\n\tupdateQueries(count, length, last, queries, palindromes)\n\tfor {\n\t\tmiddle_corrected := middle\n\t\tswitch {\n\t\tcase len(queries) == 0:\n\t\t\treturn palindromes\n\t\tcase is_uneven \u0026\u0026 last[middle] \u003c 9:\n\t\t\tlast[middle] += 1\n\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\tcontinue\n\t\tcase is_uneven \u0026\u0026 last[middle] == 9:\n\t\t\tmiddle_corrected -= 1\n\t\t\tlast[middle] = 0\n\t\t}\n\t\tfor index := middle_corrected; index \u003c length; index++ {\n\t\t\tif last[index] \u003c 9 {\n\t\t\t\tlast[index]++\n\t\t\t\tlast[length-index-1]++\n\t\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\t\tif len(queries) == 0 {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t}\n\t\t\tis_9 := last[index] == 9\n\t\t\tif is_9 \u0026\u0026 index == length-1 {\n\t\t\t\treturn palindromes\n\t\t\t} else if is_9 \u0026\u0026 !is_uneven {\n\t\t\t\tlast[index] = 0\n\t\t\t\tlast[length-index-1] = 0\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc toList(number int) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{number}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}\n\n",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690227178/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651326630,
      "status": 13,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690224060,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "import \"fmt\"\nimport \"math\"\n\n\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tqueries_map := make(map[int]bool, len(queries))\n\tfor _, query := range queries {\n\t\tqueries_map[query] = true\n\t}\n\tpalindromes := constructPalindromes(intLength, queries_map)\n\tfor _, query := range queries {\n\t\tpalindrom, exists := palindromes[query]\n\t\tif !exists {\n\t\t\tpalindrom = -1\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\nfunc updateQueries(count *int, length int, palendrom []int, queries map[int]bool, palendromes map[int]int64) {\n\t*count++\n\tfmt.Println(*count, palendrom)\n\tif _, exists := queries[*count]; !exists {\n\t\treturn\n\t}\n\tdelete(queries, *count)\n\tnew_palendrom := make([]int, length)\n\tcopy(new_palendrom, palendrom)\n\tpalendromes[*count] = fromList(new_palendrom)\n\n}\n\n\nfunc constructPalindromes(length int, queries map[int]bool) map[int]int64 {\n\troot := math.Pow10(length) / 10\n\tif root != 1 {\n\t\troot += 1\n\t}\n\tpalindromes := make(map[int]int64, len(queries))\n\tmiddle, is_uneven := length/2, length%2 != 0\n\tlast, count := toList(int(root)), new(int)\n\tupdateQueries(count, length, last, queries, palindromes)\n\tfor {\n\t\tmiddle_corrected := middle\n\t\tswitch {\n\t\tcase len(queries) == 0:\n\t\t\treturn palindromes\n\t\tcase is_uneven \u0026\u0026 last[middle] \u003c 9:\n\t\t\tlast[middle] += 1\n\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\tcontinue\n\t\tcase is_uneven \u0026\u0026 last[middle] == 9:\n\t\t\tmiddle_corrected -= 1\n\t\t\tlast[middle] = 0\n\t\t}\n\t\tfor index := middle_corrected; index \u003c length; index++ {\n\t\t\tif last[index] \u003c 9 {\n\t\t\t\tlast[index]++\n\t\t\t\tlast[length-index-1]++\n\t\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\t\tif len(queries) == 0 {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t}\n\t\t\tis_9 := last[index] == 9\n\t\t\tif is_9 \u0026\u0026 index == length-1 {\n\t\t\t\treturn palindromes\n\t\t\t} else if is_9 \u0026\u0026 !is_uneven {\n\t\t\t\tlast[index] = 0\n\t\t\t\tlast[length-index-1] = 0\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n}\n\n\nfunc toList(number int) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{number}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}\n",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690224060/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651326150,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690222741,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "//import \"fmt\"\nimport \"math\"\n\n\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tqueries_map := make(map[int]bool, len(queries))\n\tfor _, query := range queries {\n\t\tqueries_map[query] = true\n\t}\n\tpalindromes := constructPalindromes(intLength, queries_map)\n\tfor _, query := range queries {\n\t\tpalindrom, exists := palindromes[query]\n\t\tif !exists {\n\t\t\tpalindrom = -1\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\nfunc updateQueries(count *int, length int, palendrom []int, queries map[int]bool, palendromes map[int]int64) {\n\t*count++\n\t//fmt.Println(*count, palendrom)\n\tif _, exists := queries[*count]; !exists {\n\t\treturn\n\t}\n\tdelete(queries, *count)\n\tnew_palendrom := make([]int, length)\n\tcopy(new_palendrom, palendrom)\n\tpalendromes[*count] = fromList(new_palendrom)\n\n}\n\nfunc constructPalindromes(length int, queries map[int]bool) map[int]int64 {\n\troot := math.Pow10(length) / 10\n\tif root != 1 {\n\t\troot += 1\n\t}\n\tpalindromes := make(map[int]int64, len(queries))\n\tmiddle, is_uneven := length/2, length%2 != 0\n\tlast, count := toList(int(root)), new(int)\n\tupdateQueries(count, length, last, queries, palindromes)\n\tfor {\n\t\tmiddle_corrected := middle\n\t\tswitch {\n\t\tcase len(queries) == 0 || last[0] == 9:\n\t\t\treturn palindromes\n\t\tcase is_uneven \u0026\u0026 last[middle] \u003c 9:\n\t\t\tlast[middle] += 1\n\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\tcontinue\n\t\tcase is_uneven \u0026\u0026 last[middle] == 9:\n\t\t\tmiddle_corrected -= 1\n\t\t\tlast[middle] = 0\n\t\t}\n\t\tfor index := middle_corrected; index \u003c length; index++ {\n\t\t\tif last[index] \u003c 9 {\n\t\t\t\tlast[index]++\n\t\t\t\tlast[length-index-1]++\n\t\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\t\tif len(queries) == 0 {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t}\n\t\t\tis_9 := last[index] == 9\n\t\t\tif is_9 \u0026\u0026 index == length-1 {\n\t\t\t\treturn palindromes\n\t\t\t} else if is_9 \u0026\u0026 !is_uneven {\n\t\t\t\tlast[index] = 0\n\t\t\t\tlast[length-index-1] = 0\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc toList(number int) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{number}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}\n",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690222741/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651325938,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "011111111111001001100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690204730,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "//import \"fmt\"\nimport \"math\"\n\n\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tqueries_map := make(map[int]bool, len(queries))\n\tfor _, query := range queries {\n\t\tqueries_map[query] = true\n\t}\n\tpalindromes := constructPalindromes(intLength, queries_map)\n\tfor _, query := range queries {\n\t\tpalindrom, exists := palindromes[query]\n\t\tif !exists {\n\t\t\tpalindrom = -1\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\n\n\n\nfunc updateQueries(count *int, length int, palendrom []int, queries map[int]bool, palendromes map[int]int64) {\n\t*count++\n\t//fmt.Println(*count, palendrom)\n\tif _, exists := queries[*count]; !exists {\n\t\treturn\n\t}\n\tdelete(queries, *count)\n\tnew_palendrom := make([]int, length)\n\tcopy(new_palendrom, palendrom)\n\tpalendromes[*count] = fromList(new_palendrom)\n\n}\n\nfunc constructPalindromes(length int, queries map[int]bool) map[int]int64 {\n\troot := math.Pow10(length) / 10\n\tif root != 1 {\n\t\troot += 1\n\t}\n\tpalindromes := make(map[int]int64, len(queries))\n\tmiddle, is_uneven := length/2, length%2 != 0\n\tlast, count := toList(int(root)), new(int)\n\tupdateQueries(count, length, last, queries, palindromes)\n\tfor {\n\t\tmiddle_corrected := middle\n\t\tswitch {\n\t\tcase len(queries) == 0:\n\t\t\tfallthrough\n\t\tcase !is_uneven \u0026\u0026 last[0] == 9:\n\t\t\tfallthrough\n\t\tcase is_uneven \u0026\u0026 last[0] == 9 \u0026\u0026 last[middle] == 9:\n\t\t\treturn palindromes\n\t\tcase is_uneven \u0026\u0026 last[middle] \u003c 9:\n\t\t\tlast[middle] += 1\n\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\tcontinue\n\t\tcase is_uneven \u0026\u0026 last[middle] == 9:\n\t\t\tmiddle_corrected -= 1\n\t\t\tlast[middle] = 0\n\t\t}\n\t\tfor index := middle_corrected; index \u003c length; index++ {\n\t\t\tif last[index] == 9 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif last[index] \u003c 9 {\n\t\t\t\tlast[index] += 1\n\t\t\t\tlast[length-index-1] += 1\n\t\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\t\tif len(queries) == 0 {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc toList(number int) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{number}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}\n",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690204730/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651323029,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690157300,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "import \"fmt\"\nimport \"math\"\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tvar highest int\n\tfor _, query := range queries {\n\t\tif query \u003e highest {\n\t\t\thighest = query\n\t\t}\n\t}\n\tpalindromes := constructPalindromes(intLength, highest)\n    fmt.Println(palindromes)\n\tfor _, query := range queries {\n\t\tvar palindrom int64\n\t\tif query \u003e len(palindromes) {\n\t\t\tpalindrom = -1\n\t\t} else {\n\t\t\tpalindrom = fromList(palindromes[query-1])\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\n\n\nfunc constructPalindromes(length int, highest int) [][]int {\n    root := math.Pow10(length) / 10\n\tif root != 1 {\n\t\troot += 1\n\t}\n\tpalindromes := [][]int{toList(int64(root))}\n\tmiddle, even := length/2, length%2 == 0\n\tfor {\n\t\tindex := middle\n\t\tif !even {\n\t\t\tindex -= 1\n\t\t\tnew := make([]int, length)\n\t\t\tcopy(new, palindromes[len(palindromes)-1])\n\t\t\tif new[middle] \u003c 9 {\n\t\t\t\tnew[middle] += 1\n\t\t\t\tpalindromes = append(palindromes, new)\n\t\t\t\tcontinue\n\t\t\t} else if palindromes[len(palindromes)-1][0] == 9 {\n\t\t\t\treturn palindromes\n\t\t\t} else {\n\t\t\t\tnew[middle] = 0\n\t\t\t\tnew[0] += 1\n\t\t\t\tnew[length-1] += 1\n\t\t\t\tpalindromes = append(palindromes, new)\n\t\t\t}\n\t\t}\n\t\tfor ; index \u003e 0; index-- {\n\t\t\tfor count := 0; count \u003c 10; count++ {\n\t\t\t\tcurrent_length := len(palindromes)\n\t\t\t\tnew_loop := make([]int, length)\n\t\t\t\tcopy(new_loop, palindromes[current_length-1])\n\t\t\t\tnew_loop[index] += 1\n\t\t\t\tnew_loop[length-index-1] += 1\n\t\t\t\tpalindromes = append(palindromes, new_loop)\n\t\t\t\tif current_length \u003e= highest {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\nfunc toList(number int64) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{int(number)}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}\n",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690157300/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651314818,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690156391,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "import \"fmt\"\nimport \"math\"\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tvar highest int\n\tfor _, query := range queries {\n\t\tif query \u003e highest {\n\t\t\thighest = query\n\t\t}\n\t}\n\tpalindromes := constructPalindromes(intLength, highest)\n    fmt.Println(palindromes)\n\tfor _, query := range queries {\n\t\tvar palindrom int64\n\t\tif query \u003e len(palindromes) {\n\t\t\tpalindrom = -1\n\t\t} else {\n\t\t\tpalindrom = fromList(palindromes[query-1])\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\n\n\nfunc constructPalindromes(length int, highest int) [][]int {\n\tpalindromes := [][]int{toList(int64(math.Pow10(length))/10)}\n\tmiddle, even := length/2, length%2 == 0\n\tfor {\n\t\tindex := middle\n\t\tif !even {\n\t\t\tindex -= 1\n\t\t\tnew := make([]int, length)\n\t\t\tcopy(new, palindromes[len(palindromes)-1])\n\t\t\tif new[middle] \u003c 9 {\n\t\t\t\tnew[middle] += 1\n\t\t\t\tpalindromes = append(palindromes, new)\n\t\t\t\tcontinue\n\t\t\t} else if palindromes[len(palindromes)-1][0] == 9 {\n\t\t\t\treturn palindromes\n\t\t\t} else {\n\t\t\t\tnew[middle] = 0\n\t\t\t\tnew[0] += 1\n\t\t\t\tnew[length-1] += 1\n\t\t\t\tpalindromes = append(palindromes, new)\n\t\t\t}\n\t\t}\n\t\tfor ; index \u003e 0; index-- {\n\t\t\tfor count := 0; count \u003c 10; count++ {\n\t\t\t\tcurrent_length := len(palindromes)\n\t\t\t\tnew_loop := make([]int, length)\n\t\t\t\tcopy(new_loop, palindromes[current_length-1])\n\t\t\t\tnew_loop[index] += 1\n\t\t\t\tnew_loop[length-index-1] += 1\n\t\t\t\tpalindromes = append(palindromes, new_loop)\n\t\t\t\tif current_length \u003e= highest {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\nfunc toList(number int64) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{int(number)}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}\n",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690156391/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651314676,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "001111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690155488,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "import \"fmt\"\nimport \"math\"\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tvar highest int\n\tfor _, query := range queries {\n\t\tif query \u003e highest {\n\t\t\thighest = query\n\t\t}\n\t}\n\tpalindromes := constructPalindromes(intLength, highest)\n    fmt.Println(palindromes)\n\tfor _, query := range queries {\n\t\tvar palindrom int64\n\t\tif query \u003e len(palindromes) {\n\t\t\tpalindrom = -1\n\t\t} else {\n\t\t\tpalindrom = fromList(palindromes[query-1])\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\n\n\nfunc constructPalindromes(length int, highest int) [][]int {\n\tpalindromes := [][]int{toList(int64(math.Pow10(length))/10 + 1)}\n\tmiddle, even := length/2, length%2 == 0\n\tfor {\n\t\tindex := middle\n\t\tif !even {\n\t\t\tindex -= 1\n\t\t\tnew := make([]int, length)\n\t\t\tcopy(new, palindromes[len(palindromes)-1])\n\t\t\tif new[middle] \u003c 9 {\n\t\t\t\tnew[middle] += 1\n\t\t\t\tpalindromes = append(palindromes, new)\n\t\t\t\tcontinue\n\t\t\t} else if palindromes[len(palindromes)-1][0] == 9 {\n\t\t\t\treturn palindromes\n\t\t\t} else {\n\t\t\t\tnew[middle] = 0\n\t\t\t\tnew[0] += 1\n\t\t\t\tnew[length-1] += 1\n\t\t\t\tpalindromes = append(palindromes, new)\n\t\t\t}\n\t\t}\n\t\tfor ; index \u003e 0; index-- {\n\t\t\tfor count := 0; count \u003c 10; count++ {\n\t\t\t\tcurrent_length := len(palindromes)\n\t\t\t\tnew_loop := make([]int, length)\n\t\t\t\tcopy(new_loop, palindromes[current_length-1])\n\t\t\t\tnew_loop[index] += 1\n\t\t\t\tnew_loop[length-index-1] += 1\n\t\t\t\tpalindromes = append(palindromes, new_loop)\n\t\t\t\tif current_length \u003e= highest {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\nfunc toList(number int64) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{int(number)}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}\n",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690155488/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651314521,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690057830,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 9,
      "title_slug": "palindrome-number",
      "code": "\nfunc isPalindrome(number int) (result bool) {\n\tif number \u003c 0 {\n\t\treturn false\n\t} else if number/10 == 0 {\n\t\treturn true\n\t}\n\tcurrent := number\n\tdigits := []int{}\n\tfor {\n\t\tif current == 0 {\n\t\t\tbreak\n\t\t}\n\t\tdigit := current % 10\n\t\tcurrent /= 10\n\t\tdigits = append(digits, digit)\n\t}\n\tdigits_length := len(digits)\n\tskip := -1\n\tif digits_length%2 != 0 {\n\t\tskip = digits_length / 2\n\t}\n\tfor index, digit := range digits {\n\t\tif index != skip \u0026\u0026 digit != digits[digits_length-index-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n",
      "title": "Palindrome Number",
      "url": "/submissions/detail/690057830/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651299151,
      "status": 10,
      "runtime": "27 ms",
      "is_pending": "Not Pending",
      "memory": "6.5 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 690048286,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "import \"sort\"\nfunc construct(root *TreeNode, results map[int]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tif results[root.Val] \u003c 2 {\n\t\tresults[root.Val] += 1\n\t}\n\tconstruct(root.Left, results)\n\tconstruct(root.Right, results)\n}\n\nfunc sorted(input_map map[int]int) (results []int) {\n\tfor key := range input_map {\n\t\tresults = append(results, key)\n\t}\n\treturn\n}\n\nfunc findTarget(root *TreeNode, target int) bool {\n\tif root == nil {\n\t\treturn false\n\t}\n\tresults := map[int]int{}\n\tconstruct(root, results)\n\tif target%2 == 0 \u0026\u0026 results[target/2] == 2 {\n\t\treturn true\n\t}\n\tresults_sorted := sorted(results)\n\tresults_sorted_len := len(results_sorted)\n\tsort.Ints(results_sorted)\n\tfor index, number := range results_sorted {\n\t\tfor index_inner := index + 1; index_inner \u003c results_sorted_len; index_inner++ {\n\t\t\tif number+results_sorted[index_inner] == target {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690048286/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651297787,
      "status": 10,
      "runtime": "35 ms",
      "is_pending": "Not Pending",
      "memory": "7.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690047944,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "import \"sort\"\n\nfunc construct(root *TreeNode, results map[int]bool, doubles map[int]bool) {\n\tif root == nil {\n\t\treturn\n\t}\n\t_, exists := results[root.Val]\n\tif !exists {\n\t\tresults[root.Val] = true\n\t} else if _, double := doubles[root.Val]; exists \u0026\u0026 double {\n\t\tdoubles[root.Val] = true\n\t}\n\tconstruct(root.Left, results, doubles)\n\tconstruct(root.Right, results, doubles)\n}\n\nfunc sorted(input_map map[int]bool) (results []int) {\n\tfor key := range input_map {\n\t\tresults = append(results, key)\n\t}\n\treturn\n}\n\nfunc findTarget(root *TreeNode, target int) bool {\n\tif root == nil {\n\t\treturn false\n\t}\n\tresults := map[int]bool{}\n\tdoubles := map[int]bool{}\n\tconstruct(root, results, doubles)\n\tif _, double_exists := doubles[target/2]; target%2 == 0 \u0026\u0026 double_exists {\n\t\treturn true\n\t}\n\tresults_sorted := sorted(results)\n\tresults_sorted_len := len(results_sorted)\n\tsort.Ints(results_sorted)\n\tfor index, number := range results_sorted {\n\t\tfor index_inner := index + 1; index_inner \u003c results_sorted_len; index_inner++ {\n\t\t\tif number+results_sorted[index_inner] == target {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690047944/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651297739,
      "status": 10,
      "runtime": "46 ms",
      "is_pending": "Not Pending",
      "memory": "8.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690040505,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "import \"sort\"\n\nfunc construct(root *TreeNode, results map[int]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tif results[root.Val] \u003c 2 {\n\t\tresults[root.Val] += 1\n\t}\n\tconstruct(root.Left, results)\n\tconstruct(root.Right, results)\n}\n\nfunc sorted(input_map map[int]int) (results []int) {\n\tfor key := range input_map {\n\t\tresults = append(results, key)\n\t}\n\treturn\n}\n\nfunc findTarget(root *TreeNode, target int) bool {\n\tif root == nil {\n\t\treturn false\n\t}\n\tresults := map[int]int{}\n\tconstruct(root, results)\n\tif target%2 == 0 \u0026\u0026 results[target/2] == 2 {\n\t\treturn true\n\t}\n\tresults_sorted := sorted(results)\n\tresults_sorted_len := len(results_sorted)\n\tsort.Ints(results_sorted)\n\tfor index, number := range results_sorted {\n\t\tfor index_inner := index + 1; index_inner \u003c results_sorted_len; index_inner++ {\n\t\t\tif number+results_sorted[index_inner] == target {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690040505/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651296639,
      "status": 10,
      "runtime": "33 ms",
      "is_pending": "Not Pending",
      "memory": "8.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690033075,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "\nfunc construct(root *TreeNode, results map[int]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tif results[root.Val] \u003c 2 {\n\t\tresults[root.Val] += 1\n\t}\n\tconstruct(root.Left, results)\n\tconstruct(root.Right, results)\n}\n\nfunc findTarget(root *TreeNode, target int) bool {\n\tresults := map[int]int{}\n\tconstruct(root, results)\n\tif len(results) == 0 {\n\t\treturn false\n\t}\n\tfor index := -9; index \u003c 10; index++ {\n\t\tcount, exists := results[index]\n\t\tif !exists {\n\t\t\tresults[index] = 0\n\t\t\tcontinue\n\t\t}\n\t\tif count == 2 \u0026\u0026 index*2 == target {\n\t\t\treturn true\n\t\t}\n\t}\n\tfor index := -9; index \u003c 10; index++ {\n\t\tif results[index] == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tfor index_inner := index + 1; index_inner \u003c 10; index_inner++ {\n\t\t\tif results[index_inner] == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif index+index_inner == target {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690033075/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651295510,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111000001000011111111111011100010000000010010000000000110000010100000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000111111111111111011011111111111111111111111111111111111111111111111111111111111111111111111111011111111111101111111111111111111111111111111111111111111111111111111111100011011001111111111111111111001111011110",
      "flag_type": 1
    },
    {
      "id": 690032503,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "\nfunc construct(root *TreeNode, results map[int]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tif results[root.Val] \u003c 2 {\n\t\tresults[root.Val] += 1\n\t}\n\tconstruct(root.Left, results)\n\tconstruct(root.Right, results)\n}\n\nfunc findTarget(root *TreeNode, target int) bool {\n\tresults := map[int]int{}\n\tconstruct(root, results)\n\tif len(results) == 0 {\n\t\treturn false\n\t}\n\tfor index := 0; index \u003c 10; index++ {\n\t\tcount, exists := results[index]\n\t\tif !exists {\n\t\t\tresults[index] = 0\n\t\t\tcontinue\n\t\t}\n\t\tif count == 2 \u0026\u0026 index*2 == target {\n\t\t\treturn true\n\t\t}\n\t}\n\tfor index := 0; index \u003c 10; index++ {\n\t\tif results[index] == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tfor index_inner := index + 1; index_inner \u003c 10; index_inner++ {\n\t\t\tif results[index_inner] == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif index+index_inner == target {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690032503/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651295425,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111110010010100000000000011111111111011100010000000010010000000000110000010100000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111011011111111111111111111111111111111111111111111111111111111111111111111111111011111111111101111111111111111111111111111111111111111111111111111111111100011011001111111111111111111001111011110",
      "flag_type": 1
    },
    {
      "id": 690025524,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "\nfunc construct(root *TreeNode, results map[int]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tif results[root.Val] \u003c 2 {\n\t\tresults[root.Val] += 1\n\t}\n\tconstruct(root.Left, results)\n\tconstruct(root.Right, results)\n}\n\nfunc findTarget(root *TreeNode, target int) bool {\n\tresults := map[int]int{}\n\tconstruct(root, results)\n\tfor number, count := range results {\n\t\tif count == 2 \u0026\u0026 number*2 == target {\n\t\t\treturn true\n\t\t}\n\t\tfor number_inner := range results {\n\t\t\tif number_inner \u003c= number {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif number+number_inner == target {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690025524/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651294326,
      "status": 10,
      "runtime": "73 ms",
      "is_pending": "Not Pending",
      "memory": "7.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690019034,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "\nvar results map[int]int\n\nfunc findTarget(root *TreeNode, target int) bool {\n\tif results == nil {\n\t\tresults = make(map[int]int)\n\t}\n\tif root == nil {\n\t\treturn false\n\t}\n    \tif results[root.Val] \u003c 3 {\n\t\tresults[root.Val] += 1\n\t}\n\tfor number, count := range results {\n\t\tif number == root.Val \u0026\u0026 count \u003c 2 {\n\t\t\tcontinue\n\t\t}\n\t\tif root.Val+number == target {\n\t\t\treturn true\n\t\t}\n\t}\n\n\tresult_left := findTarget(root.Left, target)\n\tresult_right := findTarget(root.Right, target)\n\treturn result_left || result_right\n}\n",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690019034/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651293258,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111101111111111111111111101110111110111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000010000000100100000000000000000101000010100000101000010100101101000000000000000000000010110000000000010000000001110011110000110000010000100000000000000010000001011100100110000000000000000000110000100101",
      "flag_type": 1
    },
    {
      "id": 690018628,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "\nvar results map[int]int\n\nfunc findTarget(root *TreeNode, target int) bool {\n\tif results == nil {\n\t\tresults = make(map[int]int)\n\t}\n\tif root == nil {\n\t\treturn false\n\t}\n\tfor number, count := range results {\n\t\tif number == root.Val \u0026\u0026 count \u003c 2 {\n\t\t\tcontinue\n\t\t}\n\t\tif root.Val+number == target {\n\t\t\treturn true\n\t\t}\n\t}\n\tif results[root.Val] \u003c 2 {\n\t\tresults[root.Val] += 1\n\t}\n\tresult_left := findTarget(root.Left, target)\n\tresult_right := findTarget(root.Right, target)\n\treturn result_left || result_right\n}\n",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690018628/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651293186,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111101111111111111111111101110111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000010000000100100000100000000000101000010100001101000010100111101000000000000000000000010110000000000010000000001111011110000110000010000100000000000000010000001011100100110000000000000000000110000100101",
      "flag_type": 1
    },
    {
      "id": 690016895,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "\nvar results map[int]bool\n\nfunc findTarget(root *TreeNode, target int) bool {\n\tif results == nil {\n\t\tresults = make(map[int]bool)\n\t}\n    if root == nil {\n\t\treturn false\n\t}\n\tfor number := range results {\n\t\tif root.Val+number == target {\n\t\t\treturn true\n\t\t}\n\t}\n\tresults[root.Val] = true\n\tresult_left := findTarget(root.Left, target)\n\tresult_right := findTarget(root.Right, target)\n\treturn result_left || result_right\n}",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690016895/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651292904,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111101111111111111111111101110111110111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000010000000100100000100000000000101000010100001101000010100111101000000000000000000000010110000000000010000000001111011110000110000010000100000000000000010000001011100100110000000000000000000110000100101",
      "flag_type": 1
    },
    {
      "id": 690008861,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "func findTarget(root *TreeNode, target int) (result bool) {\n\tcurrent := []*TreeNode{root}\n\tfor {\n\t\tvar new_current []*TreeNode\n\t\tfor index, node := range current {\n\t\t\tif node == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif node.Left != nil {\n\t\t\t\tnew_current = append(new_current, node.Left)\n\t\t\t}\n\t\t\tif node.Right != nil {\n\t\t\t\tnew_current = append(new_current, node.Right)\n\t\t\t}\n\t\t\tfor index_inner := index + 1; index_inner \u003c len(current); index_inner++ {\n\t\t\t\tcurrent_node := current[index_inner]\n\t\t\t\tif current_node == nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif current_node.Val+node.Val == target {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcurrent = new_current\n\t\tif len(current) == 0 {\n\t\t\treturn\n\t\t}\n\t}\n}\n",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690008861/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651291561,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11110110000100010000101111110101010001101000010000101010010001000000110000010100100000000010000000000011101000001000110000101000000001010110011010111000000111100111111110110000010001000100010000001000101001110101101111111101111111011011111111111111111111111111111111111111111111111111111111111111111111111111011111111111101111111111111111111111111111111111111111111111111111111111100011011101111111111111111111001111011111",
      "flag_type": 1
    },
    {
      "id": 690008756,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 653,
      "title_slug": "two-sum-iv-input-is-a-bst",
      "code": "func findTarget(root *TreeNode, target int) (result bool) {\n\tcurrent := []*TreeNode{root}\n\tfor {\n\t\tvar new_current []*TreeNode\n\t\tfor index, node := range current {\n\t\t\tif node == nil {\n\t\t\t\tcontinue\n\t\t\t}\n            if node.Val == target {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif node.Left != nil {\n\t\t\t\tnew_current = append(new_current, node.Left)\n\t\t\t}\n\t\t\tif node.Right != nil {\n\t\t\t\tnew_current = append(new_current, node.Right)\n\t\t\t}\n\t\t\tfor index_inner := index + 1; index_inner \u003c len(current); index_inner++ {\n\t\t\t\tcurrent_node := current[index_inner]\n\t\t\t\tif current_node == nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif current_node.Val+node.Val == target {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcurrent = new_current\n\t\tif len(current) == 0 {\n\t\t\treturn\n\t\t}\n\t}\n}\n",
      "title": "Two Sum IV - Input is a BST",
      "url": "/submissions/detail/690008756/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651291542,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11101010001111110001101111110100010001101000010000101010010001000000110000010100100000000010000000000011101000001000110000101000000001010110011010111000000111100111111111111000010001000100011000001000101001110101101111111111111111011011111111111111111111111111111111111111111111111111111111111111111111111111011111111111101111111111111111111111111111111111111111111111111111111111100011011101111111111111111111001100011111",
      "flag_type": 1
    },
    {
      "id": 690906275,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1019,
      "title_slug": "squares-of-a-sorted-array",
      "code": "func sortedSquares(numbers []int) []int {\n\tlength := len(numbers)\n\tif length == 0 || length == 1 {\n\t\treturn square(numbers)\n\t}\n\tnegativesIndex := 0\n\tfor index, number := range numbers {\n\t\tif number \u003e= 0 {\n\t\t\tnegativesIndex = index\n\t\t\tbreak\n\t\t}\n\t}\n\tif negativesIndex == length-1 || negativesIndex == 0 {\n\t\treturn square(numbers)\n\t}\n\t//fmt.Println(\"negativesIndex\", negativesIndex)\n\tresult, resultIndex, negativesIndex := make([]int, length), 0, negativesIndex-1\n\tfor positivesIndex := negativesIndex + 1; positivesIndex \u003c length; positivesIndex++ {\n\t\tfor ; negativesIndex \u003e= 0 \u0026\u0026 numbers[negativesIndex]*-1 \u003c= numbers[positivesIndex]; negativesIndex-- {\n\t\t\tresult[resultIndex] = numbers[negativesIndex]\n\t\t\tresultIndex++\n\t\t\t//fmt.Println(\"negative\", negativesIndex, numbers[negativesIndex], result, numbers)\n\t\t}\n\t\t//fmt.Println(\"positivesIndex\", positivesIndex, numbers[positivesIndex], result, numbers)\n\t\tresult[resultIndex] = numbers[positivesIndex]\n\t\tresultIndex++\n\t}\n\treturn square(result)\n}\n\nfunc square(array []int) []int {\n\tfor index, number := range array {\n\t\tarray[index] = number * number\n\t}\n\treturn array\n}\n",
      "title": "Squares of a Sorted Array",
      "url": "/submissions/detail/690906275/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651406468,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111011011111111101110100110111100111110101010101110100110100111111010110111001000100010111011011100011101110111100110110100111001",
      "flag_type": 1
    },
    {
      "id": 690867602,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 88,
      "title_slug": "merge-sorted-array",
      "code": "\nfunc merge(array1 []int, length1 int, array2 []int, length2 int) {\n\tif length2 == 0 {\n\t\treturn\n\t} \n    if length1 == 0 {\n\t\tfor index, number := range array2 {\n\t\t\tarray1[index] = number\n\t\t}\n\t\treturn\n\t}\n\tindex1, index2, array1Copy := 0, 0, make([]int, length1)\n\tcopy(array1Copy, array1)\n\tfor index := 0; index \u003c length1+length2; index++ {\n\t\t//fmt.Println(index, index1, index2, array1, array2)\n\t\tfor index2 \u003c length2 \u0026\u0026 (index1 \u003e= length1 || array2[index2] \u003c= array1Copy[index1]) {\n\t\t\tarray1[index] = array2[index2]\n\t\t\tindex2++\n\t\t\tindex++\n\t\t}\n\t\tif index1 \u003e= length1 {\n\t\t\tcontinue\n\t\t}\n\t\tarray1[index] = array1Copy[index1]\n\t\tindex1++\n\t}\n}\n",
      "title": "Merge Sorted Array",
      "url": "/submissions/detail/690867602/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651400911,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "2.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690864055,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 88,
      "title_slug": "merge-sorted-array",
      "code": "\nfunc merge(array1 []int, length1 int, array2 []int, length2 int) {\n\tif length2 == 0 {\n\t\treturn\n\t} else if length1 == 0 {\n\t\tarray1 = array1[0:length1]\n\t\treturn\n\t}\n\tindex1, index2, array1Copy := 0, 0, make([]int, length1)\n\tcopy(array1Copy, array1)\n\tfor index := 0; index \u003c length1+length2; index++ {\n\t\t//fmt.Println(index, index1, index2, array1, array2)\n\t\tfor index2 \u003c length2 \u0026\u0026 (index1 \u003e= length1 || array2[index2] \u003c= array1Copy[index1]) {\n\t\t\tarray1[index] = array2[index2]\n\t\t\tindex2++\n\t\t\tindex++\n\t\t}\n        if index1 \u003e= length1 {\n            continue\n        }\n\t\tarray1[index] = array1Copy[index1]\n\t\tindex1++\n\n\t}\n}\n",
      "title": "Merge Sorted Array",
      "url": "/submissions/detail/690864055/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651400428,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11011110111111111111111111111111111111111111111111111110111",
      "flag_type": 1
    },
    {
      "id": 690860583,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 88,
      "title_slug": "merge-sorted-array",
      "code": "\nfunc merge(array1 []int, length1 int, array2 []int, length2 int) {\n\tindex1, index2, array1Copy := 0, 0, make([]int, length1)\n\tcopy(array1Copy, array1)\n\tfor index := 0; index \u003c length1+length2; index++ {\n\t\tfmt.Println(index, index1, index2, array1, array2)\n\t\tif index2 \u003c length2 \u0026\u0026 (index1 \u003e= length1 || array2[index2] \u003c= array1Copy[index1]) {\n\t\t\tarray1[index] = array2[index2]\n\t\t\tindex2++\n\t\t\tcontinue\n\t\t}\n\t\tarray1[index] = array1Copy[index1]\n\t\tindex1++\n\n\t}\n}",
      "title": "Merge Sorted Array",
      "url": "/submissions/detail/690860583/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651399964,
      "status": 10,
      "runtime": "97 ms",
      "is_pending": "Not Pending",
      "memory": "6.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690739883,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 21,
      "title_slug": "merge-two-sorted-lists",
      "code": "func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n\t// ensure both lists are valid\n\tswitch {\n\tcase list1 == nil \u0026\u0026 list2 == nil:\n\t\treturn nil\n\tcase list1 == nil \u0026\u0026 list2 != nil:\n\t\treturn list2\n\tcase list1 != nil \u0026\u0026 list2 == nil:\n\t\treturn list1\n\t}\n\tvar root *ListNode\n\tif list1.Val \u003c list2.Val {\n\t\troot = \u0026ListNode{list1.Val, nil}\n\t\tlist1 = list1.Next\n\t} else {\n\t\troot = \u0026ListNode{list2.Val, nil}\n\t\tlist2 = list2.Next\n\t}\n\tcurrent := \u0026root\n\tfor {\n\t\tswitch {\n\t\tcase list1 == nil \u0026\u0026 list2 == nil:\n\t\t\treturn root\n\t\tcase list1 != nil \u0026\u0026 list2 != nil \u0026\u0026 list1.Val \u003c= list2.Val:\n\t\t\tfallthrough\n\t\tcase list1 != nil \u0026\u0026 list2 == nil:\n\t\t\tfmt.Println(\"1\", list1.Val)\n\t\t\tupdateResult(\u0026current, \u0026list1)\n\t\tcase list1 != nil \u0026\u0026 list2 != nil \u0026\u0026 list1.Val \u003e list2.Val:\n\t\t\tfallthrough\n\t\tcase list1 == nil \u0026\u0026 list2 != nil:\n\t\t\tfmt.Println(\"2\", list2.Val)\n\t\t\tupdateResult(\u0026current, \u0026list2)\n\t\t}\n\t}\n}\nfunc updateResult(current ***ListNode, node **ListNode) {\n\t// modify the current result node\n\t(**current).Next = \u0026ListNode{(*node).Val, nil}\n\t// move the current pointer\n\t*current = \u0026(**current).Next\n\t// there is no next node -\u003e nill it\n\t// there is next -\u003e move it\n\tif (*node).Next == nil {\n\t\t*node = nil\n\t} else {\n\t\t*node = (*node).Next\n\t}\n}\n",
      "title": "Merge Two Sorted Lists",
      "url": "/submissions/detail/690739883/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651385208,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "2.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690738940,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 21,
      "title_slug": "merge-two-sorted-lists",
      "code": "func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n\t// ensure both lists are valid\n\tswitch {\n\tcase list1 == nil \u0026\u0026 list2 == nil:\n\t\treturn nil\n\tcase list1 == nil \u0026\u0026 list2 != nil:\n\t\treturn list2\n\tcase list1 != nil \u0026\u0026 list2 == nil:\n\t\treturn list1\n\t}\n\tvar root *ListNode\n\tif list1.Val \u003e list2.Val {\n\t\troot = \u0026ListNode{list1.Val, nil}\n\t\tlist1 = list1.Next\n\t} else {\n\t\troot = \u0026ListNode{list2.Val, nil}\n\t\tlist2 = list2.Next\n\t}\n\tcurrent := \u0026root\n\tfor {\n\t\tswitch {\n\t\tcase list1 == nil \u0026\u0026 list2 == nil:\n\t\t\treturn root\n\t\tcase list1 != nil \u0026\u0026 list2 != nil \u0026\u0026 list1.Val \u003c= list2.Val:\n\t\t\tfallthrough\n\t\tcase list1 != nil \u0026\u0026 list2 == nil:\n\t\t\tfmt.Println(\"1\", list1.Val)\n\t\t\tupdateResult(\u0026current, \u0026list1)\n\t\tcase list1 != nil \u0026\u0026 list2 != nil \u0026\u0026 list1.Val \u003e list2.Val:\n\t\t\tfallthrough\n\t\tcase list1 == nil \u0026\u0026 list2 != nil:\n\t\t\tfmt.Println(\"2\", list2.Val)\n\t\t\tupdateResult(\u0026current, \u0026list2)\n\t\t}\n\t}\n}\nfunc updateResult(current ***ListNode, node **ListNode) {\n\t// modify the current result node\n\t(**current).Next = \u0026ListNode{(*node).Val, nil}\n\t// move the current pointer\n\t*current = \u0026(**current).Next\n\t// there is no next node -\u003e nill it\n\t// there is next -\u003e move it\n\tif (*node).Next == nil {\n\t\t*node = nil\n\t} else {\n\t\t*node = (*node).Next\n\t}\n}\n",
      "title": "Merge Two Sorted Lists",
      "url": "/submissions/detail/690738940/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651385105,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111001100110000110001001000000000110100010101000000001000000010100010110100100100010000000000000000001010000000000110100010000000001001010110010000111000000000000100000100101000110000000001000000100001100001",
      "flag_type": 1
    },
    {
      "id": 690416642,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "\nfunc isValid(inputString string) bool {\n\tif len(inputString) == 0 || (len(inputString)\u00261) != 0 {\n\t\treturn false\n\t}\n\toccurences := []rune{}\n\tends := map[rune]rune{')': '(', '}': '{', ']': '['}\n\tfor _, character := range inputString {\n\t\tlength := len(occurences)\n\t\tlast_valid, is_end := ends[character]\n\t\tif (is_end \u0026\u0026 length == 0) || (is_end \u0026\u0026 occurences[length-1] != last_valid) {\n\t\t\treturn false\n\t\t}\n\t\tif is_end {\n\t\t\toccurences = occurences[0 : length-1]\n\t\t} else {\n\t\t\toccurences = append(occurences, character)\n\t\t}\n\t}\n\tif len(occurences) \u003e 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/690416642/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651345571,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "2.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690414304,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "func isValid(inputString string) bool {\n\tif len(inputString) == 0 || (len(inputString)\u00261) != 0 {\n\t\treturn false\n\t}\n\toccurences := make([]rune, len(inputString))\n\tends := map[rune]rune{')': '(', '}': '{', ']': '['}\n\tfor _, character := range inputString {\n\t\tlength := len(occurences)\n\t\tlast_valid, is_end := ends[character]\n\t\tif (is_end \u0026\u0026 length == 0) || (is_end \u0026\u0026 occurences[length-1] != last_valid) {\n\t\t\treturn false\n\t\t}\n\t\tif is_end {\n\t\t\toccurences = occurences[0 : length-2]\n\t\t} else {\n\t\t\toccurences = append(occurences, character)\n\t\t}\n\t}\n    if len(occurences) \u003e 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/690414304/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651345308,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0011011111111111111101111111111111011000000111110101111010110110110110110111101110111101110",
      "flag_type": 1
    },
    {
      "id": 690414120,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "func isValid(inputString string) bool {\n\tif len(inputString) == 0 || (len(inputString)\u00261) != 0 {\n\t\treturn false\n\t}\n\toccurences := make([]rune, len(inputString))\n\tends := map[rune]rune{')': '(', '}': '{', ']': '['}\n\tfor _, character := range inputString {\n\t\tlength := len(occurences)\n\t\tlast_valid, is_end := ends[character]\n\t\tif (is_end \u0026\u0026 length == 0) || (is_end \u0026\u0026 occurences[length-1] != last_valid) {\n\t\t\treturn false\n\t\t}\n\t\tif is_end {\n\t\t\toccurences = occurences[0 : length-1]\n\t\t} else {\n\t\t\toccurences = append(occurences, character)\n\t\t}\n\t}\n    if len(occurences) \u003e 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/690414120/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651345289,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0011011111111111111101111111111111011000000111110101111010110110110110110111101110111101110",
      "flag_type": 1
    },
    {
      "id": 690413751,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "func isValid(inputString string) bool {\n\tif len(inputString) == 0 || (len(inputString)\u00261) != 0 {\n\t\treturn false\n\t}\n\toccurences := make([]rune, len(inputString))\n\tends := map[rune]rune{')': '(', '}': '{', ']': '['}\n\tfor _, character := range inputString {\n\t\tlength := len(occurences)\n\t\tlast_valid, is_end := ends[character]\n\t\tif (is_end \u0026\u0026 length == 0) || (is_end \u0026\u0026 occurences[length-1] != last_valid) {\n\t\t\treturn false\n\t\t}\n\t\tif is_end {\n\t\t\toccurences = occurences[0 : length-1]\n\t\t} else {\n\t\t\toccurences = append(occurences, character)\n\t\t}\n\t}\n\treturn true\n}\n",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/690413751/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651345244,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111011111101111011111111011111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690410694,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "\nfunc isValid(inputString string) bool {\n\tif len(inputString) == 0 || (len(inputString)\u00261) != 0 {\n\t\treturn false\n\t}\n\toccurences := make([]rune, len(inputString))\n\tends := map[rune]rune{')': '(', '}': '{', ']': '['}\n\tfor _, character := range inputString {\n\t\tlength := len(occurences)\n\t\tlast := occurences[length-1]\n\t\tlast_valid, is_end := ends[character]\n\t\tif is_end \u0026\u0026 last != last_valid {\n\t\t\treturn false\n\t\t}\n\t\tif is_end {\n\t\t\toccurences = occurences[0 : length-2]\n\t\t} else {\n\t\t\toccurences = append(occurences, character)\n\t\t}\n\t}\n\treturn true\n}",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/690410694/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651344891,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111011011111101111001111111011111011000010111110101111010110110110110110111101110111101110",
      "flag_type": 1
    },
    {
      "id": 690403992,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "\nfunc isValid(inputString string) bool {\n\tends := map[rune]rune{')': '(', '}': '{', ']': '['}\n\tlength := len(inputString)\n\tif length \u003c 2 || (length\u00261) != 0 {\n\t\treturn false\n\t}\n\tfor index := 1; index \u003c len(inputString); index += 2 {\n\t\tif ends[rune(inputString[index])] != rune(inputString[index-1]) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/690403992/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651344099,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111011111111111111101111111111111011000010111110101111010110110110110110111101110111101110",
      "flag_type": 1
    },
    {
      "id": 690400042,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "\nfunc isValid(inputString string) bool {\n\toccurences := map[rune]bool{'(': false, ')': false, '{': false, '}': false, '[': false, ']': false}\n\tends := map[rune]rune{')': '(', '}': '{', ']': '['}\n\tfor _, character := range inputString {\n\t\tif start, is_end := ends[character]; is_end {\n\t\t\tvalid := check(occurences, start, character)\n\t\t\tif !valid {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tappearedBefore := occurences[character]\n\t\tif appearedBefore {\n\t\t\treturn false\n\t\t}\n\t\toccurences[character] = true\n\t}\n\tfor _, notClosed := range occurences {\n\t\tif notClosed {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc check(brackets map[rune]bool, start rune, end rune) bool {\n\tif !brackets[start] || brackets[end] {\n\t\treturn false\n\t}\n\tbrackets[start], brackets[end] = false, false\n\treturn true\n}",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/690400042/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651343626,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110111111111111111111111111100111011101010111110101111110110111111110110111101110111101110",
      "flag_type": 1
    },
    {
      "id": 690364689,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "func kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tfor _, query := range queries {\n\t\tanswer = append(answer, getPalindrom(query, intLength))\n\t}\n\treturn\n}\n\nfunc getPalindrom(query int, length int) (result int64) {\n\tis_even := (length \u0026 1) == 0\n\tpower := length / 2\n\tif is_even {\n\t\tpower -= 1\n\t}\n\tpalindrome := int64(math.Pow10(power)) + int64(query) - 1\n\tresult = palindrome\n\tif !is_even {\n\t\tpalindrome /= 10\n\t}\n\tfor palindrome \u003e 0 {\n\t\tresult = result*10 + palindrome%10\n\t\tpalindrome /= 10\n\t}\n\tif len(fmt.Sprint(result)) != length {\n\t\treturn -1\n\t}\n\treturn\n}\n",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690364689/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651339623,
      "status": 10,
      "runtime": "151 ms",
      "is_pending": "Not Pending",
      "memory": "9.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690301112,
      "status_display": "Accepted",
      "lang": "java",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "class Solution {\n    public long[] kthPalindrome(int[] queries, int intLength) {\n        long[] res= new long[queries.length];\n        for(int i=0;i\u003cqueries.length;i++){\n            res[i]=nthPalindrome(queries[i],intLength);\n        }\n        return res;\n    }\n    public long nthPalindrome(int nth, int kdigit)\n    {\n    long temp = (kdigit \u0026 1)!=0 ? (kdigit / 2) : (kdigit/2 - 1);\n    long palindrome = (long)Math.pow(10, temp);\n    palindrome += nth - 1;\n    long res1=palindrome;\n    if ((kdigit \u0026 1)\u003e0)\n        palindrome /= 10;\n    while (palindrome\u003e0)\n    {\n        res1=res1*10+(palindrome % 10);\n        palindrome /= 10;\n    }\n    String g=\"\";\n    g+=res1;\n    if(g.length()!=kdigit)\n        return -1;\n    return res1;\n}\n}",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690301112/",
      "lang_name": "Java",
      "time": "1 year, 9 months",
      "timestamp": 1651332888,
      "status": 10,
      "runtime": "73 ms",
      "is_pending": "Not Pending",
      "memory": "52.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690297760,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "//import \"fmt\"\nimport \"math\"\n\n\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tqueries_map := make(map[int]bool, len(queries))\n\tfor _, query := range queries {\n\t\tqueries_map[query] = true\n\t}\n\tpalindromes := constructPalindromes(intLength, queries_map)\n\tfor _, query := range queries {\n\t\tpalindrom, exists := palindromes[query]\n\t\tif !exists {\n\t\t\tpalindrom = -1\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\n\n\nfunc updateQueries(count *int, length int, palendrom []int, queries map[int]bool, palendromes map[int]int64) {\n\t*count++\n\t//fmt.Println(*count, palendrom)\n\tif _, exists := queries[*count]; !exists {\n\t\treturn\n\t}\n\tdelete(queries, *count)\n\tnew_palendrom := make([]int, length)\n\tcopy(new_palendrom, palendrom)\n\tpalendromes[*count] = fromList(new_palendrom)\n\n}\n\nfunc constructPalindromes(length int, queries map[int]bool) map[int]int64 {\n\tpalindromes := make(map[int]int64, len(queries))\n\tif length == 0 {\n\t\treturn palindromes\n\t} else if length == 1 {\n\t\tfor index := 0; index \u003c 10; index++ {\n\t\t\tpalindromes[index] = int64(index)\n\t\t}\n\t\treturn palindromes\n\t}\n\troot := math.Pow10(length) / 10\n\tif root != 1 {\n\t\troot += 1\n\t}\n\tcount_max := int(math.Pow10(1 + length/2))\n\tmiddle, is_uneven := length/2, length%2 != 0\n\tlast, count := toList(int(root)), new(int)\n\tupdateQueries(count, length, last, queries, palindromes)\n\tfor {\n\t\tswitch {\n\t\tcase last[middle] == 9 \u0026\u0026 last[0] == 9:\n\t\t\tfallthrough\n\t\tcase len(queries) == 0 || *count \u003e count_max:\n\t\t\treturn palindromes\n\t\tcase is_uneven \u0026\u0026 last[middle] \u003c 9:\n\t\t\tlast[middle] += 1\n\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\tcontinue\n\t\tcase is_uneven \u0026\u0026 last[middle] == 9:\n\t\t\tlast[middle] = 0\n\t\t}\n\t\tfor index := middle - 1; index \u003e= 0; index-- {\n\t\t//\tfmt.Println(\"index\", index)\n\t\t\tif last[index] == 9 {\n\t\t\t\tlast[index] = 0\n\t\t\t\tlast[length-index-1] = 0\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif last[index] \u003c 9 {\n\t\t\t\tlast[index]++\n\t\t\t\tlast[length-index-1]++\n\t\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\t\tif len(queries) == 0 || *count \u003e count_max {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc toList(number int) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{number}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690297760/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651332621,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690293468,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "//import \"fmt\"\nimport \"math\"\n\n\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tqueries_map := make(map[int]bool, len(queries))\n\tfor _, query := range queries {\n\t\tqueries_map[query] = true\n\t}\n\tpalindromes := constructPalindromes(intLength, queries_map)\n\tfor _, query := range queries {\n\t\tpalindrom, exists := palindromes[query]\n\t\tif !exists {\n\t\t\tpalindrom = -1\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\n\n\nfunc updateQueries(count *int, length int, palendrom []int, queries map[int]bool, palendromes map[int]int64) {\n\t*count++\n\t//fmt.Println(*count, palendrom)\n\tif _, exists := queries[*count]; !exists {\n\t\treturn\n\t}\n\tdelete(queries, *count)\n\tnew_palendrom := make([]int, length)\n\tcopy(new_palendrom, palendrom)\n\tpalendromes[*count] = fromList(new_palendrom)\n\n}\n\nfunc constructPalindromes(length int, queries map[int]bool) map[int]int64 {\n\tpalindromes := make(map[int]int64, len(queries))\n\tif length == 0 {\n\t\treturn palindromes\n\t} else if length == 1 {\n\t\tfor index := 0; index \u003c 10; index++ {\n\t\t\tpalindromes[index] = int64(index)\n\t\t}\n\t\treturn palindromes\n\t}\n\troot := math.Pow10(length) / 10\n\tif root != 1 {\n\t\troot += 1\n\t}\n\tcount_max := int(math.Pow10(1 + length/2))\n\tmiddle, is_uneven := length/2, length%2 != 0\n\tlast, count := toList(int(root)), new(int)\n\tupdateQueries(count, length, last, queries, palindromes)\n\tfor {\n\t\tswitch {\n\t\tcase last[middle] == 9 \u0026\u0026 last[0] == 9:\n\t\t\tfallthrough\n\t\tcase len(queries) == 0 || *count \u003e count_max:\n\t\t\treturn palindromes\n\t\tcase is_uneven \u0026\u0026 last[middle] \u003c 9:\n\t\t\tlast[middle] += 1\n\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\tcontinue\n\t\tcase is_uneven \u0026\u0026 last[middle] == 9:\n\t\t\tlast[middle] = 0\n\t\t}\n\t\tfor index := middle - 1; index \u003e= 0; index-- {\n\t\t//\tfmt.Println(\"index\", index)\n\t\t\tif last[index] == 9 {\n\t\t\t\tlast[index] = 0\n\t\t\t\tlast[length-index-1] = 0\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif last[index] \u003c 9 {\n\t\t\t\tlast[index]++\n\t\t\t\tlast[length-index-1]++\n\t\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\t\tif len(queries) == 0 || *count \u003e count_max {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc toList(number int) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{number}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690293468/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651332269,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690293060,
      "status_display": "Output Limit Exceeded",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "//import \"fmt\"\nimport \"math\"\n\n\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tqueries_map := make(map[int]bool, len(queries))\n\tfor _, query := range queries {\n\t\tqueries_map[query] = true\n\t}\n\tpalindromes := constructPalindromes(intLength, queries_map)\n\tfor _, query := range queries {\n\t\tpalindrom, exists := palindromes[query]\n\t\tif !exists {\n\t\t\tpalindrom = -1\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\n\n\nfunc updateQueries(count *int, length int, palendrom []int, queries map[int]bool, palendromes map[int]int64) {\n\t*count++\n\tfmt.Println(*count, palendrom)\n\tif _, exists := queries[*count]; !exists {\n\t\treturn\n\t}\n\tdelete(queries, *count)\n\tnew_palendrom := make([]int, length)\n\tcopy(new_palendrom, palendrom)\n\tpalendromes[*count] = fromList(new_palendrom)\n\n}\n\nfunc constructPalindromes(length int, queries map[int]bool) map[int]int64 {\n\tpalindromes := make(map[int]int64, len(queries))\n\tif length == 0 {\n\t\treturn palindromes\n\t} else if length == 1 {\n\t\tfor index := 0; index \u003c 10; index++ {\n\t\t\tpalindromes[index] = int64(index)\n\t\t}\n\t\treturn palindromes\n\t}\n\troot := math.Pow10(length) / 10\n\tif root != 1 {\n\t\troot += 1\n\t}\n\tcount_max := int(math.Pow10(1 + length/2))\n\tmiddle, is_uneven := length/2, length%2 != 0\n\tlast, count := toList(int(root)), new(int)\n\tupdateQueries(count, length, last, queries, palindromes)\n\tfor {\n\t\tswitch {\n\t\tcase last[middle] == 9 \u0026\u0026 last[0] == 9:\n\t\t\tfallthrough\n\t\tcase len(queries) == 0 || *count \u003e count_max:\n\t\t\treturn palindromes\n\t\tcase is_uneven \u0026\u0026 last[middle] \u003c 9:\n\t\t\tlast[middle] += 1\n\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\tcontinue\n\t\tcase is_uneven \u0026\u0026 last[middle] == 9:\n\t\t\tlast[middle] = 0\n\t\t}\n\t\tfor index := middle - 1; index \u003e= 0; index-- {\n\t\t//\tfmt.Println(\"index\", index)\n\t\t\tif last[index] == 9 {\n\t\t\t\tlast[index] = 0\n\t\t\t\tlast[length-index-1] = 0\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif last[index] \u003c 9 {\n\t\t\t\tlast[index]++\n\t\t\t\tlast[length-index-1]++\n\t\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\t\tif len(queries) == 0 || *count \u003e count_max {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc toList(number int) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{number}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690293060/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651332238,
      "status": 13,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690263179,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "//import \"fmt\"\nimport \"math\"\n\n\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tqueries_map := make(map[int]bool, len(queries))\n\tfor _, query := range queries {\n\t\tqueries_map[query] = true\n\t}\n\tpalindromes := constructPalindromes(intLength, queries_map)\n\tfor _, query := range queries {\n\t\tpalindrom, exists := palindromes[query]\n\t\tif !exists {\n\t\t\tpalindrom = -1\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\n\n\nfunc updateQueries(count *int, length int, palendrom []int, queries map[int]bool, palendromes map[int]int64) {\n\t*count++\n//\tfmt.Println(*count, palendrom)\n\tif _, exists := queries[*count]; !exists {\n\t\treturn\n\t}\n\tdelete(queries, *count)\n\tnew_palendrom := make([]int, length)\n\tcopy(new_palendrom, palendrom)\n\tpalendromes[*count] = fromList(new_palendrom)\n\n}\n\n\n\nfunc constructPalindromes(length int, queries map[int]bool) map[int]int64 {\n\tpalindromes := make(map[int]int64, len(queries))\n\tif length == 0 {\n\t\treturn palindromes\n\t} else if length == 1 {\n\t\tfor index := 0; index \u003c 10; index++ {\n\t\t\tpalindromes[index] = int64(index)\n\t\t}\n\t\treturn palindromes\n\t}\n\troot := math.Pow10(length) / 10\n\tif root != 1 {\n\t\troot += 1\n\t}\n\tcount_max := int(math.Pow10(1 + length/2))\n\tmiddle, is_uneven := length/2, length%2 != 0\n\tlast, count := toList(int(root)), new(int)\n\tupdateQueries(count, length, last, queries, palindromes)\n\tfor {\n\t\tmiddle_corrected := middle\n\t\tswitch {\n\t\tcase last[middle] == 9 \u0026\u0026 last[0] == 9:\n\t\t\tfallthrough\n\t\tcase len(queries) == 0 || *count \u003e count_max:\n\t\t\treturn palindromes\n\t\tcase is_uneven \u0026\u0026 last[middle] \u003c 9:\n\t\t\tlast[middle] += 1\n\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\tcontinue\n\t\tcase is_uneven \u0026\u0026 last[middle] == 9:\n\t\t\tmiddle_corrected -= 1\n\t\t\tlast[middle] = 0\n\t\t}\n\t\tfor index := middle_corrected; index \u003e= 0; index-- {\n//\t\t\tfmt.Println(\"index\", index)\n\t\t\tif last[index] == 9 {\n\t\t\t\tlast[index] = 0\n\t\t\t\tlast[length-index-1] = 0\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor last[index] \u003c 9 {\n\t\t\t\tlast[index]++\n\t\t\t\tlast[length-index-1]++\n\t\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\t\tif len(queries) == 0 || *count \u003e count_max {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t\tif is_uneven {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc toList(number int) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{number}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}\n",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690263179/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651330155,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111110000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 690254142,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 1375,
      "title_slug": "find-palindrome-with-fixed-length",
      "code": "//import \"fmt\"\nimport \"math\"\n\n\nfunc kthPalindrome(queries []int, intLength int) (answer []int64) {\n\tqueries_map := make(map[int]bool, len(queries))\n\tfor _, query := range queries {\n\t\tqueries_map[query] = true\n\t}\n\tpalindromes := constructPalindromes(intLength, queries_map)\n\tfor _, query := range queries {\n\t\tpalindrom, exists := palindromes[query]\n\t\tif !exists {\n\t\t\tpalindrom = -1\n\t\t}\n\t\tanswer = append(answer, palindrom)\n\t}\n\treturn\n}\n\n\n\nfunc updateQueries(count *int, length int, palendrom []int, queries map[int]bool, palendromes map[int]int64) {\n\t*count++\n//\tfmt.Println(*count, palendrom)\n\tif _, exists := queries[*count]; !exists {\n\t\treturn\n\t}\n\tdelete(queries, *count)\n\tnew_palendrom := make([]int, length)\n\tcopy(new_palendrom, palendrom)\n\tpalendromes[*count] = fromList(new_palendrom)\n\n}\n\n\n\nfunc constructPalindromes(length int, queries map[int]bool) map[int]int64 {\n\tpalindromes := make(map[int]int64, len(queries))\n\tif length == 0 {\n\t\treturn palindromes\n\t} else if length == 1 {\n\t\tfor index := 0; index \u003c 10; index++ {\n\t\t\tpalindromes[index] = int64(index)\n\t\t}\n\t\treturn palindromes\n\t}\n\troot := math.Pow10(length) / 10\n\tif root != 1 {\n\t\troot += 1\n\t}\n\tmiddle, is_uneven := length/2, length%2 != 0\n\tlast, count := toList(int(root)), new(int)\n\tupdateQueries(count, length, last, queries, palindromes)\n\tfor {\n\t\tmiddle_corrected := middle\n\t\tswitch {\n\t\tcase last[middle] == 9 \u0026\u0026 last[0] == 9:\n\t\t\tfallthrough\n\t\tcase len(queries) == 0:\n\t\t\treturn palindromes\n\t\tcase is_uneven \u0026\u0026 last[middle] \u003c 9:\n\t\t\tlast[middle] += 1\n\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\tcontinue\n\t\tcase is_uneven \u0026\u0026 last[middle] == 9:\n\t\t\tmiddle_corrected -= 1\n\t\t\tlast[middle] = 0\n\t\t}\n\t\tfor index := middle_corrected; index \u003e= 0; index-- {\n\t\t\t//fmt.Println(\"index\", index)\n\t\t\tif last[index] == 9 {\n\t\t\t\tlast[index] = 0\n\t\t\t\tlast[length-index-1] = 0\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor last[index] \u003c 9 {\n\t\t\t\tlast[index]++\n\t\t\t\tlast[length-index-1]++\n\t\t\t\tupdateQueries(count, length, last, queries, palindromes)\n\t\t\t\tif len(queries) == 0 {\n\t\t\t\t\treturn palindromes\n\t\t\t\t}\n\t\t\t\tif is_uneven {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nfunc toList(number int) (result []int) {\n\tif number/10 == 0 {\n\t\treturn []int{number}\n\t}\n\tcurrent := number\n\tfor {\n\t\tif current == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, int(current%10))\n\t\tcurrent /= 10\n\t}\n}\n\nfunc fromList(number []int) (result int64) {\n\tfor index, digit := range number {\n\t\tresult += int64(digit) * int64(math.Pow10(index))\n\t}\n\treturn\n}\n",
      "title": "Find Palindrome With Fixed Length",
      "url": "/submissions/detail/690254142/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651329628,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 691571728,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "\nfunc maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tmaxCurrent, maxOverall := 0, math.MinInt\n\tfor _, number := range numbers {\n\t\tmaxCurrent += number\n\t\tif maxCurrent \u003e maxOverall {\n\t\t\tmaxOverall = maxCurrent\n\t\t}\n\t\tif maxCurrent \u003c 0 {\n\t\t\tmaxCurrent = 0\n\t\t}\n\t}\n\treturn maxOverall\n}",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691571728/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651492725,
      "status": 10,
      "runtime": "123 ms",
      "is_pending": "Not Pending",
      "memory": "9.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 691570124,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "\n\nfunc maxSubArray(numbers []int) (result int) {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tcurrentMaximum, result := numbers[0], numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n\t\tcurrentMaximum += numbers[index]\n\t\tif result \u003c currentMaximum {\n\t\t\tresult = currentMaximum\n\t\t}\n\t\tif currentMaximum \u003c 0 {\n\t\t\tcurrentMaximum = 0\n\t\t}\n\t}\n\treturn\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691570124/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651492474,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111001011101111111011110111111111001010101100101101111111011111110010111001111111011111111011101011111111101111111011111110111011111111111101011011111111111111111111111111111111101111111100111111111111111111",
      "flag_type": 1
    },
    {
      "id": 691532469,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "\nfunc maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums, biggestSumIndex := make([]int, length), 0\n\t// [-2,1,-3,4,-1,2,1,-5,4]\n\tfor index := 0; index \u003c length; index++ {\n\t\tnumber := numbers[index]\n\t\tsums[biggestSumIndex] += number\n\t\tsums[index] = sums[biggestSumIndex]\n\t\t//fmt.Println(index, biggestSumIndex)\n\t\tswitch {\n\t\tcase number \u003e= sums[biggestSumIndex]:\n\t\t\t// no need to check subarrays if the new number is bigger than the sum\n\t\t\tsums[biggestSumIndex], biggestSumIndex = number, index\n\t\t\tfallthrough\n\t\tcase index != 0 \u0026\u0026 number \u003e= numbers[index-1]:\n\t\t\t// no need to check subarrays if the new number is bigger than the previous\n\t\t\tcontinue\n\t\t}\n\t\tfor indexInner := biggestSumIndex + 1; indexInner \u003c index; indexInner++ {\n\t\t\tsum := sums[biggestSumIndex]\n\t\t\tif indexInner != 0 {\n\t\t\t\tsum -= sums[indexInner-1]\n\t\t\t}\n\t\t\tif sum \u003e sums[biggestSumIndex] {\n\t\t\t\tsums[biggestSumIndex], biggestSumIndex = sum, indexInner\n\t\t\t}\n\t\t\t//fmt.Println(\"inner\", indexInner, biggestSumIndex)\n\t\t}\n\t}\n\treturn sums[biggestSumIndex]\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691532469/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651485720,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111000011000000000000110000101000000000000000000100000000010010010000000001000101001000001011000000100100000100010000000000010000000101000001000010000001000000000010010000000000000000001000000010000000000000",
      "flag_type": 1
    },
    {
      "id": 691512168,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "func maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums, biggestSum, biggestSumIndex := make([]int, length), numbers[0], 0\n\tsumFromZero := 0\n\t// [-2,1,-3,4,-1,2,1,-5,4]\n\tfor index, number := range numbers {\n\t\tsumFromZero += number\n\t\tsums[index] = sumFromZero\n\t\tfor indexInner := biggestSumIndex; indexInner \u003c= index; indexInner++ {\n\t\t\tsum := sumFromZero\n\t\t\tif indexInner != 0 {\n\t\t\t\tsum -= sums[indexInner-1]\n\t\t\t}\n\t\t\tif sum \u003e biggestSum {\n\t\t\t\tbiggestSum = sum\n\t\t\t\tbiggestSumIndex = indexInner\n\t\t\t}\n\t\t}\n\t}\n\treturn biggestSum\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691512168/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651482702,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000",
      "flag_type": 1
    },
    {
      "id": 691501267,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "\nfunc maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums, biggestSum, biggestSumIndex := make([]int, length), numbers[0], 0\n\t// [-2,1,-3,4,-1,2,1,-5,4]\n\tfor index := 0; index \u003c length; index++ {\n\t\tfor indexInner := biggestSumIndex; indexInner \u003e= biggestSumIndex \u0026\u0026 indexInner \u003c= index; indexInner++ {\n\t\t\tsums[indexInner] += numbers[index]\n\t\t\tif sums[indexInner] \u003e biggestSum {\n\t\t\t\tbiggestSum = sums[indexInner]\n\t\t\t\tbiggestSumIndex = indexInner\n\t\t\t}\n\t\t}\n\t}\n\treturn biggestSum\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691501267/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651481046,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000",
      "flag_type": 1
    },
    {
      "id": 691497754,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "\nfunc maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums, biggestSum, sumFromZero := make([]int, length), numbers[0], 0\n\t// [-2,1,-3,4,-1,2,1,-5,4]\n\tfor index := 0; index \u003c length; index++ {\n\t\tnumber := numbers[index]\n\t\tsumFromZero += number\n\t\tfor indexInner := 0; indexInner \u003c= index; indexInner++ {\n\t\t\tsums[indexInner] += number\n\t\t\tif sums[indexInner] \u003e biggestSum {\n\t\t\t\tbiggestSum = sums[indexInner]\n\t\t\t}\n\t\t}\n\t}\n\treturn biggestSum\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691497754/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651480508,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000",
      "flag_type": 1
    },
    {
      "id": 691485056,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "\nfunc maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums, biggestSum, sumZeroToCurrent := make([]int, length), numbers[0], 0\n\tchecked := make([]int, length)\n\tfor index := 0; index \u003c length; index++ {\n\t\tnumber := numbers[index]\n\t\tsumZeroToCurrent += number\n\t\tsums[index] = sumZeroToCurrent\n\t\tswitch {\n\t\tcase number \u003e biggestSum:\n\t\t\tbiggestSum = number\n\t\tcase sumZeroToCurrent \u003e biggestSum:\n\t\t\tbiggestSum = sumZeroToCurrent\n\t\t}\n\t\tchecked[index] = 0\n\t\tfor indexInner := 1; indexInner \u003c= index; indexInner++ {\n\t\t\tif indexInner \u003c checked[indexInner] {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tsum := sumZeroToCurrent - sums[indexInner-1]\n\t\t\tif sum \u003e biggestSum {\n\t\t\t\tbiggestSum = sum\n\t\t\t}\n\t\t}\n\t\tchecked[index] = index\n\t}\n\treturn biggestSum\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691485056/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651478677,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111101111111011110111111111111111111111111111111111110111111111111111111111111111111111111111111111111111011111111101111111111111111111111111111111111111111011011111111111111111111111111111111111111100000",
      "flag_type": 1
    },
    {
      "id": 691477892,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "func maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums, biggestSum, sumZeroToCurrent := make([]int, length), numbers[0], 0\n\tfor index := 0; index \u003c length; index++ {\n\t\tnumber := numbers[index]\n\t\tsumZeroToCurrent += number\n\t\tsums[index] = sumZeroToCurrent\n\t\tif number \u003e biggestSum {\n\t\t\tbiggestSum = number\n\t\t}\n\t\tif sumZeroToCurrent \u003e biggestSum {\n\t\t\tbiggestSum = sumZeroToCurrent\n\t\t}\n\t\tfor indexInner := 1; indexInner \u003c= index; indexInner++ {\n\t\t\tsum := sumZeroToCurrent - sums[indexInner-1]\n\t\t\tif sum \u003e biggestSum {\n\t\t\t\tbiggestSum = sum\n\t\t\t}\n\t\t}\n\t}\n\treturn biggestSum\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691477892/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651477732,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000",
      "flag_type": 1
    },
    {
      "id": 691457321,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "func maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums := make([]int, length)\n\tbiggestSum := numbers[0]\n\tsumAll := 0\n\tfor index := length - 1; index \u003e= 0; index-- {\n\t\tnumber := numbers[index]\n\t\tsumAll += number\n\t\tsums[index] = sumAll\n\t\tif number \u003e biggestSum {\n\t\t\tbiggestSum = number\n\t\t}\n\t\tif sumAll \u003e biggestSum {\n\t\t\tbiggestSum = sumAll\n\t\t}\n\t}\n\tfor index := 1; index \u003c length; index++ {\n\t\tindexToEnd := sums[index-1]\n\t\tfor indexInner := index + 1; indexInner \u003c length; indexInner++ {\n\t\t\tsum := indexToEnd - sums[indexInner]\n\t\t\tif sum \u003e biggestSum {\n\t\t\t\tbiggestSum = sum\n\t\t\t}\n\t\t}\n\t}\n\treturn biggestSum\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691457321/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651475153,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000",
      "flag_type": 1
    },
    {
      "id": 691454494,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "\nfunc maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums := make(map[int]int, length)\n\tbiggestSum := numbers[0]\n\tsumAll := 0\n\tfor index := length - 1; index \u003e= 0; index-- {\n\t\tnumber := numbers[index]\n\t\tsumAll += number\n\t\tsums[index] = sumAll\n\t\tif number \u003e biggestSum {\n\t\t\tbiggestSum = number\n\t\t}\n\t\tif sumAll \u003e biggestSum {\n\t\t\tbiggestSum = sumAll\n\t\t}\n\t}\n\tfor index := 1; index \u003c length; index++ {\n\t\tindexToEnd := sums[index-1]\n\t\tfor indexInner := index + 1; indexInner \u003c= length; indexInner++ {\n\t\t\tsum := indexToEnd - sums[indexInner]\n\t\t\tif sum \u003e biggestSum {\n\t\t\t\tbiggestSum = sum\n\t\t\t}\n\t\t}\n\t}\n\treturn biggestSum\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691454494/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651474810,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000",
      "flag_type": 1
    },
    {
      "id": 691449802,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "\nfunc maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums := make(map[int]int, length)\n\tbiggestSum := numbers[0]\n\tsumZeroToLast := 0\n\tfor index, number := range numbers {\n\t\tsumZeroToLast += number\n\t\tsums[index] = sumZeroToLast\n\t\tif number \u003e biggestSum {\n\t\t\tbiggestSum = number\n\t\t}\n\t\tif sumZeroToLast \u003e biggestSum {\n\t\t\tbiggestSum = sumZeroToLast\n\t\t}\n\t}\n\t// [-2,1,-3,4,-1,2,1,-5,4]\n\tfor index := 1; index \u003c length; index++ {\n\t\tindexToEnd := sumZeroToLast - sums[index-1]\n\t\tfor indexInner := index + 1; indexInner \u003c= length; indexInner++ {\n\t\t\tsum := indexToEnd - (sumZeroToLast - sums[indexInner-1])\n\t\t\tif sum \u003e biggestSum {\n\t\t\t\tbiggestSum = sum\n\t\t\t}\n\t\t}\n\t}\n\treturn biggestSum\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691449802/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651474265,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000",
      "flag_type": 1
    },
    {
      "id": 691449348,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "\nfunc maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums := make(map[int]int, length)\n\tbiggestSum := numbers[0]\n\tsumZeroToLast := 0\n\tfor index, number := range numbers {\n\t\tsumZeroToLast += number\n\t\tsums[index] = sumZeroToLast\n\t\tif number \u003e biggestSum {\n\t\t\tbiggestSum = number\n\t\t}\n\t\tif sumZeroToLast \u003e biggestSum {\n\t\t\tbiggestSum = sumZeroToLast\n\t\t}\n\t}\n\t// [-2,1,-3,4,-1,2,1,-5,4]\n\tfor index := 1; index \u003c length; index++ {\n\t\tindexToEnd := sumZeroToLast - sums[index-1]\n\t\tfor indexInner := index + 1; indexInner \u003c length; indexInner++ {\n\t\t\tsum := indexToEnd - (sumZeroToLast - sums[indexInner-1])\n\t\t\tif sum \u003e biggestSum {\n\t\t\t\tbiggestSum = sum\n\t\t\t}\n\t\t}\n\t}\n\treturn biggestSum\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691449348/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651474211,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111110111111111110111111101101011111111101111111111111111111110111111111111011100111011111000110111111111011111111111110111111111011111111110011111111111111111111110111111111110111100111111111100000000",
      "flag_type": 1
    },
    {
      "id": 691432362,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "func maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums := make(map[int]int, length)\n\tbiggestSum := numbers[0]\n\tsumTemp := 0\n\tfor index, number := range numbers {\n\t\tsumTemp += number\n\t\tsums[index] = sumTemp\n\t\tif number \u003e biggestSum {\n\t\t\tbiggestSum = number\n\t\t}\n\t\tif sumTemp \u003e biggestSum {\n\t\t\tbiggestSum = sumTemp\n\t\t}\n\t}\n\tfor index := 1; index \u003c length; index++ {\n\t\tindexToEnd := sums[length] - sums[index]\n\t\tfor indexInner := index + 1; indexInner \u003c length; indexInner++ {\n\t\t\tsum := indexToEnd - sums[indexInner]\n\t\t\tif sum \u003e biggestSum {\n\t\t\t\tbiggestSum = sum\n\t\t\t}\n\t\t}\n\t}\n\treturn biggestSum\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691432362/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651472320,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "01111111111001110101001110000111000000000001100000101000101010111010010011001000101001001111011001000110100001100010001110000110000101101001001010010010101100100101110010000011000000000001100000010000000000000",
      "flag_type": 1
    },
    {
      "id": 691424444,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "\nfunc maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums := make(map[int]int, length)\n\tbiggestSum := numbers[0]\n\tsumTemp := 0\n\tfor index, number := range numbers {\n\t\tsumTemp += number\n\t\tsums[index] = sumTemp\n\t\tif number \u003e biggestSum {\n\t\t\tbiggestSum = number\n\t\t}\n\t\tif sumTemp \u003e biggestSum {\n\t\t\tbiggestSum = sumTemp\n\t\t}\n\t}\n\t//fmt.Println(\"here\")\n\tfor index := 1; index \u003c length; index++ {\n\t\t//fmt.Println(\"index\", index)\n\t\tfor indexInner := index + 1; indexInner \u003c= length; indexInner++ {\n\t\t\tsum := sums[indexInner] - sums[index]\n\t\t\tif sum \u003e biggestSum {\n\t\t\t\tbiggestSum = sum\n\t\t\t}\n\t\t}\n\t}\n\treturn biggestSum\n}\n",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691424444/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651471447,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111100011001111101001110000111000101000001100000101000101010111010110011011010101001111111011001011111110001111111001110110111000101111101001011011111111101100101100111101111110001101101100001011010100000000",
      "flag_type": 1
    },
    {
      "id": 691415177,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "\nfunc maxSubArray(numbers []int) int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn numbers[0]\n\t}\n\tsums := make(map[int]int, length)\n\tbiggestSum := numbers[0]\n\tsumTemp := 0\n    sums[0]=0\n\tfor index, number := range numbers {\n\t\tsumTemp += number\n\t\tsums[index+1] = sumTemp\n\t\tif number \u003e biggestSum {\n\t\t\tbiggestSum = number\n\t\t}\n\t}\n\tfor index := range numbers {\n\t\tfor indexInner := index + 1; indexInner \u003c= length; indexInner++ {\n\t\t\tsum := sums[indexInner] - sums[index]\n\t\t\tif sum \u003e biggestSum {\n\t\t\t\tbiggestSum = sum\n\t\t\t}\n\t\t}\n\t}\n\treturn biggestSum\n}",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/691415177/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651470439,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000",
      "flag_type": 1
    },
    {
      "id": 691371448,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 217,
      "title_slug": "contains-duplicate",
      "code": "\nfunc containsDuplicate(numbers []int) bool {\n\tif len(numbers) == 0 || len(numbers) == 1 {\n\t\treturn false\n\t}\n\toccured := make(map[int]bool)\n\tfor _, number := range numbers {\n\t\t_, isDuplicate := occured[number]\n\t\tif isDuplicate {\n\t\t\treturn true\n\t\t}\n\t\toccured[number] = true\n\t}\n\treturn false\n}\n",
      "title": "Contains Duplicate",
      "url": "/submissions/detail/691371448/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651465468,
      "status": 10,
      "runtime": "75 ms",
      "is_pending": "Not Pending",
      "memory": "9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690941182,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1031,
      "title_slug": "add-to-array-form-of-integer",
      "code": "func addToArrayForm(number1 []int, add int) []int {\n\tif add == 0 {\n\t\treturn number1\n\t}\n\tif len(number1) == 0 {\n\t\treturn convert(add)\n\t}\n\tnumber2 := convert(add)\n\tlength1, length2, carry := len(number1), len(number2), 0\n\thightest := length1\n\tif length2 \u003e length1 {\n\t\thightest = length2\n\t}\n\tresult := make([]int, hightest)\n\tindex1, index2, indexResult := length1-1, 0, hightest-1\n\tfor {\n\t\tindex1Valid, index2Valid := index1 \u003e= 0, index2 \u003c length2\n\t\tif !index1Valid \u0026\u0026 !index2Valid \u0026\u0026 carry==0 {\n\t\t\tbreak\n\t\t}\n\t\tdigit1, digit2 := 0, 0\n\t\tif index1Valid {\n\t\t\tdigit1 = number1[index1]\n\t\t\tindex1--\n\t\t}\n\t\tif index2Valid {\n\t\t\tdigit2 = number2[index2]\n\t\t\tindex2++\n\t\t}\n\t\tdigitResult := digit1 + digit2 + carry\n\t\tif digitResult \u003e 9 {\n\t\t\tcarry = 1\n\t\t\tdigitResult -= 10\n\t\t} else {\n\t\t\tcarry = 0\n\t\t}\n\t\tif indexResult == -1 {\n\t\t\tresult = append(result, 0)\n\t\t\tcopy(result[1:], result[0:hightest])\n            indexResult=0\n\t\t}\n\t\tresult[indexResult] = digitResult\n\t\tindexResult--\n\t}\n\treturn result\n}\n\nfunc convert(number int) (result []int) {\n\tfor {\n\t\tif number == 0 {\n\t\t\treturn\n\t\t}\n\t\tresult = append(result, number%10)\n\t\tnumber /= 10\n\t}\n}\n",
      "title": "Add to Array-Form of Integer",
      "url": "/submissions/detail/690941182/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651411437,
      "status": 10,
      "runtime": "64 ms",
      "is_pending": "Not Pending",
      "memory": "7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690922740,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1019,
      "title_slug": "squares-of-a-sorted-array",
      "code": "\nfunc sortedSquares(numbers []int) []int {\n\tlength := len(numbers)\n\tif length == 0 || length == 1 {\n\t\treturn square(numbers, false)\n\t}\n\tnegativesIndex := -1\n\tfor index, number := range numbers {\n\t\tif number \u003e= 0 {\n\t\t\tnegativesIndex = index\n\t\t\tbreak\n\t\t}\n\t}\n\tif negativesIndex == 0 || negativesIndex == -1 {\n\t\treturn square(numbers, negativesIndex == -1)\n\t}\n\t//fmt.Println(\"negativesIndex\", negativesIndex)\n\tresult, resultIndex, negativesIndex := make([]int, length), 0, negativesIndex-1\n\tfor positivesIndex := negativesIndex + 1; resultIndex \u003c length; positivesIndex++ {\n\t\tpositiveOverflow := positivesIndex \u003e= length\n\t\tfor {\n\t\t\tif negativesIndex \u003c 0 || resultIndex \u003e= length {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif !positiveOverflow \u0026\u0026 numbers[negativesIndex]*-1 \u003e numbers[positivesIndex] {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t\n\t\t\tresult[resultIndex] = numbers[negativesIndex]\n\t\t\tresultIndex++\n\t\t\t//fmt.Println(\"negative\", negativesIndex, resultIndex, numbers[negativesIndex], result, numbers)\n            negativesIndex--\n\t\t}\n\t\tif resultIndex \u003c length \u0026\u0026 !positiveOverflow {\n\t//\t\tfmt.Println(\"positivesIndex\", positivesIndex, resultIndex, numbers[positivesIndex], result, numbers)\n\t\t\tresult[resultIndex] = numbers[positivesIndex]\n\t\t\tresultIndex++\n\t\t}\n\t}\n\treturn square(result, false)\n}\n\nfunc square(array []int, reverse bool) []int {\n\tif reverse {\n\t\tlength := len(array)\n\t\treversed := make([]int, length)\n\t\tfor index := length - 1; index \u003e= 0; index-- {\n\t\t\treversed[length-index-1] = array[index] * array[index]\n\t\t}\n\t\treturn reversed\n\t} else {\n\t\tfor index, number := range array {\n\t\t\tarray[index] = number * number\n\t\t}\n\t\treturn array\n\t}\n}\n",
      "title": "Squares of a Sorted Array",
      "url": "/submissions/detail/690922740/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651408868,
      "status": 10,
      "runtime": "27 ms",
      "is_pending": "Not Pending",
      "memory": "7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 690922554,
      "status_display": "Output Limit Exceeded",
      "lang": "golang",
      "question_id": 1019,
      "title_slug": "squares-of-a-sorted-array",
      "code": "\nfunc sortedSquares(numbers []int) []int {\n\tlength := len(numbers)\n\tif length == 0 || length == 1 {\n\t\treturn square(numbers, false)\n\t}\n\tnegativesIndex := -1\n\tfor index, number := range numbers {\n\t\tif number \u003e= 0 {\n\t\t\tnegativesIndex = index\n\t\t\tbreak\n\t\t}\n\t}\n\tif negativesIndex == 0 || negativesIndex == -1 {\n\t\treturn square(numbers, negativesIndex == -1)\n\t}\n\tfmt.Println(\"negativesIndex\", negativesIndex)\n\tresult, resultIndex, negativesIndex := make([]int, length), 0, negativesIndex-1\n\tfor positivesIndex := negativesIndex + 1; resultIndex \u003c length; positivesIndex++ {\n\t\tpositiveOverflow := positivesIndex \u003e= length\n\t\tfor {\n\t\t\tif negativesIndex \u003c 0 || resultIndex \u003e= length {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif !positiveOverflow \u0026\u0026 numbers[negativesIndex]*-1 \u003e numbers[positivesIndex] {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t\n\t\t\tresult[resultIndex] = numbers[negativesIndex]\n\t\t\tresultIndex++\n\t\t\tfmt.Println(\"negative\", negativesIndex, resultIndex, numbers[negativesIndex], result, numbers)\n            negativesIndex--\n\t\t}\n\t\tif resultIndex \u003c length \u0026\u0026 !positiveOverflow {\n\t\t\tfmt.Println(\"positivesIndex\", positivesIndex, resultIndex, numbers[positivesIndex], result, numbers)\n\t\t\tresult[resultIndex] = numbers[positivesIndex]\n\t\t\tresultIndex++\n\t\t}\n\t}\n\treturn square(result, false)\n}\n\nfunc square(array []int, reverse bool) []int {\n\tif reverse {\n\t\tlength := len(array)\n\t\treversed := make([]int, length)\n\t\tfor index := length - 1; index \u003e= 0; index-- {\n\t\t\treversed[length-index-1] = array[index] * array[index]\n\t\t}\n\t\treturn reversed\n\t} else {\n\t\tfor index, number := range array {\n\t\t\tarray[index] = number * number\n\t\t}\n\t\treturn array\n\t}\n}\n",
      "title": "Squares of a Sorted Array",
      "url": "/submissions/detail/690922554/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651408842,
      "status": 13,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000",
      "flag_type": 1
    },
    {
      "id": 690911224,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1019,
      "title_slug": "squares-of-a-sorted-array",
      "code": "\nfunc sortedSquares(numbers []int) []int {\n\tlength := len(numbers)\n\tif length == 0 || length == 1 {\n\t\treturn square(numbers, false)\n\t}\n\tnegativesIndex := -1\n\tfor index, number := range numbers {\n\t\tif number \u003e= 0 {\n\t\t\tnegativesIndex = index\n\t\t\tbreak\n\t\t}\n\t}\n\tif negativesIndex == 0 || negativesIndex == -1 {\n\t\treturn square(numbers, negativesIndex == -1)\n\t}\n\t//fmt.Println(\"negativesIndex\", negativesIndex)\n\tresult, resultIndex, negativesIndex := make([]int, length), 0, negativesIndex-1\n\tfor positivesIndex := negativesIndex + 1; positivesIndex \u003c length; positivesIndex++ {\n\t\tfor ; negativesIndex \u003e= 0 \u0026\u0026 numbers[negativesIndex]*-1 \u003c= numbers[positivesIndex]; negativesIndex-- {\n\t\t\tresult[resultIndex] = numbers[negativesIndex]\n\t\t\tresultIndex++\n\t\t\t//fmt.Println(\"negative\", negativesIndex, numbers[negativesIndex], result, numbers)\n\t\t}\n\t\t//fmt.Println(\"positivesIndex\", positivesIndex, numbers[positivesIndex], result, numbers)\n\t\tresult[resultIndex] = numbers[positivesIndex]\n\t\tresultIndex++\n\t}\n\treturn square(result, false)\n}\n\nfunc square(array []int, reverse bool) []int {\n\tif reverse {\n\t\tlength := len(array)\n\t\treversed := make([]int, length)\n\t\tfor index := length - 1; index \u003e= 0; index-- {\n\t\t\treversed[length-index-1] = array[index] * array[index]\n\t\t}\n\t\treturn reversed\n\t} else {\n\t\tfor index, number := range array {\n\t\t\tarray[index] = number * number\n\t\t}\n\t\treturn array\n\t}\n}\n",
      "title": "Squares of a Sorted Array",
      "url": "/submissions/detail/690911224/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651407185,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111101110101110111100111110101011101110100110100111111010110111001000100010111011011100011101110111100110110100111001",
      "flag_type": 1
    },
    {
      "id": 692212639,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "\nfunc findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\t// checking edge cases\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\t// initializing to MaxInt because zeros will impact future sorting\n\tfor index := range result {\n\t\tresult[index] = math.MaxInt\n\t}\n\tindex_sort_start, index_sort_end, end_toggle := length, length, false\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n\t\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end, end_toggle)\n\t\t// current is not sorted -\u003e from numbers\n\t\t// previous is sorted -\u003e from result\n\t\tcurrent, previous := numbers[index], result[index-1]\n\t\t// if the current number is bigger and the previous number was sorted\n\t\t// (end_toggle is on), then, probably, the current index is the end of\n\t\t// the sorted subarray\n\t\tif current \u003e= previous \u0026\u0026 end_toggle {\n\t\t\tindex_sort_end = index\n\t\t\tend_toggle = false\n\t\t}\n\t\t// just push the current number in the result array because if it is\n\t\t// bigger\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tcontinue\n\t\t}\n\t\t// toggle to move index_sort_end\n\t\t// it needs to move because the current number will be sorted\n\t\tend_toggle = true\n\t\t// current \u003c previous -\u003e find the number bigger than the current\n\t\t//\n\t\t// the current number is smaller than the starting number of the unsorted subarray\n\t\t// (or the starting index is not set)\n\t\t// -\u003e start index is invalid, finding new start index in numbers\n\t\tif index_sort_start == length || current \u003c numbers[index_sort_start] {\n\t\t\t// insert the number in the correct place and move index_sort_start\n\t\t\t// to the correct place\n\t\t\tif index_sort_start == length {\n\t\t\t\tindex_sort_start = index\n\t\t\t}\n\t\t\tindex_sort_start = insert_smaller(result, current, index_sort_start, 0)\n\t\t\tcontinue\n\t\t}\n\t\t// the current number is bigger than the starting number of the unsorted\n\t\t// subarray, so it should be placed inside of it\n\t\tinsert_smaller(result, current, index, index_sort_start)\n\t\t// set start index (if not already set)\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index - 1\n\t\t}\n\t}\n\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t// return length of the sorted subarray\n\treturn index_sort_end - index_sort_start\n}\n\nfunc insert_smaller(numbers []int, target int, index_start int, index_end int) int {\n\tindex_result := index_end\n\tfor index := index_start; index \u003e= index_end; index-- {\n\t\tif numbers[index] \u003c= target {\n\t\t\tindex_result = index + 1\n\t\t}\n\t}\n\t//fmt.Println(\"index for\", target, \"-\", index_result)\n\t// target should be placed after index_result, so move everything after\n\t// it to the right and insert the current number\n\t// if index_result is the last item, then just push it\n\tcopy(numbers[index_result+1:], numbers[index_result:])\n\tnumbers[index_result] = target\n\treturn index_result\n}\n",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692212639/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651571121,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111100111100000101111101011111111101000101111101011111111000000101000001001001101000000001000001000000101000000000101000101000101000001110110000111001111001100111001001111110010000001000000001000000111010101100000000010000100010000000000000000000000000000000000000010000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 692210563,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "\nfunc findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\t// checking edge cases\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\t// initializing to MaxInt because zeros will impact future sorting\n\tfor index := range result {\n\t\tresult[index] = math.MaxInt\n\t}\n\tindex_sort_start, index_sort_end, end_toggle := length, length, false\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n\t\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end, end_toggle)\n\t\tcurrent, previous := numbers[index], numbers[index-1]\n\t\t// if the current number is bigger and the previous number was sorted\n\t\t// (end_toggle is on), then, probably, the current index is the end of\n\t\t// the sorted subarray\n\t\tif current \u003e= previous \u0026\u0026 end_toggle {\n\t\t\tindex_sort_end = index\n\t\t\tend_toggle = false\n\t\t}\n\t\t// just push the current number in the result array because if it is\n\t\t// bigger\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tcontinue\n\t\t}\n\t\t// toggle to move index_sort_end\n\t\t// it needs to move because the current number will be sorted\n\t\tend_toggle = true\n\t\t// current \u003c previous -\u003e find the number bigger than the current\n\t\t//\n\t\t// the current number is smaller than the starting number of the unsorted subarray\n\t\t// (or the starting index is not set)\n\t\t// -\u003e start index is invalid, finding new start index in numbers\n\t\tif index_sort_start == length || current \u003c numbers[index_sort_start] {\n\t\t\t// insert the number in the correct place and move index_sort_start\n\t\t\t// to the correct place\n\t\t\tif index_sort_start == length {\n\t\t\t\tindex_sort_start = index\n\t\t\t}\n\t\t\tindex_sort_start = insert_smaller(result, current, index_sort_start, 0)\n\t\t\tcontinue\n\t\t}\n\t\t// the current number is bigger than the starting number of the unsorted\n\t\t// subarray, so it should be placed inside of it\n\t\tinsert_smaller(result, current, index, index_sort_start)\n\t\t// set start index (if not already set)\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index - 1\n\t\t}\n\t}\n\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t// return length of the sorted subarray\n\treturn index_sort_end - index_sort_start\n}\n\nfunc insert_smaller(numbers []int, target int, index_start int, index_end int) int {\n\tindex_result := index_end\n\tfor index := index_start; index \u003e= index_end; index-- {\n\t\tif numbers[index] \u003c= target {\n\t\t\tindex_result = index + 1\n\t\t}\n\t}\n\t//fmt.Println(\"index for\", target, \"-\", index_result)\n\t// target should be placed after index_result, so move everything after\n\t// it to the right and insert the current number\n\t// if index_result is the last item, then just push it\n\tcopy(numbers[index_result+1:], numbers[index_result:])\n\tnumbers[index_result] = target\n\treturn index_result\n}\n",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692210563/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651570835,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111101100111100010101101001001000001101000101101001001000001000000101000001001000001000000001000001000000001000000000000000000000001000001110000011111001010011100110011001101110010010001001000001010000111000001100000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 692208844,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "\nfunc findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\t// checking edge cases\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\t// initializing to maxint to not impact future sorting\n\tfor index := range result {\n\t\tresult[index] = math.MaxInt\n\t}\n\tindex_sort_start, index_sort_end, end_toggle := length, length, false\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n\t\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t\tcurrent, previous := numbers[index], numbers[index-1]\n\t\t// if the current number is bigger and the previous number was sorted\n\t\t// (end_toggle is on), then, probably, the current index is the end of\n\t\t// the sorted subarray\n\t\tif current \u003e= previous \u0026\u0026 end_toggle {\n\t\t\tindex_sort_end = index\n\t\t\tend_toggle = false\n\t\t}\n\t\t// just push the current number in the result array because if it is\n\t\t// bigger\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tcontinue\n\t\t}\n\t\t// current \u003c previous -\u003e find the number bigger than the current\n\t\t//\n\t\t// the current number is smaller than the starting number of the unsorted subarray\n\t\t// (or the starting index is not set)\n\t\t// -\u003e start index is invalid, finding new start index in numbers\n\t\tif index_sort_start == length || current \u003c numbers[index_sort_start] {\n\t\t\t// insert the number in the correct place and move index_sort_start\n\t\t\t// to the correct place\n\t\t\tif index_sort_start == length {\n\t\t\t\tindex_sort_start = index\n\t\t\t}\n\t\t\tindex_sort_start = insert_smaller(result, current, index_sort_start, 0)\n\t\t\tcontinue\n\t\t}\n\t\t// the current number is bigger than the starting number of the unsorted\n\t\t// subarray, so it should be placed inside of it\n\t\tinsert_smaller(result, current, index, index_sort_start)\n\t\t// toggle to move index_sort_end\n\t\tend_toggle = true\n\t\t// set start index (if not already set)\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index - 1\n\t\t}\n\t}\n\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t// return length of the sorted subarray\n\treturn index_sort_end - index_sort_start\n}\n\nfunc insert_smaller(numbers []int, target int, index_start int, index_end int) int {\n\tindex_result := index_end\n\tfor index := index_start; index \u003e= index_end; index-- {\n\t\tif numbers[index] \u003c= target {\n\t\t\tindex_result = index + 1\n\t\t}\n\t}\n\t//fmt.Println(\"index for\", target, \"-\", index_result)\n\t// target should be placed after index_result, so move everything after\n\t// it to the right and insert the current number\n\t// if index_result is the last item, then just push it\n\tcopy(numbers[index_result+1:], numbers[index_result:])\n\tnumbers[index_result] = target\n\treturn index_result\n}\n",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692208844/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651570602,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111110110111011100000010111010111111111011101010111010111111111011000010111000111101111001000000111000111101111100000101111101111101111000001110000011011001000010100110110001011100000000001001000001010000111000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 692202352,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "func findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\t// checking edge cases\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\tindex_sort_start, index_sort_end, end_toggle := length, length, false\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n\t\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t\tcurrent, previous := numbers[index], numbers[index-1]\n\t\t// if the current number is bigger and the previous number was sorted\n\t\t// (end_toggle is on), then, probably, the current index is the end of\n\t\t// the sorted subarray\n\t\tif current \u003e= previous \u0026\u0026 end_toggle {\n\t\t\tindex_sort_end = index\n\t\t\tend_toggle = false\n\t\t}\n\t\t// just push the current number in the result array because if it is\n\t\t// bigger\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tcontinue\n\t\t}\n\t\t// current \u003c previous -\u003e find the number bigger than the current\n\t\t//\n\t\t// the current number is smaller than the starting number of the unsorted subarray\n\t\t// (or the starting index is not set)\n\t\t// -\u003e start index is invalid, finding new start index\n\t\tif index_sort_start == length || current \u003c numbers[index_sort_start] {\n\t\t\t// insert the number in the correct place and move index_sort_start\n\t\t\t// to the correct place\n\t\t\tif index_sort_start == length {\n\t\t\t\tindex_sort_start = index\n\t\t\t}\n\t\t\tindex_sort_start = insert_smaller(numbers, result, current, index_sort_start, 0)\n\t\t\tcontinue\n\t\t}\n\t\t// the current number is bigger than the starting number of the unsorted\n\t\t// subarray, so it should be placed inside of it\n\t\tinsert_smaller(numbers, result, current, index, index_sort_start)\n\t\t// toggle to move index_sort_end\n\t\tend_toggle = true\n\t\t// set start index (if not already set)\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index - 1\n\t\t}\n\t}\n\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t// return length of the sorted subarray\n\treturn index_sort_end - index_sort_start\n}\n\nfunc insert_smaller(numbers []int, result []int, target int, index_start int, index_end int) int {\n\tindex_result := index_end\n\tfor index := index_start; index \u003e= index_end; index-- {\n\t\tif numbers[index] \u003c= target {\n\t\t\tindex_result = index + 1\n\t\t}\n\t}\n\t//fmt.Println(\"index for\", target, \"-\", index_result)\n\t// target should be placed after index_result, so move everything after\n\t// it to the right and insert the current number\n\tcopy(result[index_result+1:], result[index_result:])\n\tresult[index_result] = target\n\treturn index_result\n}\n",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692202352/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651569707,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 692137558,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "\nfunc findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\tindex_sort_start, index_sort_end := length, 1\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n\t\tfmt.Println(result)\n\t\tcurrent, previous := numbers[index], numbers[index-1]\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tindex_sort_end = index\n\t\t\tcontinue\n\t\t}\n\t\tresult[index], result[index-1] = previous, current\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index-1\n\t\t}\n\t}\n\treturn index_sort_end - index_sort_start + 1\n}",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692137558/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651561530,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0111100110110110100010001000000000101010000010000000101000000000000010000010101000000000000010000010000010000000101010101010101010101010001001100000000011001000000101110010001001100000000001100000001000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 692133262,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "\nfunc findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\tindex_sort_start, index_sort_end := length, 1\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n\t\tfmt.Println(result)\n\t\tcurrent, previous := numbers[index], numbers[index-1]\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tindex_sort_end = index\n\t\t\tcontinue\n\t\t}\n\t\tresult[index], result[index-1] = previous, current\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index\n\t\t}\n\t}\n\treturn index_sort_end - index_sort_start + 1\n}",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692133262/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651561087,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111000100101010101000000000101000000000001000100000000000000000001000001000000000000000101000101000101000000000000000000000000000000000000001100000010011101000000100110000001001100100100100000000001000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 692132276,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "\nfunc findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\tindex_sort_start, index_sort_end := length, -1\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n\t\tfmt.Println(result)\n\t\tcurrent, previous := numbers[index], numbers[index-1]\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tindex_sort_end = index\n\t\t\tcontinue\n\t\t}\n\t\tresult[index], result[index-1] = previous, current\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index\n\t\t}\n\t}\n\treturn index_sort_end - index_sort_start + 1\n}",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692132276/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651560986,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111000100101010101000000000101000000000001000100000000000000000001000001000000000000000101000101000101000000000000000000000000000000000000001100000010011101000000100110000001001100100100100000000001000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 691691870,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 941,
      "title_slug": "sort-array-by-parity",
      "code": "\nfunc sortArrayByParity(numbers []int) []int {\n\tlength := len(numbers)\n\tif length == 1 {\n\t\treturn numbers\n\t}\n\tresults, index_even, index_odd := make([]int, length), 0, length-1\n\tfor _, number := range numbers {\n\t\tif (number \u0026 1) == 0 {\n\t\t\t// number is even -\u003e place it from the beginning\n\t\t\tresults[index_even] = number\n\t\t\tindex_even++\n\t\t} else {\n\t\t\t// number is odd -\u003e place it from the end\n\t\t\tresults[index_odd] = number\n\t\t\tindex_odd--\n\t\t}\n\t}\n\treturn results\n}\n",
      "title": "Sort Array By Parity",
      "url": "/submissions/detail/691691870/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651507660,
      "status": 10,
      "runtime": "9 ms",
      "is_pending": "Not Pending",
      "memory": "5.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 691682236,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 35,
      "title_slug": "search-insert-position",
      "code": "func searchInsert(numbers []int, target int) int {\n\t// checking edge cases\n\tlength := len(numbers)\n\tif numbers[0] == target {\n\t\treturn 0\n\t} else if numbers[length-1] == target {\n\t\treturn length - 1\n\t}\n\tleft, right, index, was_bigger := 0, length-1, 0, false\n\tfor right \u003e= left {\n\t\t// overflow protection\n\t\tindex = left + (right-left)/2\n\t\tnumber := numbers[index]\n\t\t//fmt.Println(\"index\", index, \"left\", left, \"right\", right)\n\t\tswitch {\n\t\tcase number == target:\n\t\t\t// found the target\n\t\t\treturn index\n\t\tcase number \u003e target:\n\t\t\t// the number is bigger -\u003e the target is to the left -\u003e discard right\n\t\t\tright = index - 1\n\t\t\twas_bigger = true\n\t\tcase number \u003c target:\n\t\t\t// the number is smaller -\u003e the target is to the right -\u003e discard left\n\t\t\tleft = index + 1\n\t\t\twas_bigger = false\n\t\t}\n\t}\n\t// the target is not in the array\n\n\t// the last number was bigger -\u003e target should be to the left\n\tif was_bigger {\n\t\treturn index\n\t}\n\t// the last number was smaller -\u003e target should be to the right\n\treturn index + 1\n}\n",
      "title": "Search Insert Position",
      "url": "/submissions/detail/691682236/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651506546,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 691680711,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 35,
      "title_slug": "search-insert-position",
      "code": "\nfunc searchInsert(numbers []int, target int) int {\n\t// checking edge cases\n\tlength := len(numbers)\n\tif numbers[0] == target {\n\t\treturn 0\n\t} else if numbers[length-1] == target {\n\t\treturn length - 1\n\t}\n\tleft, right, index, was_bigger := 0, length-1, 0, false\n\tfor right \u003e= left {\n\t\t// overflow protection\n\t\tindex = left + (right-left)/2\n\t\tnumber := numbers[index]\n\t\tswitch {\n\t\tcase number == target:\n\t\t\t// found the target\n\t\t\treturn index\n\t\tcase number \u003e target:\n\t\t\t// the number is bigger -\u003e the target is to the left -\u003e discard right\n\t\t\tright = index - 1\n\t\t\twas_bigger = true\n\t\tcase number \u003c target:\n\t\t\t// the number is smaller -\u003e the target is to the right -\u003e discard left\n\t\t\tleft = index + 1\n\t\t\twas_bigger = false\n\t\t}\n\t}\n\t// the target is not in the array\n\n\t// the last number was bigger -\u003e target should be to the left\n\tif was_bigger \u0026\u0026 index == 0 {\n\t\treturn 0\n\t} else if was_bigger {\n\t\treturn index - 1\n\t}\n\t// the last number was smaller -\u003e target should be to the right\n\treturn index + 1\n}\n",
      "title": "Search Insert Position",
      "url": "/submissions/detail/691680711/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651506372,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111110111111011111111111001101111110011111111111110111110111",
      "flag_type": 1
    },
    {
      "id": 691679158,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 35,
      "title_slug": "search-insert-position",
      "code": "func searchInsert(numbers []int, target int) int {\n\t// checking edge cases\n\tlength := len(numbers)\n\tif numbers[0] == target {\n\t\treturn 0\n\t} else if numbers[length-1] == target {\n\t\treturn length - 1\n\t}\n\tleft, right, index, was_bigger := 0, length-1, 0, false\n\tfor right \u003e= left {\n\t\t// overflow protection\n\t\tindex = left + (right-left)/2\n\t\tnumber := numbers[index]\n\t\tswitch {\n\t\tcase number == target:\n\t\t\t// found the target\n\t\t\treturn index\n\t\tcase number \u003e target:\n\t\t\t// the number is bigger -\u003e the target is to the left -\u003e discard right\n\t\t\tright = index - 1\n\t\t\twas_bigger = true\n\t\tcase number \u003c target:\n\t\t\t// the number is smaller -\u003e the target is to the right -\u003e discard left\n\t\t\tleft = index + 1\n\t\t\twas_bigger = false\n\t\t}\n\t}\n\t// the target is not in the array\n\n\tif was_bigger {\n\t\t// the last number was bigger -\u003e target should be to the left\n\t\treturn index - 1\n\t}\n\t// the last number was smaller -\u003e target should be to the right\n\treturn index + 1\n}\n",
      "title": "Search Insert Position",
      "url": "/submissions/detail/691679158/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651506194,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110011010110111011011101110001101001110011111111101010111110110",
      "flag_type": 1
    },
    {
      "id": 691666996,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 35,
      "title_slug": "search-insert-position",
      "code": "\nfunc searchInsert(numbers []int, target int) int {\n\t// checking edge cases\n\tlength := len(numbers)\n\tif numbers[0] == target {\n\t\treturn 0\n\t} else if numbers[length-1] == target {\n\t\treturn length - 1\n\t}\n\tleft, right := 1, length-1\n\tindex := left + (right-left)/2\n\tnumber := numbers[index]\n\tfor right \u003e= left {\n\t\t// overflow protection\n\t\tindex = left + (right-left)/2\n\t\tnumber = numbers[index]\n\t\tswitch {\n\t\tcase number == target:\n\t\t\t// found the target\n\t\t\treturn index\n\t\tcase number \u003e target:\n\t\t\t// the number is bigger -\u003e the target is to the left -\u003e discard right\n\t\t\tright = index - 1\n\t\tcase number \u003c target:\n\t\t\t// the number is smaller -\u003e the target is to the right -\u003e discard left\n\t\t\tleft = index + 1\n\t\t}\n\t}\n\t// the target is not in the array\n\tif number \u003e target {\n\t\treturn index\n\t}\n\treturn index + 1\n}\n",
      "title": "Search Insert Position",
      "url": "/submissions/detail/691666996/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651504821,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 691657897,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 278,
      "title_slug": "first-bad-version",
      "code": "\nfunc firstBadVersion(n int) int {\n\t// checking edge cases\n\tif isBadVersion(1) {\n\t\treturn 1\n\t}\n\tleft, right, bad_version := 1, n, math.MaxInt\n\tfor right \u003e= left {\n\t\t// overflow protection\n\t\tversion := left + (right-left)/2\n\t\tswitch isBadVersion(version) {\n\t\tcase false:\n\t\t\t// it is good -\u003e versions to the left are good -\u003e discard left\n\t\t\tleft = version + 1\n\t\tcase true:\n\t\t\t// it is bad -\u003e the first bad version is either this one or to the left\n\t\t\t// discard right\n\t\t\tbad_version = version\n\t\t\tright = version - 1\n\t\t}\n\t}\n\t// the search space is empty\n\treturn bad_version\n}\n",
      "title": "First Bad Version",
      "url": "/submissions/detail/691657897/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651503755,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "1.9 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 691652127,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 792,
      "title_slug": "binary-search",
      "code": "/* https://leetcode.com/problems/binary-search/\n\nGiven an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\n\nYou must write an algorithm with O(log n) runtime complexity.\n\n\n\nExample 1:\n\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n\nExample 2:\n\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n\n\n\nConstraints:\n\n    1 \u003c= nums.length \u003c= 104\n    -104 \u003c nums[i], target \u003c 104\n    All the integers in nums are unique.\n    nums is sorted in ascending order.\n\n*/\nfunc search(numbers []int, target int) int {\n\tlength := len(numbers)\n\tswitch {\n\tcase numbers[0] \u003e target:\n\t\t// smallet number \u003e target = there is no target in the array\n\t\tfallthrough\n\tcase numbers[length-1] \u003c target:\n\t\t// biggest number \u003c target = there is no target in the array\n\t\treturn -1\n\tcase numbers[length-1] == target:\n\t\t// checking just in case, can save time\n\t\treturn length - 1\n\tcase numbers[0] == target:\n\t\t// checking just in case, can save time\n\t\treturn 0\n\t}\n\n\tleft, right := 0, length-1\n\tfor right \u003e= left {\n\t\t// overflow protection\n\t\tindex := left + (right-left)/2\n\t\tnumber := numbers[index]\n\t\tswitch {\n\t\tcase number == target:\n\t\t\t// found the target\n\t\t\treturn index\n\t\tcase number \u003e target:\n\t\t\t// array is in the ascending order, the number is bigger\n\t\t\t// -\u003e the target is to the left -\u003e discard right\n\t\t\tright = index - 1\n\t\tcase number \u003c target:\n\t\t\t// array is in the ascending order, the number is smaller\n\t\t\t// -\u003e the target is to the right -\u003e discard left\n\t\t\tleft = index + 1\n\t\t}\n\t}\n\t// search space is empty, there is no target\n\treturn -1\n}\n",
      "title": "Binary Search",
      "url": "/submissions/detail/691652127/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651503092,
      "status": 10,
      "runtime": "34 ms",
      "is_pending": "Not Pending",
      "memory": "7.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 691650979,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 374,
      "title_slug": "guess-number-higher-or-lower",
      "code": "\nfunc guessNumber(n int) int {\n\t// checking edge cases\n\tif guess(1) == 0 {\n\t\treturn 1\n\t} else if guess(n) == 0 {\n\t\treturn n\n\t}\n\tleft, right := 1, n\n\tfor right \u003e= left {\n\t\t// overflow protection\n\t\tnumber := left + (right-left)/2\n\t\tswitch guess(number) {\n\t\tcase 0:\n\t\t\t// found the target\n\t\t\treturn number\n\t\tcase -1:\n\t\t\t// the number is bigger -\u003e the target is to the left -\u003e discard right\n\t\t\tright = number - 1\n\t\tcase 1:\n\t\t\t// the number is smaller -\u003e the target is to the right -\u003e discard left\n\t\t\tleft = number + 1\n\t\t}\n\t}\n\t// ide shows an error, this return is unreachable in this issue\n\treturn 0\n}\n",
      "title": "Guess Number Higher or Lower",
      "url": "/submissions/detail/691650979/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651502962,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "1.9 MB",
      "compare_result": "1111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 691650729,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 374,
      "title_slug": "guess-number-higher-or-lower",
      "code": "\nfunc guessNumber(n int) int {\n\t// checking edge cases\n\tif guess(1) == 0 {\n\t\treturn 0\n\t} else if guess(n) == 0 {\n\t\treturn n\n\t}\n\tleft, right := 1, n\n\tfor right \u003e= left {\n\t\t// overflow protection\n\t\tnumber := left + (right-left)/2\n\t\tswitch guess(number) {\n\t\tcase 0:\n\t\t\t// found the target\n\t\t\treturn number\n\t\tcase -1:\n\t\t\t// the number is bigger -\u003e the target is to the left -\u003e discard right\n\t\t\tright = number - 1\n\t\tcase 1:\n\t\t\t// the number is smaller -\u003e the target is to the right -\u003e discard left\n\t\t\tleft = number + 1\n\t\t}\n\t}\n\t// ide shows an error, this return is unreachable in this issue\n\treturn 0\n}\n",
      "title": "Guess Number Higher or Lower",
      "url": "/submissions/detail/691650729/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651502936,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1001011011111111111111111",
      "flag_type": 1
    },
    {
      "id": 691642817,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 792,
      "title_slug": "binary-search",
      "code": "/* https://leetcode.com/problems/binary-search/\n\nGiven an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\n\nYou must write an algorithm with O(log n) runtime complexity.\n\n\n\nExample 1:\n\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n\nExample 2:\n\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n\n\n\nConstraints:\n\n    1 \u003c= nums.length \u003c= 104\n    -104 \u003c nums[i], target \u003c 104\n    All the integers in nums are unique.\n    nums is sorted in ascending order.\n\n*/\n\nfunc search(numbers []int, target int) int {\n\tlength := len(numbers)\n\tswitch {\n\tcase numbers[0] \u003e target:\n\t\t// smallet number \u003e target = there is no target in the array\n\t\tfallthrough\n\tcase numbers[length-1] \u003c target:\n\t\t// biggest number \u003c target = there is no target in the array\n\t\treturn -1\n\tcase numbers[length-1] == target:\n\t\t// checking just in case, can save time\n\t\treturn length - 1\n\tcase numbers[0] == target:\n\t\t// checking just in case, can save time\n\t\treturn 0\n\t}\n\n\tleft, right := 0, length-1\n\tfor right \u003e= left {\n\t\t// overflow protection\n\t\tindex := left + (right-left)/2\n\t\tnumber := numbers[index]\n\t\tswitch {\n\t\tcase number == target:\n\t\t\t// found the target\n\t\t\treturn index\n\t\tcase number \u003e target:\n\t\t\t// array is in the ascending order, the number is bigger\n\t\t\t// -\u003e the target is to the left -\u003e discard right\n\t\t\tright = index - 1\n\t\tcase number \u003c target:\n\t\t\t// array is in the ascending order, the number is smaller\n\t\t\t// -\u003e the target is to the right -\u003e discard left\n\t\t\tleft = index + 1\n\t\t}\n\t}\n\t// search space is empty, there is no target\n\treturn -1\n}\n",
      "title": "Binary Search",
      "url": "/submissions/detail/691642817/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651502044,
      "status": 10,
      "runtime": "64 ms",
      "is_pending": "Not Pending",
      "memory": "6.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 691613273,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1584,
      "title_slug": "average-salary-excluding-the-minimum-and-maximum-salary",
      "code": "\nfunc average(salary []int) float64 {\n\tlength := len(salary)\n\thighest, lowest := math.MinInt, math.MaxInt\n\tresult := 0\n\tfor _, number := range salary {\n\t\tresult += number\n\t\tif number \u003e highest {\n\t\t\thighest = number\n\t\t}\n\t\tif number \u003c lowest {\n\t\t\tlowest = number\n\t\t}\n\t}\n\treturn float64(result-highest-lowest) / float64(length-2)\n}\n",
      "title": "Average Salary Excluding the Minimum and Maximum Salary",
      "url": "/submissions/detail/691613273/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651498535,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "2 MB",
      "compare_result": "1111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 691609936,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1630,
      "title_slug": "count-odd-numbers-in-an-interval-range",
      "code": "\nfunc countOdds(low int, high int) int {\n\tlow_even, high_even, half := (low\u00261) == 0, (high\u00261) == 0, (high-low)/2\n\tif low_even \u0026\u0026 high_even  {\n\t\treturn half\n\t}\n\treturn half + 1\n}",
      "title": "Count Odd Numbers in an Interval Range",
      "url": "/submissions/detail/691609936/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651498129,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "1.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 691609517,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1630,
      "title_slug": "count-odd-numbers-in-an-interval-range",
      "code": "\nfunc countOdds(low int, high int) int {\n\tif low == 0 {\n\t\treturn high / 2\n\t} else if high == 0 {\n\t\treturn low / 2\n\t}\n\tlow_even, high_even, half := (low\u00261) == 0, (high\u00261) == 0, (high-low)/2\n\tif low_even \u0026\u0026 high_even  {\n\t\treturn half\n\t}\n\treturn half + 1\n}",
      "title": "Count Odd Numbers in an Interval Range",
      "url": "/submissions/detail/691609517/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651498079,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111011111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692736039,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1018,
      "title_slug": "largest-perimeter-triangle",
      "code": "\nfunc largestPerimeter(numbers []int) int {\n\tsort.Ints(numbers)\n\tfor index := len(numbers) - 1; index \u003e 1; index-- {\n\t\tcurrent, sum_previous := numbers[index], numbers[index-1]+numbers[index-2]\n\t\tif current \u003e= sum_previous {\n\t\t\tcontinue\n\t\t}\n\t\treturn current + sum_previous\n\t}\n\treturn 0\n}",
      "title": "Largest Perimeter Triangle",
      "url": "/submissions/detail/692736039/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651635568,
      "status": 10,
      "runtime": "57 ms",
      "is_pending": "Not Pending",
      "memory": "6.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692735753,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 1018,
      "title_slug": "largest-perimeter-triangle",
      "code": "\nfunc largestPerimeter(numbers []int) int {\n\tsort.Ints(numbers)\n\tfor index := len(numbers) - 1; index \u003e= 0; index-- {\n\t\tcurrent, sum_previous := numbers[index], numbers[index-1]+numbers[index-2]\n\t\tif current \u003e= sum_previous {\n\t\t\tcontinue\n\t\t}\n\t\treturn current + sum_previous\n\t}\n\treturn 0\n}",
      "title": "Largest Perimeter Triangle",
      "url": "/submissions/detail/692735753/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651635533,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "100000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 692728978,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1798,
      "title_slug": "max-number-of-k-sum-pairs",
      "code": "\nfunc maxOperations(numbers []int, sum int) int {\n\tcount, previous := 0, make(map[int]int, len(numbers))\n\tfor _, current := range numbers {\n\t\ttarget := sum - current\n\t\ttarget_unmatched, target_occured := previous[target]\n\t\t// if the current number has not occured before, then it is not in the map\n\t\t// -\u003e it needs to be initialized\n\t\tif _, current_occured := previous[current]; !current_occured {\n\t\t\tprevious[current] = 0\n\t\t}\n\t\t// number of duplicates of the current number has increased\n\t\tprevious[current]++\n\t\tswitch {\n\t\tcase target_occured \u0026\u0026 target_unmatched == 0:\n\t\t\t// the target has occured before but there are no unmatched duplicates\n\t\t\tfallthrough\n\t\tcase !target_occured:\n\t\t\t// in order to get the sum we need the target, but it has not appeared yet\n\t\t\tcontinue\n\t\tcase target_occured \u0026\u0026 target_unmatched \u003e 0:\n\t\t\t// the target has appeared before and there are some unmached duplicates left\n\t\t\t// -\u003e removing the current number and the target from possible matches\n\t\t\tprevious[current]--\n\t\t\tprevious[target]--\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n",
      "title": "Max Number of K-Sum Pairs",
      "url": "/submissions/detail/692728978/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651634783,
      "status": 10,
      "runtime": "206 ms",
      "is_pending": "Not Pending",
      "memory": "13 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692727638,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1798,
      "title_slug": "max-number-of-k-sum-pairs",
      "code": "\nfunc maxOperations(numbers []int, sum int) int {\n\tcount, previous := 0, make(map[int]int, len(numbers))\n\tfor _, current := range numbers {\n\t\tindex_target := sum - current\n\t\ttarget_unmatched, target_occured := previous[index_target]\n\t\t// if the current number has not occured before, then it is not in the map\n\t\t// -\u003e it needs to be initialized\n\t\tif _, current_occured := previous[current]; !current_occured {\n\t\t\tprevious[current] = 0\n\t\t}\n\t\t// number of duplicates of the current number has increased\n\t\tprevious[current]++\n\t\tswitch {\n\t\tcase !target_occured:\n\t\t\t// in order to get the sum we need the target, but it has not appeared yet\n\t\t\tcontinue\n\t\tcase target_occured \u0026\u0026 target_unmatched \u003e 0:\n\t\t\t// the target has appeared before and there are some unmached duplicates left\n\t\t\t// -\u003e removing the current number and the target from possible matches\n\t\t\tprevious[current]--\n\t\t\tprevious[index_target]--\n\t\t\tcount++\n\t\tcase target_occured \u0026\u0026 target_unmatched == 0:\n\t\t\t// the target has occured before but there are not unmatched duplicates\n\t\t\t// -\u003e adding the current number to matches\n\t\t\tprevious[current]++\n\t\t}\n\t}\n\treturn count\n}\n",
      "title": "Max Number of K-Sum Pairs",
      "url": "/submissions/detail/692727638/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651634638,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111110100100100101000101110001010000000011110",
      "flag_type": 1
    },
    {
      "id": 692713623,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1406,
      "title_slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
      "code": "func subtractProductAndSum(number int) int {\n\tfist_digit := number % 10\n\tfactorial, sum := fist_digit, fist_digit\n\tnumber /= 10\n\tfor number \u003e 0 {\n\t\tdigit := number % 10\n\t\tfactorial *= digit\n\t\tsum += digit\n\t\tnumber /= 10\n\t}\n\treturn factorial - sum\n}\n",
      "title": "Subtract the Product and Sum of Digits of an Integer",
      "url": "/submissions/detail/692713623/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651633074,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "1.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692709119,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 191,
      "title_slug": "number-of-1-bits",
      "code": "\nfunc hammingWeight(number uint32) (result int) {\n\tfor number \u003e 0 {\n\t\tif number\u00261 != 0 {\n\t\t\tresult++\n\t\t}\n\t\tnumber \u003e\u003e= 1\n\t}\n\treturn\n}\n",
      "title": "Number of 1 Bits",
      "url": "/submissions/detail/692709119/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651632550,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 692383619,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 882,
      "title_slug": "peak-index-in-a-mountain-array",
      "code": "\nfunc peakIndexInMountainArray(array []int) int {\n\tleft, right := 0, len(array)-1\n\tfor right \u003e left {\n\t\t// overflow protection\n\t\tindex := left + (right-left)/2\n\t\t// next element is bigger -\u003e top is to the right -\u003e discard left\n\t\tif array[index+1] \u003e array[index] {\n\t\t\tleft = index + 1\n\t\t\tcontinue\n\t\t}\n\t\t// next element is equal or smaller -\u003e discard right\n\t\t// 'index' could be the answer, so it should not be discarded\n\t\tright = index\n\t}\n\treturn right\n}",
      "title": "Peak Index in a Mountain Array",
      "url": "/submissions/detail/692383619/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651592043,
      "status": 10,
      "runtime": "17 ms",
      "is_pending": "Not Pending",
      "memory": "4.7 MB",
      "compare_result": "11111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692374159,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 882,
      "title_slug": "peak-index-in-a-mountain-array",
      "code": "\nfunc peakIndexInMountainArray(array []int) int {\n\tlength := len(array)\n\tif length == 3 {\n\t\treturn 1\n\t}\n\tleft, right, index_highest, index := 0, length-1, 0, 0\n\tmoving_right := true\n\tfor right \u003e= left {\n\t\t// overflow protection\n\t\tindex = left + (right-left)/2\n\t\thighest := array[index_highest]\n\t\t//fmt.Println(index, highest)\n\t\tnumber := array[index]\n\t\tswitch {\n\t\tcase !moving_right \u0026\u0026 number \u003c highest:\n\t\t\t// number is smaller and we are moving to the left\n\t\t\t// -\u003e discard left, switch direction\n\t\t\tmoving_right = true\n\t\t\tleft = index + 1\n\t\tcase moving_right \u0026\u0026 number \u003e= highest:\n\t\t\t// number is bigger and we are moving to the right -\u003e discard left\n\t\t\tleft = index + 1\n\t\t\tindex_highest = index\n\t\tcase moving_right \u0026\u0026 number \u003c highest:\n\t\t\t// number is smaller and we are moving to the right\n\t\t\t// -\u003e discard right, switch direction\n\t\t\tmoving_right = false\n\t\t\tright = index - 1\n\t\tcase !moving_right \u0026\u0026 number \u003e= highest:\n\t\t\t// number is bigger and we are moving to the left -\u003e discard right\n\t\t\tright = index - 1\n\t\t\tindex_highest = index\n\t\t}\n\t}\n\treturn index_highest\n}",
      "title": "Peak Index in a Mountain Array",
      "url": "/submissions/detail/692374159/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651591015,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11110101000001000100110001001000000",
      "flag_type": 1
    },
    {
      "id": 692355461,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 35,
      "title_slug": "search-insert-position",
      "code": "func searchInsert(numbers []int, target int) int {\n\t// checking edge cases\n\tlength := len(numbers)\n\tif numbers[0] == target {\n\t\treturn 0\n\t} else if numbers[length-1] == target {\n\t\treturn length - 1\n\t}\n\tleft, right, index, was_bigger := 0, length-1, 0, false\n\tfor right \u003e= left {\n\t\t// overflow protection\n\t\tindex = left + (right-left)/2\n\t\tnumber := numbers[index]\n\t\t//fmt.Println(\"index\", index, \"left\", left, \"right\", right)\n\t\tswitch {\n\t\tcase number == target:\n\t\t\t// found the target\n\t\t\treturn index\n\t\tcase number \u003e target:\n\t\t\t// the number is bigger -\u003e the target is to the left -\u003e discard right\n\t\t\tright = index - 1\n\t\t\twas_bigger = true\n\t\tcase number \u003c target:\n\t\t\t// the number is smaller -\u003e the target is to the right -\u003e discard left\n\t\t\tleft = index + 1\n\t\t\twas_bigger = false\n\t\t}\n\t}\n\t// the target is not in the array\n\n\t// the last number was bigger -\u003e target should be to the left\n\tif was_bigger {\n\t\treturn index\n\t}\n\t// the last number was smaller -\u003e target should be to the right\n\treturn index + 1\n}\n",
      "title": "Search Insert Position",
      "url": "/submissions/detail/692355461/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651589068,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692352888,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 189,
      "title_slug": "rotate-array",
      "code": "\nfunc rotate(numbers []int, steps int) {\n\tlength := len(numbers)\n\t// removing unnecessary steps\n\tif steps \u003e= length {\n\t\tsteps %= length\n\t}\n\t// checking edge cases\n\tif length == 1 || steps == 0 {\n\t\treturn\n\t}\n\tresults := make([]int, length)\n\tfor index, number := range numbers {\n\t\tresults[(index+steps)%length] = number\n\t}\n\tcopy(numbers, results)\n}",
      "title": "Rotate Array",
      "url": "/submissions/detail/692352888/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651588797,
      "status": 10,
      "runtime": "79 ms",
      "is_pending": "Not Pending",
      "memory": "8.6 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692284664,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 189,
      "title_slug": "rotate-array",
      "code": "\nfunc rotate(numbers []int, steps int) {\n\tlength := len(numbers)\n\t// removing unnecessary steps\n\tif steps \u003e= length {\n\t\tsteps %= length\n\t}\n\t// checking edge cases\n\tif length == 1 || steps == 0 {\n\t\treturn\n\t}\n\tremainder, rotation_start := make([]int, steps), length-steps\n\t// copy everything that needs to be shifted to another array\n\tcopy(remainder, numbers[rotation_start:])\n\t// move everything to the right\n\tcopy(numbers[steps:], numbers[0:rotation_start])\n\t// move shifted elements to the beginning\n\tcopy(numbers[0:steps], remainder)\n}\n",
      "title": "Rotate Array",
      "url": "/submissions/detail/692284664/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651580931,
      "status": 10,
      "runtime": "57 ms",
      "is_pending": "Not Pending",
      "memory": "9.1 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692280620,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 189,
      "title_slug": "rotate-array",
      "code": "\nfunc rotate(numbers []int, steps int) {\n\tlength := len(numbers)\n\t// checking edge cases\n\tif length == 1 || steps == 0 {\n\t\treturn\n\t}\n\tremainder, rotation_start := make([]int, steps), length-steps\n\t// copy everything that needs to be shifted to another array\n\tcopy(remainder, numbers[rotation_start:])\n\t// move everything to the right\n\tcopy(numbers[steps:], numbers[0:rotation_start])\n\t// move shifted elements to the beginning\n    copy(numbers[0:steps], remainder)\n}",
      "title": "Rotate Array",
      "url": "/submissions/detail/692280620/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651580414,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 692275599,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1019,
      "title_slug": "squares-of-a-sorted-array",
      "code": "func sortedSquares(numbers []int) []int {\n\tlength := len(numbers)\n\tif length == 0 || length == 1 {\n\t\treturn square(numbers, false)\n\t}\n\tnegativesIndex := -1\n\tfor index, number := range numbers {\n\t\tif number \u003e= 0 {\n\t\t\tnegativesIndex = index\n\t\t\tbreak\n\t\t}\n\t}\n\tif negativesIndex == 0 || negativesIndex == -1 {\n\t\treturn square(numbers, negativesIndex == -1)\n\t}\n//\tfmt.Println(\"negativesIndex\", negativesIndex)\n\tresult, resultIndex, negativesIndex := make([]int, length), 0, negativesIndex-1\n\tfor positivesIndex := negativesIndex + 1; resultIndex \u003c length; positivesIndex++ {\n\t\tpositiveOverflow := positivesIndex \u003e= length\n\t\tfor {\n\t\t\tif negativesIndex \u003c 0 || resultIndex \u003e= length {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif !positiveOverflow \u0026\u0026 numbers[negativesIndex]*-1 \u003e numbers[positivesIndex] {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tresult[resultIndex] = numbers[negativesIndex]\n\t\t\tresultIndex++\n//\t\t\tfmt.Println(\"negative\", negativesIndex, resultIndex, numbers[negativesIndex], result, numbers)\n\t\t\tnegativesIndex--\n\t\t}\n\t\tif resultIndex \u003c length \u0026\u0026 !positiveOverflow {\n//\t\t\tfmt.Println(\"positivesIndex\", positivesIndex, resultIndex, numbers[positivesIndex], result, numbers)\n\t\t\tresult[resultIndex] = numbers[positivesIndex]\n\t\t\tresultIndex++\n\t\t}\n\t}\n\treturn square(result, false)\n}\n\nfunc square(array []int, reverse bool) []int {\n\tif reverse {\n\t\tlength := len(array)\n\t\treversed := make([]int, length)\n\t\tfor index := length - 1; index \u003e= 0; index-- {\n\t\t\treversed[length-index-1] = array[index] * array[index]\n\t\t}\n\t\treturn reversed\n\t} else {\n\t\tfor index, number := range array {\n\t\t\tarray[index] = number * number\n\t\t}\n\t\treturn array\n\t}\n}\n",
      "title": "Squares of a Sorted Array",
      "url": "/submissions/detail/692275599/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651579732,
      "status": 10,
      "runtime": "26 ms",
      "is_pending": "Not Pending",
      "memory": "7.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692273896,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1019,
      "title_slug": "squares-of-a-sorted-array",
      "code": "\nfunc sortedSquares(numbers []int) []int {\n\tlength := len(numbers)\n\tswitch length {\n\tcase 0:\n\t\treturn numbers\n\tcase 1:\n\t\treturn []int{numbers[0] * numbers[0]}\n\t}\n\tindex_left, index_right := 0, length-1\n\tresults := make([]int, length)\n\tfor index := index_right; index_left \u003c= index_right; index-- {\n\t\tleft_square := numbers[index_left] * numbers[index_left]\n\t\tright_square := numbers[index_right] * numbers[index_right]\n\t\tif right_square \u003e left_square {\n\t\t\tresults[index] = right_square\n\t\t\tindex_right--\n\t\t\tcontinue\n\t\t}\n\t\tresults[index] = left_square\n\t\tindex_left++\n\t}\n\treturn results\n}\n",
      "title": "Squares of a Sorted Array",
      "url": "/submissions/detail/692273896/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651579502,
      "status": 10,
      "runtime": "60 ms",
      "is_pending": "Not Pending",
      "memory": "7.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692228036,
      "status_display": "Output Limit Exceeded",
      "lang": "golang",
      "question_id": 1019,
      "title_slug": "squares-of-a-sorted-array",
      "code": "\nimport \"fmt\"\n\nfunc sortedSquares(numbers []int) []int {\n\tlength := len(numbers)\n\tif length == 0 || length == 1 {\n\t\treturn square(numbers, false)\n\t}\n\tnegativesIndex := -1\n\tfor index, number := range numbers {\n\t\tif number \u003e= 0 {\n\t\t\tnegativesIndex = index\n\t\t\tbreak\n\t\t}\n\t}\n\tif negativesIndex == 0 || negativesIndex == -1 {\n\t\treturn square(numbers, negativesIndex == -1)\n\t}\n\tfmt.Println(\"negativesIndex\", negativesIndex)\n\tresult, resultIndex, negativesIndex := make([]int, length), 0, negativesIndex-1\n\tfor positivesIndex := negativesIndex + 1; resultIndex \u003c length; positivesIndex++ {\n\t\tpositiveOverflow := positivesIndex \u003e= length\n\t\tfor {\n\t\t\tif negativesIndex \u003c 0 || resultIndex \u003e= length {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif !positiveOverflow \u0026\u0026 numbers[negativesIndex]*-1 \u003e numbers[positivesIndex] {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tresult[resultIndex] = numbers[negativesIndex]\n\t\t\tresultIndex++\n\t\t\tfmt.Println(\"negative\", negativesIndex, resultIndex, numbers[negativesIndex], result, numbers)\n\t\t\tnegativesIndex--\n\t\t}\n\t\tif resultIndex \u003c length \u0026\u0026 !positiveOverflow {\n\t\t\tfmt.Println(\"positivesIndex\", positivesIndex, resultIndex, numbers[positivesIndex], result, numbers)\n\t\t\tresult[resultIndex] = numbers[positivesIndex]\n\t\t\tresultIndex++\n\t\t}\n\t}\n\treturn square(result, false)\n}\n\nfunc square(array []int, reverse bool) []int {\n\tif reverse {\n\t\tlength := len(array)\n\t\treversed := make([]int, length)\n\t\tfor index := length - 1; index \u003e= 0; index-- {\n\t\t\treversed[length-index-1] = array[index] * array[index]\n\t\t}\n\t\treturn reversed\n\t} else {\n\t\tfor index, number := range array {\n\t\t\tarray[index] = number * number\n\t\t}\n\t\treturn array\n\t}\n}\n",
      "title": "Squares of a Sorted Array",
      "url": "/submissions/detail/692228036/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651573253,
      "status": 13,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000",
      "flag_type": 1
    },
    {
      "id": 692226609,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "\nfunc findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\t// checking edge cases\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\t// initializing to MaxInt because zeros will impact future sorting\n\tfor index := range result {\n\t\tresult[index] = math.MaxInt\n\t}\n\tindex_sort_start, index_sort_end := length, length\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n//\t\tfmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t\t// current is not sorted -\u003e from numbers\n\t\t// previous is sorted -\u003e from result\n\t\tcurrent, previous := numbers[index], result[index-1]\n\t\t// just push the current number in the result array because if it is\n\t\t// bigger\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tcontinue\n\t\t}\n\t\t// current number is not sorted -\u003e moving the end index\n\t\tindex_sort_end = index + 1\n\t\t// current \u003c previous -\u003e find the number bigger than the current\n\t\t//\n\t\t// the current number is smaller than the starting number of the unsorted subarray\n\t\t// (or the starting index is not set)\n\t\t// -\u003e start index is invalid, finding new start index in numbers\n\t\tif index_sort_start == length || current \u003c result[index_sort_start] {\n\t\t\t// insert the number in the correct place and move index_sort_start\n\t\t\t// to the correct place\n\t\t\tif index_sort_start == length {\n\t\t\t\t// index_sort_start is not set -\u003e setting to the last sorted number\n\t\t\t\tindex_sort_start = index - 1\n\t\t\t}\n\t\t\tindex_sort_start = insert_smaller(result, current, index_sort_start, 0)\n\t\t\tcontinue\n\t\t}\n\t\t// the current number is bigger than the starting number of the unsorted\n\t\t// subarray, so it should be placed inside of it\n\t\tinsert_smaller(result, current, index, index_sort_start)\n\t\t// set start index (if not already set)\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index - 1\n\t\t}\n\t}\n//\tfmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t// return length of the sorted subarray\n\treturn index_sort_end - index_sort_start\n}\n\nfunc insert_smaller(numbers []int, target int, index_start int, index_end int) int {\n\tindex_result := index_end\n\tfor index := index_start; index \u003e= index_end; index-- {\n\t\tif target \u003e= numbers[index] {\n\t\t\t// target is bigger -\u003e it should be placed after this index\n\t\t\tindex_result = index + 1\n\t\t\tbreak\n\t\t}\n\t}\n//\tfmt.Println(\"index for\", target, \"-\", index_result)\n\t// target should be placed after index_result, so move everything after\n\t// it to the right and insert the current number\n\t// if index_result is the last item, then just push it\n\tcopy(numbers[index_result+1:], numbers[index_result:])\n\tnumbers[index_result] = target\n\treturn index_result\n}\n",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692226609/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651573060,
      "status": 10,
      "runtime": "152 ms",
      "is_pending": "Not Pending",
      "memory": "6.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692226479,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "\nfunc findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\t// checking edge cases\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\t// initializing to MaxInt because zeros will impact future sorting\n\tfor index := range result {\n\t\tresult[index] = math.MaxInt\n\t}\n\tindex_sort_start, index_sort_end := length, length\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n//\t\tfmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t\t// current is not sorted -\u003e from numbers\n\t\t// previous is sorted -\u003e from result\n\t\tcurrent, previous := numbers[index], result[index-1]\n\t\t// just push the current number in the result array because if it is\n\t\t// bigger\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tcontinue\n\t\t}\n\t\t// current number is not sorted -\u003e moving the end index\n\t\tindex_sort_end = index + 1\n\t\t// current \u003c previous -\u003e find the number bigger than the current\n\t\t//\n\t\t// the current number is smaller than the starting number of the unsorted subarray\n\t\t// (or the starting index is not set)\n\t\t// -\u003e start index is invalid, finding new start index in numbers\n\t\tif index_sort_start == length || current \u003c result[index_sort_start] {\n\t\t\t// insert the number in the correct place and move index_sort_start\n\t\t\t// to the correct place\n\t\t\tif index_sort_start == length {\n\t\t\t\t// index_sort_start is not set -\u003e setting to the last sorted number\n\t\t\t\tindex_sort_start = index - 1\n\t\t\t}\n\t\t\tindex_sort_start = insert_smaller(result, current, index_sort_start, 0)\n\t\t\tcontinue\n\t\t}\n\t\t// the current number is bigger than the starting number of the unsorted\n\t\t// subarray, so it should be placed inside of it\n\t\tinsert_smaller(result, current, index, index_sort_start)\n\t\t// set start index (if not already set)\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index - 1\n\t\t}\n\t}\n//\tfmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t// return length of the sorted subarray\n\treturn index_sort_end - index_sort_start\n}\n\nfunc insert_smaller(numbers []int, target int, index_start int, index_end int) int {\n\tindex_result := index_end\n\tfor index := index_start; index \u003e= index_end; index-- {\n\t\tif target \u003e= numbers[index] {\n\t\t\t// target is bigger -\u003e it should be placed after this index\n\t\t\tindex_result = index + 1\n\t\t\tbreak\n\t\t}\n\t}\n//\tfmt.Println(\"index for\", target, \"-\", index_result)\n\t// target should be placed after index_result, so move everything after\n\t// it to the right and insert the current number\n\t// if index_result is the last item, then just push it\n\tcopy(numbers[index_result+1:], numbers[index_result:])\n\tnumbers[index_result] = target\n\treturn index_result\n}\n",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692226479/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651573041,
      "status": 10,
      "runtime": "159 ms",
      "is_pending": "Not Pending",
      "memory": "6.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692226115,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "\nfunc findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\t// checking edge cases\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\t// initializing to MaxInt because zeros will impact future sorting\n\tfor index := range result {\n\t\tresult[index] = math.MaxInt\n\t}\n\tindex_sort_start, index_sort_end, end_toggle := length, length, false\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n\t//\tfmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end, end_toggle)\n\t\t// current is not sorted -\u003e from numbers\n\t\t// previous is sorted -\u003e from result\n\t\tcurrent, previous := numbers[index], result[index-1]\n\t\t// just push the current number in the result array because if it is\n\t\t// bigger\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tcontinue\n\t\t}\n\t\t// current number is not sorted -\u003e moving the end index\n\t\tindex_sort_end = index+1\n\t\t// current \u003c previous -\u003e find the number bigger than the current\n\t\t//\n\t\t// the current number is smaller than the starting number of the unsorted subarray\n\t\t// (or the starting index is not set)\n\t\t// -\u003e start index is invalid, finding new start index in numbers\n\t\tif index_sort_start == length || current \u003c result[index_sort_start] {\n\t\t\t// insert the number in the correct place and move index_sort_start\n\t\t\t// to the correct place\n\t\t\tif index_sort_start == length {\n\t\t\t\t// index_sort_start is not set -\u003e setting to the last sorted number\n\t\t\t\tindex_sort_start = index - 1\n\t\t\t}\n\t\t\tindex_sort_start = insert_smaller(result, current, index_sort_start, 0)\n\t\t\tcontinue\n\t\t}\n\t\t// the current number is bigger than the starting number of the unsorted\n\t\t// subarray, so it should be placed inside of it\n\t\tinsert_smaller(result, current, index, index_sort_start)\n\t\t// set start index (if not already set)\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index - 1\n\t\t}\n\t}\n\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t// return length of the sorted subarray\n\treturn index_sort_end - index_sort_start\n}\n\nfunc insert_smaller(numbers []int, target int, index_start int, index_end int) int {\n\t//fmt.Println(\"finding index for\", target, \"indexes\", index_start, \"-\u003e\", index_end)\n\tindex_result := index_end\n\tfor index := index_start; index \u003e= index_end; index-- {\n\t\tif target \u003e= numbers[index] {\n\t\t\t// target is bigger -\u003e it should be placed after this index\n\t\t\tindex_result = index + 1\n\t\t\tbreak\n\t\t}\n\t}\n\t//fmt.Println(\"index for\", target, \"-\", index_result)\n\t// target should be placed after index_result, so move everything after\n\t// it to the right and insert the current number\n\t// if index_result is the last item, then just push it\n\tcopy(numbers[index_result+1:], numbers[index_result:])\n\tnumbers[index_result] = target\n\treturn index_result\n}\n",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692226115/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651572991,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 692224373,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "func findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\t// checking edge cases\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\t// initializing to MaxInt because zeros will impact future sorting\n\tfor index := range result {\n\t\tresult[index] = math.MaxInt\n\t}\n\tindex_sort_start, index_sort_end, end_toggle := length, length, false\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n\t\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end, end_toggle)\n\t\t// current is not sorted -\u003e from numbers\n\t\t// previous is sorted -\u003e from result\n\t\tcurrent, previous := numbers[index], result[index-1]\n\t\t// if the current number is bigger and the previous number was sorted\n\t\t// (end_toggle is on), then, probably, the current index is the end of\n\t\t// the sorted subarray\n\t\tif current \u003e= previous \u0026\u0026 end_toggle {\n\t\t\tindex_sort_end = index\n\t\t\tend_toggle = false\n\t\t}\n\t\t// just push the current number in the result array because if it is\n\t\t// bigger\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tcontinue\n\t\t}\n\t\t// toggle to move index_sort_end\n\t\t// it needs to move because the current number will be sorted\n\t\tend_toggle = true\n\t\t// current \u003c previous -\u003e find the number bigger than the current\n\t\t//\n\t\t// the current number is smaller than the starting number of the unsorted subarray\n\t\t// (or the starting index is not set)\n\t\t// -\u003e start index is invalid, finding new start index in numbers\n\t\tif index_sort_start == length || current \u003c result[index_sort_start] {\n\t\t\t// insert the number in the correct place and move index_sort_start\n\t\t\t// to the correct place\n\t\t\tif index_sort_start == length {\n\t\t\t\t// index_sort_start is not set -\u003e setting to the last sorted number\n\t\t\t\tindex_sort_start = index - 1\n\t\t\t}\n\t\t\tindex_sort_start = insert_smaller(result, current, index_sort_start, 0)\n\t\t\tcontinue\n\t\t}\n\t\t// the current number is bigger than the starting number of the unsorted\n\t\t// subarray, so it should be placed inside of it\n\t\tinsert_smaller(result, current, index, index_sort_start)\n\t\t// set start index (if not already set)\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index - 1\n\t\t}\n\t}\n\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t// return length of the sorted subarray\n\treturn index_sort_end - index_sort_start\n}\n\nfunc insert_smaller(numbers []int, target int, index_start int, index_end int) int {\n\t//fmt.Println(\"finding index for\", target, \"indexes\", index_start, \"-\u003e\", index_end)\n\tindex_result := index_end\n\tfor index := index_start; index \u003e= index_end; index-- {\n\t\tif target \u003e= numbers[index] {\n\t\t\t// target is bigger -\u003e it should be placed after this index\n\t\t\tindex_result = index + 1\n\t\t\tbreak\n\t\t}\n\t}\n\t//fmt.Println(\"index for\", target, \"-\", index_result)\n\t// target should be placed after index_result, so move everything after\n\t// it to the right and insert the current number\n\t// if index_result is the last item, then just push it\n\tcopy(numbers[index_result+1:], numbers[index_result:])\n\tnumbers[index_result] = target\n\treturn index_result\n}\n",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692224373/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651572747,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111101111101011111111101000101111101011111111101000101000101011111111101000101000101000111111111111111111111111111111110111110111111111111111111110111011111111111111111101111111111111111111010101101111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692215671,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 581,
      "title_slug": "shortest-unsorted-continuous-subarray",
      "code": "func findUnsortedSubarray(numbers []int) int {\n\tlength := len(numbers)\n\t// checking edge cases\n\tif length == 1 {\n\t\treturn 0\n\t}\n\tresult := make([]int, length)\n\t// initializing to MaxInt because zeros will impact future sorting\n\tfor index := range result {\n\t\tresult[index] = math.MaxInt\n\t}\n\tindex_sort_start, index_sort_end, end_toggle := length, length, false\n\tresult[0] = numbers[0]\n\tfor index := 1; index \u003c length; index++ {\n\t\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end, end_toggle)\n\t\t// current is not sorted -\u003e from numbers\n\t\t// previous is sorted -\u003e from result\n\t\tcurrent, previous := numbers[index], result[index-1]\n\t\t// if the current number is bigger and the previous number was sorted\n\t\t// (end_toggle is on), then, probably, the current index is the end of\n\t\t// the sorted subarray\n\t\tif current \u003e= previous \u0026\u0026 end_toggle {\n\t\t\tindex_sort_end = index\n\t\t\tend_toggle = false\n\t\t}\n\t\t// just push the current number in the result array because if it is\n\t\t// bigger\n\t\tif current \u003e= previous {\n\t\t\tresult[index] = current\n\t\t\tcontinue\n\t\t}\n\t\t// toggle to move index_sort_end\n\t\t// it needs to move because the current number will be sorted\n\t\tend_toggle = true\n\t\t// current \u003c previous -\u003e find the number bigger than the current\n\t\t//\n\t\t// the current number is smaller than the starting number of the unsorted subarray\n\t\t// (or the starting index is not set)\n\t\t// -\u003e start index is invalid, finding new start index in numbers\n\t\tif index_sort_start == length || current \u003c result[index_sort_start] {\n\t\t\t// insert the number in the correct place and move index_sort_start\n\t\t\t// to the correct place\n\t\t\tif index_sort_start == length {\n\t\t\t\tindex_sort_start = index\n\t\t\t}\n\t\t\tindex_sort_start = insert_smaller(result, current, index_sort_start, 0)\n\t\t\tcontinue\n\t\t}\n\t\t// the current number is bigger than the starting number of the unsorted\n\t\t// subarray, so it should be placed inside of it\n\t\tinsert_smaller(result, current, index, index_sort_start)\n\t\t// set start index (if not already set)\n\t\tif index \u003c index_sort_start {\n\t\t\tindex_sort_start = index - 1\n\t\t}\n\t}\n\t//fmt.Println(result, index_sort_start, \"-\u003e\", index_sort_end)\n\t// return length of the sorted subarray\n\treturn index_sort_end - index_sort_start\n}\n\nfunc insert_smaller(numbers []int, target int, index_start int, index_end int) int {\n\tindex_result := index_end\n\tfor index := index_start; index \u003e= index_end; index-- {\n\t\tif numbers[index] \u003c= target {\n\t\t\tindex_result = index + 1\n\t\t}\n\t}\n\t//fmt.Println(\"index for\", target, \"-\", index_result)\n\t// target should be placed after index_result, so move everything after\n\t// it to the right and insert the current number\n\t// if index_result is the last item, then just push it\n\tcopy(numbers[index_result+1:], numbers[index_result:])\n\tnumbers[index_result] = target\n\treturn index_result\n}\n",
      "title": "Shortest Unsorted Continuous Subarray",
      "url": "/submissions/detail/692215671/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651571559,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111100000101111101011111111101000101111101011111111101000101000101011111111101000101000101000111111111111111111111111111111100001110111000111001111001100111001001111110010000101000000001001000111010101100000000010000100010000000000000000000000000000000000000010000000000000010000000000000000000",
      "flag_type": 1
    },
    {
      "id": 693606840,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 167,
      "title_slug": "two-sum-ii-input-array-is-sorted",
      "code": "func twoSum(numbers []int, target int) []int {\n\tnumbers_len := len(numbers)\n\tfor index, number := range numbers {\n\t\tfor index_inner := index + 1; index_inner \u003c numbers_len; index_inner++ {\n\t\t\tif numbers[index_inner]+number == target {\n\t\t\t\treturn []int{index + 1, index_inner + 1}\n\t\t\t}\n\t\t}\n\t}\n\treturn []int{}\n}",
      "title": "Two Sum II - Input Array Is Sorted",
      "url": "/submissions/detail/693606840/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651747427,
      "status": 10,
      "runtime": "417 ms",
      "is_pending": "Not Pending",
      "memory": "5.5 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 693605291,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "func moveZeroes(numbers []int) {\n\tindex_zero := -1\n\t// sliding window algorithm\n\tfor index, number := range numbers {\n\t\t// if index_zero is not set, then the first zero is index_zero\n\t\tif index_zero == -1 \u0026\u0026 number == 0 {\n\t\t\tindex_zero = index\n\t\t}\n\t\t// there is no need to move numbers if there were no zeros before\n\t\t// there is no need to move zeros\n\t\tif index_zero == -1 || number == 0 {\n\t\t\tcontinue\n\t\t}\n\t\t// after some zeros we encounter a non-zero number\n\t\t// moving that number to the beginning of zeros\n\t\tnumbers[index_zero] = number\n\t\t// current number becomes zero\n\t\tnumbers[index] = 0\n\t\t// moving the index\n\t\tindex_zero++\n\t}\n}",
      "title": "Move Zeroes",
      "url": "/submissions/detail/693605291/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651747169,
      "status": 10,
      "runtime": "36 ms",
      "is_pending": "Not Pending",
      "memory": "8.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 693605143,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "func moveZeroes(nums []int)  {\n    count:=0\n    for i:=0; i\u003clen(nums);i++{\n        if nums[i] == 0{\n            count++\n        }else{\n            nums[i-count]=nums[i]\n        }\n    }\n    for count\u003e0{\n        nums[len(nums)-count] = 0\n        count--\n    }\n    \n    \n}",
      "title": "Move Zeroes",
      "url": "/submissions/detail/693605143/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651747146,
      "status": 10,
      "runtime": "32 ms",
      "is_pending": "Not Pending",
      "memory": "6.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 693604925,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "func moveZeroes(nums []int)  {\n    \tif len(nums) \u003c 2 {\n\t\treturn\n\t}\n\n\tfor z, p := 0, 1; p \u003c len(nums) \u0026\u0026 z \u003c len(nums); {\n\t\tif nums[z] == 0 \u0026\u0026 nums[p] != 0 {\n\t\t\tif p \u003e z {\n\t\t\t\tnums[z], nums[p] = nums[p], nums[z]\n\t\t\t\tz++\n\t\t\t}\n\t\t\tp = z+1\n\t\t} else {\n\t\t\tif nums[z] != 0 {\n\t\t\t\tz++\n\t\t\t}\n\t\t\tif nums[p] == 0 {\n\t\t\t\tp++\n\t\t\t}\n\t\t}\n\t}\n\n}",
      "title": "Move Zeroes",
      "url": "/submissions/detail/693604925/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651747104,
      "status": 10,
      "runtime": "137 ms",
      "is_pending": "Not Pending",
      "memory": "7.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 693603036,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "\nfunc moveZeroes(numbers []int) {\n\tindex_zero := -1\n\t// sliding window algorithm\n\tfor index, number := range numbers {\n\t\t// if index_zero is not set, then the first zero is index_zero\n\t\tif index_zero == -1 \u0026\u0026 number == 0 {\n\t\t\tindex_zero = index\n\t\t}\n\t\t// there is no need to move numbers if there were no zeros before\n\t\t// there is no need to move zeros\n\t\tif index_zero == -1 || number == 0 {\n\t\t\tcontinue\n\t\t}\n\t\t// after some zeros we encounter a non-zero number\n\t\t// moving that number to the beginning of zeros\n\t\tnumbers[index_zero] = number\n\t\t// current number becomes zero\n\t\tnumbers[index] = 0\n\t\t// moving the index\n\t\tindex_zero++\n\t}\n}\n",
      "title": "Move Zeroes",
      "url": "/submissions/detail/693603036/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651746777,
      "status": 10,
      "runtime": "20 ms",
      "is_pending": "Not Pending",
      "memory": "7.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 693602217,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "\n\nfunc moveZeroes(numbers []int) {\n\tindex_zero := -1\n\t// sliding window algorithm\n\tfor index, number := range numbers {\n\t\t// if index_zero is not set, then the first zero is index_zero\n\t\tif index_zero == -1 \u0026\u0026 number == 0 {\n\t\t\tindex_zero = index\n\t\t}\n\t\t// ignore zeros\n\t\tif number == 0 {\n\t\t\tcontinue\n\t\t}\n\t\t// after some zeros we encounter a non-zero number\n\t\t// moving that number to the beginning of zeros\n\t\tnumbers[index_zero] = number\n\t\t// current number becomes zero\n\t\tnumbers[index] = 0\n\t\t// moving the index\n\t\tindex_zero++\n\t}\n}",
      "title": "Move Zeroes",
      "url": "/submissions/detail/693602217/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651746648,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 693596429,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "\nfunc moveZeroes(numbers []int) {\n\t// ensure there are at least two numbers\n\tlength := len(numbers)\n\tif length == 1 {\n\t\treturn\n\t}\n\tresult, index_result := make([]int, length), 0\n\tfor _, number := range numbers {\n\t\tif number == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tresult[index_result] = number\n\t\tindex_result++\n\t}\n\tcopy(numbers, result)\n}",
      "title": "Move Zeroes",
      "url": "/submissions/detail/693596429/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651745691,
      "status": 10,
      "runtime": "26 ms",
      "is_pending": "Not Pending",
      "memory": "6.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 693426224,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 225,
      "title_slug": "implement-stack-using-queues",
      "code": "\ntype MyStack struct{ queue *list.List }\n\nfunc Constructor() MyStack           { return MyStack{\u0026list.List{}} }\nfunc (this *MyStack) Push(value int) { this.queue.PushFront(value) }\nfunc (this *MyStack) Top() int       { return this.queue.Front().Value.(int) }\nfunc (this *MyStack) Empty() bool    { return this.queue.Len() == 0 }\nfunc (this *MyStack) Pop() int {\n\treturn this.queue.Remove(this.queue.Front()).(int)\n}",
      "title": "Implement Stack using Queues",
      "url": "/submissions/detail/693426224/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651723293,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "2 MB",
      "compare_result": "1111111111111111",
      "flag_type": 1
    },
    {
      "id": 692928951,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 121,
      "title_slug": "best-time-to-buy-and-sell-stock",
      "code": "\nfunc maxProfit(prices []int) int {\n\tprofit, index_buy := 0, 0\n\tfor index, price := range prices {\n\t\tif prices[index_buy] \u003e price {\n\t\t\tindex_buy = index\n\t\t}\n\t\tnew_profit := price - prices[index_buy]\n\t\tif new_profit \u003e profit {\n\t\t\tprofit = new_profit\n\t\t}\n\t}\n\treturn profit\n}",
      "title": "Best Time to Buy and Sell Stock",
      "url": "/submissions/detail/692928951/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651659233,
      "status": 10,
      "runtime": "174 ms",
      "is_pending": "Not Pending",
      "memory": "8.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692921329,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 350,
      "title_slug": "intersection-of-two-arrays-ii",
      "code": "\nfunc intersect(numbers_1 []int, numbers_2 []int) (result []int) {\n\t// 0 \u003c= nums1[i], nums2[i] \u003c= 1000\n\tcount := make([]int, 1001)\n\t// counting how many times a number occured in the first array\n\tfor _, number := range numbers_1 {\n\t\tcount[number]++\n\t}\n\tfor _, number := range numbers_2 {\n\t\t// the number did not occur in the first array\n\t\t// -\u003e ignoring it\n\t\tif count[number] \u003c= 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcount[number]--\n\t\tresult = append(result, number)\n\t}\n\treturn\n}",
      "title": "Intersection of Two Arrays II",
      "url": "/submissions/detail/692921329/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651658051,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "2.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692920011,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 350,
      "title_slug": "intersection-of-two-arrays-ii",
      "code": "\nfunc intersect(numbers_1 []int, numbers_2 []int) (result []int) {\n\tcount := make([]int, len(numbers_1)+len(numbers_2)+1)\n\tfor _, number := range numbers_1 {\n\t\tcount[number]++\n\t}\n\tfor _, number := range numbers_2 {\n\t\tif count[number] \u003c= 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcount[number]--\n\t\tresult = append(result, number)\n\t}\n\treturn\n}",
      "title": "Intersection of Two Arrays II",
      "url": "/submissions/detail/692920011/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651657857,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "10000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 692919844,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 350,
      "title_slug": "intersection-of-two-arrays-ii",
      "code": "\nfunc intersect(numbers_1 []int, numbers_2 []int) (result []int) {\n\tcount := make([]int, len(numbers_1)+len(numbers_2))\n\tfor _, number := range numbers_1 {\n\t\tcount[number]++\n\t}\n\tfor _, number := range numbers_2 {\n\t\tif count[number] \u003c= 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcount[number]--\n\t\tresult = append(result, number)\n\t}\n\treturn\n}",
      "title": "Intersection of Two Arrays II",
      "url": "/submissions/detail/692919844/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651657835,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "10000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 692919579,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 350,
      "title_slug": "intersection-of-two-arrays-ii",
      "code": "func intersect(numbers_1 []int, numbers_2 []int) (result []int) {\n\tlength_biggest := len(numbers_1)\n\tif len(numbers_2) \u003e length_biggest {\n\t\tlength_biggest = len(numbers_2)\n\t}\n\tcount := make([]int, length_biggest)\n\tfor _, number := range numbers_1 {\n\t\tcount[number]++\n\t}\n\tfor _, number := range numbers_2 {\n\t\tif count[number] \u003c= 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcount[number]--\n\t\tresult = append(result, number)\n\t}\n\treturn\n}\n",
      "title": "Intersection of Two Arrays II",
      "url": "/submissions/detail/692919579/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651657799,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "10000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 692914276,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 350,
      "title_slug": "intersection-of-two-arrays-ii",
      "code": "\nfunc intersect(numbers_1 []int, numbers_2 []int) []int {\n\tlength_1, length_2 := len(numbers_1), len(numbers_2)\n\tlength_biggest, result := length_1, make([]int, length_1+length_2)\n\tif length_2 \u003e length_1 {\n\t\tlength_biggest = length_2\n\t}\n\toccurences := make(map[int][]int, length_biggest)\n\n\tfor index := 0; index \u003c length_biggest; index++ {\n\t\tif index \u003c length_1 {\n\t\t\tadd_to_occurences(numbers_1[index], 0, occurences)\n\t\t}\n\t\tif index \u003c length_2 {\n\t\t\tadd_to_occurences(numbers_2[index], 1, occurences)\n\t\t}\n\t}\n\tindex := 0\n\tfor number, occurence := range occurences {\n\t\trepeat := occurence[0]\n\t\tif occurence[1] \u003c repeat {\n\t\t\trepeat = occurence[1]\n\t\t}\n\t\tfor ; repeat \u003e 0; repeat-- {\n\t\t\tresult[index] = number\n\t\t\tindex++\n\t\t}\n\t}\n    return result[0 : index]\n}\nfunc add_to_occurences(number int, index int, occurences map[int][]int) {\n\tif _, occured := occurences[number]; !occured {\n\t\toccurences[number] = make([]int, 2)\n\t}\n\toccurences[number][index]++\n}\n",
      "title": "Intersection of Two Arrays II",
      "url": "/submissions/detail/692914276/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651656998,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "3.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692799831,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 88,
      "title_slug": "merge-sorted-array",
      "code": "\nfunc merge(array1 []int, length1 int, array2 []int, length2 int) {\n\tif length2 == 0 {\n\t\treturn\n\t}\n\tif length1 == 0 {\n\t\tfor index, number := range array2 {\n\t\t\tarray1[index] = number\n\t\t}\n\t\treturn\n\t}\n\tindex1, index2, array1Copy := 0, 0, make([]int, length1)\n\tcopy(array1Copy, array1)\n\tfor index := 0; index \u003c length1+length2; index++ {\n\t\tfmt.Println(index, index1, index2, array1, array2)\n\t\tfor index2 \u003c length2 \u0026\u0026 (index1 \u003e= length1 || array2[index2] \u003c= array1Copy[index1]) {\n\t\t\tarray1[index] = array2[index2]\n\t\t\tindex2++\n\t\t\tindex++\n\t\t}\n\t\tif index1 \u003e= length1 {\n\t\t\tcontinue\n\t\t}\n\t\tarray1[index] = array1Copy[index1]\n\t\tindex1++\n\t}\n}\n",
      "title": "Merge Sorted Array",
      "url": "/submissions/detail/692799831/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651642416,
      "status": 10,
      "runtime": "27 ms",
      "is_pending": "Not Pending",
      "memory": "4.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692799105,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "\nfunc twoSum(numbers []int, target int) []int {\n\tnumbers_len := len(numbers)\n\tfor index, number := range numbers {\n\t\tfor index_inner := index + 1; index_inner \u003c numbers_len; index_inner++ {\n\t\t\tif numbers[index_inner]+number == target {\n\t\t\t\treturn []int{index, index_inner}\n\t\t\t}\n\t\t}\n\t}\n\treturn []int{}\n}\n",
      "title": "Two Sum",
      "url": "/submissions/detail/692799105/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651642336,
      "status": 10,
      "runtime": "62 ms",
      "is_pending": "Not Pending",
      "memory": "3.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692799006,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "\nfunc twoSum(numbers []int, target int) []int {\n\tnumbers_len := len(numbers)\n\tfor index, number := range numbers {\n\t\tfor index_inner := index + 1; index_inner \u003c numbers_len; index_inner++ {\n\t\t\tif numbers[index_inner]+number == target {\n\t\t\t\treturn []int{index, index_inner}\n\t\t\t}\n\t\t}\n\t}\n\treturn []int{}\n}\n\nfunc main() {\n\ttwoSum([]int{3, 2, 4}, 6)\n}\n",
      "title": "Two Sum",
      "url": "/submissions/detail/692799006/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651642328,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 692797975,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1486,
      "title_slug": "find-the-distance-value-between-two-arrays",
      "code": "\nfunc findTheDistanceValue(array_1 []int, array_2 []int, target int) int {\n\t// sorting it to use binary search\n\tsort.Ints(array_2)\n\tlength_2, count := len(array_2), 0\n\tfor _, current_1 := range array_1 {\n\t\tleft, right, add_to_count := 0, length_2-1, true\n\t\tfor right \u003e= left {\n\t\t\tindex := left + (right-left)/2\n\t\t\tcurrent_2 := array_2[index]\n\t\t\tif abs(current_1, current_2) \u003c= target {\n\t\t\t\t// current_1 is inside |arr1[i]-arr2[j]| \u003c= d\n\t\t\t\t// -\u003e ignore it\n\t\t\t\tadd_to_count = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tswitch {\n\t\t\tcase current_2 \u003e current_1:\n\t\t\t\t// current_2 is bigger than current_1\n\t\t\t\t// -\u003e all numbers to the right are bigger\n\t\t\t\t// -\u003e discard right, add to count\n\t\t\t\tright = index - 1\n\t\t\tcase current_2 \u003c current_1:\n\t\t\t\t// current_2 is smaller than current_1\n\t\t\t\t// -\u003e all numbers to the left are smaller\n\t\t\t\t// -\u003e discard left, add to count\n\t\t\t\tleft = index + 1\n\t\t\t}\n\t\t}\n\t\tif add_to_count {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc abs(number_1 int, number_2 int) int {\n\tdifference := number_1 - number_2\n\tif difference \u003c 0 {\n\t\treturn difference * -1\n\t}\n\treturn difference\n}\n",
      "title": "Find the Distance Value Between Two Arrays",
      "url": "/submissions/detail/692797975/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651642220,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "3.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692766447,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 367,
      "title_slug": "valid-perfect-square",
      "code": "\nfunc isPerfectSquare(number int) bool {\n\tleft, right := 1, number\n\tfor right \u003e= left {\n\t\tcurrent := left + (right-left)/2\n\t\tsquare := current * current\n\t\tswitch {\n\t\tcase square == number:\n\t\t\t// found the target\n\t\t\treturn true\n\t\tcase square \u003e number:\n\t\t\t// square is bigger -\u003e root is to the left -\u003e discard right\n\t\t\tright = current - 1\n\t\tcase square \u003c number:\n\t\t\t// square is smaller -\u003e root is to the right -\u003e discard left\n\t\t\tleft = current + 1\n\t\t}\n\t}\n\treturn false\n}",
      "title": "Valid Perfect Square",
      "url": "/submissions/detail/692766447/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651638864,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "1.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 692748993,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1888,
      "title_slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
      "code": "func nearestValidPoint(x int, y int, points [][]int) int {\n\tpoint_target, smallest_distance, smallest_index := []int{x, y}, math.MaxInt, -1\n\tfor index, point := range points {\n\t\t// ignore the point if it is not valid\n\t\tif !valid(point_target, point) {\n\t\t\tcontinue\n\t\t}\n\t\tdistance := distance(point_target, point)\n\t\t// ignore the point if its Manhattan distance is bigger\n\t\tif distance \u003e= smallest_distance {\n\t\t\tcontinue\n\t\t}\n\t\t// the distance is smaller, update the index and the distance\n\t\tsmallest_index, smallest_distance = index, distance\n\t}\n\t// there are no valid points\n\tif smallest_index == -1 {\n\t\treturn -1\n\t}\n\treturn smallest_index\n}\n\nfunc valid(point_target []int, point []int) bool {\n\tswitch {\n\tcase point_target[0] == point[0]:\n\t\tfallthrough\n\tcase point_target[1] == point[1]:\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}\n\nfunc distance(point_target []int, point []int) int {\n\treturn abs(point_target[0]-point[0]) + abs(point_target[1]-point[1])\n}\n\nfunc abs(number int) int {\n\tif number \u003c 0 {\n\t\treturn number * -1\n\t}\n\treturn number\n}\n",
      "title": "Find Nearest Point That Has the Same X or Y Coordinate",
      "url": "/submissions/detail/692748993/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651637011,
      "status": 10,
      "runtime": "301 ms",
      "is_pending": "Not Pending",
      "memory": "7.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 694834562,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "\nfunc find132pattern(numbers []int) bool {\n\tlength := len(numbers)\n\tif length \u003c 3 {\n\t\t// if the array doesn't have at least three numbers, it cannot have\n\t\t// '123' pattern\n\t\treturn false\n\t}\n\tlist, third_element := list.List{}, math.MinInt\n\tfor index := length - 1; index \u003e= 0; index-- {\n\t\tcurrent := numbers[index]\n\t\tif current \u003c third_element {\n\t\t\treturn true\n\t\t}\n\t\tfor list.Len() != 0 \u0026\u0026 list.Front().Value.(int) \u003c current {\n\t\t\tthird_element = list.Front().Value.(int)\n\t\t\tlist.Remove(list.Front())\n\t\t}\n\t\tlist.PushFront(current)\n\t}\n\treturn false\n}",
      "title": "132 Pattern",
      "url": "/submissions/detail/694834562/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651920255,
      "status": 10,
      "runtime": "95 ms",
      "is_pending": "Not Pending",
      "memory": "12.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 694834169,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "\nfunc find132pattern(numbers []int) bool {\n\tlength := len(numbers)\n\tif length \u003c 3 {\n\t\t// if the array doesn't have at least three numbers, it cannot have\n\t\t// '123' pattern\n\t\treturn false\n\t}\n\tlist, third_element := list.List{}, math.MinInt\n\tfor index := length - 1; index \u003e= 0; index-- {\n\t\tcurrent := numbers[index]\n\t\tif index \u003c third_element {\n\t\t\treturn true\n\t\t}\n\t\tfor list.Len() != 0 \u0026\u0026 list.Front().Value.(int) \u003c current {\n\t\t\tthird_element = list.Front().Value.(int)\n\t\t\tlist.Remove(list.Front())\n\t\t}\n\t\tlist.PushFront(current)\n\t}\n\treturn false\n}",
      "title": "132 Pattern",
      "url": "/submissions/detail/694834169/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651920198,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111101111011111101111110101111111100111100001100001111111100001100001100000011110101110011111101110101",
      "flag_type": 1
    },
    {
      "id": 694825261,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "\nfunc find132pattern(numbers []int) bool {\n\tlength := len(numbers)\n\tif length \u003c 3 {\n\t\t// if the array doesn't have at least three numbers, it cannot have\n\t\t// '123' pattern\n\t\treturn false\n\t}\n\tfor index := 0; index+2 \u003c length; index++ {\n\t\tfirst, second, third := numbers[index], numbers[index+1], numbers[index+2]\n\t\tif second \u003e first \u0026\u0026 second \u003e third \u0026\u0026 third \u003e first {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}",
      "title": "132 Pattern",
      "url": "/submissions/detail/694825261/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651918885,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111011111111110111001111111110111111011111111111111010111111111111111111111110001010011111101111100111",
      "flag_type": 1
    },
    {
      "id": 694818582,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 874,
      "title_slug": "backspace-string-compare",
      "code": "\nfunc backspaceCompare(string_1 string, string_2 string) bool {\n\tlength_1, length_2 := len(string_1), len(string_2)\n\tlist_1, list_2, length_biggest := list.List{}, list.List{}, length_1\n\tif length_2 \u003e length_1 {\n\t\tlength_biggest = length_2\n\t}\n\tfor index := 0; index \u003c length_biggest; index++ {\n\t\tif index \u003c length_1 {\n\t\t\tbackspace_action(\u0026list_1, string_1[index])\n\t\t}\n\t\tif index \u003c length_2 {\n\t\t\tbackspace_action(\u0026list_2, string_2[index])\n\t\t}\n\t}\n\t// lists are not equal, there is no need to check\n\tif list_1.Len() != list_2.Len() {\n\t\treturn false\n\t}\n\t// checking elements after all deletions\n\telement_1, element_2 := list_1.Back(), list_2.Back()\n\tfor element_1 != nil {\n\t\tif element_1.Value != element_2.Value {\n\t\t\t// elements are not equal -\u003e strings are not equal\n\t\t\treturn false\n\t\t}\n\t\telement_1, element_2 = element_1.Next(), element_2.Next()\n\t}\n\t// checked all elements, strings are equal\n\treturn true\n}\n\nfunc backspace_action(list *list.List, character byte) {\n\tswitch {\n\tcase character == '#' \u0026\u0026 list.Len() != 0:\n\t\t// delete last character\n\t\tlist.Remove(list.Front())\n\t\tfallthrough\n\tcase character == '#' \u0026\u0026 list.Len() == 0:\n\t\t// just return if the list is empty\n\t\treturn\n\t}\n\tlist.PushFront(character)\n}\n",
      "title": "Backspace String Compare",
      "url": "/submissions/detail/694818582/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651917913,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "2.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 694813939,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 874,
      "title_slug": "backspace-string-compare",
      "code": "\nfunc backspaceCompare(string_1 string, string_2 string) bool {\n\tlength_1, length_2 := len(string_1), len(string_2)\n\tlist_1, list_2, length_biggest := list.List{}, list.List{}, length_1\n\tif length_2 \u003e length_1 {\n\t\tlength_biggest = length_2\n\t}\n\tfor index := 0; index \u003c length_biggest; index++ {\n\t\tif index \u003c length_1 {\n\t\t\tbackspace_action(\u0026list_1, string_1[index])\n\t\t}\n\t\tif index \u003c length_2 {\n\t\t\tbackspace_action(\u0026list_2, string_2[index])\n\t\t}\n\t}\n\t// lists are not equal, there is no need to check\n\tif list_1.Len() != list_2.Len() {\n\t\treturn false\n\t}\n\t// if any element is not equal, return false\n\telement_1, element_2 := list_1.Front(), list_2.Front()\n\tfor element_1 != nil {\n\t\tif element_1.Value != element_2.Value {\n\t\t\treturn false\n\t\t}\n\t\telement_1, element_2 = element_1.Prev(), element_2.Prev()\n\t}\n\treturn true\n}\n\nfunc backspace_action(list *list.List, character byte) {\n\tswitch {\n\tcase list.Len() != 0 \u0026\u0026 character == '#':\n\t\t// delete last character\n\t\tlist.Remove(list.Front())\n\t\tfallthrough\n\tcase list.Len() == 0 \u0026\u0026 character == '#':\n\t\t// just return if the list is empty\n\t\treturn\n\t}\n\tlist.PushFront(character)\n}\n",
      "title": "Backspace String Compare",
      "url": "/submissions/detail/694813939/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651917227,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 694812761,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 874,
      "title_slug": "backspace-string-compare",
      "code": "\nfunc backspaceCompare(string_1 string, string_2 string) bool {\n\tlength_1, length_2 := len(string_1), len(string_2)\n\tlist_1, list_2, length_biggest := list.List{}, list.List{}, length_1\n\tif length_2 \u003e length_1 {\n\t\tlength_biggest = length_2\n\t}\n\tfor index := 0; index \u003c length_biggest; index++ {\n\t\tif index \u003c length_1 {\n\t\t\tbackspace_action(\u0026list_1, string_1[index])\n\t\t}\n\t\tif index \u003c length_2 {\n\t\t\tbackspace_action(\u0026list_2, string_2[index])\n\t\t}\n\t}\n\t// lists are not equal, there is no need to check\n\tif list_1.Len() != list_2.Len() {\n\t\treturn false\n\t}\n\t// if any element is not equal, return false\n\telement_1, element_2 := list_1.Front(), list_2.Front()\n\tfor element_1 != nil {\n\t\tif element_1.Value != element_2.Value {\n\t\t\treturn false\n\t\t}\n\t\telement_1, element_2 = element_1.Prev(), element_2.Prev()\n\t}\n\treturn true\n}\n\nfunc backspace_action(list *list.List, character byte) {\n\tif character == '#' {\n\t\tlist.Remove(list.Front())\n\t\treturn\n\t}\n\tlist.PushFront(character)\n}\n",
      "title": "Backspace String Compare",
      "url": "/submissions/detail/694812761/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651917057,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 694407273,
      "status_display": "Accepted",
      "lang": "java",
      "question_id": 874,
      "title_slug": "backspace-string-compare",
      "code": "class Solution {\n    public boolean backspaceCompare(String S, String T) {\n        return build(S).equals(build(T));\n    }\n\n    public String build(String S) {\n        Stack\u003cCharacter\u003e ans = new Stack();\n        for (char c: S.toCharArray()) {\n            if (c != '#')\n                ans.push(c);\n            else if (!ans.empty())\n                ans.pop();\n        }\n        return String.valueOf(ans);\n    }\n}",
      "title": "Backspace String Compare",
      "url": "/submissions/detail/694407273/",
      "lang_name": "Java",
      "time": "1 year, 9 months",
      "timestamp": 1651856578,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "40.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 694406923,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 874,
      "title_slug": "backspace-string-compare",
      "code": "func backspaceCompare(s string, t string) bool {\n    \n}",
      "title": "Backspace String Compare",
      "url": "/submissions/detail/694406923/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651856534,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 694400494,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 26,
      "title_slug": "remove-duplicates-from-sorted-array",
      "code": "func removeDuplicates(numbers []int) int {\n\t// ensure there are at least two numbers\n\tlength := len(numbers)\n\tif length == 1 {\n\t\treturn 1\n\t}\n\tindex_non_duplicate := 1\n\tfor index := 1; index \u003c length; index++ {\n\t\tcurrent, previous := numbers[index], numbers[index-1]\n\t\tif current == previous {\n\t\t\t// it is a duplicate - ignore it\n\t\t\tcontinue\n\t\t}\n\t\t// it is not a duplicate -\u003e place it and move the index\n\t\tnumbers[index_non_duplicate] = current\n\t\tindex_non_duplicate++\n\t}\n\treturn index_non_duplicate\n}\n",
      "title": "Remove Duplicates from Sorted Array",
      "url": "/submissions/detail/694400494/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651855838,
      "status": 10,
      "runtime": "12 ms",
      "is_pending": "Not Pending",
      "memory": "4.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 694387207,
      "status_display": "Accepted",
      "lang": "java",
      "question_id": 1320,
      "title_slug": "remove-all-adjacent-duplicates-in-string-ii",
      "code": "class Solution {\n    public String removeDuplicates(String s, int k) {\n        Stack\u003cint []\u003e Master = new Stack\u003c\u003e();\n        \n        for(char ch : s.toCharArray()){\n            if(!Master.isEmpty() \u0026\u0026 Master.peek()[0] == ch){\n                Master.peek()[1]++;\n            }\n            else Master.push(new int[]{ch, 1});\n            if(Master.peek()[1] == k) Master.pop();\n        }\n        StringBuilder sb = new StringBuilder();\n        while(!Master.isEmpty()){\n            int top[] = Master.pop();\n            while(top[1] --\u003e 0)\n                sb.append((char)top[0]);\n        }\n        return sb.reverse().toString();\n    }\n}",
      "title": "Remove All Adjacent Duplicates in String II",
      "url": "/submissions/detail/694387207/",
      "lang_name": "Java",
      "time": "1 year, 9 months",
      "timestamp": 1651854299,
      "status": 10,
      "runtime": "84 ms",
      "is_pending": "Not Pending",
      "memory": "50 MB",
      "compare_result": "11111111111111111111",
      "flag_type": 1
    },
    {
      "id": 693736702,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1950,
      "title_slug": "sign-of-the-product-of-an-array",
      "code": "\nfunc arraySign(numbers []int) int {\n\tnegative_count := 0\n\tfor _, number := range numbers {\n\t\tswitch {\n\t\t// the number is 0 -\u003e product of all numbers is definitely zero\n\t\tcase number == 0:\n\t\t\treturn 0\n\t\t\t// the number is negative -\u003e add to count\n\t\tcase number \u003c 0:\n\t\t\tnegative_count++\n\t\t}\n\t}\n\t// even amount of negative numbers -\u003e result is positive\n\tif negative_count\u00261 == 0 {\n\t\treturn 1\n\t}\n\t// uneven amount of negative numbers -\u003e result is negative\n\treturn -1\n}",
      "title": "Sign of the Product of an Array",
      "url": "/submissions/detail/693736702/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651765192,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "3.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 693729962,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 745,
      "title_slug": "find-smallest-letter-greater-than-target",
      "code": "\n\nfunc nextGreatestLetter(letters []byte, target byte) byte {\n\tlength := len(letters)\n\tleft, right := 0, length-1\n\tfor right \u003e= left {\n\t\tindex := left + (right-left)/2\n\t\tcharacter := letters[index]\n\t\t// the character is bigger, we found at least one result\n\t\t// smaller characters are to the left -\u003e discard right\n\t\tif character \u003e target {\n\t\t\tright = index - 1\n\t\t\tcontinue\n\t\t}\n\t\t// character is either equal or smaller -\u003e there is no results to the\n\t\t// left -\u003e discard left\n\t\tleft = index + 1\n\t}\n\treturn letters[left%length]\n}\n",
      "title": "Find Smallest Letter Greater Than Target",
      "url": "/submissions/detail/693729962/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651764399,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "2.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 693729377,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 745,
      "title_slug": "find-smallest-letter-greater-than-target",
      "code": "\nfunc nextGreatestLetter(letters []byte, target byte) byte {\n\tleft, right := 0, len(letters)-1\n\tfor right \u003e= left {\n\t\tindex := left + (right-left)/2\n\t\tcharacter := letters[index]\n\t\t// the character is bigger, we found at least one result\n\t\t// smaller characters are to the left -\u003e discard right\n\t\tif character \u003e target {\n\t\t\tright = index - 1\n\t\t\tcontinue\n\t\t}\n\t\t// character is either equal or smaller -\u003e there is no results to the\n\t\t// left -\u003e discard left\n\t\tleft = index + 1\n\t}\n\treturn letters[left]\n}",
      "title": "Find Smallest Letter Greater Than Target",
      "url": "/submissions/detail/693729377/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651764332,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 693728508,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 745,
      "title_slug": "find-smallest-letter-greater-than-target",
      "code": "\nfunc nextGreatestLetter(letters []byte, target byte) byte {\n\tleft, right, smallest := 0, len(letters)-1, byte(1)\n\tfor right \u003e= left {\n\t\tindex := left + (right-left)/2\n\t\tcharacter := letters[index]\n\t\t// the character is bigger, we found at least one result\n\t\t// smaller characters are to the left -\u003e discard right\n\t\tif character \u003e target {\n\t\t\tsmallest = character\n\t\t\tright = index - 1\n\t\t\tcontinue\n\t\t}\n\t\t// character is either equal or smaller -\u003e there is no results to the\n\t\t// left -\u003e discard left\n\t\tleft = index + 1\n\t}\n\treturn smallest\n}",
      "title": "Find Smallest Letter Greater Than Target",
      "url": "/submissions/detail/693728508/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651764232,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111100111111111111100000000000001111111111111111111111110011111111111111111111111110111111111111110000000000001111111111111111111111110011111111111111111111111110111",
      "flag_type": 1
    },
    {
      "id": 693727928,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 745,
      "title_slug": "find-smallest-letter-greater-than-target",
      "code": "\nfunc nextGreatestLetter(letters []byte, target byte) byte {\n\tleft, right, smallest := 0, len(letters)-1, byte(0)\n\tfor right \u003e= left {\n\t\tindex := left + (right-left)/2\n\t\tcharacter := letters[index]\n\t\t// the character is bigger, we found at least one result\n\t\t// smaller characters are to the left -\u003e discard right\n\t\tif character \u003e target {\n\t\t\tsmallest = character\n\t\t\tright = index - 1\n\t\t\tcontinue\n\t\t}\n\t\t// character is either equal or smaller -\u003e there is no results to the\n\t\t// left -\u003e discard left\n\t\tleft = index + 1\n\t}\n\treturn smallest\n}",
      "title": "Find Smallest Letter Greater Than Target",
      "url": "/submissions/detail/693727928/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651764171,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111100111111111111100000000000001111111111111111111111110011111111111111111111111110111111111111110000000000001111111111111111111111110011111111111111111111111110111",
      "flag_type": 1
    },
    {
      "id": 693649416,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 69,
      "title_slug": "sqrtx",
      "code": "\nfunc mySqrt(number int) int {\n\tleft, right := 0, number\n\tfor right \u003e= left {\n\t\tcurrent := left + (right-left)/2\n\t\tsquare_current := current * current\n\t\tsquare_next := (current + 1) * (current + 1)\n\t\tswitch {\n\t\tcase square_current \u003c= number \u0026\u0026 square_next \u003e number:\n\t\t\t// found the target\n\t\t\treturn current\n\t\tcase square_current \u003e number:\n\t\t\t// target is to the left -\u003e discard right\n\t\t\tright = current - 1\n\t\tcase square_current \u003c number:\n\t\t\t// target is to the right -\u003e discard left\n\t\t\tleft = current + 1\n\t\t}\n\t}\n\treturn -1\n}",
      "title": "Sqrt(x)",
      "url": "/submissions/detail/693649416/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651754230,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 693642944,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 69,
      "title_slug": "sqrtx",
      "code": "\nfunc mySqrt(number int) int {\n\tleft, right := 0, number\n\tcurrent, square := 0, 0\n\tfor right \u003e= left {\n\t\tcurrent = left + (right-left)/2\n\t\tsquare = current * current\n\t\tswitch {\n\t\tcase square == number:\n\t\t\t// found the target\n\t\t\treturn current\n\t\tcase square \u003e number:\n\t\t\t// target is to the left -\u003e discard right\n\t\t\tright = current - 1\n\t\tcase square \u003c number:\n\t\t\t// target is to the right -\u003e discard left\n\t\t\tleft = current + 1\n\t\t}\n\t}\n\tif square \u003e number {\n\t\treturn current - 1\n\t}\n\treturn current + 1\n}",
      "title": "Sqrt(x)",
      "url": "/submissions/detail/693642944/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651753253,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 693642213,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 69,
      "title_slug": "sqrtx",
      "code": "\nfunc mySqrt(number int) int {\n\tleft, right := 0, number\n\tcurrent := 0\n\tfor right \u003e= left {\n\t\tcurrent = left + (right-left)/2\n\t\tsquare := current * current\n\t\tswitch {\n\t\tcase square == number:\n\t\t\t// found the target\n\t\t\treturn current\n\t\tcase square \u003e number:\n\t\t\t// target is to the left -\u003e discard right\n\t\t\tright = current - 1\n\t\tcase square \u003c number:\n\t\t\t// target is to the right -\u003e discard left\n\t\t\tleft = current + 1\n\t\t}\n\t}\n\treturn current - 1\n}",
      "title": "Sqrt(x)",
      "url": "/submissions/detail/693642213/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651753143,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 693639118,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 557,
      "title_slug": "reverse-words-in-a-string-iii",
      "code": "func reverseWords(_string string) string {\n\tindex_word_start, length, result := 0, len(_string), []rune(_string)\n\tfor index, character := range result {\n\t\t// ignore normal characters\n\t\tif character != ' ' {\n\t\t\tcontinue\n\t\t}\n\t\t// word ended -\u003e reverse characters from the start of the word to the\n\t\t//end of it\n\t\treverse_word(result, length, index_word_start, index)\n\t\tindex_word_start = index + 1\n\t}\n\treverse_word(result, length, index_word_start, length)\n\treturn string(result)\n}\n\nfunc reverse_word(_string []rune, length int, start int, end int) {\n\t//fmt.Println(\"reversing\", string(_string), start, \"-\u003e\", end)\n\tlength_word := end - start\n\tfor index := start; index \u003c start+length_word/2; index++ {\n\t\tindex_last := end - (index - start) - 1\n\t\tcurrent, last := _string[index], _string[index_last]\n\t\t_string[index], _string[index_last] = last, current\n\t}\n\t//fmt.Println(\"result\", string(_string), start, \"-\u003e\", end)\n}\n",
      "title": "Reverse Words in a String III",
      "url": "/submissions/detail/693639118/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651752654,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "6.4 MB",
      "compare_result": "11111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 693609237,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 344,
      "title_slug": "reverse-string",
      "code": "func reverseString(characters []byte) {\n\tlength := len(characters)\n\tfor index := 0; index \u003c length/2; index++ {\n\t\tindex_last := length - index -1 \n\t\tcurrent, last := characters[index], characters[index_last]\n\t\tcharacters[index_last] = current\n\t\tcharacters[index] = last\n\t}\n}\n",
      "title": "Reverse String",
      "url": "/submissions/detail/693609237/",
      "lang_name": "Go",
      "time": "1 year, 9 months",
      "timestamp": 1651747832,
      "status": 10,
      "runtime": "38 ms",
      "is_pending": "Not Pending",
      "memory": "6.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 956368066,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 26,
      "title_slug": "remove-duplicates-from-sorted-array",
      "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        if length == 1:\n            return 1\n        \n        unique_count = 1\n        last_unique_index = 0\n        for i, number in enumerate(nums[1:], 1):\n            last_unique = nums[last_unique_index]\n            if number == last_unique:\n                continue\n            \n            unique_count += 1\n            last_unique_index += 1\n            nums[last_unique_index] = number\n\n        nums = nums[:last_unique_index+1]\n\n        return unique_count",
      "title": "Remove Duplicates from Sorted Array",
      "url": "/submissions/detail/956368066/",
      "lang_name": "Python3",
      "time": "8 months, 2 weeks",
      "timestamp": 1684923099,
      "status": 10,
      "runtime": "94 ms",
      "is_pending": "Not Pending",
      "memory": "18.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 956360129,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 21,
      "title_slug": "merge-two-sorted-lists",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -\u003e Optional[ListNode]:\n        result = ListNode()\n        current = result\n        while list1 and list2:               \n            if list1.val \u003c list2.val:\n                current.next = list1\n                list1, current = list1.next, list1\n                continue\n\n            current.next = list2\n            list2, current = list2.next, list2\n                \n        if list1 or list2:\n            current.next = list1 if list1 else list2\n            \n        return result.next",
      "title": "Merge Two Sorted Lists",
      "url": "/submissions/detail/956360129/",
      "lang_name": "Python3",
      "time": "8 months, 2 weeks",
      "timestamp": 1684922070,
      "status": 10,
      "runtime": "55 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 956340930,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "class Solution:\n    def isValid(self, s: str) -\u003e bool:\n        brackets = []\n\n        symbols = {\n            \"{\": \"}\",\n            \"(\": \")\",\n            \"[\": \"]\"\n        }\n\n        open = symbols.keys()\n        closed = symbols.values()\n\n        for bracket in s:\n            if bracket in open:\n                brackets.append(bracket)\n                continue\n\n            if not brackets:\n                return False\n\n            last_bracket = brackets[-1]\n            if last_bracket in closed: \n                return False\n\n            correct_closing_bracket = symbols[last_bracket]\n            if bracket != correct_closing_bracket:\n                return False\n            \n            brackets.pop()\n\n        return not len(brackets)",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/956340930/",
      "lang_name": "Python3",
      "time": "8 months, 2 weeks",
      "timestamp": 1684919609,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 956340678,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "class Solution:\n    def isValid(self, s: str) -\u003e bool:\n        brackets = []\n\n        symbols = {\n            \"{\": \"}\",\n            \"(\": \")\",\n            \"[\": \"]\"\n        }\n\n        open = symbols.keys()\n        closed = symbols.values()\n\n        for bracket in s:\n            if bracket in open:\n                brackets.append(bracket)\n                continue\n\n            last_bracket = brackets[-1]\n            if last_bracket in closed: \n                return False\n\n            correct_closing_bracket = symbols[last_bracket]\n            if bracket != correct_closing_bracket:\n                return False\n            \n            brackets.pop()\n\n        return not len(brackets)",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/956340678/",
      "lang_name": "Python3",
      "time": "8 months, 2 weeks",
      "timestamp": 1684919577,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 956331143,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 9,
      "title_slug": "palindrome-number",
      "code": "class Solution:\n    def isPalindrome(self, x: int) -\u003e bool:\n        if x \u003c 0:\n            return False\n        \n        if x \u003c 10:\n            return True\n        \n        number = []\n\n        while True:\n            remainder = x % 10\n            x = int(x / 10)\n            number.append(remainder)\n            if not x:\n                break\n            \n        \n        number.reverse()\n        print(number)\n        length = len(number)\n        half_index = int(length / 2)\n\n        for i, digit in enumerate(number):\n            last_digit = number[length - i - 1]\n\n            if digit != last_digit:\n                return False\n            \n            if i != half_index:\n                continue\n            \n            return True\n",
      "title": "Palindrome Number",
      "url": "/submissions/detail/956331143/",
      "lang_name": "Python3",
      "time": "8 months, 2 weeks",
      "timestamp": 1684918334,
      "status": 10,
      "runtime": "112 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 956324266,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -\u003e str:\n        answer = []\n        strings = sorted(strs)\n        first = strings[0]\n        last = strings[-1]\n        min_length = min(len(first), len(last))\n        for i in range(min_length):\n            first_symbol = first[i]\n            last_symbol = last[i]\n            if first_symbol == last_symbol:\n                answer.append(first_symbol)\n                continue\n            \n            return \"\".join(answer)\n\n        return \"\".join(answer)\n\n\n        ",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/956324266/",
      "lang_name": "Python3",
      "time": "8 months, 2 weeks",
      "timestamp": 1684917421,
      "status": 10,
      "runtime": "54 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 956319468,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 13,
      "title_slug": "roman-to-integer",
      "code": "class Solution:\n    def romanToInt(self, s: str) -\u003e int:\n        result = 0\n        skip = False\n\n        values = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n        }\n        special_cases = {\n            \"I\": [\"V\", \"X\"],\n            \"X\": [\"L\", \"C\"],\n            \"C\": [\"D\", \"M\"]\n        }\n\n        for i, symbol in enumerate(s):\n            if skip:\n                skip = False\n                continue\n\n            next = None\n            if i \u003c (len(s) - 1):\n                next = s[i+1]\n\n            if next in special_cases.get(symbol, []):\n                skip = True\n                result += values[next] - values[symbol]\n                continue\n            \n            result += values[symbol]\n\n        return result\n            ",
      "title": "Roman to Integer",
      "url": "/submissions/detail/956319468/",
      "lang_name": "Python3",
      "time": "8 months, 2 weeks",
      "timestamp": 1684916780,
      "status": 10,
      "runtime": "67 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 956314499,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 13,
      "title_slug": "roman-to-integer",
      "code": "class Solution:\n    def romanToInt(self, s: str) -\u003e int:\n        result = 0\n        skip = False\n        for i, symbol in enumerate(s):\n            if skip:\n                skip = False\n                continue\n\n            next = \"\"\n            if i \u003c len(s) - 1:\n                next = s[i+1]\n            \n            if symbol == \"I\" and next == \"V\":\n                result += 4\n                skip = True\n                continue\n\n            if symbol == \"I\" and next == \"X\":\n                result += 9\n                skip = True\n                continue\n            \n            if symbol == \"I\":\n                result += 1\n                continue\n\n            if symbol == \"X\" and next == \"L\":\n                result += 40\n                skip = True\n                continue\n\n            if symbol == \"X\" and next == \"C\":\n                result += 90\n                skip = True\n                continue\n            \n            if symbol == \"X\":\n                result += 10\n                continue\n\n            if symbol == \"C\" and next == \"D\":\n                result += 400\n                skip = True\n                continue\n            \n            if symbol == \"C\" and next == \"M\":\n                result += 900\n                skip = True\n                continue\n            \n            if symbol == \"C\":\n                result += 100\n                continue\n            \n            if symbol == \"V\":\n                result += 5\n                continue\n            \n            if symbol == \"D\":\n                result += 500\n                continue\n            \n            if symbol == \"M\":\n                result += 1000\n                continue\n            \n            if symbol == \"L\":\n                result += 50\n                continue\n            \n            raise Exception(f\"unexpected situation: {symbol}, {next}\")\n\n        return result\n            ",
      "title": "Roman to Integer",
      "url": "/submissions/detail/956314499/",
      "lang_name": "Python3",
      "time": "8 months, 2 weeks",
      "timestamp": 1684916101,
      "status": 10,
      "runtime": "83 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 955694370,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -\u003e List[int]:\n        indexes = {}\n        for i, number in enumerate(nums):\n            diff = target - number\n            if diff in indexes: \n                return [indexes[diff], i]\n            indexes[number] = i",
      "title": "Two Sum",
      "url": "/submissions/detail/955694370/",
      "lang_name": "Python3",
      "time": "8 months, 2 weeks",
      "timestamp": 1684834590,
      "status": 10,
      "runtime": "80 ms",
      "is_pending": "Not Pending",
      "memory": "17.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 955691548,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -\u003e List[int]:\n        for i, number in enumerate(nums):\n            for j, number_inner in enumerate(nums[i+1:]):\n                if number + number_inner == target:\n                    return [i, i+j+1]",
      "title": "Two Sum",
      "url": "/submissions/detail/955691548/",
      "lang_name": "Python3",
      "time": "8 months, 2 weeks",
      "timestamp": 1684834243,
      "status": 10,
      "runtime": "3364 ms",
      "is_pending": "Not Pending",
      "memory": "17.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 701177667,
      "status_display": "Accepted",
      "lang": "java",
      "question_id": 1498,
      "title_slug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
      "code": "class Solution {\nTreeNode ans;\n\npublic void inorder(TreeNode c,TreeNode target) {\nif (c != null) {\ninorder(c.left, target);\nif (c.val == target.val) {\nans = c;\n}\ninorder(c.right, target);\n}\n}\n\npublic final TreeNode getTargetCopy(final TreeNode original, final TreeNode cloned, final TreeNode target)\n{\ninorder(cloned,target);\nreturn ans;\n}\n}",
      "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
      "url": "/submissions/detail/701177667/",
      "lang_name": "Java",
      "time": "1 year, 8 months",
      "timestamp": 1652763542,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "101.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 700092884,
      "status_display": "Accepted",
      "lang": "java",
      "question_id": 1254,
      "title_slug": "deepest-leaves-sum",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int deepestLeavesSum(TreeNode root) {\n        MaxDepthInfo maxDepthInfo = new MaxDepthInfo(0 ,0);\n        sumAtLevel(root, 0, maxDepthInfo);\n        return maxDepthInfo.getSumAtMaxDepth();\n    }\n\n    public void sumAtLevel(TreeNode root, int currentDepth, MaxDepthInfo maxDepthInfo) {\n        if (root == null) return;\n\n        if (currentDepth \u003e maxDepthInfo.getMaxDepth()) {\n            maxDepthInfo.setMaxDepth(currentDepth);\n            maxDepthInfo.setSumAtMaxDepth(root.val);\n        }\n\n        else if (currentDepth == maxDepthInfo.getMaxDepth())\n            maxDepthInfo.setSumAtMaxDepth(maxDepthInfo.getSumAtMaxDepth() + root.val);\n\n        sumAtLevel(root.left, currentDepth + 1, maxDepthInfo);\n        sumAtLevel(root.right, currentDepth + 1, maxDepthInfo);\n    }\n\n    public static class MaxDepthInfo {\n        private int maxDepth;\n        private int sumAtMaxDepth;\n\n        public MaxDepthInfo(int maxDepth, int sumAtMaxDepth) {\n            this.maxDepth = maxDepth;\n            this.sumAtMaxDepth = sumAtMaxDepth;\n        }\n\n        public int getMaxDepth() { return maxDepth;}\n\n        public void setMaxDepth(int maxDepth) { this.maxDepth = maxDepth;}\n\n        public int getSumAtMaxDepth() { return sumAtMaxDepth;}\n\n        public void setSumAtMaxDepth(int sumAtMaxDepth) { this.sumAtMaxDepth = sumAtMaxDepth;}\n    }\n}",
      "title": "Deepest Leaves Sum",
      "url": "/submissions/detail/700092884/",
      "lang_name": "Java",
      "time": "1 year, 8 months",
      "timestamp": 1652629473,
      "status": 10,
      "runtime": "1 ms",
      "is_pending": "Not Pending",
      "memory": "44.6 MB",
      "compare_result": "11111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 699249675,
      "status_display": "Accepted",
      "lang": "java",
      "question_id": 744,
      "title_slug": "network-delay-time",
      "code": "class Solution {\n   private final Map\u003cInteger, List\u003cNode\u003e\u003e connected = new HashMap\u003c\u003e();\n\n    public int networkDelayTime(int[][] times, int n, int k) {\n        for (int[] time : times) {\n            connected.putIfAbsent(time[0], new ArrayList\u003c\u003e());\n            connected.get(time[0]).add(new Node(time[2], time[1]));\n        }\n        connected.forEach((source, nodes) -\u003e nodes.sort(Comparator.comparing(Node::travelTime)));\n        int[] receivedTime = new int[n + 1]; Arrays.fill(receivedTime, 1, receivedTime.length, Integer.MAX_VALUE);\n        dfs(receivedTime, 0, k);\n        \n        int max = Arrays.stream(receivedTime).max().orElseThrow(RuntimeException::new);\n        return max == Integer.MAX_VALUE ? -1 : max;\n    }\n\n    private void dfs(int[] receivedTime, int currentTime, int currentNode) {\n        if (receivedTime[currentNode] \u003c= currentTime) return;\n        receivedTime[currentNode] = currentTime;\n        if (connected.containsKey(currentNode))\n            connected.get(currentNode).forEach(node -\u003e dfs(receivedTime, currentTime + node.travelTime(), node.destination()));\n    }\n\n    public record Node(int travelTime, int destination) {}\n}",
      "title": "Network Delay Time",
      "url": "/submissions/detail/699249675/",
      "lang_name": "Java",
      "time": "1 year, 8 months",
      "timestamp": 1652531316,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "44.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 698479659,
      "status_display": "Accepted",
      "lang": "java",
      "question_id": 17,
      "title_slug": "letter-combinations-of-a-phone-number",
      "code": "class Solution {\n    public List\u003cString\u003e letterCombinations(String digits) {\n        if(digits.length() == 0){\n            List\u003cString\u003e result = new ArrayList\u003c\u003e();\n            return result;\n        }\n        List\u003cString\u003e res = combine(digits); \n        return res;\n    }\n    \n    public List\u003cString\u003e combine(String digit){\n        if(digit.length() == 0 ){\n            List\u003cString\u003e result = new ArrayList\u003c\u003e();\n            result.add(\"\");\n            return result;\n        }\n        \n        String[] codes = {\"\",\"\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};\n        \n        char c = digit.charAt(0);\n        \n        String  digits_left = digit.substring(1);\n        \n        List\u003cString\u003e res = combine(digits_left);\n        \n        List\u003cString\u003e result = new ArrayList\u003c\u003e();\n        \n        String code_for_current_digit = codes[c-'0'];\n        \n        for(int i=0;i\u003ccode_for_current_digit.length();i++){\n            char code_char = code_for_current_digit.charAt(i);\n            \n            if(!res.isEmpty()){\n                for(String s : res){\n                    result.add(code_char + s);\n                }    \n            }\n            else{\n                res.add(String.valueOf(code_char));\n            }\n            \n        }\n        \n        \n        return result;\n    }\n}",
      "title": "Letter Combinations of a Phone Number",
      "url": "/submissions/detail/698479659/",
      "lang_name": "Java",
      "time": "1 year, 8 months",
      "timestamp": 1652415550,
      "status": 10,
      "runtime": "8 ms",
      "is_pending": "Not Pending",
      "memory": "42.8 MB",
      "compare_result": "1111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 698478947,
      "status_display": "Accepted",
      "lang": "java",
      "question_id": 117,
      "title_slug": "populating-next-right-pointers-in-each-node-ii",
      "code": "class Solution {\n    public Node connect(Node root) {\n        Node leftMost = root;\n        while (leftMost != null) {\n            Node cur = leftMost;\n            leftMost = null;\n            Node pre = null;\n            while (cur != null) {\n                if (leftMost == null) {\n                    leftMost = cur.left == null ? cur.right: cur.left;\n                }\n                if (pre != null) {\n                    pre.next = cur.left == null ? cur.right : cur.left;\n                }\n                if (cur.left != null \u0026\u0026 cur.right != null) {\n                    cur.left.next = cur.right;\n                }\n                pre = cur.right == null ? (cur.left == null ? pre : cur.left) : cur.right;\n                cur = cur.next;\n            }\n        }\n        return root;\n    }\n}",
      "title": "Populating Next Right Pointers in Each Node II",
      "url": "/submissions/detail/698478947/",
      "lang_name": "Java",
      "time": "1 year, 8 months",
      "timestamp": 1652415464,
      "status": 10,
      "runtime": "1 ms",
      "is_pending": "Not Pending",
      "memory": "44.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 698132267,
      "status_display": "Accepted",
      "lang": "java",
      "question_id": 47,
      "title_slug": "permutations-ii",
      "code": "class Solution {\npublic List\u003cList\u003cInteger\u003e\u003e permuteUnique(int[] nums) {\n        List\u003cList\u003cInteger\u003e\u003e permutations = new ArrayList\u003c\u003e();\n        Arrays.sort(nums);\n        backtracking(permutations, new ArrayList\u003c\u003e(), nums, new boolean[nums.length]);\n        return permutations;\n    }\n\n    private void backtracking(List\u003cList\u003cInteger\u003e\u003e permutations, List\u003cInteger\u003e current, int[] nums, boolean[] used) {\n        if (current.size() == nums.length)\n            permutations.add(new ArrayList\u003c\u003e(current));\n        else {\n            for (int i = 0; i \u003c nums.length; i++) {\n                if (used[i] || (i \u003e 0 \u0026\u0026 nums[i] == nums[i - 1] \u0026\u0026 !used[i - 1])) continue;\n                current.add(nums[i]);\n                used[i] = true;\n                backtracking(permutations, current, nums, used);\n                used[i] = false;\n                current.remove(current.size() - 1);\n            }\n        }\n    }\n}",
      "title": "Permutations II",
      "url": "/submissions/detail/698132267/",
      "lang_name": "Java",
      "time": "1 year, 8 months",
      "timestamp": 1652367933,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "48.2 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 698132151,
      "status_display": "Compile Error",
      "lang": "java",
      "question_id": 47,
      "title_slug": "permutations-ii",
      "code": "class Solution:\npublic List\u003cList\u003cInteger\u003e\u003e permuteUnique(int[] nums) {\n        List\u003cList\u003cInteger\u003e\u003e permutations = new ArrayList\u003c\u003e();\n        Arrays.sort(nums);\n        backtracking(permutations, new ArrayList\u003c\u003e(), nums, new boolean[nums.length]);\n        return permutations;\n    }\n\n    private void backtracking(List\u003cList\u003cInteger\u003e\u003e permutations, List\u003cInteger\u003e current, int[] nums, boolean[] used) {\n        if (current.size() == nums.length)\n            permutations.add(new ArrayList\u003c\u003e(current));\n        else {\n            for (int i = 0; i \u003c nums.length; i++) {\n                if (used[i] || (i \u003e 0 \u0026\u0026 nums[i] == nums[i - 1] \u0026\u0026 !used[i - 1])) continue;\n                current.add(nums[i]);\n                used[i] = true;\n                backtracking(permutations, current, nums, used);\n                used[i] = false;\n                current.remove(current.size() - 1);\n            }\n        }\n    }",
      "title": "Permutations II",
      "url": "/submissions/detail/698132151/",
      "lang_name": "Java",
      "time": "1 year, 8 months",
      "timestamp": 1652367919,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 698132002,
      "status_display": "Compile Error",
      "lang": "java",
      "question_id": 47,
      "title_slug": "permutations-ii",
      "code": "public List\u003cList\u003cInteger\u003e\u003e permuteUnique(int[] nums) {\n        List\u003cList\u003cInteger\u003e\u003e permutations = new ArrayList\u003c\u003e();\n        Arrays.sort(nums);\n        backtracking(permutations, new ArrayList\u003c\u003e(), nums, new boolean[nums.length]);\n        return permutations;\n    }\n\n    private void backtracking(List\u003cList\u003cInteger\u003e\u003e permutations, List\u003cInteger\u003e current, int[] nums, boolean[] used) {\n        if (current.size() == nums.length)\n            permutations.add(new ArrayList\u003c\u003e(current));\n        else {\n            for (int i = 0; i \u003c nums.length; i++) {\n                if (used[i] || (i \u003e 0 \u0026\u0026 nums[i] == nums[i - 1] \u0026\u0026 !used[i - 1])) continue;\n                current.add(nums[i]);\n                used[i] = true;\n                backtracking(permutations, current, nums, used);\n                used[i] = false;\n                current.remove(current.size() - 1);\n            }\n        }\n    }",
      "title": "Permutations II",
      "url": "/submissions/detail/698132002/",
      "lang_name": "Java",
      "time": "1 year, 8 months",
      "timestamp": 1652367903,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 697487494,
      "status_display": "Accepted",
      "lang": "java",
      "question_id": 1761,
      "title_slug": "count-sorted-vowel-strings",
      "code": "class Solution {\n    public int countVowelStrings(int n) {\n        int a,e,i,o,u;\n        a = e = i = o = u = 1;\n        \n        for(int t = 1; t \u003c n; t++){\n            \n            a = a + e + i + o + u;\n            e = e + i + o + u;\n            i = i + o + u;\n            o = o + u;\n            u = u;\n        }\n        return a + e + i + o + u;\n    }\n}",
      "title": "Count Sorted Vowel Strings",
      "url": "/submissions/detail/697487494/",
      "lang_name": "Java",
      "time": "1 year, 8 months",
      "timestamp": 1652281386,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "40.5 MB",
      "compare_result": "11111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 695536827,
      "status_display": "Accepted",
      "lang": "java",
      "question_id": 341,
      "title_slug": "flatten-nested-list-iterator",
      "code": "public class NestedIterator implements Iterator\u003cInteger\u003e {\n\n    private List\u003cInteger\u003e integerList = new ArrayList\u003c\u003e();\n    private int index = 0;\n    public NestedIterator(List\u003cNestedInteger\u003e nestedList) {\n        for (NestedInteger nestedInteger : nestedList) {\n            flatten(nestedInteger);\n        }\n    }\n    \n    private void flatten(NestedInteger nested) {\n        if (nested.isInteger()) \n            integerList.add(nested.getInteger());\n        else \n            for (NestedInteger nestedFromList : nested.getList()) {\n                flatten(nestedFromList);\n        }\n    }\n\n    @Override\n    public boolean hasNext() {\n        return index \u003c integerList.size();\n    }\n\n    @Override\n    public Integer next() {\n        return integerList.get(index++);\n    }\n}\n",
      "title": "Flatten Nested List Iterator",
      "url": "/submissions/detail/695536827/",
      "lang_name": "Java",
      "time": "1 year, 9 months",
      "timestamp": 1652020040,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "44.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 993596217,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 27,
      "title_slug": "remove-element",
      "code": "class Solution:\n    # create two indexes, current and replace\n    # create non_val_count\n    # while to-be-replaced has not reached the end:\n    # - if the current number is a regular number, move the current index, \n    #   increase non_val_count\n    # - if the replace index is equal or less than the current, move it and continue\n    # - if the replace number is a non-regular number, move the replace index and continue\n    # - if the current number is a non-regular, replace it with the replace number, \n    #   replace the replace number with val, move both indexes\n    # return the current index + 1\n\n    def removeElement(self, nums: List[int], val: int) -\u003e int:\n        current, replace, val_count, length = 0, 0, 0, len(nums)\n        non_val_count = 0\n        \n        while replace \u003c length:\n            current_number, replace_number = nums[current], nums[replace]\n            \n            if current_number != val:\n                current += 1\n                non_val_count += 1\n                continue\n\n            if replace \u003c= current:\n                replace = current + 1\n                continue\n\n            if replace_number == val:\n                replace += 1\n                continue\n\n            nums[current], nums[replace] = replace_number, val\n            replace += 1\n            current += 1\n            non_val_count += 1\n            \n        return non_val_count",
      "title": "Remove Element",
      "url": "/submissions/detail/993596217/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689263178,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 993595405,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 27,
      "title_slug": "remove-element",
      "code": "class Solution:\n    # create two indexes, current and replace\n    # create non_val_count\n    # while to-be-replaced has not reached the end:\n    # - if the replace index is equal or less than the current, move it and continue\n    # - if the replace number is a non-regular number, move the replace index and continue\n    # - if the current number is a regular number, move the current index, \n    #   increase non_val_count\n    # - if the current number is a non-regular, replace it with the replace number, \n    #   replace the replace number with val, move both indexes\n    # return the current index + 1\n\n    def removeElement(self, nums: List[int], val: int) -\u003e int:\n        current, replace, val_count, length = 0, 0, 0, len(nums)\n        non_val_count = 0\n        \n        while replace \u003c length:\n            current_number, replace_number = nums[current], nums[replace]\n            \n            if replace \u003c= current:\n                replace = current + 1\n                continue\n\n            if replace_number == val:\n                replace += 1\n                continue\n            \n            if current_number != val:\n                current += 1\n                non_val_count += 1\n                continue\n\n            nums[current], nums[replace] = replace_number, val\n            replace += 1\n            current += 1\n            non_val_count += 1\n            \n        return non_val_count",
      "title": "Remove Element",
      "url": "/submissions/detail/993595405/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689263111,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111010100011010000111001001010101111111110011111001101111101011010111111011110011110011111111111101101111111110",
      "flag_type": 1
    },
    {
      "id": 992867297,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 88,
      "title_slug": "merge-sorted-array",
      "code": "class Solution:\n    # have three indexes: nums1 (end of array 1), nums2 (from the end), \n    # and current (nums1 from the end) \n    # if nums2 number is bigger or equal than nums1 number, put the number at the current index,\n    # move both indexes\n    # if nums1 number is smaller than nums2 number, put the number at the current index, \n    # move both indexes  \n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -\u003e None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n\n        nums1_i, nums2_i = m - 1, n - 1\n        for i in range(m + n - 1, -1, -1):\n            nums1_number  = nums1[nums1_i] if nums1_i \u003e= 0 else nums2[0] - 1\n            nums2_number = nums2[nums2_i] if nums2_i \u003e= 0 else nums1[0] - 1\n            if nums1_number \u003e= nums2_number:\n                nums1[i] = nums1_number\n                nums1_i -= 1\n                continue\n            \n            nums1[i] = nums2_number\n            nums2_i -= 1",
      "title": "Merge Sorted Array",
      "url": "/submissions/detail/992867297/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689183240,
      "status": 10,
      "runtime": "42 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 992845170,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 88,
      "title_slug": "merge-sorted-array",
      "code": "class Solution:\n    # if the last nums2 number is smaller than the first nums1 number, we just need to\n    # put nums2 + nums1\n    # if the last nums1 number is smaller than the first nums2 number, we just need to \n    # put nums1 + nums2  \n    # iterate over nums2 from the end\n    # if number is bigger than the last nums1 number, insert to the end\n    # if number is smaller than the last nums1 number, insert the last nums1 one number\n    # to the end together with other nums1 numbers that are less than the nums2 number\n    #\n    # nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n    # nums1 = [1,2,3,2,5,6]\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -\u003e None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n\n        left, right = m - 1 if m else 0, m + n - 1\n\n        while left \u003e= 0 and left \u003c= right:\n            if right \u003e= m:\n                nums1[right] = nums2[right - m]\n\n            left_number, right_number = nums1[left], nums1[right]\n\n            if right_number \u003e= left_number:\n                right -= 1\n                continue\n            \n            nums1[left], nums1[right] = right_number, left_number\n            right -= 1\n            if left != 0:\n                left -= 1",
      "title": "Merge Sorted Array",
      "url": "/submissions/detail/992845170/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689181593,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111011000101101100001000000000000000000000000111",
      "flag_type": 1
    },
    {
      "id": 992842230,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 88,
      "title_slug": "merge-sorted-array",
      "code": "class Solution:\n    # if the last nums2 number is smaller than the first nums1 number, we just need to\n    # put nums2 + nums1\n    # if the last nums1 number is smaller than the first nums2 number, we just need to \n    # put nums1 + nums2  \n    # iterate over nums2 from the end\n    # if number is bigger than the last nums1 number, insert to the end\n    # if number is smaller than the last nums1 number, insert the last nums1 one number\n    # to the end together with other nums1 numbers that are less than the nums2 number\n    #\n    # nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n    # nums1 = [1,2,3,2,5,6]\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -\u003e None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n\n        left, right = m - 1 if m else 0, m + n - 1\n\n        while left \u003e= 0 and left \u003c= right:\n            if right \u003e= m:\n                nums1[right] = nums2[right - m]\n\n            left_number, right_number = nums1[left], nums1[right]\n\n            if right_number \u003e= left_number:\n                right -= 1\n                continue\n            \n            nums1[left], nums1[right] = right_number, left_number\n            right -= 1\n            left -= 1",
      "title": "Merge Sorted Array",
      "url": "/submissions/detail/992842230/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689181365,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111101111011000101101100001000000000000000000000000101",
      "flag_type": 1
    },
    {
      "id": 991898322,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 125,
      "title_slug": "valid-palindrome",
      "code": "class Solution:\n    def isPalindrome(self, s: str) -\u003e bool:\n        length = len(s)\n\n        # if the sring has only one symbol and it is alphanumeric, it is a palyndrom\n        if s.isalnum() and length == 1:\n            return True \n        \n        i, j = 0, length - 1\n        # iterate from the start and from the end using two indexes:\n        # - if one the symbols is not alphanumeric, move the corresponding index\n        # - if symbols are alphanumeric and not equal, return False\n        # - move indexes\n        while i \u003c j:\n            symbol_start, symbol_end = s[i].lower(), s[j].lower()\n            if not symbol_start.isalnum():\n                i += 1\n                continue\n            if not symbol_end.isalnum():\n                j -= 1\n                continue\n            \n            if symbol_start != symbol_end:\n                return False\n            \n            i += 1\n            j -= 1\n        \n        return True",
      "title": "Valid Palindrome",
      "url": "/submissions/detail/991898322/",
      "lang_name": "Python3",
      "time": "6 months, 4 weeks",
      "timestamp": 1689086547,
      "status": 10,
      "runtime": "68 ms",
      "is_pending": "Not Pending",
      "memory": "17.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 991896861,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 125,
      "title_slug": "valid-palindrome",
      "code": "class Solution:\n    def isPalindrome(self, s: str) -\u003e bool:\n        length = len(s)\n\n        # if the sring has only one symbol and it is alphanumeric, it is a palyndrom\n        if s.isalnum() and length == 1:\n            return True \n        \n        i, j = 0, length - 1\n        # iterate from start and from end:\n    # - if the symbol is not alphanumeric, skip\n    # - if the symbol is alphanumeric, compare\n    # - if indexes are equal or reversed, return\n        while i \u003c j:\n            symbol_start, symbol_end = s[i].lower(), s[j].lower()\n            if not symbol_start.isalnum():\n                i += 1\n                continue\n            if not symbol_end.isalnum():\n                j -= 1\n                continue\n            \n            if symbol_start != symbol_end:\n                return False\n            \n            i += 1\n            j -= 1\n        \n        return True",
      "title": "Valid Palindrome",
      "url": "/submissions/detail/991896861/",
      "lang_name": "Python3",
      "time": "6 months, 4 weeks",
      "timestamp": 1689086420,
      "status": 10,
      "runtime": "68 ms",
      "is_pending": "Not Pending",
      "memory": "17 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 990972145,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 28,
      "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
      "code": "class Solution:\n    # check edge cases:\n    # - if length of the needle is less than the length of the haystack: -1\n    # - if strings are equal: 0\n    # - if length of the needle is equal to the length of the haystack, but \n    #   strings are not equal: -1\n    # iterate over haystack and needle cheking if a substring starting with the current symbol\n    # is equal to the needle\n    def strStr(self, haystack: str, needle: str) -\u003e int:\n        length_needle, length_haystack = len(needle), len(haystack)\n        last_needle_index = length_needle - 1\n\n        if length_needle \u003e length_haystack:\n            return -1\n        \n        if haystack == needle:\n            return 0\n\n        if length_needle == length_haystack:\n            return -1\n        \n        if needle == haystack:\n            return 0\n\n        for i, _ in enumerate(haystack):\n            current_needle = haystack[i:i+length_needle]\n            if current_needle == needle:\n                return i\n        return -1\n",
      "title": "Find the Index of the First Occurrence in a String",
      "url": "/submissions/detail/990972145/",
      "lang_name": "Python3",
      "time": "6 months, 4 weeks",
      "timestamp": 1688993947,
      "status": 10,
      "runtime": "51 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 990971046,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 28,
      "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
      "code": "class Solution:\n    # check edge cases:\n    # - if length of the needle is less than the length of the haystack: -1\n    # - if strings are equal: 0\n    # - if length of the needle is equal to the length of the haystack, but \n    #   strings are not equal: -1\n    # iterate over haystack and needle cheking if a symbol from haystack \n    #   corresponds to the symbol in needle\n    def strStr(self, haystack: str, needle: str) -\u003e int:\n        length_needle, length_haystack = len(needle), len(haystack)\n        last_needle_index = length_needle - 1\n\n        if length_needle \u003e length_haystack:\n            return -1\n        \n        if haystack == needle:\n            return 0\n\n        if length_needle == length_haystack:\n            return -1\n        \n        if needle == haystack:\n            return 0\n\n        j = length_needle\n        for i, _ in enumerate(haystack):\n            current_needle = haystack[i:j]\n            if current_needle == needle:\n                return i\n            j += 1\n        \n        return -1\n",
      "title": "Find the Index of the First Occurrence in a String",
      "url": "/submissions/detail/990971046/",
      "lang_name": "Python3",
      "time": "6 months, 4 weeks",
      "timestamp": 1688993850,
      "status": 10,
      "runtime": "51 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 990965698,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 28,
      "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
      "code": "class Solution:\n    # check edge cases:\n    # - if length of the needle is less than the length of the haystack: -1\n    # - if strings are equal: 0\n    # - if length of the needle is equal to the length of the haystack, but \n    #   strings are not equal: -1\n    # iterate over haystack and needle cheking if a symbol from haystack \n    #   corresponds to the symbol in needle\n    def strStr(self, haystack: str, needle: str) -\u003e int:\n        length_needle, length_haystack = len(needle), len(haystack)\n        last_needle_index = length_needle - 1\n\n        if length_needle \u003e length_haystack:\n            return -1\n        \n        if haystack == needle:\n            return 0\n\n        if length_needle == length_haystack:\n            return -1\n        \n        if needle == haystack:\n            return 0\n\n        i, j = 0, length_needle\n        while j \u003c= len(haystack):\n            current_needle = haystack[i:j]\n            if current_needle == needle:\n                return i\n\n            i += 1\n            j += 1\n        \n        return -1\n",
      "title": "Find the Index of the First Occurrence in a String",
      "url": "/submissions/detail/990965698/",
      "lang_name": "Python3",
      "time": "6 months, 4 weeks",
      "timestamp": 1688993358,
      "status": 10,
      "runtime": "50 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 990951025,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 28,
      "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
      "code": "class Solution:\n    # check edge cases:\n    # - if length of the needle is less than the length of the haystack: -1\n    # - if strings are equal: 0\n    # - if length of the needle is equal to the length of the haystack, but \n    #   strings are not equal: -1\n    # iterate over haystack and needle cheking if a symbol from haystack \n    #   corresponds to the symbol in needle\n    def strStr(self, haystack: str, needle: str) -\u003e int:\n        length_needle, length_haystack = len(needle), len(haystack)\n\n        if length_needle \u003e length_haystack:\n            return -1\n        \n        if haystack == needle:\n            return 0\n\n        if length_needle == length_haystack:\n            return -1\n        \n        j = 0\n        for i, symbol_haystack in enumerate(haystack):\n            if not needle[j] == symbol_haystack:\n                j = 0\n                continue\n    \n            if j == length_needle - 1:\n                return i - j\n\n            j += 1       \n \n        return -1\n",
      "title": "Find the Index of the First Occurrence in a String",
      "url": "/submissions/detail/990951025/",
      "lang_name": "Python3",
      "time": "6 months, 4 weeks",
      "timestamp": 1688991990,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111101000111111111111011011011010101111111111111111111101111110101111",
      "flag_type": 1
    },
    {
      "id": 989425807,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 58,
      "title_slug": "length-of-last-word",
      "code": "class Solution:\n    # we need to iterate over the string searching for words\n    # add a whitespace to the end to avoid the situation when the last symbol is non-whitespace \n    # possible combinations:\n    # 1. a whitespace after a symbol: end of the word\n    # 2. a whitespace after a whitespace: ignore\n    # 3. a symbol after a symbol: ignore\n    def lengthOfLastWord(self, s: str) -\u003e int:\n        s += \" \"\n        result, word_length = 0, 0\n\n        for i, symbol in enumerate(s):\n            if symbol != \" \":\n                word_length += 1\n                continue\n            \n            if word_length \u003e 0:\n                result = word_length\n                word_length = 0\n        \n        return result",
      "title": "Length of Last Word",
      "url": "/submissions/detail/989425807/",
      "lang_name": "Python3",
      "time": "7 months",
      "timestamp": 1688831837,
      "status": 10,
      "runtime": "50 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 989415156,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 58,
      "title_slug": "length-of-last-word",
      "code": "class Solution:\n    # we need to iterate over the string searching for words\n    # possible combinations:\n    # 1. a whitespace after a symbol: end of the word\n    # 2. a whitespace after a whitespace: ignore\n    # 3. a symbol after a symbol, but it's the last symbol: end of the last word\n    # 4. a symbol after a symbol: ignore\n    def lengthOfLastWord(self, s: str) -\u003e int:\n        length = len(s)\n        if length == 1:\n            return 1\n\n        word_start, word_end, in_word = 0, 0, False\n\n        for i, symbol in enumerate(s):\n            is_whitespace = symbol == \" \"\n            is_last = i == length - 1\n            \n            if is_whitespace and in_word:\n                in_word = False\n                word_end = i - 1\n                continue\n            \n            if is_whitespace and not in_word:\n                continue\n\n            if not is_whitespace and in_word and is_last:\n                word_end = i\n                continue\n\n            if not is_whitespace and not in_word and is_last:\n                word_end = i\n                word_start = i\n                continue\n\n            if not is_whitespace and in_word:\n                continue\n\n            if not is_whitespace and not in_word:\n                word_start = i\n                in_word = True\n                continue\n            \n        return word_end - word_start + 1",
      "title": "Length of Last Word",
      "url": "/submissions/detail/989415156/",
      "lang_name": "Python3",
      "time": "7 months",
      "timestamp": 1688831280,
      "status": 10,
      "runtime": "56 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 989412554,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 58,
      "title_slug": "length-of-last-word",
      "code": "class Solution:\n    # we need to iterate over the string searching for words\n    # possible combinations:\n    # 1. a whitespace after a symbol: end of the word\n    # 2. a whitespace after a whitespace: ignore\n    # 3. a symbol after a symbol, but it's the last symbol: end of the last word\n    # 4. a symbol after a symbol: ignore\n    def lengthOfLastWord(self, s: str) -\u003e int:\n        length = len(s)\n        if length == 1:\n            return 1\n\n        word_start, word_end, in_word = 0, 0, False\n\n        for i, symbol in enumerate(s):\n            is_whitespace = symbol == \" \"\n            is_last = i == length - 1\n            \n            if is_whitespace and in_word:\n                in_word = False\n                word_end = i - 1\n                continue\n            \n            if is_whitespace and not in_word:\n                continue\n\n            if not is_whitespace and in_word and is_last:\n                word_end = i\n                continue\n\n            if not is_whitespace and in_word:\n                continue\n\n            if not is_whitespace and not in_word:\n                word_start = i\n                in_word = True\n                continue\n            \n        return word_end - word_start + 1",
      "title": "Length of Last Word",
      "url": "/submissions/detail/989412554/",
      "lang_name": "Python3",
      "time": "7 months",
      "timestamp": 1688831143,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111011111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 989388793,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 58,
      "title_slug": "length-of-last-word",
      "code": "class Solution:\n    def lengthOfLastWord(self, s: str) -\u003e int:\n        return len(s.split()[-1])",
      "title": "Length of Last Word",
      "url": "/submissions/detail/989388793/",
      "lang_name": "Python3",
      "time": "7 months",
      "timestamp": 1688829939,
      "status": 10,
      "runtime": "36 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 987984788,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2,
      "title_slug": "add-two-numbers",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    # create the result pointer that points towards one of the lists\n    # create the result root pointer that will point towards the root of the result list\n    # 1. start infinite loop\n    # 2. if result is false - break, we reached the end\n    # 3. get values from non-empty pointers\n    # 4. add values together, store the carry in a variable\n    # 5. store the value in the result pointer\n    # 6. move the result pointer to the next node, if there is no next node, use a node from\n    #    another list\n    # 7. move list pointers\n    # 8. if we have a carry left, add a node to the result list\n    def addTwoNumbers(self, l1: Optional[ListNode], \n                            l2: Optional[ListNode]) -\u003e Optional[ListNode]:\n        carry = 0\n        result, result_root = l1, l1\n\n        while True:\n            if not l1 and not l2:\n                break\n            \n            number_1 = l1.val if l1 else 0\n            number_2 = l2.val if l2 else 0\n            result_val = number_1 + number_2 + carry\n            if result_val \u003e 9:\n                carry, result_val = 1, result_val - 10\n            else:\n                carry = 0\n            \n            result.val = result_val\n            if not result.next and l2:\n                l1 = None\n                result.next = l2.next\n\n            if result.next:\n                result = result.next\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n\n        if carry:\n            result.next = ListNode(carry)\n\n        return result_root",
      "title": "Add Two Numbers",
      "url": "/submissions/detail/987984788/",
      "lang_name": "Python3",
      "time": "7 months",
      "timestamp": 1688665460,
      "status": 10,
      "runtime": "83 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 987977771,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2,
      "title_slug": "add-two-numbers",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    # create the result pointer that points towards one of the lists\n    # create the result root pointer that will point towards the root of the result list\n    # 1. start infinite loop\n    # 2. if result is false - break, we reached the end\n    # 3. get values from non-empty pointers\n    # 4. add values together, store the carry in a variable\n    # 5. store the value in the result pointer\n    # 6. move the result pointer to the next node, if there is no next node, use a node from\n    #    another list\n    # 7. move list pointers\n    # 8. if we have a carry left, add a node to the result list\n    def addTwoNumbers(self, l1: Optional[ListNode], \n                            l2: Optional[ListNode]) -\u003e Optional[ListNode]:\n        carry = 0\n        result, result_root = l1, l1\n\n        while True:\n            if not l1 and not l2:\n                break\n            \n            number_1 = l1.val if l1 else 0\n            number_2 = l2.val if l2 else 0\n            result_val = number_1 + number_2 + carry\n            if result_val \u003e 9:\n                carry, result_val = 1, result_val - 10\n            else:\n                carry = 0\n            \n            result.val = result_val\n            if not result.next and l2:\n                result.next = l2.next\n\n            if result.next:\n                result = result.next\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n\n        if carry:\n            result.next = ListNode(carry)\n\n        return result_root",
      "title": "Add Two Numbers",
      "url": "/submissions/detail/987977771/",
      "lang_name": "Python3",
      "time": "7 months",
      "timestamp": 1688664919,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 987967539,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2,
      "title_slug": "add-two-numbers",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    # create the result pointer that points towards one of the lists\n    # create the result root pointer that will point towards the root of the result list\n    # 1. start infinite loop\n    # 2. if result is false - break, we reached the end\n    # 3. get values from non-empty pointers\n    # 4. add values together, store the carry in a variable\n    # 5. store the value in the result pointer\n    # 6. move the result pointer to the next node, if there is no next node, use a node from\n    #    another list\n    # 7. move list pointers\n    # 8. if we have a carry left, add a node to the result list\n    def addTwoNumbers(self, l1: Optional[ListNode], \n                            l2: Optional[ListNode]) -\u003e Optional[ListNode]:\n        carry = 0\n        result, result_root = l1, l1\n\n        while True:\n            number_1, number_2 = 0, 0\n            if not result:\n                break\n            if not l1 and not l2:\n                break\n            if l1:\n                number_1 = l1.val\n            if l2:\n                number_2 = l2.val\n            result_val = number_1 + number_2 + carry\n            if result_val \u003e 9:\n                carry, result_val = 1, result_val - 10\n            else:\n                carry = 0\n            \n            result.val = result_val\n            if not result.next and l2:\n                result.next = l2.next\n            \n            if result.next:\n                result = result.next\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n\n        if carry:\n            result.next = ListNode(carry)\n\n        return result_root",
      "title": "Add Two Numbers",
      "url": "/submissions/detail/987967539/",
      "lang_name": "Python3",
      "time": "7 months",
      "timestamp": 1688664115,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 987772183,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 13,
      "title_slug": "roman-to-integer",
      "code": "class Solution:\n    def romanToInt(self, input_numbers: str) -\u003e int:\n        result = 0\n        previous = None\n        values = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000,\n        }\n        subtractions = set([\"IV\", \"IX\", \"XL\", \"XC\", \"CD\", \"CM\"])\n\n        for number in input_numbers:\n            if f\"{previous}{number}\" in subtractions:\n                result = result - values[previous] * 2 + values[number]\n            else:\n                result += values[number]\n            previous = number\n        \n        return result\n            ",
      "title": "Roman to Integer",
      "url": "/submissions/detail/987772183/",
      "lang_name": "Python3",
      "time": "7 months",
      "timestamp": 1688647420,
      "status": 10,
      "runtime": "73 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 956374623,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 27,
      "title_slug": "remove-element",
      "code": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -\u003e int:\n        length = len(nums)\n\n        if not length: \n            return 0\n\n        first = nums[0]\n        if length == 1 and first == val:\n            nums.pop()\n            return 0\n        if length == 1 and first != val:\n            return 1\n        \n        not_equal_index = -1 if first == val else 0\n        for i, number in enumerate(nums[1:], 1):\n            if number == val:\n                continue\n\n            not_equal_index += 1\n            nums[not_equal_index] = number\n\n        return not_equal_index + 1\n            \n\n",
      "title": "Remove Element",
      "url": "/submissions/detail/956374623/",
      "lang_name": "Python3",
      "time": "8 months, 2 weeks",
      "timestamp": 1684923903,
      "status": 10,
      "runtime": "47 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995195206,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 383,
      "title_slug": "ransom-note",
      "code": "class Solution:\n    # two indexes: ransom_i, magazine_i\n    # sort both ransomNote and magazine (ascending order)\n    # while indexes have not reached the end:\n    # - if ransom symbol is equal to the magazine_symbol: increase both indexes\n    # - if it is not equal, increase only magazine index\n    # return wheter the ranson index is equal to the length of the ransom\n    def canConstruct(self, ransomNote: str, magazine: str) -\u003e bool:\n        ransom_i, magazine_i = 0, 0\n        ransom_length, magazine_length = len(ransomNote), len(magazine)\n        ransomNote = sorted(ransomNote)\n        magazine = sorted(magazine)\n\n        if magazine_length \u003c ransom_length:\n            return False\n\n        while ransom_i \u003c ransom_length and magazine_i \u003c magazine_length:\n            ransom_symbol, magazine_symbol = ransomNote[ransom_i], magazine[magazine_i]\n            \n            if ransom_symbol == magazine_symbol:\n                ransom_i += 1\n                \n            magazine_i += 1\n\n        return ransom_i == ransom_length",
      "title": "Ransom Note",
      "url": "/submissions/detail/995195206/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689438915,
      "status": 10,
      "runtime": "134 ms",
      "is_pending": "Not Pending",
      "memory": "16.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995193462,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 383,
      "title_slug": "ransom-note",
      "code": "class Solution:\n    # two indexes: ransom_i, magazine_i\n    # sort both ransomNote and magazine (ascending order)\n    # while indexes have not reached the end:\n    # - if ransom symbol is equal to the magazine_symbol: increase both indexes\n    # - if it is not equal, increase only magazine index\n    # return wheter the ranson index is equal to the length of the ransom\n    def canConstruct(self, ransomNote: str, magazine: str) -\u003e bool:\n        ransom_i, magazine_i = 0, 0\n        ransom_length, magazine_length = len(ransomNote), len(magazine)\n\n        while ransom_i \u003c ransom_length and magazine_i \u003c magazine_length:\n            ransom_symbol, magazine_symbol = ransomNote[ransom_i], magazine[magazine_i]\n            \n            if ransom_symbol == magazine_symbol:\n                ransom_i += 1\n                \n            magazine_i += 1\n\n        return ransom_i == ransom_length",
      "title": "Ransom Note",
      "url": "/submissions/detail/995193462/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689438758,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11101111111011110111111110111001111110111011010101011000111111110111110101111110111111111110111111001110011111101111111111111110",
      "flag_type": 1
    },
    {
      "id": 993708456,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 392,
      "title_slug": "is-subsequence",
      "code": "class Solution:\n    # create two pointers, original and sub, both are zero\n    # while either of those pointers have not reached the end:\n    # - if original symbol is equal to the sub, move both pointer to the right\n    # - if not, move original pointer to the right\n    # if sub pointer reached the end, return True, otherwise False\n    def isSubsequence(self, s: str, t: str) -\u003e bool:\n        original, sub = 0, 0\n        original_length, sub_length = len(t), len(s)\n\n        while original \u003c original_length and sub \u003c sub_length:\n            if s[sub] == t[original]:\n                original += 1\n                sub += 1\n                continue\n            \n            original += 1\n\n        return sub == sub_length",
      "title": "Is Subsequence",
      "url": "/submissions/detail/993708456/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689271893,
      "status": 10,
      "runtime": "47 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111",
      "flag_type": 1
    },
    {
      "id": 993697050,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "class Solution:\n    \n    def longestCommonPrefix(self, strs: List[str]) -\u003e str:\n        if len(strs) == 1:\n            return strs[0]\n\n        min_length = min([len(string) for string in strs])\n        prefix = strs[0][0:min_length]\n        for string in strs:\n            if not prefix:\n                return \"\"\n            \n            while not string.startswith(prefix):\n                prefix = prefix[0:-1]\n            \n        return prefix",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/993697050/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689271071,
      "status": 10,
      "runtime": "48 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 993689950,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 14,
      "title_slug": "longest-common-prefix",
      "code": "class Solution:\n    \n    def longestCommonPrefix(self, strs: List[str]) -\u003e str:\n        if len(strs) == 1:\n            return strs[0]\n\n        min_length = min([len(string) for string in strs])\n        for i in range(min_length, -1, -1):\n            current = strs[0][0:i+1]\n            for string in strs[1:]:\n                if string[0:i+1] != current:\n                    break\n            else:\n                return current\n\n        return \"\"    ",
      "title": "Longest Common Prefix",
      "url": "/submissions/detail/993689950/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689270542,
      "status": 10,
      "runtime": "47 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 993678918,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 13,
      "title_slug": "roman-to-integer",
      "code": "class Solution:\n    def romanToInt(self, input_numbers: str) -\u003e int:\n        result = 0\n        previous = None\n        values = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000,\n        }\n        subtractions = set([\"IV\", \"IX\", \"XL\", \"XC\", \"CD\", \"CM\"])\n\n        for number in input_numbers:\n            if f\"{previous}{number}\" in subtractions:\n                result += values[number] - values[previous] * 2\n            else:\n                result += values[number]\n            previous = number\n        \n        return result\n            ",
      "title": "Roman to Integer",
      "url": "/submissions/detail/993678918/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689269694,
      "status": 10,
      "runtime": "54 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 993678099,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 13,
      "title_slug": "roman-to-integer",
      "code": "class Solution:\n    def romanToInt(self, input_numbers: str) -\u003e int:\n        result = 0\n        previous = None\n        values = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000,\n        }\n        subtractions = set([\"IV\", \"IX\", \"XL\", \"XC\", \"CD\", \"CM\"])\n\n        for number in input_numbers:\n            if f\"{previous}{number}\" in subtractions:\n                result -= values[previous] * 2 + values[number]\n            else:\n                result += values[number]\n            previous = number\n        \n        return result\n            ",
      "title": "Roman to Integer",
      "url": "/submissions/detail/993678099/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689269635,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 993676626,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 169,
      "title_slug": "majority-element",
      "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -\u003e int:\n        return sorted(nums)[len(nums)//2]\n                ",
      "title": "Majority Element",
      "url": "/submissions/detail/993676626/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689269523,
      "status": 10,
      "runtime": "162 ms",
      "is_pending": "Not Pending",
      "memory": "17.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 993675107,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 121,
      "title_slug": "best-time-to-buy-and-sell-stock",
      "code": "class Solution:\n    # Input: prices = [7,1,5,3,6,4]\n    # Output: 5\n    # Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n    # Note that buying on day 2 and selling on day 1 is not allowed because you must buy \n    # before you sell.\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        length = len(prices)\n        if length \u003c 2:\n            return 0\n\n        left, right, profit = 0, 1, 0\n        while right \u003c length:\n            current_profit = prices[right] - prices[left]\n            is_profitable = current_profit \u003e 0\n            if is_profitable and current_profit \u003e profit:\n                profit = current_profit\n            elif not is_profitable:\n                left = right\n            \n            right += 1\n\n        return profit",
      "title": "Best Time to Buy and Sell Stock",
      "url": "/submissions/detail/993675107/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689269417,
      "status": 10,
      "runtime": "984 ms",
      "is_pending": "Not Pending",
      "memory": "27.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 993666950,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 121,
      "title_slug": "best-time-to-buy-and-sell-stock",
      "code": "class Solution:\n    # Input: prices = [7,1,5,3,6,4]\n    # Output: 5\n    # Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n    # Note that buying on day 2 and selling on day 1 is not allowed because you must buy \n    # before you sell.\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        length = len(prices)\n        if length \u003c 2:\n            return 0\n\n        left, right, profit = 0, 1, 0\n        while right \u003c length:\n            current_profit = prices[right] - prices[left]\n            if current_profit \u003e 0:\n                profit = max(current_profit, profit)\n            else:\n                left = right\n            right += 1\n\n        return profit",
      "title": "Best Time to Buy and Sell Stock",
      "url": "/submissions/detail/993666950/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689268784,
      "status": 10,
      "runtime": "1009 ms",
      "is_pending": "Not Pending",
      "memory": "27.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 993666806,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 121,
      "title_slug": "best-time-to-buy-and-sell-stock",
      "code": "class Solution:\n    # Input: prices = [7,1,5,3,6,4]\n    # Output: 5\n    # Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n    # Note that buying on day 2 and selling on day 1 is not allowed because you must buy \n    # before you sell.\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        length = len(prices)\n        if length \u003c 2:\n            return 0\n\n        left, right, profit = 0, 1, 0\n        while right \u003c length:\n            current_profit = prices[right] - prices[left]\n            if current_profit \u003e 0:\n                profit = max(curreht_profit, profit)\n            else:\n                left = right\n            right += 1\n\n        return profit",
      "title": "Best Time to Buy and Sell Stock",
      "url": "/submissions/detail/993666806/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689268772,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 993664784,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 121,
      "title_slug": "best-time-to-buy-and-sell-stock",
      "code": "class Solution:\n    # Input: prices = [7,1,5,3,6,4]\n    # Output: 5\n    # Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n    # Note that buying on day 2 and selling on day 1 is not allowed because you must buy \n    # before you sell.\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        length = len(prices)\n        if length \u003c 2:\n            return 0\n\n        left, right, profit = 0, 1, 0\n        smallest_price, biggest_price = prices[0], prices[-1]\n\n        while right \u003c length:\n            current_profit = prices[right] - prices[left]\n\n            if current_profit \u003c 0:\n                left += 1\n                right += 1\n                continue\n\n            if current_profit \u003e profit:\n                profit = current_profit\n                right += 1\n\n        return profit",
      "title": "Best Time to Buy and Sell Stock",
      "url": "/submissions/detail/993664784/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689268616,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 993651097,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 121,
      "title_slug": "best-time-to-buy-and-sell-stock",
      "code": "class Solution:\n    # Input: prices = [7,1,5,3,6,4]\n    # Output: 5\n    # Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n    # Note that buying on day 2 and selling on day 1 is not allowed because you must buy \n    # before you sell.\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        profit = 0\n        for i, price_buy in enumerate(prices):\n            for j, price_sell in enumerate(prices[i+1:]):\n                new_profit = price_sell - price_buy\n                if new_profit \u003e profit:\n                    profit = new_profit\n        \n        return profit",
      "title": "Best Time to Buy and Sell Stock",
      "url": "/submissions/detail/993651097/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689267547,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000",
      "flag_type": 1
    },
    {
      "id": 993649619,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 121,
      "title_slug": "best-time-to-buy-and-sell-stock",
      "code": "class Solution:\n    # Input: prices = [7,1,5,3,6,4]\n    # Output: 5\n    # Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n    # Note that buying on day 2 and selling on day 1 is not allowed because you must buy \n    # before you sell.\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        length = len(prices)\n        if length \u003c 2:\n            return 0\n\n        profit, last_day = 0, length - 1\n        for i, price_buy in enumerate(prices[:last_day]):\n            price_sell = sorted(prices[i+1:])[-1]\n            new_profit = price_sell - price_buy\n            if new_profit \u003e profit:\n                profit = new_profit\n        \n        return profit",
      "title": "Best Time to Buy and Sell Stock",
      "url": "/submissions/detail/993649619/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689267433,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000",
      "flag_type": 1
    },
    {
      "id": 993634402,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 169,
      "title_slug": "majority-element",
      "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -\u003e int:\n        return sorted(nums)[len(nums)//2]\n                ",
      "title": "Majority Element",
      "url": "/submissions/detail/993634402/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689266255,
      "status": 10,
      "runtime": "169 ms",
      "is_pending": "Not Pending",
      "memory": "17.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 993633344,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 169,
      "title_slug": "majority-element",
      "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -\u003e int:\n        count, candidate = 0, 0\n        for number in nums:\n            if count == 0:\n                candidate = number\n            \n            if number == candidate:\n                count += 0\n            else:\n                count -= 1\n        \n        return candidate\n                ",
      "title": "Majority Element",
      "url": "/submissions/detail/993633344/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689266175,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111101101101001000101010101011100110101011110",
      "flag_type": 1
    },
    {
      "id": 993616487,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 26,
      "title_slug": "remove-duplicates-from-sorted-array",
      "code": "class Solution:\n    # non-decreasing order, so to remove the duplicates we just need to remove all \n    #    consequent duplicates\n    # create replace index, set it to 1 - the first element is always unique\n    # check if length is more than 1 to avoid out-of-bounds - \n    #   if the length is one, just return 1\n    # iterate over nums starting from the second element:\n    # - if the current number is not equal to the previous, \n    #   set nums[replace] to it, move the replace index\n    # - if the current number is equal to the previous one, continue \n    # return replace \n    def removeDuplicates(self, nums: List[int]) -\u003e int:\n        replace = 1\n        for i, number in enumerate(nums[1:], 1): \n            if number == nums[i-1]:\n                continue\n            nums[replace] = number\n            replace += 1\n        \n        return replace",
      "title": "Remove Duplicates from Sorted Array",
      "url": "/submissions/detail/993616487/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689264811,
      "status": 10,
      "runtime": "106 ms",
      "is_pending": "Not Pending",
      "memory": "17.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 993608947,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 26,
      "title_slug": "remove-duplicates-from-sorted-array",
      "code": "class Solution:\n    # non-decreasing order, so to remove the duplicates we just need to remove all \n    #    consequent duplicates\n    # create replace index, set it to 0\n    # create a set of duplicates\n    # iterate over nums:\n    # - if the number is in the set, continue\n    # - if the number is not in the set, set nums[replace] to that number, add it to the set\n    # return replace\n    def removeDuplicates(self, nums: List[int]) -\u003e int:\n        replace, duplicates = 0, set()\n        for i, number in enumerate(nums): \n            if number in duplicates:\n                continue\n            nums[replace] = number\n            replace += 1\n            duplicates.add(number)\n        \n        return replace",
      "title": "Remove Duplicates from Sorted Array",
      "url": "/submissions/detail/993608947/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689264194,
      "status": 10,
      "runtime": "98 ms",
      "is_pending": "Not Pending",
      "memory": "18 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 993600998,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 27,
      "title_slug": "remove-element",
      "code": "class Solution:\n    # create replace index\n    # iterate over nums:\n    # - if the current number is equal to val, continue\n    # - set nums[replace] to that number, increase the index\n\n    def removeElement(self, nums: List[int], val: int) -\u003e int:\n        replace = 0\n        for i, number in enumerate(nums):\n            if number == val:\n                continue\n            nums[replace] = number\n            replace += 1\n        \n        return replace",
      "title": "Remove Element",
      "url": "/submissions/detail/993600998/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689263564,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 993596529,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 27,
      "title_slug": "remove-element",
      "code": "class Solution:\n    # create two indexes, current and replace\n    # create non_val_count\n    # while to-be-replaced has not reached the end:\n    # - if the current number is a regular number, move the current index, \n    #   increase non_val_count\n    # - if the replace index is equal or less than the current, move it and continue\n    # - if the replace number is a non-regular number, move the replace index and continue\n    # - if the current number is a non-regular, replace it with the replace number, \n    #   replace the replace number with val, move both indexes\n    # return the current index + 1\n\n    def removeElement(self, nums: List[int], val: int) -\u003e int:\n        current, replace, val_count, length = 0, 0, 0, len(nums)\n        non_val_count = 0\n        \n        while replace \u003c length and current \u003c length:\n            current_number, replace_number = nums[current], nums[replace]\n            \n            if current_number != val:\n                current += 1\n                non_val_count += 1\n                continue\n\n            if replace \u003c= current:\n                replace = current + 1\n                continue\n\n            if replace_number == val:\n                replace += 1\n                continue\n\n            nums[current], nums[replace] = replace_number, val\n            replace += 1\n            current += 1\n            non_val_count += 1\n            \n        return non_val_count",
      "title": "Remove Element",
      "url": "/submissions/detail/993596529/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689263202,
      "status": 10,
      "runtime": "47 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995762703,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "class Solution:\n    def isValid(self, s: str) -\u003e bool:\n        length = len(s)\n        if length \u003c 2:\n            return False\n\n        brackets_open = {\n            \"{\": \"}\",\n            \"(\": \")\",\n            \"[\": \"]\"\n        }\n        brackets_close = brackets_open.values()\n        stack = [s[0]]\n\n        for bracket in s[1:]:\n            if bracket not in brackets_close:\n                stack.append(bracket)\n                continue\n\n            if len(stack) == 0 or brackets_open.get(stack[-1]) != bracket:\n                return False\n            \n            stack.pop()\n\n        return not len(stack) ",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/995762703/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689500315,
      "status": 10,
      "runtime": "52 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995760871,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "class Solution:\n    def isValid(self, s: str) -\u003e bool:\n        length = len(s)\n        if length \u003c 2:\n            return False\n\n        brackets_open = {\n            \"{\": \"}\",\n            \"(\": \")\",\n            \"[\": \"]\"\n        }\n        brackets_close = brackets_open.values()\n        stack = [s[0]]\n\n        for bracket in s[1:]:\n            if bracket not in brackets_close:\n                stack.append(bracket)\n                continue\n            \n            if len(stack) == 0 or brackets_open[stack[-1]] != bracket:\n                return False\n            \n            stack.pop()\n\n        return not len(stack) ",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/995760871/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689500115,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 995760538,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "class Solution:\n    def isValid(self, s: str) -\u003e bool:\n        length = len(s)\n        if length \u003c 2:\n            return False\n\n        brackets_open = {\n            \"{\": \"}\",\n            \"(\": \")\",\n            \"[\": \"]\"\n        }\n        brackets_close = brackets_open.values()\n        stack = [s[0]]\n\n        for bracket in s[1:]:\n            if bracket not in brackets_close:\n                stack.append(bracket)\n                continue\n            \n            if brackets_open[stack[-1]] != bracket:\n                return False\n            \n            stack.pop()\n\n        return not len(stack) ",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/995760538/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689500079,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 995750994,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 219,
      "title_slug": "contains-duplicate-ii",
      "code": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -\u003e bool:\n        indexes = {}\n        for i, number in enumerate(nums):\n            if number in indexes and abs(i - indexes[number]) \u003c= k:\n                return True\n            indexes[number] = i\n        return False\n\n            ",
      "title": "Contains Duplicate II",
      "url": "/submissions/detail/995750994/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689499021,
      "status": 10,
      "runtime": "609 ms",
      "is_pending": "Not Pending",
      "memory": "29.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995750483,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 219,
      "title_slug": "contains-duplicate-ii",
      "code": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -\u003e bool:\n        indexes = defaultdict(set)\n        for i, number in enumerate(nums):\n            if number in indexes and any(abs(i - j) \u003c= k for j in indexes[number]):\n                return True\n            indexes[number].add(i)\n        return False\n\n            ",
      "title": "Contains Duplicate II",
      "url": "/submissions/detail/995750483/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689498969,
      "status": 10,
      "runtime": "682 ms",
      "is_pending": "Not Pending",
      "memory": "46.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995701431,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 202,
      "title_slug": "happy-number",
      "code": "class Solution:\n    def isHappy(self, n: int) -\u003e bool:\n        sums = set()\n        while n != 1:\n            if n in sums:\n                return False\n            sums.add(n)\n            \n            sum = 0\n            while n \u003e 0:\n                sum += (n % 10 )**2\n                n = n // 10\n            n = sum\n\n        return True",
      "title": "Happy Number",
      "url": "/submissions/detail/995701431/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689493640,
      "status": 10,
      "runtime": "48 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995698236,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 202,
      "title_slug": "happy-number",
      "code": "class Solution:\n    def isHappy(self, n: int) -\u003e bool:\n        while True:\n            sum = 0\n            while n \u003e 0:\n                sum += (n % 10 )**2\n                n = n // 10\n            n = sum\n            if sum \u003c 10:\n                break\n\n        return n in [1, 7]",
      "title": "Happy Number",
      "url": "/submissions/detail/995698236/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689493303,
      "status": 10,
      "runtime": "50 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995698084,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 202,
      "title_slug": "happy-number",
      "code": "class Solution:\n    def isHappy(self, n: int) -\u003e bool:\n        while True:\n            sum = 0\n            while n \u003e 0:\n                sum += (n % 10 )**2\n                n = n // 10\n            n = sum\n            print(n)\n            if sum \u003c 10:\n                break\n\n        return n in [1, 7]",
      "title": "Happy Number",
      "url": "/submissions/detail/995698084/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689493286,
      "status": 10,
      "runtime": "51 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995695794,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 202,
      "title_slug": "happy-number",
      "code": "class Solution:\n    def isHappy(self, n: int) -\u003e bool:\n        while True:\n            sum = 0\n            while n \u003e 0:\n                sum += (n % 10 )**2\n                n = n // 10\n            n = sum\n            if sum \u003c 10:\n                break\n\n        return n == 1",
      "title": "Happy Number",
      "url": "/submissions/detail/995695794/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689493046,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995274303,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -\u003e List[int]:\n        indexes = {}\n        for i, number in enumerate(nums):\n            diff = target - number\n            if diff in indexes: \n                return [indexes[diff], i]\n            indexes[number] = i",
      "title": "Two Sum",
      "url": "/submissions/detail/995274303/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689445487,
      "status": 10,
      "runtime": "67 ms",
      "is_pending": "Not Pending",
      "memory": "17.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995272408,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 242,
      "title_slug": "valid-anagram",
      "code": "class Solution:\n    def isAnagram(self, s: str, t: str) -\u003e bool:\n        s_length, t_length = len(s), len(t)\n\n        if s_length != t_length:\n            return False\n        \n        count = defaultdict(int)\n        for i, s_symbol in enumerate(s):\n            t_symbol = t[i]\n            count[s_symbol] += 1\n            count[t_symbol] -= 1\n\n        return not any((i != 0 for i in count.values())) ",
      "title": "Valid Anagram",
      "url": "/submissions/detail/995272408/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689445336,
      "status": 10,
      "runtime": "63 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "1111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995264601,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 290,
      "title_slug": "word-pattern",
      "code": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -\u003e bool:\n        words = s.split()\n        words_length, pattern_length = len(words), len(pattern)\n\n        if words_length != pattern_length:\n            return False\n        \n        symbol_to_word = {}\n        word_to_symbol = {}\n\n        for i, symbol in enumerate(pattern):\n            word = words[i]\n            symbol_in, word_in = symbol in symbol_to_word, word in word_to_symbol\n\n            if symbol_in and word_in and symbol_to_word[symbol] == word:\n                continue\n\n            if not symbol_in and not word_in:\n                symbol_to_word[symbol] = word\n                word_to_symbol[word] = symbol\n                continue\n\n            return False\n        \n        return True\n            \n",
      "title": "Word Pattern",
      "url": "/submissions/detail/995264601/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689444696,
      "status": 10,
      "runtime": "57 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995263132,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 290,
      "title_slug": "word-pattern",
      "code": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -\u003e bool:\n        words = s.split()\n        words_length, pattern_length = len(words), len(pattern)\n\n        if words_length != pattern_length:\n            return False\n        \n        symbol_to_word = {}\n        word_to_symbol = {}\n\n        for i, symbol in enumerate(pattern):\n            word = words[i]\n            symbol_in, word_in = symbol in symbol_to_word, word in word_to_symbol\n\n            if symbol_in and word_in:\n                continue\n\n            if not symbol_in and not word_in:\n                symbol_to_word[symbol] = word\n                word_to_symbol[word] = symbol\n                continue\n\n            return False\n        \n        return True\n            \n",
      "title": "Word Pattern",
      "url": "/submissions/detail/995263132/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689444583,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111011100111111111111111111111111101111",
      "flag_type": 1
    },
    {
      "id": 995263058,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 290,
      "title_slug": "word-pattern",
      "code": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -\u003e bool:\n        words = s.split()\n        words_length, pattern_length = len(words), len(pattern)\n\n        if words_length != pattern_length:\n            return Falser\n        \n        symbol_to_word = {}\n        word_to_symbol = {}\n\n        for i, symbol in enumerate(pattern):\n            word = words[i]\n            symbol_in, word_in = symbol in symbol_to_word, word in word_to_symbol\n\n            if symbol_in and word_in:\n                continue\n\n            if not symbol_in and not word_in:\n                symbol_to_word[symbol] = word\n                word_to_symbol[word] = symbol\n                continue\n\n            return False\n        \n        return True\n            \n",
      "title": "Word Pattern",
      "url": "/submissions/detail/995263058/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689444576,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11110000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 995251155,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 205,
      "title_slug": "isomorphic-strings",
      "code": "class Solution:\n    def isIsomorphic(self, s: str, t: str) -\u003e bool:\n        s_length, t_length = len(s), len(t)\n        if s_length != t_length:\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        for i, s_symbol in enumerate(s):\n            t_symbol = t[i]\n\n            if s_symbol not in s_to_t and t_symbol not in t_to_s:\n                s_to_t[s_symbol] = t_symbol\n                t_to_s[t_symbol] = s_symbol\n            elif s_symbol in s_to_t and s_to_t[s_symbol] == t_symbol:\n                continue\n            else:\n                return False\n                \n        return True",
      "title": "Isomorphic Strings",
      "url": "/submissions/detail/995251155/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689443610,
      "status": 10,
      "runtime": "59 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995248128,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 205,
      "title_slug": "isomorphic-strings",
      "code": "class Solution:\n    def isIsomorphic(self, s: str, t: str) -\u003e bool:\n        return list(map(s.index, s)) == list(map(t.index, t))",
      "title": "Isomorphic Strings",
      "url": "/submissions/detail/995248128/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689443370,
      "status": 10,
      "runtime": "55 ms",
      "is_pending": "Not Pending",
      "memory": "17.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995231074,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 205,
      "title_slug": "isomorphic-strings",
      "code": "class Solution:\n    # hashmap containing remaps of characters, index\n    # iterate over string s:\n    # - if symbol s is equal to the symbol t, move the index, continue\n    # - if not:\n    #   - if there is a remap for that symbol and that is equal, move the index, continue\n    #   - if there is a remap and it is not equal, return False\n    #   - if there is no remap, create one, move the index, continue\n    # return True\n    def isIsomorphic(self, s: str, t: str) -\u003e bool:\n        remaps = {}\n        for i, symbol in enumerate(s):\n            symbol_t = t[i]\n            \n            if symbol == symbol_t:\n                continue\n            \n            if symbol not in remaps:\n                remaps[symbol] = symbol_t\n                continue\n            \n            if remaps[symbol] != symbol_t:\n                return False\n        \n        return True",
      "title": "Isomorphic Strings",
      "url": "/submissions/detail/995231074/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689441983,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111101101011000000010101111101101110010110",
      "flag_type": 1
    },
    {
      "id": 995216343,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 383,
      "title_slug": "ransom-note",
      "code": "class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -\u003e bool:\n        ransom_i, magazine_i = 0, 0\n        ransom_length, magazine_length = len(ransomNote), len(magazine)\n\n        if magazine_length \u003c ransom_length:\n            return False\n        \n        if ransom_length == 1:\n            return ransomNote in magazine\n\n        symbols = [0 for _ in range(26)]\n\n        for symbol in magazine:\n            symbols[ord(symbol)-97] += 1\n\n        for symbol in ransomNote:\n            symbols[ord(symbol)-97] -= 1\n        \n        \n        return not any((count \u003c 0 for count in symbols))",
      "title": "Ransom Note",
      "url": "/submissions/detail/995216343/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689440743,
      "status": 10,
      "runtime": "89 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995209217,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 383,
      "title_slug": "ransom-note",
      "code": "class Solution:\n    # two indexes: ransom_i, magazine_i\n    # sort both ransomNote and magazine (ascending order)\n    # while indexes have not reached the end:\n    # - if ransom symbol is equal to the magazine_symbol: increase both indexes\n    # - if it is not equal, increase only magazine index\n    # return wheter the ranson index is equal to the length of the ransom\n    def canConstruct(self, ransomNote: str, magazine: str) -\u003e bool:\n        ransom_i, magazine_i = 0, 0\n        ransom_length, magazine_length = len(ransomNote), len(magazine)\n\n        if magazine_length \u003c ransom_length:\n            return False\n        \n        if ransom_length == 1:\n            return ransomNote in magazine\n\n        ransomNote = sorted(ransomNote)\n        magazine = sorted(magazine)\n\n        while ransom_i \u003c ransom_length and magazine_i \u003c magazine_length:\n            ransom_symbol, magazine_symbol = ransomNote[ransom_i], magazine[magazine_i]\n            \n            if magazine_symbol \u003e ransom_symbol:\n                return False\n\n            if ransom_symbol == magazine_symbol:\n                ransom_i += 1\n            \n            magazine_i += 1\n\n        return ransom_i == ransom_length",
      "title": "Ransom Note",
      "url": "/submissions/detail/995209217/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689440132,
      "status": 10,
      "runtime": "143 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995207103,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 383,
      "title_slug": "ransom-note",
      "code": "class Solution:\n    # two indexes: ransom_i, magazine_i\n    # sort both ransomNote and magazine (ascending order)\n    # while indexes have not reached the end:\n    # - if ransom symbol is equal to the magazine_symbol: increase both indexes\n    # - if it is not equal, increase only magazine index\n    # return wheter the ranson index is equal to the length of the ransom\n    def canConstruct(self, ransomNote: str, magazine: str) -\u003e bool:\n        ransom_i, magazine_i = 1, 1\n        ransom_length, magazine_length = len(ransomNote), len(magazine)\n\n        if magazine_length \u003c ransom_length:\n            return False\n        \n        if ransom_length == 1:\n            return ransomNote in magazine\n\n        ransomNote = sorted(ransomNote)\n        magazine = sorted(magazine)\n\n        while ransom_i \u003c ransom_length and magazine_i \u003c magazine_length:\n            ransom_symbol, magazine_symbol = ransomNote[ransom_i], magazine[magazine_i]\n            \n            if ransom_symbol == magazine_symbol:\n                ransom_i += 1\n                magazine_i += 1\n                continue\n            \n            if magazine_symbol == magazine[magazine_i-1]:\n                magazine_i += 1\n                continue\n            \n            return False\n\n        return ransom_i == ransom_length",
      "title": "Ransom Note",
      "url": "/submissions/detail/995207103/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689439948,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11110101110000100100001000111000101010010010000000000000110000000101100000000010010111110000101110001010011111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997558323,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 155,
      "title_slug": "min-stack",
      "code": "from sortedcontainers import sortedset\n\nclass MinStack:\n    class Node:\n        def __init__(self, val: int, prev: 'Node'):\n            self.val = val\n            self.prev = prev\n\n\n    def __init__(self):\n        self.stack: List[Node] = []\n        self.min_node = None\n\n    def push(self, val: int) -\u003e None:\n        new_node = self.Node(val, None)\n        self.stack.append(new_node)\n        if self.min_node is None or val \u003c= self.min_node.val:\n            new_node.prev = self.min_node\n            self.min_node = new_node\n\n    def pop(self) -\u003e None:\n        pop = self.stack.pop()\n        if pop == self.min_node:\n            self.min_node = self.min_node.prev\n\n    def top(self) -\u003e int:\n        return self.stack[-1].val\n\n    def getMin(self) -\u003e int:\n        return self.min_node.val\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()",
      "title": "Min Stack",
      "url": "/submissions/detail/997558323/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689684364,
      "status": 10,
      "runtime": "84 ms",
      "is_pending": "Not Pending",
      "memory": "21.6 MB",
      "compare_result": "1111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997543979,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 71,
      "title_slug": "simplify-path",
      "code": "class Solution:\n    def simplifyPath(self, path: str) -\u003e str:\n        canonical = []\n        for directory in path.split(\"/\"):\n            if not directory or directory == \".\":\n                continue\n            \n            if directory != \"..\":\n                canonical.append(directory)\n                continue\n            \n            if len(canonical):\n                canonical.pop()\n\n        return \"/\" + \"/\".join(canonical)",
      "title": "Simplify Path",
      "url": "/submissions/detail/997543979/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689683002,
      "status": 10,
      "runtime": "50 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997543552,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 71,
      "title_slug": "simplify-path",
      "code": "class Solution:\n    def simplifyPath(self, path: str) -\u003e str:\n        canonical = []\n        for directory in path.split(\"/\"):\n            if not directory or directory == \".\":\n                continue\n            \n            if directory != \"..\":\n                canonical.append(directory)\n                continue\n            \n            if not len(canonical):\n                return \"/\"\n            \n            canonical.pop()\n\n        return \"/\" + \"/\".join(canonical)",
      "title": "Simplify Path",
      "url": "/submissions/detail/997543552/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689682966,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111101111111111111111111111111111110011111111111111111111111111111001111110010111101011111011101010111111111111001111011011110111111001101100011101001011110100010111111001110111111010110111111010100011101011111110111110111111111111111111111011001011111001001",
      "flag_type": 1
    },
    {
      "id": 997542791,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 71,
      "title_slug": "simplify-path",
      "code": "class Solution:\n    def simplifyPath(self, path: str) -\u003e str:\n        canonical = []\n        for directory in path.split(\"/\"):\n            if not directory or directory == \".\":\n                continue\n            \n            if directory != \"..\":\n                canonical.append(directory)\n                continue\n            \n        \n\n        return \"/\" + \"/\".join(canonical)",
      "title": "Simplify Path",
      "url": "/submissions/detail/997542791/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689682889,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111000111111111111111111011111010000111111101111110001010001101111100011111010011111101111111100100000100001000000000000000000000100000000000000100000100000111000010010000000000110101000000000000010000011000000000000000000000000000000000000000000000000000011",
      "flag_type": 1
    },
    {
      "id": 997539098,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 128,
      "title_slug": "longest-consecutive-sequence",
      "code": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        if length \u003c 2:\n            return length\n        \n        nums = set(nums)\n        longest = 1\n        for number in nums:\n            if number - 1 in nums:\n                continue\n            consequent = 1\n            while number + consequent in nums:\n                consequent += 1\n            longest = max(longest, consequent)\n        \n        return longest",
      "title": "Longest Consecutive Sequence",
      "url": "/submissions/detail/997539098/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689682534,
      "status": 10,
      "runtime": "439 ms",
      "is_pending": "Not Pending",
      "memory": "31 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997534869,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 128,
      "title_slug": "longest-consecutive-sequence",
      "code": "from sortedcontainers import SortedSet\n\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -\u003e int:\n        nums = SortedSet(nums)\n        longest, current = 0, 0\n        for number in nums:\n            if number - 1 in nums:\n                current += 1\n                continue\n            if current \u003e longest:\n                longest = current\n            current = 1\n        return max(current, longest)\n            ",
      "title": "Longest Consecutive Sequence",
      "url": "/submissions/detail/997534869/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689682124,
      "status": 10,
      "runtime": "415 ms",
      "is_pending": "Not Pending",
      "memory": "35.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997525401,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 49,
      "title_slug": "group-anagrams",
      "code": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -\u003e List[List[str]]:\n        anagrams: Dict[str, List[str]] = defaultdict(list)\n\n        for string in strs:\n            anagrams[\"\".join(sorted(string))].append(string)\n        \n        return anagrams.values()\n\n",
      "title": "Group Anagrams",
      "url": "/submissions/detail/997525401/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689681196,
      "status": 10,
      "runtime": "108 ms",
      "is_pending": "Not Pending",
      "memory": "20.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997521194,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 146,
      "title_slug": "lru-cache",
      "code": "class LRUCache:\n    class Node:\n        def __init__(self, key: str, val: int) -\u003e None:\n            self.key = key\n            self.val = val\n            self.prev: Node = None\n            self.next: Node = None\n\n    def __init__(self, capacity: int) -\u003e None:\n        self.cap = capacity\n        self.head = self.Node(-1, -1)\n        self.tail = self.Node(-1, -1)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.cache = {}\n\n    def add_node(self, new_node: Node) -\u003e None:\n        old_first_node = self.head.next\n        new_node.next = old_first_node\n        new_node.prev = self.head\n        self.head.next = new_node\n        old_first_node.prev = new_node\n\n    def delete_node(self, delete_node: Node) -\u003e None:\n        prev = delete_node.prev\n        next = delete_node.next\n        prev.next = next\n        next.prev = prev\n\n    def get(self, key: int) -\u003e int:\n        if key not in self.cache:\n            return -1\n        result_node = self.cache[key]\n        result = result_node.val\n        del self.cache[key]\n        self.delete_node(result_node)\n        self.add_node(result_node)\n        self.cache[key] = self.head.next\n        return result\n    \n\n    def put(self, key: int, value: int) -\u003e None:\n        if key in self.cache:\n            current = self.cache[key]\n            del self.cache[key]\n            self.delete_node(current)\n\n        if len(self.cache) == self.cap:\n            del self.cache[self.tail.prev.key]\n            self.delete_node(self.tail.prev)\n\n        self.add_node(self.Node(key, value))\n        self.cache[key] = self.head.next\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)",
      "title": "LRU Cache",
      "url": "/submissions/detail/997521194/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689680797,
      "status": 10,
      "runtime": "857 ms",
      "is_pending": "Not Pending",
      "memory": "77.8 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997521101,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 146,
      "title_slug": "lru-cache",
      "code": "class LRUCache:\n    class Node:\n        def __init__(self, key: str, val: int) -\u003e None:\n            self.key = key\n            self.val = val\n            self.prev: Node = None\n            self.next: Node = None\n\n    def __init__(self, capacity: int) -\u003e None:\n        self.cap = capacity\n        self.head = self.Node(-1, -1)\n        self.tail = self.Node(-1, -1)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.cache = {}\n\n    def add_node(self, new_node: Node) -\u003e None:\n        old_first_node = self.head.next\n        new_node.next = old_first_node\n        new_node.prev = self.head\n        self.head.next = new_node\n        old_first_node.prev = new_node\n\n    def delete_node(self, delete_node: Node) -\u003e None:\n        prev = delete_node.prev\n        next = delete_node.next\n        prev.next = next\n        next.prev = prev\n\n    def get(self, key: int) -\u003e int:\n        if key not in self.cache:\n            return -1\n        result_node = self.cache[key]\n        result = result_node.val\n        del self.cache[key]\n        self.delete_node(result_node)\n        self.add_node(result_node)\n        self.cache[key] = self.head.next\n        return result\n    \n\n    def put(self, key: int, value: int) -\u003e None:\n        if key in self.cache:\n            current = self.cache[key]\n            del self.cache[key]\n            self.deleteNode(current)\n\n        if len(self.cache) == self.cap:\n            del self.cache[self.tail.prev.key]\n            self.delete_node(self.tail.prev)\n\n        self.add_node(self.Node(key, value))\n        self.cache[key] = self.head.next\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)",
      "title": "LRU Cache",
      "url": "/submissions/detail/997521101/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689680788,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111000000000000000",
      "flag_type": 1
    },
    {
      "id": 997484713,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 189,
      "title_slug": "rotate-array",
      "code": "class Solution:\n    def rotate(self, nums: List[int], k: int) -\u003e None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        length = len(nums)\n        k %= length\n        nums[length - k:] = nums[length - k:][::-1]  \n        nums[:length - k] = nums[:length - k][::-1]   \n        nums[:] = nums[::-1] \n",
      "title": "Rotate Array",
      "url": "/submissions/detail/997484713/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689677300,
      "status": 10,
      "runtime": "230 ms",
      "is_pending": "Not Pending",
      "memory": "27.7 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 996012746,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 80,
      "title_slug": "remove-duplicates-from-sorted-array-ii",
      "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n\n        if length \u003c 2:\n            return length\n        \n        current_index = 2\n\n        for number in nums[2:]:\n            if number == nums[current_index-2]:\n                continue\n            \n            nums[current_index] = number\n            current_index += 1\n\n        return current_index",
      "title": "Remove Duplicates from Sorted Array II",
      "url": "/submissions/detail/996012746/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689524790,
      "status": 10,
      "runtime": "66 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 996008020,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 80,
      "title_slug": "remove-duplicates-from-sorted-array-ii",
      "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n\n        if length \u003c 2:\n            return length\n        \n        current_number, unique, current_index = nums[0], True, 1\n        for number in nums[1:]:\n            if current_number != number:\n                current_number = number\n                unique = True\n                nums[current_index] = number\n                current_index += 1\n                continue\n\n            if unique:\n                nums[current_index] = number\n                current_index += 1\n                unique = False\n\n        return current_index",
      "title": "Remove Duplicates from Sorted Array II",
      "url": "/submissions/detail/996008020/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689524373,
      "status": 10,
      "runtime": "66 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995979290,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 100,
      "title_slug": "same-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -\u003e bool:\n        if p and not q or (q and not p):\n            return False\n        \n        if not p and not q:\n            return True\n        \n        if p.val != q.val:\n            return False\n        \n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)",
      "title": "Same Tree",
      "url": "/submissions/detail/995979290/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689521746,
      "status": 10,
      "runtime": "49 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995848775,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 104,
      "title_slug": "maximum-depth-of-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode], depth: int = 0) -\u003e int:\n        if not root:\n            return depth\n\n        return max(self.maxDepth(root.left, depth + 1), self.maxDepth(root.right, depth + 1))\n        ",
      "title": "Maximum Depth of Binary Tree",
      "url": "/submissions/detail/995848775/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689509197,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "19 MB",
      "compare_result": "111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995847615,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 104,
      "title_slug": "maximum-depth-of-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode], count: int = 0) -\u003e int:\n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return count + 1\n\n        return max(self.maxDepth(root.left, count + 1), self.maxDepth(root.right, count + 1))\n        ",
      "title": "Maximum Depth of Binary Tree",
      "url": "/submissions/detail/995847615/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689509076,
      "status": 10,
      "runtime": "58 ms",
      "is_pending": "Not Pending",
      "memory": "18.8 MB",
      "compare_result": "111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995794466,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 21,
      "title_slug": "merge-two-sorted-lists",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -\u003e Optional[ListNode]:\n        if not list1:\n            return list2\n        \n        if not list2:\n            return list1\n        \n        head = None\n        if list1.val \u003c list2.val:\n            head, list1 = list1, list1.next \n        else:\n            head, list2 = list2, list2.next\n        \n        current = head\n        while list1 and list2:\n            if list1.val \u003c list2.val:\n                current.next, list1 = list1, list1.next\n            else:\n                current.next, list2 = list2, list2.next\n            \n            current = current.next\n\n        if list1 or list2:\n            current.next = list1 if list1 else list2\n\n        return head",
      "title": "Merge Two Sorted Lists",
      "url": "/submissions/detail/995794466/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689503689,
      "status": 10,
      "runtime": "51 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995786418,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 21,
      "title_slug": "merge-two-sorted-lists",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -\u003e Optional[ListNode]:\n        if not list1:\n            return list2\n        \n        if not list2:\n            return list1\n        \n        head = None\n        if list1.val \u003e list2.val:\n            head, list2 = list2, list2.next \n        else:\n            head, list1 = list1, list1.next\n        \n        current = head\n        while current:\n            if not list1:\n                current.next = list2\n                break\n            \n            if not list2:\n                current.next = list1\n                break\n\n            if list1.val \u003e list2.val:\n                current.next, list2 = list2, list2.next\n                continue\n            \n            current.next, list1 = list1, list1.next\n\n        return head ",
      "title": "Merge Two Sorted Lists",
      "url": "/submissions/detail/995786418/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689502860,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0111111100110000110001001000100001110100010000000000001000001000100010110100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000001000000000000100001",
      "flag_type": 1
    },
    {
      "id": 995771120,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 141,
      "title_slug": "linked-list-cycle",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -\u003e bool:\n        slow_p, fast_p = head, head.next if head else None\n        while fast_p and fast_p.next:\n            if slow_p == fast_p:\n                return True\n            slow_p, fast_p = slow_p.next, fast_p.next.next\n\n        return False",
      "title": "Linked List Cycle",
      "url": "/submissions/detail/995771120/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689501221,
      "status": 10,
      "runtime": "64 ms",
      "is_pending": "Not Pending",
      "memory": "20.6 MB",
      "compare_result": "11111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995769608,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 141,
      "title_slug": "linked-list-cycle",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -\u003e bool:\n        slow_p, fast_p = head, head.next if head else None\n        while slow_p and fast_p:\n            if slow_p == fast_p:\n                return True\n            slow_p = slow_p.next\n            fast_p = fast_p.next if fast_p else None\n            fast_p = fast_p.next if fast_p else None\n        \n        return False",
      "title": "Linked List Cycle",
      "url": "/submissions/detail/995769608/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689501061,
      "status": 10,
      "runtime": "79 ms",
      "is_pending": "Not Pending",
      "memory": "20.3 MB",
      "compare_result": "11111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 995769429,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 141,
      "title_slug": "linked-list-cycle",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -\u003e bool:\n        slow_p, fast_p = head, head.next\n        while slow_p and fast_p:\n            if slow_p == fast_p:\n                return True\n            slow_p = slow_p.next\n            fast_p = fast_p.next if fast_p else None\n            fast_p = fast_p.next if fast_p else None\n        \n        return False",
      "title": "Linked List Cycle",
      "url": "/submissions/detail/995769429/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689501042,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11100000000000000000000",
      "flag_type": 1
    },
    {
      "id": 997676878,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 74,
      "title_slug": "search-a-2d-matrix",
      "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -\u003e bool:\n        length_vertical, length_horizontal = len(matrix), len(matrix[0])\n\n\n        left, right = 0, length_vertical - 1\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            mid_number = matrix[mid][0]\n            \n            if mid_number == target:\n                return True\n            \n            if mid_number \u003e target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        vertical_index = right\n        left, right = 0, length_horizontal - 1\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            mid_number = matrix[vertical_index][mid]\n\n            if mid_number == target:\n                return True\n            \n            if mid_number \u003e target:\n                right = mid - 1\n            else:\n                left = mid + 1\n            \n        return False",
      "title": "Search a 2D Matrix",
      "url": "/submissions/detail/997676878/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689693923,
      "status": 10,
      "runtime": "67 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997673208,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 74,
      "title_slug": "search-a-2d-matrix",
      "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -\u003e bool:\n        length_vertical, length_horizontal = len(matrix), len(matrix[0])\n\n        left, right = 0, length_vertical\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            mid_number = matrix[mid][0]\n            \n            if mid_number == target:\n                return True\n            \n            if mid_number \u003e target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        vertical_index = right\n        left, right = 0, length_horizontal\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            mid_number = matrix[vertical_index][mid]\n\n            if mid_number == target:\n                return True\n            \n            if mid_number \u003e target:\n                right = mid - 1\n            else:\n                left = mid + 1\n            \n        return False",
      "title": "Search a 2D Matrix",
      "url": "/submissions/detail/997673208/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689693635,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 997668741,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 35,
      "title_slug": "search-insert-position",
      "code": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -\u003e int:\n        length = len(nums)\n        left, right = 0, length - 1\n\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            mid_number = nums[mid]\n\n            if mid_number == target:\n                return mid\n\n            if mid_number \u003e target:\n                right = mid - 1\n            else:\n                left = mid + 1\n\n        return left",
      "title": "Search Insert Position",
      "url": "/submissions/detail/997668741/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689693287,
      "status": 10,
      "runtime": "67 ms",
      "is_pending": "Not Pending",
      "memory": "17 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997665272,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 69,
      "title_slug": "sqrtx",
      "code": "class Solution:\n    def mySqrt(self, x: int) -\u003e int:\n        if x == 0 or x == 1:\n            return x\n\n        left, right = 1, x\n\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            square = mid * mid\n\n            if square == x:\n                return mid\n            \n            if square \u003e x:\n                right = mid - 1 \n            else:\n                left = mid + 1\n            \n        return right",
      "title": "Sqrt(x)",
      "url": "/submissions/detail/997665272/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689693019,
      "status": 10,
      "runtime": "63 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 997664680,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 69,
      "title_slug": "sqrtx",
      "code": "class Solution:\n    def mySqrt(self, x: int) -\u003e int:\n        if x == 0 or x == 1:\n            return x\n\n        left, right = 1, x\n\n        while left \u003c= right:\n            mid = left + (right - left) / 2\n            square = mid * mid\n\n            if square == x:\n                return mid\n            \n            if square \u003e x:\n                right = mid - 1 \n            else:\n                left = mid + 1\n            \n        return int(round(right))",
      "title": "Sqrt(x)",
      "url": "/submissions/detail/997664680/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689692976,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 997663480,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 69,
      "title_slug": "sqrtx",
      "code": "class Solution:\n    def mySqrt(self, x: int) -\u003e int:\n        if x == 0 or x == 1:\n            return x\n\n        left, right = 1, x\n\n        while left \u003c= right:\n            mid = left + (right - left) / 2\n            square = mid * mid\n\n            if square \u003e x:\n                right = mid - 1\n            elif square == x:\n                return mid\n            else:\n                left = mid + 1\n            \n        return int(round(right))",
      "title": "Sqrt(x)",
      "url": "/submissions/detail/997663480/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689692883,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111101111111011010111111111101011011101111011110001001010010100001100001001011001100111011101000000101011001001000000011000101001010100000110011001000010110111111101001101100001100111111101100111101101011111110110011001100010100110000001010001001101100100011000101011110110111000010001100110010111010111111110011110101110010001101111110111111110111001110001111011101101011010001000001101000011001110001001000110111001000111001001001001101010100001111011100111100001001010110010110111000101110111110100001011010110110101000110110000100010101101001010000101110111011011010110111010101111010110001010111110111111001110011101110111111111111100110000011011111010110001101100111101011111011001111011100110000111111100100001010001110101011010001011010111101011111111111101101111110110011111101100000111111010101111111000010001011101000111111000111011111111000111111110011111111011011011111000110101000110010111011001111010011110010110110110101000110010100100111100010110010011010100101111000110110101010011101101001000011111",
      "flag_type": 1
    },
    {
      "id": 997659017,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 9,
      "title_slug": "palindrome-number",
      "code": "class Solution:\n    def isPalindrome(self, x: int) -\u003e bool:\n        if x \u003c 0:\n            return False\n        \n        if x \u003c 10:\n            return True\n        \n        number = []\n\n        while x:\n            remainder = x % 10\n            x = x // 10\n            number.append(remainder)\n            \n        length = len(number)\n        half_index = length // 2\n\n        for i, digit in enumerate(number):\n            last_digit = number[length - i - 1]\n\n            if digit != last_digit:\n                return False\n            \n            if i != half_index:\n                continue\n            \n            return True\n",
      "title": "Palindrome Number",
      "url": "/submissions/detail/997659017/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689692552,
      "status": 10,
      "runtime": "88 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 997658377,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 9,
      "title_slug": "palindrome-number",
      "code": "class Solution:\n    def isPalindrome(self, x: int) -\u003e bool:\n        if x \u003c 0:\n            return False\n        \n        if x \u003c 10:\n            return True\n        \n        number = []\n\n        while x:\n            remainder = x % 10\n            x = x // 10\n            number.append(remainder)\n            \n        length = len(number)\n        half_index = length // 2\n\n        for i, digit in enumerate(number):\n            last_digit = number[-1]\n\n            if digit != last_digit:\n                return False\n            \n            if i != half_index:\n                continue\n            \n            return True\n",
      "title": "Palindrome Number",
      "url": "/submissions/detail/997658377/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689692504,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 997657948,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 9,
      "title_slug": "palindrome-number",
      "code": "class Solution:\n    def isPalindrome(self, x: int) -\u003e bool:\n        if x \u003c 0:\n            return False\n        \n        if x \u003c 10:\n            return True\n        \n        number = []\n\n        while x:\n            remainder = x % 10\n            x = x // 10\n            number.append(remainder)\n            \n        length = len(number)\n        half_index = length // 2\n\n        for i, digit in enumerate(number):\n            last_digit = number[length - i - 1]\n\n            if digit != last_digit:\n                return False\n            \n            if i != half_index:\n                continue\n            \n            return True\n",
      "title": "Palindrome Number",
      "url": "/submissions/detail/997657948/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689692472,
      "status": 10,
      "runtime": "92 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 997655777,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 150,
      "title_slug": "evaluate-reverse-polish-notation",
      "code": "class Solution:\n    def evalRPN(self, tokens: List[str]) -\u003e int:\n        stack = []\n        operations = {\n            \"+\": lambda first, second: first + second,\n            \"-\": lambda first, second: first - second,\n            \"*\": lambda first, second: first * second,\n            \"/\": lambda first, second: int(first / second)\n        }\n        for token in tokens:\n            if token not in operations:\n                stack.append(int(token))\n                continue\n\n            second, first = stack.pop(), stack.pop()\n            result = operations[token](first, second)\n            stack.append(result)\n            \n        return stack[-1]",
      "title": "Evaluate Reverse Polish Notation",
      "url": "/submissions/detail/997655777/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689692314,
      "status": 10,
      "runtime": "90 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997654847,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 445,
      "title_slug": "add-two-numbers-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverse(self, head: ListNode) -\u003e ListNode:\n        previous = None\n        while head:\n            next, head.next = head.next, previous\n            previous, head = head, next\n        return previous\n\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -\u003e Optional[ListNode]:\n        l1, l2 = self.reverse(l1), self.reverse(l2)\n        head, tail, carry = l1, l1, 0\n\n        while l1 or l2 or carry:\n            val_1 = l1.val if l1 else 0\n            val_2 = l2.val if l2 else 0\n            sum = val_1 + val_2 + carry\n            if sum \u003e 9:\n                carry = 1\n                sum %= 10\n            else:\n                carry = 0\n\n            tail.val = sum\n            l1, l2 = l1.next if l1 else None, l2.next if l2 else None\n            if not tail.next and l2:\n                tail.next = l2\n                l1 = None\n\n            if not tail.next and carry:\n                tail.next = ListNode(carry)\n                carry = 0\n                l2 = None\n\n            if tail.next:\n                tail = tail.next\n            \n        return self.reverse(head)",
      "title": "Add Two Numbers II",
      "url": "/submissions/detail/997654847/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689692241,
      "status": 10,
      "runtime": "68 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 997650845,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 445,
      "title_slug": "add-two-numbers-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverse(self, head: ListNode) -\u003e ListNode:\n        previous = None\n        while head:\n            next, head.next = head.next, previous\n            previous, head = head, next\n        return previous\n\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -\u003e Optional[ListNode]:\n        l1, l2 = self.reverse(l1), self.reverse(l2)\n        head, tail, carry = l1, l1, 0\n\n        while l1 or l2 or carry:\n            val_1 = l1.val if l1 else 0\n            val_2 = l2.val if l2 else 0\n            sum = val_1 + val_2 + carry\n            if sum \u003e 9:\n                carry = 1\n                sum %= 10\n            else:\n                carry = 0\n\n            tail.val = sum\n            l1, l2 = l1.next if l1 else None, l2.next if l2 else None\n            if not tail.next and l2:\n                tail.next = l2\n                l1 = None\n                \n            if tail.next:\n                tail = tail.next\n            \n        return self.reverse(head)",
      "title": "Add Two Numbers II",
      "url": "/submissions/detail/997650845/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689691943,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 997617666,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 206,
      "title_slug": "reverse-linked-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        previous = None\n        while head:\n            next, head.next = head.next, previous\n            previous, head = head, next\n\n        return previous",
      "title": "Reverse Linked List",
      "url": "/submissions/detail/997617666/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689689429,
      "status": 10,
      "runtime": "65 ms",
      "is_pending": "Not Pending",
      "memory": "17.9 MB",
      "compare_result": "1111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997606579,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 167,
      "title_slug": "two-sum-ii-input-array-is-sorted",
      "code": "class Solution:\n    def twoSum(self, numbers: List[int], target: int) -\u003e List[int]:\n        numbers_map: Dict[str, int] = {}\n\n        for i, number in enumerate(numbers):\n            diff = target - number\n            if diff in numbers_map:\n                return [numbers_map[diff] + 1, i + 1]\n            numbers_map[number] = i\n        \n        return []\n",
      "title": "Two Sum II - Input Array Is Sorted",
      "url": "/submissions/detail/997606579/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689688529,
      "status": 10,
      "runtime": "136 ms",
      "is_pending": "Not Pending",
      "memory": "17.3 MB",
      "compare_result": "11111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997596378,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 151,
      "title_slug": "reverse-words-in-a-string",
      "code": "class Solution:\n    def reverseWords(self, s: str) -\u003e str:\n        return \" \".join(s.split()[::-1])",
      "title": "Reverse Words in a String",
      "url": "/submissions/detail/997596378/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689687700,
      "status": 10,
      "runtime": "60 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997593623,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 12,
      "title_slug": "integer-to-roman",
      "code": "class Solution:\n    def intToRoman(self, num: int) -\u003e str:\n        result: List[str] = []\n        stack: List[int] = deque([\n            1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        ])\n        values = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",\n            40: \"XL\",\n            10: \"X\",\n            9: \"IX\",\n            5: \"V\",\n            4: \"IV\",  \n            1: \"I\"\n        }\n\n        while num:\n            roman = stack[-1]\n            if num \u003c roman:\n                stack.pop()\n                continue\n\n            result.append(values[roman])\n            num -= roman\n\n        return \"\".join(result)",
      "title": "Integer to Roman",
      "url": "/submissions/detail/997593623/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689687463,
      "status": 10,
      "runtime": "81 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 997577999,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 150,
      "title_slug": "evaluate-reverse-polish-notation",
      "code": "class Solution:\n    def evalRPN(self, tokens: List[str]) -\u003e int:\n        stack = []\n        operations = {\n            \"+\": lambda first, second: first + second,\n            \"-\": lambda first, second: first - second,\n            \"*\": lambda first, second: first * second,\n            \"/\": lambda first, second: int(first / second)\n        }\n        for token in tokens:\n            if token not in operations:\n                stack.append(int(token))\n                continue\n\n            second, first = stack.pop(), stack.pop()\n            result = operations[token](first, second)\n            stack.append(result)\n            \n        return stack[-1]",
      "title": "Evaluate Reverse Polish Notation",
      "url": "/submissions/detail/997577999/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689686143,
      "status": 10,
      "runtime": "75 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997574303,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 150,
      "title_slug": "evaluate-reverse-polish-notation",
      "code": "class Solution:\n    def evalRPN(self, tokens: List[str]) -\u003e int:\n        length = len(tokens)\n        stack = []\n        for token in tokens:\n            if token.lstrip(\"-\").isalnum():\n                stack.append(int(token))\n                continue\n\n            second, first = stack.pop(), stack.pop()\n            result = 0\n            match token:\n                case \"+\":\n                    result = first + second\n                case \"-\":\n                    result = first - second\n                case \"*\":\n                    result = first * second\n                case \"/\": \n                    result = first // second\n                case _:\n                    raise Exception(f\"invalid token: {token}\")\n\n            stack.append(result)\n            \n        return stack[-1]",
      "title": "Evaluate Reverse Polish Notation",
      "url": "/submissions/detail/997574303/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689685808,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110111111111001000111",
      "flag_type": 1
    },
    {
      "id": 997560394,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 155,
      "title_slug": "min-stack",
      "code": "from sortedcontainers import sortedset\n\nclass MinStack:\n\n    def __init__(self):\n        self.stack: List[int] = []\n        self.min_stack: List[int] = []\n\n    def push(self, val: int) -\u003e None:\n        self.stack.append(val)\n        if not self.min_stack or val \u003c= self.min_stack[-1]:\n            self.min_stack.append(val)\n\n    def pop(self) -\u003e None:\n        if not self.stack:\n            return\n        pop = self.stack.pop()\n        if pop == self.min_stack[-1]:\n            self.min_stack.pop()\n\n    def top(self) -\u003e int:\n        return self.stack[-1]\n\n    def getMin(self) -\u003e int:\n        return self.min_stack[-1]\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()",
      "title": "Min Stack",
      "url": "/submissions/detail/997560394/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689684557,
      "status": 10,
      "runtime": "77 ms",
      "is_pending": "Not Pending",
      "memory": "20.4 MB",
      "compare_result": "1111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997560328,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 155,
      "title_slug": "min-stack",
      "code": "from sortedcontainers import sortedset\n\nclass MinStack:\n\n    def __init__(self):\n        self.stack: List[int] = []\n        self.min_stack: List[int] = []\n\n    def push(self, val: int) -\u003e None:\n        self.stack.append(val)\n        if not self.min_stack or val \u003c= self.min_stack[-1]:\n            self.min_stack.append(val)\n\n    def pop(self) -\u003e None:\n        if not self.stack:\n            return\n        pop = self.stack.pop()\n        if pop == self.min_stack[-1]:\n            self.min_stack.pop()\n\n    def top(self) -\u003e int:\n        return self.stack[-1].val\n\n    def getMin(self) -\u003e int:\n        return self.min_stack[-1]\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()",
      "title": "Min Stack",
      "url": "/submissions/detail/997560328/",
      "lang_name": "Python3",
      "time": "6 months, 3 weeks",
      "timestamp": 1689684550,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 998405195,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 122,
      "title_slug": "best-time-to-buy-and-sell-stock-ii",
      "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -\u003e int:\n\t\t# It is impossible to sell stock on first day, set -infinity as initial value for cur_hold\n        cur_hold, cur_not_hold = -float('inf'), 0\n        \n        for stock_price in prices:\n            prev_hold, prev_not_hold = cur_hold, cur_not_hold\n\t\t\t# either keep hold, or buy in stock today at stock price\n            cur_hold = max(prev_hold, prev_not_hold - stock_price)\n\t\t\t\n\t\t\t# either keep not-hold, or sell out stock today at stock price\n            cur_not_hold = max(prev_not_hold, \n                               prev_hold + stock_price)\n            \n        # maximum profit must be in not-hold state\n        return cur_not_hold",
      "title": "Best Time to Buy and Sell Stock II",
      "url": "/submissions/detail/998405195/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689766552,
      "status": 10,
      "runtime": "75 ms",
      "is_pending": "Not Pending",
      "memory": "17.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 998399818,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 134,
      "title_slug": "gas-station",
      "code": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -\u003e int:\n        if sum(gas) \u003c sum(cost): \n            return -1\n        \n        tank, idx = 0, 0\n        for i in range(len(gas)):\n            tank += gas[i] - cost[i] \n            if tank \u003c 0: \n                tank, idx = 0, i+1\n        return idx ",
      "title": "Gas Station",
      "url": "/submissions/detail/998399818/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689765998,
      "status": 10,
      "runtime": "1223 ms",
      "is_pending": "Not Pending",
      "memory": "22.3 MB",
      "compare_result": "1111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 998395650,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 45,
      "title_slug": "jump-game-ii",
      "code": "class Solution:\n    def jump(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        result = 0\n        end = 0\n        farthest = 0\n\n        for i in range(length - 1):\n            number = nums[i]\n            max_jump = i + number\n            if max_jump \u003e farthest:\n                farthest = max_jump\n\n            if farthest \u003e= length - 1:\n                result += 1\n                break\n            \n            if i == end:\n                result += 1\n                end = farthest\n\n\n        return result\n",
      "title": "Jump Game II",
      "url": "/submissions/detail/998395650/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689765590,
      "status": 10,
      "runtime": "128 ms",
      "is_pending": "Not Pending",
      "memory": "17.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 998395390,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 209,
      "title_slug": "minimum-size-subarray-sum",
      "code": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -\u003e int:\n        left = 0\n        sum_of_subarray = 0\n        min_length = float('inf')\n        \n        for right in range(len(nums)):\n            sum_of_subarray += nums[right]\n            \n            while sum_of_subarray \u003e= target:\n                min_length = min(min_length, right - left + 1)\n                sum_of_subarray -= nums[left]\n                left += 1\n\n        if min_length == float('inf'):\n            return 0\n\n        return min_length",
      "title": "Minimum Size Subarray Sum",
      "url": "/submissions/detail/998395390/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689765566,
      "status": 10,
      "runtime": "274 ms",
      "is_pending": "Not Pending",
      "memory": "29.5 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 998371186,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 274,
      "title_slug": "h-index",
      "code": "class Solution:\n    # [3,0,6,1,5]\n    # [0,1,3,5,6]\n    def hIndex(self, citations: List[int]) -\u003e int:\n        citations = sorted(citations)\n        length = len(citations)\n\n        h = 0\n        for i in reversed(range(length)):\n            citations_count = citations[i]\n            published_count = length - i\n\n            if citations_count == 0 or published_count \u003c h:\n                break\n\n            if published_count \u003c= citations_count:\n                h = published_count\n            \n        return h\n\n",
      "title": "H-Index",
      "url": "/submissions/detail/998371186/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689763171,
      "status": 10,
      "runtime": "61 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 998365043,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 274,
      "title_slug": "h-index",
      "code": "class Solution:\n    def hIndex(self, citations: List[int]) -\u003e int:\n        citations = sorted(citations)\n        length = len(citations)\n        h = 0\n        for i in reversed(range(length)):\n            citations_count = citations[i]\n            published_count = length - i\n            if published_count \u003e= citations_count and citations_count \u003e= h:\n                h = citations_count\n            \n        return h\n\n",
      "title": "H-Index",
      "url": "/submissions/detail/998365043/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689762558,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111101111110111111111111111111110110101110111100111111100110000000000010100111101",
      "flag_type": 1
    },
    {
      "id": 998330017,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 6,
      "title_slug": "zigzag-conversion",
      "code": "class Solution:\n    def convert(self, s: str, numRows: int) -\u003e str:\n        if numRows \u003c 2:\n            return s\n        \n        result: List[List[str]] = [[] for _ in range(numRows)]\n    \n        row, is_ascending, last = 0, True, numRows - 1\n        for symbol in s:\n            result[row].append(symbol)\n            \n            if is_ascending and row \u003c last:\n                row += 1\n            elif is_ascending:\n                is_ascending = False\n            \n            if is_ascending:\n                continue\n\n            if row \u003e 0:\n                row -= 1\n            else:\n                is_ascending = True\n                row = 1\n    \n        \n        return \"\".join(\"\".join(row) for row in result)",
      "title": "Zigzag Conversion",
      "url": "/submissions/detail/998330017/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689759202,
      "status": 10,
      "runtime": "65 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 998328388,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 6,
      "title_slug": "zigzag-conversion",
      "code": "class Solution:\n    def convert(self, s: str, numRows: int) -\u003e str:\n        result: List[List[str]] = [[] for _ in range(numRows)]\n    \n        row, is_ascending, last = 0, True, numRows - 1\n        for symbol in s:\n            result[row].append(symbol)\n            \n            if is_ascending and row \u003c last:\n                row += 1\n            elif is_ascending:\n                is_ascending = False\n            \n            if is_ascending:\n                continue\n\n            if row \u003e 0:\n                row -= 1\n            else:\n                is_ascending = True\n                row = 1\n        \n        return \"\".join(\"\".join(row) for row in result)",
      "title": "Zigzag Conversion",
      "url": "/submissions/detail/998328388/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689759048,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 998302519,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 380,
      "title_slug": "insert-delete-getrandom-o1",
      "code": "class RandomizedSet:\n\n    def __init__(self):\n        self._set = set()\n        self._items = []\n        self._indexes = {}\n        \n\n    def insert(self, val: int) -\u003e bool:\n        is_in = val in self._set\n        if not is_in:\n            self._set.add(val)\n            self._items.append(val)\n            self._indexes[val] = len(self._items) - 1\n        return not is_in\n\n    def remove(self, val: int) -\u003e bool:\n        if val not in self._set:\n            return False\n\n        last = self._items[-1]\n        val_index = self._indexes[val]\n        self._items[val_index] = last\n        self._indexes[last] = val_index\n        \n        self._set.remove(val)\n        self._items.pop()\n        self._indexes.pop(val)\n\n        return True\n\n    def getRandom(self) -\u003e int:\n        return random.choice(self._items)\n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()",
      "title": "Insert Delete GetRandom O(1)",
      "url": "/submissions/detail/998302519/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689756542,
      "status": 10,
      "runtime": "363 ms",
      "is_pending": "Not Pending",
      "memory": "63.2 MB",
      "compare_result": "1111111111111111111",
      "flag_type": 1
    },
    {
      "id": 998293324,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 55,
      "title_slug": "jump-game",
      "code": "class Solution:\n    def canJump(self, nums: List[int]) -\u003e bool:\n        length = len(nums)\n\n        if length \u003c 2:\n            return True\n        \n        current = nums[0]\n\n        for i in range(1, length):\n            if current == 0:\n                return False\n            current -= 1\n            current = max(current, nums[i])\n        \n        return True\n            ",
      "title": "Jump Game",
      "url": "/submissions/detail/998293324/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689755656,
      "status": 10,
      "runtime": "553 ms",
      "is_pending": "Not Pending",
      "memory": "17.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 998288385,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 17,
      "title_slug": "letter-combinations-of-a-phone-number",
      "code": "class Solution:\n    def letterCombinations(self, digits: str) -\u003e List[str]:\n        length = len(digits)\n        if length == 0:\n            return []\n        \n        digit_map: Dict[int, str] = {\n            1: [],\n            2: [\"a\", \"b\", \"c\"],\n            3: [\"d\", \"e\", \"f\"],\n            4: [\"g\", \"h\", \"i\"],\n            5: [\"j\", \"k\", \"l\"],\n            6: [\"m\", \"n\", \"o\"],\n            7: [\"p\", \"q\", \"r\", \"s\"],\n            8: [\"t\", \"u\", \"v\"],\n            9: [\"w\", \"x\", \"y\", \"z\"],\n            0: [\" \"]\n        }\n        result: List[List[str]] = [\n            digit_map[int(digit)] for digit in digits\n        ]\n        return [\"\".join(i) for i in product(*result)]",
      "title": "Letter Combinations of a Phone Number",
      "url": "/submissions/detail/998288385/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689755164,
      "status": 10,
      "runtime": "52 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 998287958,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 17,
      "title_slug": "letter-combinations-of-a-phone-number",
      "code": "class Solution:\n    def letterCombinations(self, digits: str) -\u003e List[str]:\n        length = len(digits)\n        if length == 0:\n            return []\n        \n        digit_map: Dict[int, str] = {\n            1: [],\n            2: [\"a\", \"b\", \"c\"],\n            3: [\"d\", \"e\", \"f\"],\n            4: [\"g\", \"h\", \"i\"],\n            5: [\"j\", \"k\", \"l\"],\n            6: [\"m\", \"n\", \"o\"],\n            7: [\"p\", \"q\", \"r\", \"s\"],\n            8: [\"t\", \"u\", \"v\"],\n            9: [\"w\", \"x\", \"y\", \"z\"],\n            0: [\" \"]\n        }\n        result: List[List[str]] = [\n            digit_map[int(digit)] for digit in digits\n        ]\n        return [\"\".join(i) for i in product(*result)]",
      "title": "Letter Combinations of a Phone Number",
      "url": "/submissions/detail/998287958/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689755118,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "1111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 998281526,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 435,
      "title_slug": "non-overlapping-intervals",
      "code": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -\u003e int:\n        intervals = sorted(intervals, key=lambda element: element[1])\n        length = len(intervals)\n        prev, count = 0, 1\n\n        for i in range(1, length):\n            if intervals[i][0] \u003c intervals[prev][1]:\n                continue\n            \n            prev = i\n            count += 1\n        \n        return length - count",
      "title": "Non-overlapping Intervals",
      "url": "/submissions/detail/998281526/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689754484,
      "status": 10,
      "runtime": "1240 ms",
      "is_pending": "Not Pending",
      "memory": "55.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 998281418,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 435,
      "title_slug": "non-overlapping-intervals",
      "code": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -\u003e int:\n        intervals = sorted(intervals, key=lambda element: element[1])\n        length = len(intervals)\n        prev, count = 0, 1\n\n        for i in range(1, n):\n            if intervals[i][0] \u003c intervals[prev][1]:\n                continue\n            \n            prev = i\n            count += 1\n        \n        return length - count",
      "title": "Non-overlapping Intervals",
      "url": "/submissions/detail/998281418/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689754473,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 997697463,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2,
      "title_slug": "add-two-numbers",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    # create the result pointer that points towards one of the lists\n    # create the result root pointer that will point towards the root of the result list\n    # 1. start infinite loop\n    # 2. if result is false - break, we reached the end\n    # 3. get values from non-empty pointers\n    # 4. add values together, store the carry in a variable\n    # 5. store the value in the result pointer\n    # 6. move the result pointer to the next node, if there is no next node, use a node from\n    #    another list\n    # 7. move list pointers\n    # 8. if we have a carry left, add a node to the result list\n    def addTwoNumbers(self, l1: Optional[ListNode], \n                            l2: Optional[ListNode]) -\u003e Optional[ListNode]:\n        carry = 0\n        result, result_root = l1, l1\n\n        while True:\n            if not l1 and not l2:\n                break\n            \n            number_1 = l1.val if l1 else 0\n            number_2 = l2.val if l2 else 0\n            result_val = number_1 + number_2 + carry\n            if result_val \u003e 9:\n                carry, result_val = 1, result_val - 10\n            else:\n                carry = 0\n            \n            result.val = result_val\n            if not result.next and l2:\n                l1 = None\n                result.next = l2.next\n\n            if result.next:\n                result = result.next\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n\n        if carry:\n            result.next = ListNode(carry)\n\n        return result_root",
      "title": "Add Two Numbers",
      "url": "/submissions/detail/997697463/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689695462,
      "status": 10,
      "runtime": "60 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 997696867,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 146,
      "title_slug": "lru-cache",
      "code": "class LRUCache:\n    class Node:\n        def __init__(self, key: str, val: int) -\u003e None:\n            self.key = key\n            self.val = val\n            self.prev: Node = None\n            self.next: Node = None\n\n    def __init__(self, capacity: int) -\u003e None:\n        self.cap = capacity\n        self.head = self.Node(-1, -1)\n        self.tail = self.Node(-1, -1)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.cache = {}\n\n    def add_node(self, new_node: Node) -\u003e None:\n        old_first_node = self.head.next\n        new_node.next = old_first_node\n        new_node.prev = self.head\n        self.head.next = new_node\n        old_first_node.prev = new_node\n\n    def delete_node(self, delete_node: Node) -\u003e None:\n        prev = delete_node.prev\n        next = delete_node.next\n        prev.next = next\n        next.prev = prev\n\n    def get(self, key: int) -\u003e int:\n        if key not in self.cache:\n            return -1\n        result_node = self.cache[key]\n        result = result_node.val\n        del self.cache[key]\n        self.delete_node(result_node)\n        self.add_node(result_node)\n        self.cache[key] = self.head.next\n        return result\n    \n\n    def put(self, key: int, value: int) -\u003e None:\n        if key in self.cache:\n            current = self.cache[key]\n            del self.cache[key]\n            self.delete_node(current)\n\n        if len(self.cache) == self.cap:\n            del self.cache[self.tail.prev.key]\n            self.delete_node(self.tail.prev)\n\n        self.add_node(self.Node(key, value))\n        self.cache[key] = self.head.next\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)",
      "title": "LRU Cache",
      "url": "/submissions/detail/997696867/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689695417,
      "status": 10,
      "runtime": "902 ms",
      "is_pending": "Not Pending",
      "memory": "77.6 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 997696599,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 146,
      "title_slug": "lru-cache",
      "code": "class LRUCache:\n    class Node:\n        def __init__(self, key: str, val: int) -\u003e None:\n            self.key = key\n            self.val = val\n            self.prev: Node = None\n            self.next: Node = None\n\n    def __init__(self, capacity: int) -\u003e None:\n        self.cap = capacity\n        self.head = self.Node(-1, -1)\n        self.tail = self.Node(-1, -1)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.cache = {}\n\n    def add_node(self, new_node: Node) -\u003e None:\n        old_first_node = self.head.next\n        new_node.next = old_first_node\n        new_node.prev = self.head\n        self.head.next = new_node\n        old_first_node.prev = new_node\n\n    def delete_node(self, delete_node: Node) -\u003e None:\n        prev = delete_node.prev\n        next = delete_node.next\n        prev.next = next\n        next.prev = prev\n\n    def get(self, key: int) -\u003e int:\n        if key not in self.cache:\n            return -1\n        result_node = self.cache[key]\n        self.delete_node(result_node)\n        self.add_node(result_node)\n        return result_node.val\n    \n\n    def put(self, key: int, value: int) -\u003e None:\n        if key in self.cache:\n            current = self.cache[key]\n            del self.cache[key]\n            self.delete_node(current)\n\n        if len(self.cache) == self.cap:\n            last = self.tail.prev\n            del self.cache[last.prev.key]\n            self.delete_node(last.prev)\n\n        new_node = self.Node(key, value)\n        self.add_node(new_node)\n        self.cache[key] = new_node\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)",
      "title": "LRU Cache",
      "url": "/submissions/detail/997696599/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689695396,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0111000000000000000000",
      "flag_type": 1
    },
    {
      "id": 997696063,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 146,
      "title_slug": "lru-cache",
      "code": "class LRUCache:\n    class Node:\n        def __init__(self, key: str, val: int) -\u003e None:\n            self.key = key\n            self.val = val\n            self.prev: Node = None\n            self.next: Node = None\n\n    def __init__(self, capacity: int) -\u003e None:\n        self.cap = capacity\n        self.head = self.Node(-1, -1)\n        self.tail = self.Node(-1, -1)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.cache = {}\n\n    def add_node(self, new_node: Node) -\u003e None:\n        old_first_node = self.head.next\n        new_node.next = old_first_node\n        new_node.prev = self.head\n        self.head.next = new_node\n        old_first_node.prev = new_node\n\n    def delete_node(self, delete_node: Node) -\u003e None:\n        prev = delete_node.prev\n        next = delete_node.next\n        prev.next = next\n        next.prev = prev\n\n    def get(self, key: int) -\u003e int:\n        if key not in self.cache:\n            return -1\n        result_node = self.cache[key]\n        self.delete_node(result_node)\n        self.add_node(result_node)\n        return result_node.val\n    \n\n    def put(self, key: int, value: int) -\u003e None:\n        if key in self.cache:\n            current = self.cache[key]\n            del self.cache[key]\n            self.delete_node(current)\n\n        if len(self.cache) == self.cap:\n            last = self.tail.prev\n            del self.cache[last.prev.key]\n            self.delete_node(last.prev)\n\n        new_node = self.Node(key, value)\n        self.add_node(new_node)\n        self.cache[key] = new_node\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)",
      "title": "LRU Cache",
      "url": "/submissions/detail/997696063/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689695356,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0111000000000000000000",
      "flag_type": 1
    },
    {
      "id": 997695644,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 146,
      "title_slug": "lru-cache",
      "code": "class LRUCache:\n    class Node:\n        def __init__(self, key: str, val: int) -\u003e None:\n            self.key = key\n            self.val = val\n            self.prev: Node = None\n            self.next: Node = None\n\n    def __init__(self, capacity: int) -\u003e None:\n        self.cap = capacity\n        self.head = self.Node(-1, -1)\n        self.tail = self.Node(-1, -1)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.cache = {}\n\n    def add_node(self, new_node: Node) -\u003e None:\n        old_first_node = self.head.next\n        new_node.next = old_first_node\n        new_node.prev = self.head\n        self.head.next = new_node\n        old_first_node.prev = new_node\n\n    def delete_node(self, delete_node: Node) -\u003e None:\n        prev = delete_node.prev\n        next = delete_node.next\n        prev.next = next\n        next.prev = prev\n\n    def get(self, key: int) -\u003e int:\n        if key not in self.cache:\n            return -1\n        result_node = self.cache[key]\n        self.delete_node(result_node)\n        self.add_node(result_node)\n        return result_node.val\n    \n\n    def put(self, key: int, value: int) -\u003e None:\n        if key in self.cache:\n            current = self.cache[key]\n            del self.cache[key]\n            self.delete_node(current)\n\n        if len(self.cache) == self.cap:\n            last = self.tail.prev\n            del self.cache[last.key]\n            self.delete_node(last.prev)\n\n        new_node = self.Node(key, value)\n        self.add_node(new_node)\n        self.cache[key] = new_node\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)",
      "title": "LRU Cache",
      "url": "/submissions/detail/997695644/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689695325,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 997688533,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 146,
      "title_slug": "lru-cache",
      "code": "class LRUCache:\n    class Node:\n        def __init__(self, key: str, val: int) -\u003e None:\n            self.key = key\n            self.val = val\n            self.prev: Node = None\n            self.next: Node = None\n\n    def __init__(self, capacity: int) -\u003e None:\n        self.cap = capacity\n        self.head = self.Node(-1, -1)\n        self.tail = self.Node(-1, -1)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.cache = {}\n\n    def add_node(self, new_node: Node) -\u003e None:\n        old_first_node = self.head.next\n        new_node.next = old_first_node\n        new_node.prev = self.head\n        self.head.next = new_node\n        old_first_node.prev = new_node\n\n    def delete_node(self, delete_node: Node) -\u003e None:\n        prev = delete_node.prev\n        next = delete_node.next\n        prev.next = next\n        next.prev = prev\n\n    def get(self, key: int) -\u003e int:\n        if key not in self.cache:\n            return -1\n        result_node = self.cache[key]\n        result = result_node.val\n        del self.cache[key]\n        self.delete_node(result_node)\n        self.add_node(result_node)\n        self.cache[key] = self.head.next\n        return result\n    \n\n    def put(self, key: int, value: int) -\u003e None:\n        if key in self.cache:\n            current = self.cache[key]\n            del self.cache[key]\n            self.delete_node(current)\n\n        if len(self.cache) == self.cap:\n            del self.cache[self.tail.prev.key]\n            self.delete_node(self.tail.prev)\n\n        self.add_node(self.Node(key, value))\n        self.cache[key] = self.head.next\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)",
      "title": "LRU Cache",
      "url": "/submissions/detail/997688533/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689694797,
      "status": 10,
      "runtime": "942 ms",
      "is_pending": "Not Pending",
      "memory": "77.7 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000171391,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 70,
      "title_slug": "climbing-stairs",
      "code": "class Solution:\n    # 1: 1\n    # 2: 2\n    # 3: 3 [2(2), 1(1)]\n    # 4: 5 [3(3), (2)]\n    def climbStairs(self, n: int) -\u003e int:\n        if n \u003c 3:\n            return n\n\n        count, count_prev = 2, 1\n        for number in range(3, n + 1):\n            count, count_prev = count + count_prev, count\n        return count",
      "title": "Climbing Stairs",
      "url": "/submissions/detail/1000171391/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689943974,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000160504,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 66,
      "title_slug": "plus-one",
      "code": "class Solution:\n    def plusOne(self, digits: List[int]) -\u003e List[int]:\n        carry = 1\n        for i in reversed(range(len(digits))):\n            new_digit = digits[i] + carry\n            if new_digit \u003e 9:\n                carry = 1\n                new_digit %= 10\n            else:\n                carry = 0\n            digits[i] = new_digit\n        \n        if carry:\n            digits.insert(0, carry)\n        \n        return digits",
      "title": "Plus One",
      "url": "/submissions/detail/1000160504/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689942805,
      "status": 10,
      "runtime": "42 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000160095,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 66,
      "title_slug": "plus-one",
      "code": "class Solution:\n    def plusOne(self, digits: List[int]) -\u003e List[int]:\n        carry = 0\n        for i in reversed(range(len(digits))):\n            new_digit = digits[i] + carry\n            if new_digit \u003e 9:\n                carry = 1\n                new_digit %= 10\n            else:\n                carry = 0\n            digits[i] = new_digit\n        \n        if carry:\n            digits.insert(0, carry)\n        \n        return digits",
      "title": "Plus One",
      "url": "/submissions/detail/1000160095/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689942762,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1000093970,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1444,
      "title_slug": "number-of-steps-to-reduce-a-number-to-zero",
      "code": "class Solution:\n    def numberOfSteps(self, num: int) -\u003e int:\n        count = 0\n        while num:\n            count += 1\n            if num % 2 == 0:\n                num /= 2\n            else:\n                num -= 1\n        \n        return count\n            ",
      "title": "Number of Steps to Reduce a Number to Zero",
      "url": "/submissions/detail/1000093970/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689935685,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000092993,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 412,
      "title_slug": "fizz-buzz",
      "code": "class Solution:\n    def fizzBuzz(self, n: int) -\u003e List[str]:\n        result = []\n\n        for i in range(1, n + 1):\n            div_by_3, div_by_5 = i % 3 == 0, i % 5 == 0\n            value = None\n\n            if div_by_3 and div_by_5:\n                value = \"FizzBuzz\"\n            elif div_by_3:\n                value = \"Fizz\"\n            elif div_by_5:\n                value = \"Buzz\"\n            else:\n                value = str(i)\n            \n            result.append(value)\n        \n        return result",
      "title": "Fizz Buzz",
      "url": "/submissions/detail/1000092993/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689935581,
      "status": 10,
      "runtime": "52 ms",
      "is_pending": "Not Pending",
      "memory": "17.4 MB",
      "compare_result": "11111111",
      "flag_type": 1
    },
    {
      "id": 1000092523,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 412,
      "title_slug": "fizz-buzz",
      "code": "class Solution:\n    def fizzBuzz(self, n: int) -\u003e List[str]:\n        result = []\n\n        for i in range(n):\n            div_by_3 = i \u003e 3 and i % 3 == 0\n            div_by_5 = i \u003e 5 and i % 5 == 0\n            value = None\n\n            if div_by_3 and div_by_5:\n                value = \"FizzBuzz\"\n            elif div_by_3:\n                value = \"Fizz\"\n            elif div_by_5:\n                value = \"Buzz\"\n            else:\n                value = str(i+1)\n            \n            result.append(value)\n        \n        return result",
      "title": "Fizz Buzz",
      "url": "/submissions/detail/1000092523/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689935532,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00010000",
      "flag_type": 1
    },
    {
      "id": 1000092409,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 412,
      "title_slug": "fizz-buzz",
      "code": "class Solution:\n    def fizzBuzz(self, n: int) -\u003e List[str]:\n        result = []\n\n        for i in range(n):\n            div_by_3 = i \u003e 3 and i % 3 == 0\n            div_by_5 = i \u003e 5 and i % 5 == 0\n            value = None\n\n            if div_by_3 and div_by_5:\n                value = \"FizzBuzz\"\n            elif div_by_3:\n                value = \"Fizz\"\n            elif div_by_5:\n                value = \"Buzz\"\n            else:\n                value = str(i)\n            \n            result.append(value)\n        \n        return result",
      "title": "Fizz Buzz",
      "url": "/submissions/detail/1000092409/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689935518,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000",
      "flag_type": 1
    },
    {
      "id": 1000091732,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 412,
      "title_slug": "fizz-buzz",
      "code": "class Solution:\n    def fizzBuzz(self, n: int) -\u003e List[str]:\n        result = []\n\n        for i in range(n):\n            div_by_3, div_by_5 = i % 3 == 0, i % 5 == 0\n            value = None\n\n            if div_by_3 and div_by_5:\n                value = \"FizzBuzz\"\n            elif div_by_3:\n                value = \"Fizz\"\n            elif div_by_5:\n                value = \"Buzz\"\n            else:\n                value = str(i)\n            \n            result.append(value)\n        \n        return result",
      "title": "Fizz Buzz",
      "url": "/submissions/detail/1000091732/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689935445,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000",
      "flag_type": 1
    },
    {
      "id": 1000091630,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 412,
      "title_slug": "fizz-buzz",
      "code": "class Solution:\n    def fizzBuzz(self, n: int) -\u003e List[str]:\n        result = []\n\n        for i in range(n):\n            div_by_3, div_by_5 = i % 3 == 0, i % 5 == 0\n            value = None\n\n            if div_by_3 and div_by_5:\n                value = \"FizzBuzz\"\n            elif div_by_3:\n                value = \"Fizz\"\n            elif dib_by_5:\n                value = \"Buzz\"\n            else:\n                value = str(i)\n            \n            result.append(value)\n        \n        return result",
      "title": "Fizz Buzz",
      "url": "/submissions/detail/1000091630/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689935434,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000",
      "flag_type": 1
    },
    {
      "id": 1000089391,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1791,
      "title_slug": "richest-customer-wealth",
      "code": "class Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -\u003e int:\n        max_wealth = 0\n        for i in range(len(accounts)):\n            wealth = 0\n            for j in range(len(accounts[i])):\n                wealth += accounts[i][j]\n            \n            if wealth \u003e max_wealth:\n                max_wealth = wealth\n        \n        return max_wealth",
      "title": "Richest Customer Wealth",
      "url": "/submissions/detail/1000089391/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689935194,
      "status": 10,
      "runtime": "66 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000087386,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1603,
      "title_slug": "running-sum-of-1d-array",
      "code": "class Solution:\r\n    def runningSum(self, nums: List[int]) -\u003e List[int]:\r\n        for i in range(1, len(nums)):\r\n            nums[i] += nums[i-1]\r\n        return nums",
      "title": "Running Sum of 1d Array",
      "url": "/submissions/detail/1000087386/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689934985,
      "status": 10,
      "runtime": "48 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000086797,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1603,
      "title_slug": "running-sum-of-1d-array",
      "code": "class Solution:\r\n    def runningSum(self, nums: List[int]) -\u003e List[int]:\r\n        return sum(nums)",
      "title": "Running Sum of 1d Array",
      "url": "/submissions/detail/1000086797/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689934921,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1000085540,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2384,
      "title_slug": "root-equals-sum-of-children",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def checkTree(self, root: Optional[TreeNode]) -\u003e bool:\n        return root.val == (root.left.val + root.right.val)",
      "title": "Root Equals Sum of Children",
      "url": "/submissions/detail/1000085540/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689934794,
      "status": 10,
      "runtime": "45 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000084810,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2383,
      "title_slug": "add-two-integers",
      "code": "class Solution:\n    def sum(self, num1: int, num2: int) -\u003e int:\n        return num1 + num2",
      "title": "Add Two Integers",
      "url": "/submissions/detail/1000084810/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689934716,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000080729,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 673,
      "title_slug": "number-of-longest-increasing-subsequence",
      "code": "class Solution:\n    def findNumberOfLIS(self, nums: List[int]) -\u003e int:\n        n = len(nums)\n        if n \u003c= 1:\n            return n\n\n        lengths = [1] * n\n        counts = [1] * n\n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] \u003e nums[j]:\n                    if lengths[j] + 1 \u003e lengths[i]:\n                        lengths[i] = lengths[j] + 1\n                        counts[i] = counts[j]\n                    elif lengths[j] + 1 == lengths[i]:\n                        counts[i] += counts[j]\n\n        max_length = max(lengths)\n        return sum(count for length, count in zip(lengths, counts) if length == max_length)\n",
      "title": "Number of Longest Increasing Subsequence",
      "url": "/submissions/detail/1000080729/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689934296,
      "status": 10,
      "runtime": "1126 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000080184,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 673,
      "title_slug": "number-of-longest-increasing-subsequence",
      "code": "class Solution:\n    # [1,3,5,4,7] -\u003e 2\n    # [2,2,2,2,2] -\u003e 5\n    def findNumberOfLIS(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        if length \u003c 2:\n            return length\n\n        lengths = [1] * length\n        counts = [1] * length\n\n        for i in range(1, length):\n            for j in range(i):\n                if nums[i] \u003c nums[j]: \n                    continue\n    \n                length_start, length_end = lengths[j], lengths[i]\n                count_start, count_end = counts[j], counts[i] \n\n                if length_start + 1 \u003e length_end:\n                    lengths[i] = length_start + 1\n                    counts[i] = count_start\n                elif length_start + 1 == length_end:\n                    counts[i] += count_start\n\n        max_length = max(lengths)\n        return sum(count\n                   for length, count in zip(lengths, counts) \n                   if length == max_length)\n",
      "title": "Number of Longest Increasing Subsequence",
      "url": "/submissions/detail/1000080184/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689934242,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1001111001111011011100000100111001011101011111111011111111101110110111010011110100111000000011000000000000000000000000000000000000010000000000000000000000111111111111111111111111111100000011111000000001011111111111111111101",
      "flag_type": 1
    },
    {
      "id": 999193936,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 735,
      "title_slug": "asteroid-collision",
      "code": "class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -\u003e List[int]:\n        stack = []\n        for asteroid in asteroids:\n            if asteroid \u003e 0:\n                stack.append(asteroid)\n                continue\n            \n            asteroid_abs = abs(asteroid)\n            while stack and stack[-1] \u003e 0 and stack[-1] \u003c asteroid_abs:\n                stack.pop()\n            \n            if stack and stack[-1] == asteroid_abs:\n                stack.pop()\n            elif not stack or stack[-1] \u003c 0:\n                stack.append(asteroid)\n\n        return stack",
      "title": "Asteroid Collision",
      "url": "/submissions/detail/999193936/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689844341,
      "status": 10,
      "runtime": "118 ms",
      "is_pending": "Not Pending",
      "memory": "17.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 999185084,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 735,
      "title_slug": "asteroid-collision",
      "code": "class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -\u003e List[int]:\n        length = len(asteroids)\n\n        if length \u003c 2:\n            return asteroids\n\n        for i in reversed(range(0, length - 1)):\n            asteroid, asteroid_prev = asteroids[i], asteroids[i+1]\n\n            if asteroid_prev \u003e 0:\n                continue\n            \n            mass, mass_prev = abs(asteroid), abs(asteroid_prev)\n            if mass == mass_prev:\n                asteroids.pop(i+1)\n                asteroids.pop(i)\n            elif mass_prev \u003e mass:\n                asteroids[i] = asteroid_prev\n                asteroids.pop(i+1)\n            else:\n                asteroids.pop(i+1)\n            \n\n        return asteroids",
      "title": "Asteroid Collision",
      "url": "/submissions/detail/999185084/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689843524,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 999177739,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 735,
      "title_slug": "asteroid-collision",
      "code": "class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -\u003e List[int]:\n        length = len(asteroids)\n\n        if length \u003c 2:\n            return asteroids\n\n        for i in reversed(range(0, length - 1)):\n            asteroid, asteroid_prev = asteroids[i], asteroids[i+1]\n\n            if asteroid_prev \u003e 0:\n                continue\n            \n            mass, mass_prev = abs(asteroid), abs(asteroid_prev)\n            if mass == mass_prev:\n                asteroids.pop()\n            elif mass_prev \u003e mass:\n                asteroids[i] = asteroid_prev\n            asteroids.pop()\n\n        return asteroids",
      "title": "Asteroid Collision",
      "url": "/submissions/detail/999177739/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689842872,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 999173927,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 735,
      "title_slug": "asteroid-collision",
      "code": "class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -\u003e List[int]:\n        length = len(asteroids)\n\n        if length \u003c 2:\n            return asteroids\n\n        stack = [asteroids[0]]\n        for i in range(1, length):\n            asteroid = asteroids[i]\n            asteroid_last = stack[-1] if stack else 0\n            stack.append(asteroid)\n\n            if asteroid \u003e 0 or (\n                asteroid \u003c 0 and asteroid_last \u003c 0\n            ):\n                continue\n\n            while len(stack) \u003e= 2 and stack[-1] \u003c 0 and stack[-2] \u003e 0:\n                last, prev = abs(stack[-1]), abs(stack[-2])\n                if last == prev:\n                    stack.pop()\n                elif last \u003e prev:\n                    stack[-1], stack[-2] = stack[-2], stack[-1]\n\n                stack.pop()\n\n        return stack",
      "title": "Asteroid Collision",
      "url": "/submissions/detail/999173927/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689842510,
      "status": 10,
      "runtime": "117 ms",
      "is_pending": "Not Pending",
      "memory": "17.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000948940,
      "status_display": "Memory Limit Exceeded",
      "lang": "python3",
      "question_id": 688,
      "title_slug": "knight-probability-in-chessboard",
      "code": "class Solution:\n    # y x x\n    # x x x\n    # x x x: (2 / 8) * (4 / 16) = 0.0625\n    # \n    # x x x\n    # x y x\n    # x x x: 0\n    def knightProbability(self, n: int, k: int, row: int, column: int) -\u003e float:\n        if not k:\n            return 1\n\n        if n \u003c 3:\n            return 0\n\n        probability = float(1)\n        moves = [[row, column]]\n        available_moves = [\n            [2, 1], [1, 2], [-2, 1], [-1, 2], [2, -1], [1, -2], \n            [-2, -1], [-1, -2]\n        ]\n\n        while k:\n            old_moves_count = len(moves)\n            for i in range(old_moves_count):\n                row, column = moves[i]\n                old_move_replaced = False\n\n                for row_add, column_add in available_moves:\n                    new_row = row_add + row\n                    new_column = column_add + column\n\n                    if new_row \u003c 0 or new_row \u003e= n or (\n                        new_column \u003c 0 or new_column \u003e= n\n                    ):\n                        continue\n                    \n                    if old_move_replaced:\n                        moves.append([new_row, new_column])\n                        continue\n                    \n                    moves[i][0], moves[i][1] = new_row, new_column    \n                    old_move_replaced = True\n            \n            new_moves_count = len(moves) \n            if new_moves_count == old_moves_count and not old_move_replaced:\n                return 0\n            probability *=  new_moves_count / (old_moves_count * 8)\n            k -= 1\n        \n        return probability",
      "title": "Knight Probability in Chessboard",
      "url": "/submissions/detail/1000948940/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690035498,
      "status": 12,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111100000000000",
      "flag_type": 1
    },
    {
      "id": 1000946458,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 688,
      "title_slug": "knight-probability-in-chessboard",
      "code": "class Solution:\n    # y x x\n    # x x x\n    # x x x 2 / 8 -\u003e 4 / 16\n    def knightProbability(self, n: int, k: int, row: int, column: int) -\u003e float:\n        if not k:\n            return 1\n\n        if n \u003c 3:\n            return 0\n\n        probability = float(1)\n        moves = [[row, column]]\n        available_moves = [\n            [2, 1], [1, 2], [-2, 1], [-1, 2], [2, -1], [1, -2], \n            [-2, -1], [-1, -2]\n        ]\n\n        while k:\n            old_moves_count = len(moves)\n            for i in range(old_moves_count):\n                row, column = moves[i]\n                old_move_replaced = False\n\n                for row_add, column_add in available_moves:\n                    new_row = row_add + row\n                    new_column = column_add + column\n\n                    if new_row \u003c 0 or new_row \u003e= n or (\n                        new_column \u003c 0 or new_column \u003e= n\n                    ):\n                        continue\n                    \n                    if old_move_replaced:\n                        moves.append([new_row, new_column])\n                        continue\n                    \n                    moves[i][0], moves[i][1] = new_row, new_column    \n                    old_move_replaced = True\n\n            probability *= len(moves) / (old_moves_count * 8)\n            k -= 1\n        \n        return probability",
      "title": "Knight Probability in Chessboard",
      "url": "/submissions/detail/1000946458/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690035251,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111100011100000000000",
      "flag_type": 1
    },
    {
      "id": 1000208581,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 459,
      "title_slug": "repeated-substring-pattern",
      "code": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -\u003e bool:\n        length = len(s)\n        for i in range(1, length // 2 + 1):\n            if length % i != 0:\n                continue\n            \n            if s == s[:i] * (length // i):\n                return True\n        \n        return False",
      "title": "Repeated Substring Pattern",
      "url": "/submissions/detail/1000208581/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689947733,
      "status": 10,
      "runtime": "62 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000207165,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 459,
      "title_slug": "repeated-substring-pattern",
      "code": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -\u003e bool:\n        length = len(s)\n        for i in range(length-1):\n            if length % (i + 1) != 0:\n                continue\n            \n            if s == s[:i+1] * (length // (i + 1)):\n                return True\n        \n        return False",
      "title": "Repeated Substring Pattern",
      "url": "/submissions/detail/1000207165/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689947602,
      "status": 10,
      "runtime": "82 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000199353,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 258,
      "title_slug": "add-digits",
      "code": "class Solution:\n    def addDigits(self, num: int) -\u003e int:\n        sum = 0\n        while num \u003e 0:\n            sum += num % 10\n            num //= 10\n        \n            if num == 0 and sum \u003e 9:\n                num, sum = sum, 0\n                \n        return sum",
      "title": "Add Digits",
      "url": "/submissions/detail/1000199353/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689946855,
      "status": 10,
      "runtime": "46 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1000199091,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 258,
      "title_slug": "add-digits",
      "code": "class Solution:\n    def addDigits(self, num: int) -\u003e int:\n        sum = 0\n        while num \u003e 0:\n            sum += num % 10\n            num //= 10\n        \n            if num == 0 and sum \u003e 9:\n                num, sum = sum, 0\n                \n        return sum",
      "title": "Add Digits",
      "url": "/submissions/detail/1000199091/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689946832,
      "status": 10,
      "runtime": "51 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1000198885,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 258,
      "title_slug": "add-digits",
      "code": "class Solution:\n    def addDigits(self, num: int) -\u003e int:\n        sum = 0\n        while num \u003e 0:\n            sum += num % 10\n            num //= 10\n        \n            if num == 0 and sum \u003e 9:\n                num, sum = sum, 0\n                \n        return sum",
      "title": "Add Digits",
      "url": "/submissions/detail/1000198885/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689946814,
      "status": 10,
      "runtime": "49 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1000198759,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 258,
      "title_slug": "add-digits",
      "code": "class Solution:\n    def addDigits(self, num: int) -\u003e int:\n        sum = 0\n        while num \u003e 0:\n            sum += num % 10\n            num //= 10\n        \n            if num == 0 and digital_root \u003e 9:\n                num, sum = sum, 0\n                \n        return sum",
      "title": "Add Digits",
      "url": "/submissions/detail/1000198759/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689946802,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1000196959,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 258,
      "title_slug": "add-digits",
      "code": "class Solution:\n    def addDigits(self, num: int) -\u003e int:\n        sum = num\n        while sum \u003e 9:\n            current_number, current_sum = sum, 0\n            while current_number:\n                current_sum += current_number % 10\n                current_number //= 10\n            sum = current_sum\n        return sum",
      "title": "Add Digits",
      "url": "/submissions/detail/1000196959/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689946617,
      "status": 10,
      "runtime": "36 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1000193186,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 232,
      "title_slug": "implement-queue-using-stacks",
      "code": "class MyQueue:\n\n    def __init__(self):\n        self.stack_in = []\n        self.stack_out = []\n\n    def push(self, x: int) -\u003e None:\n        self.stack_in.append(x)\n\n    def pop(self) -\u003e int:\n        self.peek()\n        return self.stack_out.pop()\n\n    def peek(self) -\u003e int:\n        if self.stack_out:\n            return self.stack_out[-1]\n        \n        while self.stack_in:\n            self.stack_out.append(self.stack_in.pop())\n\n        return self.stack_out[-1]\n\n    def empty(self) -\u003e bool:\n        return not self.stack_out and not self.stack_in\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()",
      "title": "Implement Queue using Stacks",
      "url": "/submissions/detail/1000193186/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689946238,
      "status": 10,
      "runtime": "48 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000190666,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 232,
      "title_slug": "implement-queue-using-stacks",
      "code": "class MyQueue:\n\n    def __init__(self):\n        self.stack_in = []\n        self.stack_out = []\n\n    def push(self, x: int) -\u003e None:\n        self.stack_in = []\n\n    def pop(self) -\u003e int:\n        self.peek()\n        return self.stack_out.pop()\n\n    def peek(self) -\u003e int:\n        if self.stack_out:\n            return self.stack_out[-1]\n        \n        while self.stack_in:\n            self.stack_out.append(self.stack_in.pop())\n\n        return self.stack_out[-1]\n\n    def empty(self) -\u003e bool:\n        return len(self.queue) == 0\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()",
      "title": "Implement Queue using Stacks",
      "url": "/submissions/detail/1000190666/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689945986,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1000187382,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 232,
      "title_slug": "implement-queue-using-stacks",
      "code": "class MyQueue:\n\n    def __init__(self):\n        self.queue = []\n\n    def push(self, x: int) -\u003e None:\n        self.queue.insert(0, x)\n\n    def pop(self) -\u003e int:\n        return self.queue.pop()\n\n    def peek(self) -\u003e int:\n        return self.queue[-1]\n\n    def empty(self) -\u003e bool:\n        return len(self.queue) == 0\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()",
      "title": "Implement Queue using Stacks",
      "url": "/submissions/detail/1000187382/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689945649,
      "status": 10,
      "runtime": "55 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000180972,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 232,
      "title_slug": "implement-queue-using-stacks",
      "code": "class MyQueue:\n\n    def __init__(self):\n        self.queue = deque()\n\n    def push(self, x: int) -\u003e None:\n        self.queue.appendleft(x)\n\n    def pop(self) -\u003e int:\n        return self.queue.pop()\n\n    def peek(self) -\u003e int:\n        return self.queue[-1]\n\n    def empty(self) -\u003e bool:\n        return len(self.queue) == 0\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()",
      "title": "Implement Queue using Stacks",
      "url": "/submissions/detail/1000180972/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689944980,
      "status": 10,
      "runtime": "50 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000178930,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 231,
      "title_slug": "power-of-two",
      "code": "class Solution:\n    def isPowerOfTwo(self, n: int) -\u003e bool:\n        if n == 1:\n            return True\n\n        while n \u003e 2 and not n % 2:\n            n //= 2\n        return n == 2",
      "title": "Power of Two",
      "url": "/submissions/detail/1000178930/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689944768,
      "status": 10,
      "runtime": "41 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1000178483,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 231,
      "title_slug": "power-of-two",
      "code": "class Solution:\n    def isPowerOfTwo(self, n: int) -\u003e bool:\n        if n == 1:\n            return True\n\n        while n \u003e 2:\n            n //= 2\n        return n == 2",
      "title": "Power of Two",
      "url": "/submissions/detail/1000178483/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689944722,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1000175965,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 231,
      "title_slug": "power-of-two",
      "code": "class Solution:\n    def isPowerOfTwo(self, n: int) -\u003e bool:\n        return n == 1 or n % 2 == 0",
      "title": "Power of Two",
      "url": "/submissions/detail/1000175965/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689944463,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1000175690,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 231,
      "title_slug": "power-of-two",
      "code": "class Solution:\n    def isPowerOfTwo(self, n: int) -\u003e bool:\n        return n \u003e 1 and n % 2 == 0",
      "title": "Power of Two",
      "url": "/submissions/detail/1000175690/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689944434,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1000175550,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 231,
      "title_slug": "power-of-two",
      "code": "class Solution:\n    def isPowerOfTwo(self, n: int) -\u003e bool:\n        return n % 2 == 0",
      "title": "Power of Two",
      "url": "/submissions/detail/1000175550/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689944419,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1000175097,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 83,
      "title_slug": "remove-duplicates-from-sorted-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        result = head\n        \n        while head and head.next:\n            if head.next.val == head.val:\n                head.next = head.next.next\n                continue\n            \n            head = head.next\n        \n        return result",
      "title": "Remove Duplicates from Sorted List",
      "url": "/submissions/detail/1000175097/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689944372,
      "status": 10,
      "runtime": "54 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1000174681,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 83,
      "title_slug": "remove-duplicates-from-sorted-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        result = head\n        \n        while head and head.next:\n            if head.next.val == head.val:\n                head.next = head.next.next\n            head = head.next\n        \n        return result",
      "title": "Remove Duplicates from Sorted List",
      "url": "/submissions/detail/1000174681/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1689944328,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111110110100111000000000001101000110000011100000101111001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010",
      "flag_type": 1
    },
    {
      "id": 1002504363,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 455,
      "title_slug": "assign-cookies",
      "code": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -\u003e int:\n        g.sort(reverse=True)\n        s.sort(reverse=True)\n        count = 0\n        cookie_index = 0\n        for greed in g:\n            if greed \u003e s[cookie_index]:\n                continue\n\n            count += 1\n            cookie_index += 1\n            \n        return count",
      "title": "Assign Cookies",
      "url": "/submissions/detail/1002504363/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690191798,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1002502411,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 455,
      "title_slug": "assign-cookies",
      "code": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -\u003e int:\n        greed = 0\n        g.sort(reverse=True)\n        s.sort(reverse=True)\n        children_count = len(g)\n        count = 0\n        for cookie_size in s:\n            while greed \u003c children_count and g[greed] \u003e cookie_size:\n                greed += 1\n            \n            if greed \u003e= children_count:\n                break\n\n            count += 1\n            greed += 1\n            \n        return count",
      "title": "Assign Cookies",
      "url": "/submissions/detail/1002502411/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690191603,
      "status": 10,
      "runtime": "173 ms",
      "is_pending": "Not Pending",
      "memory": "18.2 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002498862,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 455,
      "title_slug": "assign-cookies",
      "code": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -\u003e int:\n        greed = 0\n        children_count = len(g)\n        count = 0\n        for cookie_size in s:\n            while greed \u003c children_count and g[greed] \u003e cookie_size:\n                greed += 1\n            \n            if greed \u003e= children_count:\n                break\n\n            count += 1\n            greed += 1\n            \n        return count",
      "title": "Assign Cookies",
      "url": "/submissions/detail/1002498862/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690191258,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111101100000001101000",
      "flag_type": 1
    },
    {
      "id": 1002448132,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 50,
      "title_slug": "powx-n",
      "code": "class Solution:\n    def myPow(self, x: float, n: int) -\u003e float:\n        if n == 0:\n            return 1\n\n        if n \u003c 0:\n            n *= -1\n            x = 1 / x\n\n        result = 1\n        while n:\n            if n % 2:\n                result *= x\n                n -= 1\n            x *= x\n            n //= 2\n        \n        return result",
      "title": "Pow(x, n)",
      "url": "/submissions/detail/1002448132/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690186380,
      "status": 10,
      "runtime": "47 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002440092,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 50,
      "title_slug": "powx-n",
      "code": "class Solution:\n    def myPow(self, x: float, n: int) -\u003e float:\n        result = 1\n\n        while n:\n            if n \u003e 0:\n                result *= x\n                n -= 1\n                continue\n            \n            result /= x\n            n += 1\n            \n        return result\n    \n    def pow(self, x: float, n: int) -\u003e float:\n        pass",
      "title": "Pow(x, n)",
      "url": "/submissions/detail/1002440092/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690185581,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000",
      "flag_type": 1
    },
    {
      "id": 1002023003,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 448,
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "code": "class Solution:\n    # [1,1,3,4], [1,2,3,4] -\u003e [2]\n    def findDisappearedNumbers(self, nums: List[int]) -\u003e List[int]:\n        for number in nums:\n            index = abs(number) - 1\n            nums[index] = -1 * abs(nums[index])\n        \n        return [number\n                for number in range(1, len(nums) + 1) \n                if nums[number-1] \u003e 0]\n        \n",
      "title": "Find All Numbers Disappeared in an Array",
      "url": "/submissions/detail/1002023003/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690135971,
      "status": 10,
      "runtime": "372 ms",
      "is_pending": "Not Pending",
      "memory": "25.2 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002014133,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 448,
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "code": "class Solution:\n    # [1,1,3,4], [1,2,3,4] -\u003e [2]\n    def findDisappearedNumbers(self, nums: List[int]) -\u003e List[int]:\n        result = {number: True for number in range(1, len(nums) + 1)}\n\n        for number in nums:\n            result[number] = False\n        \n        return [number for number, valid in result.items() if valid]\n",
      "title": "Find All Numbers Disappeared in an Array",
      "url": "/submissions/detail/1002014133/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690135265,
      "status": 10,
      "runtime": "345 ms",
      "is_pending": "Not Pending",
      "memory": "29.5 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002010205,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 448,
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "code": "class Solution:\n    # [1,1,3,4], [1,2,3,4] -\u003e [2]\n    def findDisappearedNumbers(self, nums: List[int]) -\u003e List[int]:\n        nums.sort()\n        result = []\n        length = len(nums)\n        j = 0\n        for i in range(1, length + 1):\n            while j \u003c length and nums[j] \u003c i:\n                j += 1\n            \n            if j \u003c length and nums[j] == i:\n                continue\n\n            result.append(i)\n\n        return result\n",
      "title": "Find All Numbers Disappeared in an Array",
      "url": "/submissions/detail/1002010205/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690134957,
      "status": 10,
      "runtime": "399 ms",
      "is_pending": "Not Pending",
      "memory": "25.2 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1001982716,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 441,
      "title_slug": "arranging-coins",
      "code": "class Solution:\n    def arrangeCoins(self, n: int) -\u003e int:\n        left, right = 0, n\n\n        while left \u003c= right:\n            middle = left + (right - left) // 2\n            coins = middle * (middle + 1) // 2\n\n            if coins == n:\n                return middle\n            \n            if coins \u003e n:\n                right = middle - 1\n            else:\n                left = middle + 1\n        \n        return right\n",
      "title": "Arranging Coins",
      "url": "/submissions/detail/1001982716/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690132680,
      "status": 10,
      "runtime": "50 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1001982566,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 441,
      "title_slug": "arranging-coins",
      "code": "class Solution:\n    def arrangeCoins(self, n: int) -\u003e int:\n        left, right = 0, n\n\n        while left \u003c= right:\n            middle = left + (right - left) // 2\n            coins = middle * (middle + 1) // 2\n\n            if coins == n:\n                return middle\n            \n            if coins \u003e h:\n                right = middle - 1\n            else:\n                left = middle + 1\n        \n        return right\n",
      "title": "Arranging Coins",
      "url": "/submissions/detail/1001982566/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690132668,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1001972349,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 441,
      "title_slug": "arranging-coins",
      "code": "class Solution:\n    def arrangeCoins(self, n: int) -\u003e int:\n        count = 0\n        row = 1\n        while n \u003e= row:\n            n -= row\n            row += 1\n            count += 1\n\n        return count",
      "title": "Arranging Coins",
      "url": "/submissions/detail/1001972349/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690131822,
      "status": 10,
      "runtime": "1065 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1001967812,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 908,
      "title_slug": "middle-of-the-linked-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        return slow\n",
      "title": "Middle of the Linked List",
      "url": "/submissions/detail/1001967812/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690131433,
      "status": 10,
      "runtime": "50 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1001966755,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 908,
      "title_slug": "middle-of-the-linked-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        middle = head.next if head else None \n        tail = middle.next if middle else None\n        move = True\n        while tail and tail.next:\n            tail = tail.next\n            if move:\n                middle = middle.next\n            \n            move = not move\n\n        return middle if middle else head\n",
      "title": "Middle of the Linked List",
      "url": "/submissions/detail/1001966755/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690131341,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1001966319,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 908,
      "title_slug": "middle-of-the-linked-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        middle = head.next if head else None \n        tail = middle.next if middle else None\n        move = True\n        while tail and tail.next:\n            tail = tail.next\n            if move:\n                middle = middle.next\n            \n            move = not move\n\n        return middle\n",
      "title": "Middle of the Linked List",
      "url": "/submissions/detail/1001966319/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690131306,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1001849755,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 930,
      "title_slug": "all-possible-full-binary-trees",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def allPossibleFBT(self, n: int) -\u003e List[TreeNode]:\n        if n % 2 == 0:\n            return []\n        if n == 1:\n            return [TreeNode()]\n\n        res = []\n        for i in range(1, n, 2):\n            left = self.allPossibleFBT(i)\n            right = self.allPossibleFBT(n - i - 1)\n\n            for l in left:\n                for r in right:\n                    root = TreeNode(0, l, r)\n                    res.append(root)\n\n        return res",
      "title": "All Possible Full Binary Trees",
      "url": "/submissions/detail/1001849755/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690120234,
      "status": 10,
      "runtime": "213 ms",
      "is_pending": "Not Pending",
      "memory": "26 MB",
      "compare_result": "11111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1001107966,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 688,
      "title_slug": "knight-probability-in-chessboard",
      "code": "class Solution:\n    # y x x\n    # x x x\n    # x x x: (2 / 8) * (4 / 16) = 0.0625\n    #        (1/8, 1/8), (2/8, 2/8)\n    # \n    # x x x\n    # x y x\n    # x x x: 0\n    def __init__(self):\n        self.available_moves = (\n            (2, 1), (1, 2), (-2, 1), (-1, 2), (2, -1), (1, -2), \n            (-2, -1), (-1, -2)\n        )\n    \n\n    def knightProbability(self, n: int, k: int, row: int, column: int) -\u003e float:\n        if k \u003c 1:\n            return 1\n        \n        if n \u003c 3:\n            return 0\n\n        return self.calculate(row, column, n, k)\n    \n    @cache\n    def calculate(self, row: int, column: int, size: int, \n                       moves_left: int) -\u003e float:\n       \n        if moves_left \u003c 1:\n            return 1\n\n        probability = 0\n\n        for row_add, column_add in self.available_moves:\n            new_row = row_add + row\n            new_column = column_add + column\n\n            if new_row \u003c 0 or new_row \u003e= size or (\n                new_column \u003c 0 or new_column \u003e= size\n            ):\n                continue\n\n            probability += self.calculate(\n                new_row, new_column, size, moves_left - 1\n            ) / 8\n\n        return probability",
      "title": "Knight Probability in Chessboard",
      "url": "/submissions/detail/1001107966/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690042140,
      "status": 10,
      "runtime": "268 ms",
      "is_pending": "Not Pending",
      "memory": "27.8 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1001106417,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 688,
      "title_slug": "knight-probability-in-chessboard",
      "code": "class Solution:\n    # y x x\n    # x x x\n    # x x x: (2 / 8) * (4 / 16) = 0.0625\n    #        (1/8, 1/8), (2/8, 2/8)\n    # \n    # x x x\n    # x y x\n    # x x x: 0\n    def __init__(self):\n        self.available_moves = (\n            (2, 1), (1, 2), (-2, 1), (-1, 2), (2, -1), (1, -2), \n            (-2, -1), (-1, -2)\n        )\n    \n\n    def knightProbability(self, n: int, k: int, row: int, column: int) -\u003e float:\n        if k \u003c 1:\n            return 1\n        \n        if n \u003c 3:\n            return 0\n\n        return self.calculate(row, column, n, k)\n    \n    @cache\n    def calculate(self, row: int, column: int, size: int, \n                       moves_left: int) -\u003e float:\n       \n        if moves_left \u003c 1:\n            return 1\n\n        probability = 0\n\n        for row_add, column_add in self.available_moves:\n            new_row = row_add + row\n            new_column = column_add + column\n\n            if new_row \u003c 0 or new_row \u003e= size or (\n                new_column \u003c 0 or new_column \u003e= size\n            ):\n                continue\n\n            probability += self.calculate(\n                row, column, size, moves_left - 1\n            ) / 8\n\n        return probability",
      "title": "Knight Probability in Chessboard",
      "url": "/submissions/detail/1001106417/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690042026,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111110000000000",
      "flag_type": 1
    },
    {
      "id": 1001101835,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 688,
      "title_slug": "knight-probability-in-chessboard",
      "code": "class Solution:\n    # y x x\n    # x x x\n    # x x x: (2 / 8) * (4 / 16) = 0.0625\n    #        (1/8, 1/8), (2/8, 2/8)\n    # \n    # x x x\n    # x y x\n    # x x x: 0\n    def __init__(self):\n        self.available_moves = (\n            (2, 1), (1, 2), (-2, 1), (-1, 2), (2, -1), (1, -2), \n            (-2, -1), (-1, -2)\n        )\n    \n\n    def knightProbability(self, n: int, k: int, row: int, column: int) -\u003e float:\n        if k \u003c 1:\n            return 1\n        \n        if n \u003c 3:\n            return 0\n\n        return self.calculate(row, column, n, k)\n    \n    @cache\n    def calculate(self, row: int, column: int, size: int, \n                       moves_left: int) -\u003e float:\n       \n        if moves_left \u003c 1:\n            return 1\n\n        probability = 0\n\n        for row_add, column_add in self.available_moves:\n            new_row = row_add + row\n            new_column = column_add + column\n\n            if new_row \u003c 0 or new_row \u003e= size or (\n                new_column \u003c 0 or new_column \u003e= size\n            ):\n                continue\n\n            probability += self.calculate(\n                row, column, size, moves_left - 1\n            ) / 8\n\n        return probability",
      "title": "Knight Probability in Chessboard",
      "url": "/submissions/detail/1001101835/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690041708,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111110000000000",
      "flag_type": 1
    },
    {
      "id": 1001096459,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 688,
      "title_slug": "knight-probability-in-chessboard",
      "code": "class Solution:\n    # y x x\n    # x x x\n    # x x x: (2 / 8) * (4 / 16) = 0.0625\n    #        (1/8, 1/8), (2/8, 2/8)\n    # \n    # x x x\n    # x y x\n    # x x x: 0\n    def __init__(self):\n        self.available_moves = (\n            (2, 1), (1, 2), (-2, 1), (-1, 2), (2, -1), (1, -2), \n            (-2, -1), (-1, -2)\n        )\n    \n\n    def knightProbability(self, n: int, k: int, row: int, column: int) -\u003e float:\n        if k \u003c 1:\n            return 1\n        \n        if n \u003c 3:\n            return 0\n\n        return self.calculate(row, column, n, k)\n    \n    def calculate(self, row: int, column: int, size: int, \n                       moves_left: int) -\u003e float:\n       \n        if moves_left \u003c 1:\n            return 1\n\n        probability = 0\n\n        for row_add, column_add in self.available_moves:\n            new_row = row_add + row\n            new_column = column_add + column\n\n            if new_row \u003c 0 or new_row \u003e= size or (\n                new_column \u003c 0 or new_column \u003e= size\n            ):\n                continue\n\n            probability += self.calculate(\n                row, column, size, moves_left - 1\n            ) / 8\n\n        return probability",
      "title": "Knight Probability in Chessboard",
      "url": "/submissions/detail/1001096459/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690041475,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111100000000000",
      "flag_type": 1
    },
    {
      "id": 1000968338,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 688,
      "title_slug": "knight-probability-in-chessboard",
      "code": "class Solution:\n    def knightProbability(self, n: int, k: int, row: int, column: int) -\u003e float:\n        # Define possible directions for the knight's moves\n        directions = [(1, 2), (1, -2), (-1, 2), (-1, -2),\n                      (2, 1), (2, -1), (-2, 1), (-2, -1)]\n\n        # Initialize the dynamic programming table\n        dp = [[[0] * n for _ in range(n)] for _ in range(k + 1)]\n        dp[0][row][column] = 1\n\n        # Iterate over the number of moves\n        for moves in range(1, k + 1):\n            # Iterate over the cells on the chessboard\n            for i in range(n):\n                for j in range(n):\n                    # Iterate over possible directions\n                    for direction in directions:\n                        prev_i, prev_j = i - direction[0], j - direction[1]\n                        # Check if the previous cell is within the chessboard\n                        if 0 \u003c= prev_i \u003c n and 0 \u003c= prev_j \u003c n:\n                            # Add the previous probability\n                            dp[moves][i][j] += dp[moves - 1][prev_i][prev_j]\n                    # Divide by 8\n                    dp[moves][i][j] /= 8\n\n        # Calculate total probability by summing probabilities for all cells\n        total_probability = sum(\n            dp[k][i][j]\n            for i in range(n)\n            for j in range(n)\n        )\n        return total_probability",
      "title": "Knight Probability in Chessboard",
      "url": "/submissions/detail/1000968338/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690036594,
      "status": 10,
      "runtime": "400 ms",
      "is_pending": "Not Pending",
      "memory": "19.1 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002796928,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 482,
      "title_slug": "license-key-formatting",
      "code": "class Solution:\n    def licenseKeyFormatting(self, s: str, k: int) -\u003e str:\n        result = []\n        count = 0\n        for letter in reversed(s):\n            if letter == \"-\":\n                continue\n\n            if count == k:\n                result.append(\"-\")\n                count = 0\n            \n            count += 1\n            result.append(letter.upper())\n\n        return \"\".join(reversed(result))",
      "title": "License Key Formatting",
      "url": "/submissions/detail/1002796928/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690216488,
      "status": 10,
      "runtime": "71 ms",
      "is_pending": "Not Pending",
      "memory": "20.5 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002769283,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 482,
      "title_slug": "license-key-formatting",
      "code": "class Solution:\n    # \"5F3Z-2e-9-w\" -\u003e \"5F3Z2E9W\" -\u003e \"5F3Z2E9W\"\n    def licenseKeyFormatting(self, s: str, k: int) -\u003e str:\n        letters = s.replace(\"-\", \"\").upper()\n        result = []\n        end = len(letters)\n        while end \u003e 0:\n            start = end - k\n            if start \u003c 0:\n                start = 0\n            result.append(letters[start:end])\n            end -= k\n\n        return \"-\".join(reversed(result))",
      "title": "License Key Formatting",
      "url": "/submissions/detail/1002769283/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690214534,
      "status": 10,
      "runtime": "61 ms",
      "is_pending": "Not Pending",
      "memory": "17.3 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002756779,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 463,
      "title_slug": "island-perimeter",
      "code": "class Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -\u003e int:\n        perimeter = 0\n        last_row = len(grid) - 1        \n        last_cell = len(grid[0]) - 1\n        for i, row in enumerate(grid):\n            for j, cell in enumerate(row):\n                if cell == 0:\n                    continue\n                \n                if j == 0 or row[j-1] == 0:\n                    perimeter += 1\n                \n                if j == last_cell or row[j+1] == 0:\n                    perimeter += 1\n                \n                if i == 0 or grid[i-1][j] == 0:\n                    perimeter += 1\n\n                if i == last_row or grid[i+1][j] == 0:\n                    perimeter += 1\n        \n        return perimeter\n                ",
      "title": "Island Perimeter",
      "url": "/submissions/detail/1002756779/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690213637,
      "status": 10,
      "runtime": "475 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1002668315,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 349,
      "title_slug": "intersection-of-two-arrays",
      "code": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -\u003e List[int]:\n        return set(nums1).intersection(nums2)",
      "title": "Intersection of Two Arrays",
      "url": "/submissions/detail/1002668315/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690207015,
      "status": 10,
      "runtime": "60 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002667847,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 349,
      "title_slug": "intersection-of-two-arrays",
      "code": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -\u003e List[int]:\n        return set(nums1) \u0026 nums2",
      "title": "Intersection of Two Arrays",
      "url": "/submissions/detail/1002667847/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690206981,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1002667720,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 349,
      "title_slug": "intersection-of-two-arrays",
      "code": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -\u003e List[int]:\n        return set(nums1) \u0026 set(nums2)",
      "title": "Intersection of Two Arrays",
      "url": "/submissions/detail/1002667720/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690206972,
      "status": 10,
      "runtime": "58 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002666484,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 389,
      "title_slug": "find-the-difference",
      "code": "class Solution:\n    def findTheDifference(self, s: str, t: str) -\u003e str:\n        letters = defaultdict(int)\n        for letter in s:\n            letters[letter] += 1\n\n        for letter in t:\n            if letters[letter] == 0:\n                return letter\n            \n            letters[letter] -= 1\n        \n        return None",
      "title": "Find the Difference",
      "url": "/submissions/detail/1002666484/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690206878,
      "status": 10,
      "runtime": "51 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002665137,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 389,
      "title_slug": "find-the-difference",
      "code": "class Solution:\n    def findTheDifference(self, s: str, t: str) -\u003e str:\n        letters = set(s)\n        for letter in t:\n            if letter in letters:\n                continue\n                \n            return letter\n        \n        return None",
      "title": "Find the Difference",
      "url": "/submissions/detail/1002665137/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690206774,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1002664084,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 387,
      "title_slug": "first-unique-character-in-a-string",
      "code": "class Solution:\n    def firstUniqChar(self, s: str) -\u003e int:\n        counts = defaultdict(int)\n        repeated_index = len(s)\n        for letter in s:\n            counts[letter] += 1\n        \n        for i, letter in enumerate(s):\n            if counts[letter] != 1:\n                continue\n            \n            return i\n        \n        return -1",
      "title": "First Unique Character in a String",
      "url": "/submissions/detail/1002664084/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690206693,
      "status": 10,
      "runtime": "125 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002662613,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 387,
      "title_slug": "first-unique-character-in-a-string",
      "code": "class Solution:\n    def firstUniqChar(self, s: str) -\u003e int:\n        counts = {}\n        repeated_index = len(s)\n        for i, letter in enumerate(s):\n            if letter in counts:\n                counts[letter] = repeated_index\n                continue\n            \n            counts[letter] = i\n        \n        result = repeated_index\n\n        for letter, index in counts.items():\n            if index == repeated_index:\n                continue\n            \n            if index \u003c result:\n                result = index\n\n        return result if result != repeated_index else -1",
      "title": "First Unique Character in a String",
      "url": "/submissions/detail/1002662613/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690206578,
      "status": 10,
      "runtime": "107 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002649580,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 404,
      "title_slug": "sum-of-left-leaves",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -\u003e int:\n        nodes = set([root])\n        result = 0\n\n        while nodes:\n            node = nodes.pop()\n            \n            if node.left and not node.left.left and not node.left.right:\n                result += node.left.val\n            elif node.left:\n                nodes.add(node.left)\n            \n            if node.right:\n                nodes.add(node.right)\n            \n        return result",
      "title": "Sum of Left Leaves",
      "url": "/submissions/detail/1002649580/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690205533,
      "status": 10,
      "runtime": "47 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002648505,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 404,
      "title_slug": "sum-of-left-leaves",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -\u003e int:\n        nodes = set([root])\n        result = 0\n\n        while nodes:\n            node = nodes.pop()\n            \n            if node.left and not node.left.left and not node.left.right:\n                result += node.left.val\n            elif node.left:\n                nodes.add(node.right)\n            \n            if node.right:\n                nodes.add(node.right)\n            \n        return result",
      "title": "Sum of Left Leaves",
      "url": "/submissions/detail/1002648505/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690205438,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1002640580,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 409,
      "title_slug": "longest-palindrome",
      "code": "class Solution:\n    def longestPalindrome(self, s: str) -\u003e int:\n        counts = defaultdict(int)\n\n        for letter in s:\n            counts[letter] += 1\n        \n        result = sum(count if count % 2 == 0 else count - 1\n                     for symbol, count in counts.items())\n\n        if result \u003c len(s):\n            result += 1\n\n        return result",
      "title": "Longest Palindrome",
      "url": "/submissions/detail/1002640580/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690204779,
      "status": 10,
      "runtime": "42 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002638799,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 409,
      "title_slug": "longest-palindrome",
      "code": "class Solution:\n    def longestPalindrome(self, s: str) -\u003e int:\n        counts = defaultdict(int)\n\n        for letter in s:\n            counts[letter] += 1\n        \n        result = 0\n        used_odd_letter = False\n        for letter, count in counts.items():\n            is_odd = count % 2 != 0 \n            if is_odd and used_odd_letter:\n                result -= 1\n            elif is_odd:\n                used_odd_letter = True\n            result += count\n\n        return result",
      "title": "Longest Palindrome",
      "url": "/submissions/detail/1002638799/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690204630,
      "status": 10,
      "runtime": "46 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002518030,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 414,
      "title_slug": "third-maximum-number",
      "code": "class Solution:\n    def thirdMax(self, nums: List[int]) -\u003e int:\n        nums.sort(reverse=True)\n        number_max = nums[0]\n        count = 1\n        for i in range(1, len(nums)):\n            number = nums[i]\n            if number == nums[i-1]:\n                continue\n            \n            count += 1\n\n            if count == 3:\n                return number \n        \n        return number_max",
      "title": "Third Maximum Number",
      "url": "/submissions/detail/1002518030/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690193069,
      "status": 10,
      "runtime": "69 ms",
      "is_pending": "Not Pending",
      "memory": "17.3 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002517384,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 414,
      "title_slug": "third-maximum-number",
      "code": "class Solution:\n    def thirdMax(self, nums: List[int]) -\u003e int:\n        nums.sort(reverse=True)\n        number_max = nums[0]\n        count = 1\n        for i in range(1, len(nums)):\n            number = nums[i]\n            if number == nums[i-1]:\n                continue\n            \n            count += 1\n\n            if count == 3:\n                return number \n\n            if number \u003e number_max:\n                number_max = number\n        \n        return number_max",
      "title": "Third Maximum Number",
      "url": "/submissions/detail/1002517384/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690193011,
      "status": 10,
      "runtime": "73 ms",
      "is_pending": "Not Pending",
      "memory": "17.3 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002514198,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 415,
      "title_slug": "add-strings",
      "code": "class Solution:\n    def addStrings(self, num1: str, num2: str) -\u003e str:\n        result = []\n        index_1, index_2 = len(num1) - 1, len(num2) - 1\n\n\n        carry = 0\n        while index_1 \u003e= 0 or index_2 \u003e= 0 or carry:\n            digit_1 = num1[index_1] if index_1 \u003e= 0 else 0\n            digit_2 = num2[index_2] if index_2 \u003e= 0 else 0\n            digit = int(digit_1) + int(digit_2) + carry\n            if digit \u003e 9:\n                carry = 1\n                digit %= 10\n            else:\n                carry = 0\n\n            result.append(str(digit))\n            index_1 -= 1\n            index_2 -= 1 \n\n        return \"\".join(reversed(result))",
      "title": "Add Strings",
      "url": "/submissions/detail/1002514198/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690192721,
      "status": 10,
      "runtime": "51 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002512700,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 415,
      "title_slug": "add-strings",
      "code": "class Solution:\n    def addStrings(self, num1: str, num2: str) -\u003e str:\n        result = []\n        length_1, length_2 = len(num1), len(num2)\n        index_1, index_2 = length_1 - 1, length_2 - 1\n\n\n        carry = 0\n        while index_1 \u003e= 0 or index_2 \u003e= 0 or carry:\n            digit_1 = num1[index_1] if index_1 \u003e= 0 else 0\n            digit_2 = num2[index_2] if index_2 \u003e= 0 else 0\n            digit = int(digit_1) + int(digit_2) + carry\n            if digit \u003e 9:\n                carry = 1\n                digit %= 10\n            else:\n                carry = 0\n\n            result.append(str(digit))\n            index_1 -= 1\n            index_2 -= 1 \n\n        return \"\".join(reversed(result))",
      "title": "Add Strings",
      "url": "/submissions/detail/1002512700/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690192582,
      "status": 10,
      "runtime": "62 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002505295,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 455,
      "title_slug": "assign-cookies",
      "code": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -\u003e int:\n        g.sort(reverse=True)\n        s.sort(reverse=True)\n        count = 0\n        cookie_index = 0\n        cookie_count = len(s)\n        for greed in g:\n            if cookie_index \u003e= cookie_count or greed \u003e s[cookie_index]:\n                continue\n\n            count += 1\n            cookie_index += 1\n            \n        return count",
      "title": "Assign Cookies",
      "url": "/submissions/detail/1002505295/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690191882,
      "status": 10,
      "runtime": "175 ms",
      "is_pending": "Not Pending",
      "memory": "18.3 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002504865,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 455,
      "title_slug": "assign-cookies",
      "code": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -\u003e int:\n        g.sort(reverse=True)\n        s.sort(reverse=True)\n        count = 0\n        cookie_index = 0\n        cookie_count = len(s)\n        for greed in g:\n            if cookie_index \u003c cookie_count and greed \u003e s[cookie_index]:\n                continue\n\n            count += 1\n            cookie_index += 1\n            \n        return count",
      "title": "Assign Cookies",
      "url": "/submissions/detail/1002504865/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690191842,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110011011111110010111",
      "flag_type": 1
    },
    {
      "id": 1005164512,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 2263,
      "title_slug": "maximum-running-time-of-n-computers",
      "code": "class Solution:\n    # n = 2, batteries = [3,3,3], Output: 4\n    # n = 2, batteries = [1,1,1,1], Output: 2\n    def maxRunTime(self, n: int, batteries: List[int]) -\u003e int:\n        length = len(batteries)\n\n        if length \u003c n:\n            return 0\n        \n        if length == n:\n            return min(batteries)\n\n        live = batteries[-n:]\n        \n        # We increase the total running time using 'extra' by increasing \n        # the running time of the computer with the smallest battery.\n        for i in range(n - 1):\n            # If the target running time is between live[i] and live[i + 1].\n            if extra // (i + 1) \u003c live[i + 1] - live[i]:\n                return live[i] + extra // (i + 1)\n            \n            # Reduce 'extra' by the total power used.\n            extra -= (i + 1) * (live[i + 1] - live[i])\n        \n        # If there is power left, we can increase the running time \n        # of all computers.\n        return live[-1] + extra // n",
      "title": "Maximum Running Time of N Computers",
      "url": "/submissions/detail/1005164512/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690446454,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1005155392,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2263,
      "title_slug": "maximum-running-time-of-n-computers",
      "code": "class Solution:\n    # n = 2, batteries = [3,4,5], Output: 4\n    # [2,3,5], [2,2,4], [1,2,3], [0,1,3], [0,0,2]\n    # [3,3,4], [3,2,3], [2,2,2], [2,1,1], [2,0,0]\n    # n = 2, batteries = [1,1,1,1], Output: 2\n    def maxRunTime(self, n: int, batteries: List[int]) -\u003e int:\n        minutes, current = 0, 0\n        batteries = sorted(batteries)\n        while len(batteries) \u003e n:\n            count = 0\n            while count \u003c n:\n                if current \u003e= len(batteries):\n                    current = 0\n                \n                batteries[current] -= 1\n                count += 1\n                if not batteries[current]:\n                    batteries[current] = batteries[-1]\n                    batteries.pop()\n                current += 1\n            \n            minutes += 1\n\n\n        if len(batteries) \u003c n:\n            return minutes\n        \n        return minutes + min(batteries)    \n\n        \n",
      "title": "Maximum Running Time of N Computers",
      "url": "/submissions/detail/1005155392/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690445540,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1101110000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1005143557,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 2263,
      "title_slug": "maximum-running-time-of-n-computers",
      "code": "class Solution:\n    # n = 2, batteries = [3,3,3], Output: 4\n    # [3,2,2], [2,1,2], [1,1,1], [0,1,0]\n    # n = 2, batteries = [1,1,1,1], Output: 2\n    def maxRunTime(self, n: int, batteries: List[int]) -\u003e int:\n        length = len(batteries)\n        if length \u003c n:\n            return 0\n        \n        if length == n:\n            return min(batteries)\n        \n        batteries = sorted(batteries)\n        minutes = 0\n        while n:\n            for i in range(length - 1, length - n - 1, -1):\n                if batteries[i] == 0:\n                    return minutes\n                batteries[i] -= 1\n            batteries.sort()\n            minutes += 1\n        \n        return minutes\n\n        \n",
      "title": "Maximum Running Time of N Computers",
      "url": "/submissions/detail/1005143557/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690444344,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111110000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1004786340,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2000,
      "title_slug": "minimum-speed-to-arrive-on-time",
      "code": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -\u003e int:\n        length = len(dist)\n        if hour \u003e= sum(dist):\n            return 1\n        \n        if hour \u003c= length - 1:\n            return -1\n        \n        time_remaining = hour - length + 1\n        max_speed = int(max(\n            max(dist), dist[-1] // time_remaining + 1\n        ))\n        min_speed = 1\n        result = -1\n        while min_speed \u003c max_speed:\n            speed = min_speed + (max_speed - min_speed) // 2\n            time = dist[-1] / speed + sum(\n                (distance + speed - 1) // speed \n                for distance in dist[:-1]\n            )\n            \n            if time \u003e hour:\n                min_speed = speed + 1\n            else:\n                max_speed = speed\n        \n        return min_speed",
      "title": "Minimum Speed to Arrive on Time",
      "url": "/submissions/detail/1004786340/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690401415,
      "status": 10,
      "runtime": "2140 ms",
      "is_pending": "Not Pending",
      "memory": "30.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1004777940,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2000,
      "title_slug": "minimum-speed-to-arrive-on-time",
      "code": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -\u003e int:\n        length = len(dist)\n        if hour \u003e= sum(dist):\n            return 1\n        \n        if hour \u003c= length - 1:\n            return -1\n        \n        last_distance = length - 1\n        time_remaining = hour - length + 1\n        max_speed = int(max(max(dist), dist[-1] // time_remaining + 1))\n        min_speed = 1\n        while min_speed \u003c max_speed:\n            speed = min_speed + (max_speed - min_speed) // 2\n            time = dist[-1] / speed + sum(\n                distance // speed + 1 for distance in dist[:-1]\n            )\n            \n            if time \u003e hour:\n                min_speed = speed + 1\n            else:\n                max_speed = speed\n        \n        return min_speed",
      "title": "Minimum Speed to Arrive on Time",
      "url": "/submissions/detail/1004777940/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690400622,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111001111010010110010101110001111111111111100111111111",
      "flag_type": 1
    },
    {
      "id": 1004775764,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2000,
      "title_slug": "minimum-speed-to-arrive-on-time",
      "code": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -\u003e int:\n        length = len(dist)\n        if hour \u003e= sum(dist):\n            return 1\n        \n        if hour \u003c= length - 1:\n            return -1\n        \n        last_distance = length - 1\n        distance, time_remaining = dist[-1], hour - length + 1\n        max_speed = int(max(max(dist), distance // time_remaining + 1))\n        min_speed = 1\n        result = -1\n        while min_speed \u003c max_speed:\n            speed = min_speed + (max_speed - min_speed) // 2\n            time = 0\n            for i in range(0, length):\n                distance = dist[i]\n                if i == last_distance:\n                    time += distance / speed\n                else:\n                    time += distance // speed + 1\n            \n            if time \u003e hour:\n                min_speed = speed + 1\n            else:\n                max_speed = speed\n        \n        return min_speed",
      "title": "Minimum Speed to Arrive on Time",
      "url": "/submissions/detail/1004775764/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690400419,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111001111010010110010101110001111111111111100111111111",
      "flag_type": 1
    },
    {
      "id": 1004767376,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2000,
      "title_slug": "minimum-speed-to-arrive-on-time",
      "code": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -\u003e int:\n        length = len(dist)\n        if hour \u003e= sum(dist):\n            return 1\n        \n        if hour \u003c= length - 1:\n            return -1\n        \n        last_distance = length - 1\n        distance, time_remaining = dist[-1], hour - length + 1\n        max_speed = max(max(dist), distance // time_remaining + 1)\n        min_speed = 1\n        while min_speed \u003c max_speed:\n            speed = min_speed + (max_speed - min_speed) // 2\n            time = 0\n            for i in range(0, length):\n                distance = dist[i]\n                if i == last_distance:\n                    time += distance / speed\n                else:\n                    time += distance // speed + 1\n                \n                if time \u003e hour:\n                    break\n            \n            if time \u003e hour:\n                min_speed = speed + 1\n            else:\n                max_speed = speed \n        \n        return int(max_speed)",
      "title": "Minimum Speed to Arrive on Time",
      "url": "/submissions/detail/1004767376/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690399669,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111001111010010110010101110001111111111111100111111111",
      "flag_type": 1
    },
    {
      "id": 1004766836,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 2000,
      "title_slug": "minimum-speed-to-arrive-on-time",
      "code": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -\u003e int:\n        length = len(dist)\n        if hour \u003e= sum(dist):\n            return 1\n        \n        if hour \u003c= length - 1:\n            return -1\n        \n        last_distance = length - 1\n        distance, time_remaining = dist[-1], hour - length + 1\n        max_speed = max(max(dist), distance // time_remaining + 1)\n        min_speed = 1\n        result = -1\n        while min_speed \u003c= max_speed:\n            speed = min_speed + (max_speed - min_speed) // 2\n            time = 0\n            for i in range(0, length):\n                distance = dist[i]\n                if i == last_distance:\n                    time += distance / speed\n                else:\n                    time += distance // speed + 1\n                \n                if time \u003e hour:\n                    break\n            \n            if time \u003e hour:\n                min_speed = speed + 1\n            else:\n                max_speed = speed \n        \n        return max_speed",
      "title": "Minimum Speed to Arrive on Time",
      "url": "/submissions/detail/1004766836/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690399621,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11100000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1004766449,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2000,
      "title_slug": "minimum-speed-to-arrive-on-time",
      "code": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -\u003e int:\n        length = len(dist)\n        if hour \u003e= sum(dist):\n            return 1\n        \n        if hour \u003c= length - 1:\n            return -1\n        \n        last_distance = length - 1\n        distance, time_remaining = dist[-1], hour - length + 1\n        max_speed = max(max(dist), distance // time_remaining + 1)\n        min_speed = 1\n        result = -1\n        while min_speed \u003c= max_speed:\n            speed = min_speed + (max_speed - min_speed) // 2\n            time = 0\n            for i in range(0, length):\n                distance = dist[i]\n                if i == last_distance:\n                    time += distance / speed\n                else:\n                    time += distance // speed + 1\n                \n                if time \u003e hour:\n                    break\n            \n            if time \u003e hour:\n                min_speed = speed + 1\n            else:\n                max_speed = speed - 1 \n        \n        return max_speed",
      "title": "Minimum Speed to Arrive on Time",
      "url": "/submissions/detail/1004766449/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690399585,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11101110001110110000101101001101010001110011100001000110000000111",
      "flag_type": 1
    },
    {
      "id": 1004740176,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2000,
      "title_slug": "minimum-speed-to-arrive-on-time",
      "code": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -\u003e int:\n        length = len(dist)\n        if hour \u003e= length:\n            return 1\n        \n        if hour \u003c= length - 1:\n            return -1\n        \n        min_speed = max(dist)\n        distance, time_remaining = dist[-1], hour - length + 1\n        speed = distance // time_remaining\n        if speed \u003c= min_speed:\n            return min_speed\n        \n        return int(speed)",
      "title": "Minimum Speed to Arrive on Time",
      "url": "/submissions/detail/1004740176/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690397406,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111110001110000000000000000000000000000011100001000100100001100",
      "flag_type": 1
    },
    {
      "id": 1004736125,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2000,
      "title_slug": "minimum-speed-to-arrive-on-time",
      "code": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -\u003e int:\n        length = len(dist)\n        if hour \u003e= length:\n            return 1\n        \n        if hour \u003c= length - 1:\n            return -1\n        \n        distance, time_remaining = dist[-1], hour - length + 1\n        result = distance // time_remaining\n        if not hour.is_integer():\n            result += 1\n        \n        return int(result)",
      "title": "Minimum Speed to Arrive on Time",
      "url": "/submissions/detail/1004736125/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690397099,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11101110001110000000000000000000000000000011000001010100000010000",
      "flag_type": 1
    },
    {
      "id": 1003589521,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 882,
      "title_slug": "peak-index-in-a-mountain-array",
      "code": "class Solution:\n    # [0,3,2,1,0]\n    def peakIndexInMountainArray(self, arr: List[int]) -\u003e int:\n        length = len(arr)\n\n        left, right = 0, length - 1\n        while left \u003c right:\n            mid = left + (right - left) // 2\n\n            if arr[mid] \u003c arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n\n        return left\n        ",
      "title": "Peak Index in a Mountain Array",
      "url": "/submissions/detail/1003589521/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690292740,
      "status": 10,
      "runtime": "602 ms",
      "is_pending": "Not Pending",
      "memory": "30.2 MB",
      "compare_result": "111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1003583841,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 882,
      "title_slug": "peak-index-in-a-mountain-array",
      "code": "class Solution:\n    # [0,3,2,1,0]\n    def peakIndexInMountainArray(self, arr: List[int]) -\u003e int:\n        length = len(arr)\n\n        left, right = 0, length - 1\n        while left \u003c= right:\n            peak = left + (right - left) // 2\n            left_val, right_val = arr[peak-1], arr[peak+1]\n            peak_val = arr[peak]\n\n            if left_val \u003c peak_val \u003e right_val:\n                return peak\n            \n            if right_val \u003e peak_val:\n                left = peak + 1\n            else:\n                right = peak - 1\n        \n        return left\n        ",
      "title": "Peak Index in a Mountain Array",
      "url": "/submissions/detail/1003583841/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690292305,
      "status": 10,
      "runtime": "603 ms",
      "is_pending": "Not Pending",
      "memory": "30.2 MB",
      "compare_result": "111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002890033,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 3,
      "title_slug": "longest-substring-without-repeating-characters",
      "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -\u003e int:\n        length = len(s)\n        if length \u003c 2:\n            return length\n        \n        max_length, left, charset = 1, 0, set([s[0]])\n        for right in range(1, length):\n            letter = s[right]\n            if letter not in charset:\n                charset.add(letter)\n                continue\n\n            this_length = right - left\n            if this_length \u003e max_length:\n                max_length = this_length\n            \n            while letter in charset:\n                charset.remove(s[left])\n                left += 1\n            \n            charset.add(letter)\n\n        return max(max_length, length - left)",
      "title": "Longest Substring Without Repeating Characters",
      "url": "/submissions/detail/1002890033/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690222629,
      "status": 10,
      "runtime": "53 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1002889700,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 3,
      "title_slug": "longest-substring-without-repeating-characters",
      "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -\u003e int:\n        length = len(s)\n        if length \u003c 2:\n            return length\n        \n        max_length, left, charset = 1, 0, set([s[0]])\n        for right in range(1, length):\n            letter = s[right]\n            if letter not in charset:\n                charset.add(letter)\n                continue\n\n            this_length = right - left\n            if this_length \u003e max_length:\n                max_length = this_length\n            \n            while letter in charset:\n                charset.remove(s[left])\n                left += 1\n            \n            charset.add(letter)\n\n        return max(max_length, length - left - 1)",
      "title": "Longest Substring Without Repeating Characters",
      "url": "/submissions/detail/1002889700/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690222608,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1002878172,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 3,
      "title_slug": "longest-substring-without-repeating-characters",
      "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -\u003e int:\n        length = len(s)\n        if length \u003c 2:\n            return length\n        \n        max_length = 0\n        start = 0\n        indexes = {s[0]: 0}\n        for end in range(1, length):\n            letter = s[end]\n            if letter not in indexes:\n                indexes[letter] = end\n                continue\n\n            this_length = end - start\n            if this_length \u003e max_length:\n                max_length = this_length\n            \n            letter_index = indexes[letter]\n            \n            for remove_letter in s[start:letter_index]:\n                indexes.pop(remove_letter)\n\n            indexes[letter], start = end, letter_index + 1\n\n        return max(max_length, length - start)",
      "title": "Longest Substring Without Repeating Characters",
      "url": "/submissions/detail/1002878172/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690221857,
      "status": 10,
      "runtime": "76 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1002826029,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 492,
      "title_slug": "construct-the-rectangle",
      "code": "class Solution:\n    def constructRectangle(self, area: int) -\u003e List[int]:\n        return next([area//width, width] \n                    for width in range(int(area**0.5), 0, -1) \n                    if area % width == 0)",
      "title": "Construct the Rectangle",
      "url": "/submissions/detail/1002826029/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690218478,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002812663,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 485,
      "title_slug": "max-consecutive-ones",
      "code": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -\u003e int:\n        max_count, count = 0, 0\n        for number in nums:\n            if not number:\n                max_count = max(max_count, count)\n                count = 0\n                continue\n            \n            count += 1\n        \n        return max(max_count, count)",
      "title": "Max Consecutive Ones",
      "url": "/submissions/detail/1002812663/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690217579,
      "status": 10,
      "runtime": "330 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1002802608,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 485,
      "title_slug": "max-consecutive-ones",
      "code": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -\u003e int:\n        max_count, count = 0, 0\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1] == 1:\n                count += 1\n                continue\n            \n            if count == 1:\n                count += 1\n            \n            if count \u003e max_count:\n                max_count = count\n            \n            count = 0\n\n        return max(max_count, count)",
      "title": "Max Consecutive Ones",
      "url": "/submissions/detail/1002802608/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690216882,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "011011000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1002802038,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 485,
      "title_slug": "max-consecutive-ones",
      "code": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -\u003e int:\n        max_count, count = 0, 0\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1] == 1:\n                count += 1\n                continue\n            \n            if count \u003e max_count:\n                max_count = count\n            \n            count = 0\n\n        return max(max_count, count)",
      "title": "Max Consecutive Ones",
      "url": "/submissions/detail/1002802038/",
      "lang_name": "Python3",
      "time": "6 months, 2 weeks",
      "timestamp": 1690216841,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000011000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1008545747,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 5,
      "title_slug": "longest-palindromic-substring",
      "code": "class Solution:\n    def longestPalindrome(self, s: str) -\u003e str:\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        ans = [0, 0]\n        \n        for i in range(n):\n            dp[i][i] = True\n        \n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                dp[i][i + 1] = True\n                ans = [i, i + 1]\n\n        for diff in range(2, n):\n            for i in range(n - diff):\n                j = i + diff\n                if s[i] == s[j] and dp[i + 1][j - 1]:\n                    dp[i][j] = True\n                    ans = [i, j]\n\n        i, j = ans\n        return s[i:j + 1]",
      "title": "Longest Palindromic Substring",
      "url": "/submissions/detail/1008545747/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690813065,
      "status": 10,
      "runtime": "2069 ms",
      "is_pending": "Not Pending",
      "memory": "24.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1008533325,
      "status_display": "Memory Limit Exceeded",
      "lang": "python3",
      "question_id": 5,
      "title_slug": "longest-palindromic-substring",
      "code": "class Solution:\n    def longestPalindrome(self, s: str) -\u003e str:\n\n        @cache\n        def longest_substr_pal(i: int, j: int) -\u003e Tuple[int, int]:\n            length = j - i + 1\n            is_even = length % 2 == 0\n            half = length // 2\n    \n            if i == j or (\n                is_even and s[i:i+half] == s[j:i+half-1:-1]\n            ) or (\n                not is_even and s[i:i+half] == s[j:i+half:-1]\n            ):\n                return i, j\n            \n            ignore_left = longest_substr_pal(i + 1, j)\n            ignore_right = longest_substr_pal(i, j - 1)\n            left_is_bigger = ignore_left[1] - ignore_left[0] \u003e ignore_right[1] - ignore_right[0]\n\n            return ignore_left if left_is_bigger else ignore_right\n\n        i, j = longest_substr_pal(0, len(s) - 1)\n\n        return s[i:j+1]",
      "title": "Longest Palindromic Substring",
      "url": "/submissions/detail/1008533325/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690812055,
      "status": 12,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1008526762,
      "status_display": "Memory Limit Exceeded",
      "lang": "python3",
      "question_id": 5,
      "title_slug": "longest-palindromic-substring",
      "code": "class Solution:\n    def longestPalindrome(self, s: str) -\u003e str:\n\n        @cache\n        def longest_substr_pal(i: int, j: int) -\u003e str:\n            if i == j:\n                return s[i]\n            \n            length = j - i + 1\n            is_even = length % 2 == 0\n            half = length // 2\n    \n            if is_even and s[i:i+half] == s[j:i+half-1:-1]:\n                return s[i:j+1]\n            \n            if not is_even and s[i:i+half] == s[j:i+half:-1]:\n                return s[i:j+1]\n            \n            ignore_left = longest_substr_pal(i + 1, j)\n            ignore_right = longest_substr_pal(i, j - 1)\n\n            return ignore_left if len(ignore_left) \u003e len(ignore_right) else ignore_right\n\n        \n        return longest_substr_pal(0, len(s) - 1)",
      "title": "Longest Palindromic Substring",
      "url": "/submissions/detail/1008526762/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690811524,
      "status": 12,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1008523028,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 5,
      "title_slug": "longest-palindromic-substring",
      "code": "class Solution:\n    def longestPalindrome(self, s: str) -\u003e str:\n\n        @cache\n        def longest_substr_pal(i: int, j: int) -\u003e str:\n            if i == j:\n                return s[i]\n            \n            length = j - i + 1\n            is_even = length % 2 == 0\n            half = length // 2\n    \n            if is_even and s[i:half] == s[i+half:j+1:-1]:\n                return s[i:j+1]\n            \n            if not is_even and s[i:half] == s[i+half+1:j+1:-1]:\n                return s[i:j+1]\n            \n            ignore_left = longest_substr_pal(i + 1, j)\n            ignore_right = longest_substr_pal(i, j - 1)\n\n            return ignore_left if len(ignore_left) \u003e len(ignore_right) else ignore_right\n\n        \n        return longest_substr_pal(0, len(s) - 1)",
      "title": "Longest Palindromic Substring",
      "url": "/submissions/detail/1008523028/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690811216,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "101100100001001000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1008445470,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 712,
      "title_slug": "minimum-ascii-delete-sum-for-two-strings",
      "code": "class Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -\u003e int:\n        length_1, length_2 = len(s1), len(s2)\n\n        @cache\n        def calculate(i: int, j: int) -\u003e int:    \n            if i \u003e= length_1 and j \u003e= length_2:\n                return 0\n            \n            if i \u003e= length_1:\n                return sum(ord(char) for char in s2[j:])\n            \n            if j \u003e= length_2:\n                return sum(ord(char) for char in s1[i:])\n            \n            if s1[i] == s2[j]:\n                return calculate(i + 1, j + 1)\n            \n            return min(\n                ord(s1[i]) + calculate(i + 1, j),\n                ord(s2[j]) + calculate(i, j + 1)\n            )\n\n        return calculate(0, 0)",
      "title": "Minimum ASCII Delete Sum for Two Strings",
      "url": "/submissions/detail/1008445470/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690803999,
      "status": 10,
      "runtime": "862 ms",
      "is_pending": "Not Pending",
      "memory": "221.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1007875491,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 664,
      "title_slug": "strange-printer",
      "code": "class Solution:\n    def strangePrinter(self, s: str) -\u003e int:\n        n = len(s)\n        dp = [[n] * n for _ in range(n)]\n        for length in range(1, n + 1):\n            for left in range(n - length + 1):\n                right = left + length - 1\n                j = -1\n                for i in range(left, right):\n                    if s[i] != s[right] and j == -1:\n                        j = i\n                    if j != -1:\n                        dp[left][right] = min(dp[left][right], 1 + dp[j][i] + dp[i + 1][right])\n        \n                if j == -1:\n                    dp[left][right] = 0\n\n        return dp[0][n - 1] + 1",
      "title": "Strange Printer",
      "url": "/submissions/detail/1007875491/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690737074,
      "status": 10,
      "runtime": "1399 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1007513319,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 486,
      "title_slug": "predict-the-winner",
      "code": "class Solution:\n    def PredictTheWinner(self, nums: List[int]) -\u003e bool:\n        length = len(nums)\n        is_even = length % 2 == 0\n\n        if length \u003c 3:\n            return True\n        \n        @cache\n        def max_diff(left: int, right: int) -\u003e int:\n            left_num, right_num = nums[left], nums[right]\n            \n            if left == right:\n                return left_num\n            \n            score_by_left = left_num - max_diff(left + 1, right)\n            score_by_right = right_num - max_diff(left, right - 1)\n            return max(score_by_left, score_by_right)\n\n        return max_diff(0, length - 1) \u003e= 0\n",
      "title": "Predict the Winner",
      "url": "/submissions/detail/1007513319/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690701122,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1007007245,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 486,
      "title_slug": "predict-the-winner",
      "code": "class Solution:\n    def PredictTheWinner(self, nums: List[int]) -\u003e bool:\n        length = len(nums)\n        is_even = length % 2 == 0\n\n        if length \u003c 3:\n            return True\n        \n        @cache\n        def max_diff(left: int, right: int) -\u003e int:\n            left_num, right_num = nums[left], nums[right]\n            \n            if left == right:\n                return left_num\n            \n            score_by_left = left_num - max_diff(left + 1, right)\n            score_by_right = right_num - max_diff(left, right - 1)\n            return max(score_by_left, score_by_right)\n\n        return max_diff(0, length - 1) \u003e= 0\n",
      "title": "Predict the Winner",
      "url": "/submissions/detail/1007007245/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690646059,
      "status": 10,
      "runtime": "37 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1007005571,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 486,
      "title_slug": "predict-the-winner",
      "code": "class Solution:\n    def PredictTheWinner(self, nums: List[int]) -\u003e bool:\n        length = len(nums)\n        is_even = length % 2 == 0\n\n        if length \u003c 3:\n            return True\n        \n        def max_diff(left: int, right: int) -\u003e int:\n            left_num, right_num = nums[left], nums[right]\n            \n            if left == right:\n                return left_num\n            \n            score_by_left = left_num - max_diff(left + 1, right)\n            score_by_right = right_num - max_diff(left, right - 1)\n            return max(score_by_left, score_by_right)\n\n        return max_diff(0, length - 1) \u003e= 0\n",
      "title": "Predict the Winner",
      "url": "/submissions/detail/1007005571/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690645901,
      "status": 10,
      "runtime": "3227 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1007005343,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 486,
      "title_slug": "predict-the-winner",
      "code": "class Solution:\n    def PredictTheWinner(self, nums: List[int]) -\u003e bool:\n        length = len(nums)\n        is_even = length % 2 == 0\n\n        if length \u003c 3:\n            return True\n        \n        def max_diff(left: int, right: int) -\u003e int:\n            left_num, right_num = nums[left], nums[right]\n            \n            if left == right:\n                return left_num\n            \n            score_by_left = left_num - max_diff(left + 1, right)\n            socre_by_right = right_num - max_diff(left, right - 1)\n            return max(score_by_left, score_by_right)\n\n        return max_diff(0, length - 1) \u003e= 0\n",
      "title": "Predict the Winner",
      "url": "/submissions/detail/1007005343/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690645879,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1007005192,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 486,
      "title_slug": "predict-the-winner",
      "code": "class Solution:\n    def PredictTheWinner(self, nums: List[int]) -\u003e bool:\n        length = len(nums)\n        is_even = length % 2 == 0\n\n        if length \u003c 3:\n            return True\n        \n        def max_diff(left: int, right: int) -\u003e int:\n            left_num, right_num = nums[left], nums[right]\n            \n            if left == right:\n                return left_num\n            \n            score_by_left = left_num - max_diff(left + 1, right)\n            socre_by_right = right_num - max_diff(left, right - 1)\n            return max(score_by_left, score_by_right)\n\n        return calculate(0, length - 1) \u003e= 0\n",
      "title": "Predict the Winner",
      "url": "/submissions/detail/1007005192/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690645863,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1006808608,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 826,
      "title_slug": "soup-servings",
      "code": "class Solution:\n    def soupServings(self, n: int) -\u003e float:\n        servings = ceil(n / 25)\n\n        states = defaultdict(dict)\n        moves = [[-4, 0], [-3, -1], [-2, -2], [-1, -3]]\n    \n        @cache\n        def calculate(soup_a: int, soup_b: int) -\u003e float:\n            if soup_a \u003c= 0 and soup_b \u003c= 0:\n                return 0.5\n            if soup_a \u003c= 0:\n                return 1.0\n            if soup_b \u003c= 0:\n                return 0.0\n            if soup_a in states and soup_b in states[soup_a]:\n                return states[soup_a][soup_b]\n            \n            state = sum(calculate(soup_a + move[0], soup_b + move[1]) for move in moves) / 4.0\n            states[soup_a][soup_b] = state\n\n            return state\n\n        max_probability = 1 - 1e-5\n\n        for serving in range(1, servings + 1):\n            state = calculate(serving, serving)\n            if state \u003e max_probability:\n                return 1.0\n        \n        return calculate(servings, servings)\n       \n\n",
      "title": "Soup Servings",
      "url": "/submissions/detail/1006808608/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690626272,
      "status": 10,
      "runtime": "346 ms",
      "is_pending": "Not Pending",
      "memory": "40 MB",
      "compare_result": "11111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1006808371,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 826,
      "title_slug": "soup-servings",
      "code": "class Solution:\n    def soupServings(self, n: int) -\u003e float:\n        servings = ceil(n / 25)\n\n        states = defaultdict(dict)\n        moves = [[-4, 0], [-3, -1], [-2, -2], [-1, -3]]\n    \n        @cache\n        def calculate(soup_a: int, soup_b: int) -\u003e float:\n            if soup_a \u003c= 0 and soup_b \u003c= 0:\n                return 0.5\n            if soup_a \u003c= 0:\n                return 1.0\n            if soup_b \u003c= 0:\n                return 0.0\n            if soup_a in states and soup_b in states[soup_a]:\n                return states[soup_a][soup_b]\n            \n            state = sum(calculate(soup_a + move[0], soup_b + move[1]) for move in moves) / 4.0\n            states[soup_a][soup_b] = state\n\n            return state\n\n        max_probability = 1 - 1e-5\n\n        for serving in range(1, servings + 1):\n            state = calculate(serving, serving)\n            if state \u003e max_probability:\n                return 1.0\n        \n        return states[servings][servings]\n       \n\n",
      "title": "Soup Servings",
      "url": "/submissions/detail/1006808371/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690626249,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1006794403,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 826,
      "title_slug": "soup-servings",
      "code": "class Solution:\n    def __init__(self):\n        self.moves = [[4, 0], [3, 1], [2, 2], [1, 3]]\n\n\n    def soupServings(self, n: int) -\u003e float:\n        servings = n // 25\n        if n % 25 != 0:\n            servings += 1\n    \n        a_empty, ab_empty = self.calculate(servings, servings)\n        return a_empty + ab_empty / 2\n\n    @cache\n    def calculate(self, soup_a: int, soup_b: int) -\u003e Tuple[float, float]:\n        \n        a_empty, ab_empty = 0, 0\n\n        for move_a, move_b in self.moves:\n            new_soup_a, new_soup_b = soup_a - move_a, soup_b - move_b\n            soup_a_end, soup_b_end = new_soup_a \u003c= 0, new_soup_b \u003c= 0\n\n            if soup_a_end and soup_b_end:\n                ab_empty += 0.25\n                continue\n            \n            if soup_a_end and not soup_b_end:\n                a_empty += 0.25\n                continue\n            \n            if not soup_a_end and soup_b_end:\n                continue\n            \n            new_a_empty, new_ab_empty = self.calculate(new_soup_a, new_soup_b)\n            a_empty += 0.25 * new_a_empty\n            ab_empty += 0.25 * new_ab_empty\n        \n        return a_empty, ab_empty",
      "title": "Soup Servings",
      "url": "/submissions/detail/1006794403/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690624816,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1006787034,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 826,
      "title_slug": "soup-servings",
      "code": "class Solution:\n    def __init__(self):\n        self.moves = [[-100, 0], [-75, -25], [-50, -50], [-25, -75]]\n\n\n    def soupServings(self, n: int) -\u003e float:\n        a_empty, ab_empty = self.calculate(n, n)\n\n        return a_empty + ab_empty / 2\n\n    @cache\n    def calculate(self, soup_a: int, soup_b: int) -\u003e Tuple[float, float]:\n        \n        a_empty, ab_empty = 0, 0\n\n        for move_a, move_b in self.moves:\n            new_soup_a, new_soup_b = soup_a + move_a, soup_b + move_b\n            soup_a_end, soup_b_end = new_soup_a \u003c= 0, new_soup_b \u003c= 0\n\n            if soup_a_end and soup_b_end:\n                ab_empty += 0.25\n                continue\n            \n            if soup_a_end and not soup_b_end:\n                a_empty += 0.25\n                continue\n            \n            if not soup_a_end and soup_b_end:\n                continue\n            \n            new_a_empty, new_ab_empty = self.calculate(new_soup_a, new_soup_b)\n            a_empty += 0.25 * new_a_empty\n            ab_empty += 0.25 * new_ab_empty\n        \n        return a_empty, ab_empty",
      "title": "Soup Servings",
      "url": "/submissions/detail/1006787034/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690624068,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1006778059,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 826,
      "title_slug": "soup-servings",
      "code": "class Solution:\n    def __init__(self):\n        self.moves = [[-100, 0], [-75, -25], [-50, -50], [-25, -75]]\n\n\n    def soupServings(self, n: int) -\u003e float:\n        a_empty, ab_empty = self.calculate(n, n)\n\n        return a_empty + ab_empty / 2\n\n    @cache\n    def calculate(self, soup_a: int, soup_b: int) -\u003e Tuple[float, float]:\n        \n        a_empty, ab_empty = 0, 0\n\n        for move_a, move_b in self.moves:\n            new_soup_a, new_soup_b = soup_a + move_a, soup_b + move_b\n            \n            if new_soup_a \u003c= 0 and new_soup_b \u003c= 0:\n                ab_empty += 0.25\n            elif new_soup_a \u003c= 0:\n                a_empty += 0.25\n            elif new_soup_b \u003e 0:\n                new_a_empty, new_ab_empty = self.calculate(new_soup_a, new_soup_b)\n                a_empty += 0.25 * new_a_empty\n                ab_empty += 0.25 * new_ab_empty\n        \n        return a_empty, ab_empty",
      "title": "Soup Servings",
      "url": "/submissions/detail/1006778059/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690623146,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1005172261,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1418,
      "title_slug": "fair-distribution-of-cookies",
      "code": "class Solution:\n    def distributeCookies(self, cookies: List[int], k: int) -\u003e int:\n        cur = [0] * k\n        n = len(cookies)\n\n        def dfs(i, zero_count):\n            # If there are not enough cookies remaining, return `float('inf')` \n            # as it leads to an invalid distribution.\n            if n - i \u003c zero_count:\n                return float('inf')\n            \n            # After distributing all cookies, return the unfairness of this\n            # distribution.\n            if i == n:\n                return max(cur)\n            \n            # Try to distribute the i-th cookie to each child, and update answer\n            # as the minimum unfairness in these distributions.\n            answer = float('inf')\n            for j in range(k):\n                zero_count -= int(cur[j] == 0)\n                cur[j] += cookies[i]\n                \n                # Recursively distribute the next cookie.\n                answer = min(answer, dfs(i + 1, zero_count))\n                \n                cur[j] -= cookies[i]\n                zero_count += int(cur[j] == 0)\n            \n            return answer\n        \n        return dfs(0, k)",
      "title": "Fair Distribution of Cookies",
      "url": "/submissions/detail/1005172261/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690447271,
      "status": 10,
      "runtime": "1604 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1005171366,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1418,
      "title_slug": "fair-distribution-of-cookies",
      "code": "class Solution:\n    def distributeCookies(self, cookies: List[int], k: int) -\u003e int:\n        cur = [0] * k\n        n = len(cookies)\n\n        def dfs(i, zero_count):\n            # If there are not enough cookies remaining, return `float('inf')` \n            # as it leads to an invalid distribution.\n            if n - i \u003c zero_count:\n                return float('inf')\n            \n            # After distributing all cookies, return the unfairness of this\n            # distribution.\n            if i == n:\n                return max(cur)\n            \n            # Try to distribute the i-th cookie to each child, and update answer\n            # as the minimum unfairness in these distributions.\n            answer = float('inf')\n            for j in range(k):\n                zero_count -= int(cur[j] == 0)\n                cur[j] += cookies[i]\n                \n                # Recursively distribute the next cookie.\n                answer = min(answer, dfs(i + 1, zero_count))\n                \n                cur[j] -= cookies[i]\n                zero_count += int(cur[j] == 0)\n            \n            return answer\n        \n        return dfs(0, k)",
      "title": "Fair Distribution of Cookies",
      "url": "/submissions/detail/1005171366/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690447175,
      "status": 10,
      "runtime": "1574 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1005171031,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1418,
      "title_slug": "fair-distribution-of-cookies",
      "code": "class Solution:\n    # cookies = [8,8,10,15,20], [20,15], k = 2 -\u003e 31\n    def distributeCookies(self, cookies: List[int], k: int) -\u003e int:\n        length = len(cookies)\n\n        if length == k:\n            return max(cookies)\n        \n        if k == 1:\n            return sum(cookies)\n        \n        cookies = sorted(cookies)\n        \n        distributed_start = length - k\n        to_distribute_start = length - (2 * k)\n        if to_distribute_start \u003c 0:\n            to_distribute_start = 0\n        \n        for bag_to_add in range(0, to_distribute_start):\n            smallest_bag = to_distribute_start\n\n            for bag in range(to_distribute_start+1, distributed_start):\n                if cookies[bag] \u003e= cookies[smallest_bag]:\n                    continue\n                \n                smallest_bag = bag\n            \n            cookies[smallest_bag] += bag_to_add\n        \n        \n\n\n        return cookies[-1] + min(cookies[bags_extra_end:bags_left_end])  ",
      "title": "Fair Distribution of Cookies",
      "url": "/submissions/detail/1005171031/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690447142,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1005165062,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2263,
      "title_slug": "maximum-running-time-of-n-computers",
      "code": "class Solution:\n    # n = 2, batteries = [3,3,3], Output: 4\n    # n = 2, batteries = [1,1,1,1], Output: 2\n    def maxRunTime(self, n: int, batteries: List[int]) -\u003e int:\n        length = len(batteries)\n\n        if length \u003c n:\n            return 0\n        \n        if length == n:\n            return min(batteries)\n\n        batteries.sort()\n        extra = sum(batteries[:-n])\n        live = batteries[-n:]\n\n        \n        # We increase the total running time using 'extra' by increasing \n        # the running time of the computer with the smallest battery.\n        for i in range(n - 1):\n            # If the target running time is between live[i] and live[i + 1].\n            if extra // (i + 1) \u003c live[i + 1] - live[i]:\n                return live[i] + extra // (i + 1)\n            \n            # Reduce 'extra' by the total power used.\n            extra -= (i + 1) * (live[i + 1] - live[i])\n        \n        # If there is power left, we can increase the running time \n        # of all computers.\n        return live[-1] + extra // n",
      "title": "Maximum Running Time of N Computers",
      "url": "/submissions/detail/1005165062/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690446512,
      "status": 10,
      "runtime": "567 ms",
      "is_pending": "Not Pending",
      "memory": "30.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1010087351,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 209,
      "title_slug": "minimum-size-subarray-sum",
      "code": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -\u003e int:\n        left = 0\n        sum_of_subarray = 0\n        min_length = float('inf')\n        \n        for right in range(len(nums)):\n            sum_of_subarray += nums[right]\n            \n            while sum_of_subarray \u003e= target:\n                min_length = min(min_length, right - left + 1)\n                sum_of_subarray -= nums[left]\n                left += 1\n\n        if min_length == float('inf'):\n            return 0\n\n        return min_length",
      "title": "Minimum Size Subarray Sum",
      "url": "/submissions/detail/1010087351/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690963763,
      "status": 10,
      "runtime": "229 ms",
      "is_pending": "Not Pending",
      "memory": "29.6 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1010085963,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 137,
      "title_slug": "single-number-ii",
      "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -\u003e int:\n        nums.sort()\n        length = len(nums)\n        for i in range(0, length, 3):\n            if i == length - 1:\n                return nums[i]\n    \n            num_1, num_2, num_3 = nums[i], nums[i+1], nums[i+2]\n\n            if num_1 == num_2 == num_3:\n                continue\n            \n            if num_2 == num_3:\n                return num_1\n            \n            if num_1 == num_3:\n                return num_2\n            \n            return num_3\n            ",
      "title": "Single Number II",
      "url": "/submissions/detail/1010085963/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690963627,
      "status": 10,
      "runtime": "61 ms",
      "is_pending": "Not Pending",
      "memory": "18.1 MB",
      "compare_result": "11111111111111",
      "flag_type": 1
    },
    {
      "id": 1010081666,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 889,
      "title_slug": "buddy-strings",
      "code": "class Solution:\n    def buddyStrings(self, s: str, goal: str) -\u003e bool:\n        length_1, length_2 = len(s), len(goal)\n\n        if length_1 != length_2:\n            return False\n        \n        if s == goal:\n            freq = defaultdict(int)\n            for char in s:\n                freq[char] += 1\n                if freq[char] == 2:\n                    return True\n            return False\n        \n        swap_1, swap_2 = -1, -1\n        \n        for i in range(length_1):\n            char_1, char_2 = s[i], goal[i]\n            \n            if char_1 == char_2:\n                continue\n            \n            if swap_1 == -1:\n                swap_1 = i\n            elif swap_2 == -1:\n                swap_2 = i\n            else:\n                return False\n            \n\n        return swap_2 != -1 and s[swap_1] == goal[swap_2] and s[swap_2] == goal[swap_1]",
      "title": "Buddy Strings",
      "url": "/submissions/detail/1010081666/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690963207,
      "status": 10,
      "runtime": "41 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1010075791,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 889,
      "title_slug": "buddy-strings",
      "code": "class Solution:\n    def buddyStrings(self, s: str, goal: str) -\u003e bool:\n        length_1, length_2 = len(s), len(goal)\n\n        if length_1 != length_2:\n            return False\n        \n        swap_candidate = None\n        swapped = False\n        char_count = defaultdict(int)\n        \n        for i in range(length_1):\n            char_1, char_2 = s[i], goal[i]\n            char_count[char_1] += 1\n            \n            if char_1 == char_2:\n                continue\n            \n            if swapped:\n                return False\n            \n            if swap_candidate is None:\n                swap_candidate = i\n                continue\n            \n            if char_1 == goal[swap_candidate] and s[swap_candidate] == char_2:\n                swapped = True\n            else:\n                return False\n        \n        return swapped or any(count \u003e 1 for count in char_count.values())",
      "title": "Buddy Strings",
      "url": "/submissions/detail/1010075791/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690962629,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111101111111011111111111",
      "flag_type": 1
    },
    {
      "id": 1010069020,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 22,
      "title_slug": "generate-parentheses",
      "code": "class Solution:\n    def generateParenthesis(self, n: int) -\u003e List[str]:\n\n        current = []\n        current_max = n * 2\n        chars = \"()\"\n\n\n        def backtrack(open: int, closed: int) -\u003e Generator[None, None, List[str]]:\n            if len(current) == current_max:\n                yield \"\".join(current)\n            \n            if open:\n                current.append(chars[0])\n                yield from backtrack(open - 1, closed)\n                current.pop()\n            \n            if closed and closed \u003e open:\n                current.append(chars[1])\n                yield from backtrack(open, closed - 1)\n                current.pop()\n        \n        return tuple(combination for combination in backtrack(n, n))",
      "title": "Generate Parentheses",
      "url": "/submissions/detail/1010069020/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690961955,
      "status": 10,
      "runtime": "42 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "11111111",
      "flag_type": 1
    },
    {
      "id": 1010060684,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 46,
      "title_slug": "permutations",
      "code": "class Solution:\n    def permute(self, nums: List[int]) -\u003e List[List[int]]:\n\n        length = len(nums)\n        current = []\n        current_contains = [False] * length\n\n        def backtrack() -\u003e Generator[None, None, List[int]]:\n            if len(current) == length:\n                yield tuple(current[:])\n                return\n\n            for i in range(length):\n                if current_contains[i]:\n                    continue\n\n                current_contains[i] = True\n                current.append(nums[i])\n\n                yield from backtrack()\n\n                current_contains[i] = False\n                current.pop()\n            \n            return\n\n        return tuple(combination for combination in backtrack()) ",
      "title": "Permutations",
      "url": "/submissions/detail/1010060684/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690961162,
      "status": 10,
      "runtime": "50 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "11111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1009598832,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1723,
      "title_slug": "maximum-number-of-achievable-transfer-requests",
      "code": "class Solution:\n    def maximumRequests(self, n, requests):\n        current = [0] * n\n        length = len(requests)\n        \n        def backtrack(req_index: int, count: int) -\u003e int:\n            if req_index == length:\n                return 0 if any(current) else count\n\n            req_from, req_to = requests[req_index]\n            \n            current[req_from] -= 1\n            current[req_to] += 1\n            take = backtrack(req_index + 1, count + 1)\n\n            current[req_from] += 1\n            current[req_to] -= 1\n            non_take = backtrack(req_index + 1, count)\n            \n            return max(take, non_take)\n        \n        return backtrack(0, 0)",
      "title": "Maximum Number of Achievable Transfer Requests",
      "url": "/submissions/detail/1009598832/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690911488,
      "status": 10,
      "runtime": "759 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1009598640,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1723,
      "title_slug": "maximum-number-of-achievable-transfer-requests",
      "code": "class Solution:\n    def maximumRequests(self, n, requests):\n        current = [0] * n\n        length = len(requests)\n        \n        def backtrack(req_index: int, count: int) -\u003e int:\n            if req_index == length:\n                return 0 if any(current) else count\n\n            req_from, req_to = requests[req_index]\n            \n            current[req_from] -= 1\n            current[req_to] += 1\n            take = backtrack(req_index + 1, count + 1)\n\n            current[req_from] += 1\n            current[req_to] -= 1\n            non_take = backtrack(start + 1, count)\n            \n            return max(take, non_take)\n        \n        return backtrack(0, 0)",
      "title": "Maximum Number of Achievable Transfer Requests",
      "url": "/submissions/detail/1009598640/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690911476,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1009598502,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1723,
      "title_slug": "maximum-number-of-achievable-transfer-requests",
      "code": "class Solution:\n    def maximumRequests(self, n, requests):\n        current = [0] * n\n        length = len(requests)\n        \n        def backtrack(req_index: int, count: int) -\u003e int:\n            if req_index == length:\n                return 0 if any(indegree) else count\n\n            req_from, req_to = requests[req_index]\n            \n            current[req_from] -= 1\n            current[req_to] += 1\n            take = backtrack(req_index + 1, count + 1)\n\n            current[req_from] += 1\n            current[req_to] -= 1\n            non_take = backtrack(start + 1, count)\n            \n            return max(take, non_take)\n        \n        return backtrack(0, 0)",
      "title": "Maximum Number of Achievable Transfer Requests",
      "url": "/submissions/detail/1009598502/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690911467,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1009598338,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1723,
      "title_slug": "maximum-number-of-achievable-transfer-requests",
      "code": "class Solution:\n    def maximumRequests(self, n, requests):\n        current = [0] * n\n        length = len(requests)\n        \n        def backtrack(req_index: int, count: int) -\u003e int:\n            if req_index == length:\n                return 0 if any(indegree) else count\n\n            req_from, req_to = requests[req_index]\n            \n            current[req_from] -= 1\n            current[req_to] += 1\n            take = backtrack(req_index + 1, count + 1)\n\n            current[req_from] += 1\n            indegree[req_to] -= 1\n            non_take = backtrack(start + 1, count)\n            \n            return max(take, non_take)\n        \n        return backtrack(0, 0)",
      "title": "Maximum Number of Achievable Transfer Requests",
      "url": "/submissions/detail/1009598338/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690911457,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1009581498,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1723,
      "title_slug": "maximum-number-of-achievable-transfer-requests",
      "code": "class Solution:\n    def __init__(self):\n        self.ans = 0\n\n    def helper(self, start, requests, indegree, n, count):\n        if start == len(requests):\n            for i in range(n):\n                if indegree[i] != 0:\n                    return\n            self.ans = max(self.ans, count)\n            return\n\n        # Take \n        indegree[requests[start][0]] -= 1\n        indegree[requests[start][1]] += 1\n        self.helper(start + 1, requests, indegree, n, count + 1)\n\n        # Not-take\n        indegree[requests[start][0]] += 1\n        indegree[requests[start][1]] -= 1\n        self.helper(start + 1, requests, indegree, n, count)\n\n    def maximumRequests(self, n, requests):\n        indegree = [0] * n\n        self.helper(0, requests, indegree, n, 0)\n        return self.ans",
      "title": "Maximum Number of Achievable Transfer Requests",
      "url": "/submissions/detail/1009581498/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690910365,
      "status": 10,
      "runtime": "1037 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1009535473,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2877,
      "title_slug": "shortest-string-that-contains-three-strings",
      "code": "class Solution:\n    def minimumString(self, a: str, b: str, c: str) -\u003e str:\n        strings = sorted((a, b, c))\n        result = strings[0]\n        \n        for string in strings[1:]:\n            length = len(result)\n            length_new = len(string)\n            overlap_max = min(length_new, length)\n\n            for j in range(0, overlap_max):\n                overlap = overlap_max - j \n                if result[-overlap:] == string[:overlap]:\n                    result += string[overlap:]\n                    break\n            else:\n                result += string            \n        \n        return result",
      "title": "Shortest String That Contains Three Strings",
      "url": "/submissions/detail/1009535473/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690907221,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1009533460,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2877,
      "title_slug": "shortest-string-that-contains-three-strings",
      "code": "class Solution:\n    def minimumString(self, a: str, b: str, c: str) -\u003e str:\n        strings = sorted((a, b, c))\n        result = strings[0]\n        \n        for string in strings[1:]:\n            length = len(result)\n            length_new = len(string)\n\n            for j in range(0, min(length_new, length)):\n                string_chars = length_new - j \n                if result[-string_chars:] == string[:string_chars]:\n                    result += string[string_chars:]\n                    break\n            else:\n                result += string            \n        \n        return result",
      "title": "Shortest String That Contains Three Strings",
      "url": "/submissions/detail/1009533460/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690907080,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1009497441,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2856,
      "title_slug": "count-complete-subarrays-in-an-array",
      "code": "class Solution:\n    def countCompleteSubarrays(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        elems_count = len(set(nums))\n        \n        if elems_count == length:\n            return 1\n        \n        if elems_count == 1:\n            return length + sum(i for i in range(1, length))\n        \n        result, elems, min_j = 0, defaultdict(int), 0\n        for i in range(length):\n            left = nums[i]\n            \n            for j in range(min_j, length):\n                right = nums[j]\n                elems[right] += 1\n                \n                if len(elems) != elems_count:\n                    continue\n                \n                if elems[right] == 1:\n                    elems.pop(right)\n                else:\n                    elems[right] -= 1 \n    \n                result += length - j\n                min_j = j\n                break\n            else:\n                return result\n            \n            if elems[left] == 1:\n                elems.pop(left)\n            else:\n                elems[left] -= 1\n                    \n        return result",
      "title": "Count Complete Subarrays in an Array",
      "url": "/submissions/detail/1009497441/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690904342,
      "status": 10,
      "runtime": "110 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1009461517,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2876,
      "title_slug": "number-of-employees-who-met-the-target",
      "code": "class Solution:\n    def numberOfEmployeesWhoMetTarget(self, hours: List[int], target: int) -\u003e int:\n        count = 0\n        for hour in hours:\n            if hour \u003c target:\n                continue\n            count += 1\n        \n        return count",
      "title": "Number of Employees Who Met the Target",
      "url": "/submissions/detail/1009461517/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690901535,
      "status": 10,
      "runtime": "58 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1009448508,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 77,
      "title_slug": "combinations",
      "code": "class Solution:\n    def combine(self, n: int, k: int) -\u003e List[List[int]]:\n        current = []\n        \n        def backtrack(first: int) -\u003e Generator[None, None, List[int]]:\n            if len(current) == k:\n                yield tuple(current[:])\n                return\n\n            for i in range(first, n + 1):\n                current.append(i)\n                yield from backtrack(i + 1)\n                current.pop()\n            \n            return\n\n        return tuple(combination for combination in backtrack(1)) ",
      "title": "Combinations",
      "url": "/submissions/detail/1009448508/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690900546,
      "status": 10,
      "runtime": "319 ms",
      "is_pending": "Not Pending",
      "memory": "18.2 MB",
      "compare_result": "111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1009446618,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 77,
      "title_slug": "combinations",
      "code": "class Solution:\n    def combine(self, n: int, k: int) -\u003e List[List[int]]:\n        current, result = [], []\n        \n        def backtrack(first: int) -\u003e None:\n            if len(current) == k:\n                result.append(tuple(current[:]))\n                return\n\n            for i in range(first, n + 1):\n                current.append(i)\n                backtrack(i + 1)\n                current.pop()\n            \n            return\n\n        backtrack(1)\n\n        return result ",
      "title": "Combinations",
      "url": "/submissions/detail/1009446618/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690900402,
      "status": 10,
      "runtime": "281 ms",
      "is_pending": "Not Pending",
      "memory": "18.3 MB",
      "compare_result": "111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1009431912,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 77,
      "title_slug": "combinations",
      "code": "class Solution:\n    def combine(self, n: int, k: int) -\u003e List[List[int]]:\n        def generate_combinations(elems: List[int], num: int):\n            total = len(elems)\n            if num \u003e total:\n                return\n            curr_indices = list(range(num))\n            reversed_num = tuple(reversed(range(num)))\n\n            while True:\n                yield list(elems[i] for i in curr_indices)\n                \n                for idx in reversed_num:\n                    if curr_indices[idx] != idx + total - num:\n                        break\n                else:\n                    return\n\n                curr_indices[idx] += 1\n                for j in range(idx+1, num):\n                    curr_indices[j] = curr_indices[j-1] + 1\n\n        return [combination for combination in generate_combinations(tuple(range(1, n+1)), k)]",
      "title": "Combinations",
      "url": "/submissions/detail/1009431912/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690899295,
      "status": 10,
      "runtime": "82 ms",
      "is_pending": "Not Pending",
      "memory": "18.1 MB",
      "compare_result": "111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1008647326,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 11,
      "title_slug": "container-with-most-water",
      "code": "class Solution:\n    def maxArea(self, height: List[int]) -\u003e int:\n        left = 0\n        right = len(height) - 1\n        maxArea = 0\n\n        while left \u003c right:\n            currentArea = min(height[left], height[right]) * (right - left)\n            if currentArea \u003e maxArea:\n                maxArea = currentArea\n\n            if height[left] \u003c height[right]:\n                left += 1\n            else:\n                right -= 1\n\n        return maxArea",
      "title": "Container With Most Water",
      "url": "/submissions/detail/1008647326/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690820891,
      "status": 10,
      "runtime": "582 ms",
      "is_pending": "Not Pending",
      "memory": "29.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1008597576,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 11,
      "title_slug": "container-with-most-water",
      "code": "class Solution:\n    def maxArea(self, height: List[int]) -\u003e int:\n        \n        length = len(height)\n        max_area = 0\n\n        for j in range(1, length):\n            for i in range(0, j):\n                area = min(height[i], height[j]) * (j - i)\n\n                if area \u003e max_area:\n                    max_area = area\n\n        return max_area",
      "title": "Container With Most Water",
      "url": "/submissions/detail/1008597576/",
      "lang_name": "Python3",
      "time": "6 months, 1 week",
      "timestamp": 1690817111,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111000000000",
      "flag_type": 1
    },
    {
      "id": 1012748609,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 95,
      "title_slug": "unique-binary-search-trees-ii",
      "code": "class Solution:\n    def generateTrees(self, n: int) -\u003e List[Optional[TreeNode]]:\n        @cache\n        def generate_trees(left, right) -\u003e Generator[None, None, Optional[TreeNode]]:\n            if left \u003e right:\n                yield None\n                return\n            \n            for val in range(left, right + 1):\n                for left in generate_trees(left, val - 1):\n                    for right in generate_trees(val + 1, rright):\n                        yield TreeNode(val, left, right)\n        \n        return tuple(generate_trees(1, n))",
      "title": "Unique Binary Search Trees II",
      "url": "/submissions/detail/1012748609/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691228552,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000",
      "flag_type": 1
    },
    {
      "id": 1012748489,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 95,
      "title_slug": "unique-binary-search-trees-ii",
      "code": "class Solution:\n    def generateTrees(self, n: int) -\u003e List[Optional[TreeNode]]:\n        @cache\n        def generate_trees(left, rright) -\u003e Generator[None, None, Optional[TreeNode]]:\n            if left \u003e right:\n                yield None\n                return\n            \n            for val in range(left, right + 1):\n                for left in generate_trees(left, val - 1):\n                    for right in generate_trees(val + 1, rright):\n                        yield TreeNode(val, left, right)\n        \n        return tuple(generate_trees(1, n))",
      "title": "Unique Binary Search Trees II",
      "url": "/submissions/detail/1012748489/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691228541,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000",
      "flag_type": 1
    },
    {
      "id": 1012746905,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 95,
      "title_slug": "unique-binary-search-trees-ii",
      "code": "class Solution:\n    def generateTrees(self, n: int) -\u003e List[Optional[TreeNode]]:\n        @cache\n        def generate_trees(l, r):\n            return [None] if l \u003e r else [\n                TreeNode(val, left, right)\n                for val in range(l, r + 1)\n                for left in generate_trees(l, val - 1)\n                for right in generate_trees(val + 1, r)\n            ]\n        \n        return generate_trees(1, n)",
      "title": "Unique Binary Search Trees II",
      "url": "/submissions/detail/1012746905/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691228380,
      "status": 10,
      "runtime": "45 ms",
      "is_pending": "Not Pending",
      "memory": "17.2 MB",
      "compare_result": "11111111",
      "flag_type": 1
    },
    {
      "id": 1012231579,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1330,
      "title_slug": "longest-arithmetic-subsequence-of-given-difference",
      "code": "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -\u003e int:\n        length = len(arr)\n        count = 0\n        \n        @cache\n        def calculate(i: int) -\u003e int\n            if i == length:\n                return 0\n            \n            max_count = 0\n            for j in range(i + 1, length):\n                if arr[j] - arr[i] != difference:\n                    continue\n                \n                count = 1 + calculate(j)\n                if count \u003e max_count:\n                    max_count = count\n\n        return calculate(0)",
      "title": "Longest Arithmetic Subsequence of Given Difference",
      "url": "/submissions/detail/1012231579/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691168098,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1012219575,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1723,
      "title_slug": "maximum-number-of-achievable-transfer-requests",
      "code": "class Solution:\n    def maximumRequests(self, n, requests):\n        current = [0] * n\n        length = len(requests)\n        \n        def backtrack(req_index: int, count: int) -\u003e int:\n            if req_index == length:\n                return 0 if any(current) else count\n\n            req_from, req_to = requests[req_index]\n            \n            current[req_from] -= 1\n            current[req_to] += 1\n            take = backtrack(req_index + 1, count + 1)\n\n            current[req_from] += 1\n            current[req_to] -= 1\n            non_take = backtrack(req_index + 1, count)\n            \n            return max(take, non_take)\n        \n        return backtrack(0, 0)",
      "title": "Maximum Number of Achievable Transfer Requests",
      "url": "/submissions/detail/1012219575/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691167215,
      "status": 10,
      "runtime": "790 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1012217749,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 139,
      "title_slug": "word-break",
      "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -\u003e bool:\n\n        @cache\n        def calculate(i: int) -\u003e bool:\n            if i \u003c 0:\n                return True\n            \n            for word in wordDict:\n                length = len(word)\n                if s[i-length+1:i+1] == word and calculate(i-length):\n                    return True\n            \n            return False\n\n        return calculate(len(s) - 1)\n        \n",
      "title": "Word Break",
      "url": "/submissions/detail/1012217749/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691167079,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1012217135,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 139,
      "title_slug": "word-break",
      "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -\u003e bool:\n        words = set(wordDict)\n    \n        @cache\n        def calculate(i: int) -\u003e bool:\n            if i \u003c 0:\n                return True\n            \n            for word in wordDict:\n                length = len(word)\n                if s[i-length+1:i+1] == word and calculate(i-length):\n                    return True\n            \n            return False\n\n        return calculate(len(s) - 1)\n        \n",
      "title": "Word Break",
      "url": "/submissions/detail/1012217135/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691167035,
      "status": 10,
      "runtime": "52 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1012216967,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 139,
      "title_slug": "word-break",
      "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -\u003e bool:\n        words = set(wordDict)\n        \n\n        @cache\n        def calculate(i: int) -\u003e bool:\n            if \u003c 0:\n                return True\n            \n            for word in wordDict:\n                length = len(word)\n                if s[i-length+1:i+1] == word and calculate(i-length):\n                    return True\n            \n            return False\n\n        return calculate(len(s) - 1)\n        \n",
      "title": "Word Break",
      "url": "/submissions/detail/1012216967/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691167020,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1012210078,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 139,
      "title_slug": "word-break",
      "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -\u003e bool:\n        length = len(s)\n        word_dict = set(wordDict)\n\n        if length == 1:\n            return s in word_dict\n\n        if s in word_dict:\n            return True\n    \n        left = 0\n        for right in range(0, length):\n            if s[left:right+1] not in word_dict:\n                continue\n            \n            left = right + 1\n        \n        return left == length\n        \n",
      "title": "Word Break",
      "url": "/submissions/detail/1012210078/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691166483,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111101111111111011100001111010111111001",
      "flag_type": 1
    },
    {
      "id": 1011037555,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 17,
      "title_slug": "letter-combinations-of-a-phone-number",
      "code": "class Solution:\n    def letterCombinations(self, digits: str) -\u003e List[str]:\n        length = len(digits)\n        if length == 0:\n            return []\n\n        digit_map: Dict[int, str] = {\n            \"1\": [],\n            \"2\": [\"a\", \"b\", \"c\"],\n            \"3\": [\"d\", \"e\", \"f\"],\n            \"4\": [\"g\", \"h\", \"i\"],\n            \"5\": [\"j\", \"k\", \"l\"],\n            \"6\": [\"m\", \"n\", \"o\"],\n            \"7\": [\"p\", \"q\", \"r\", \"s\"],\n            \"8\": [\"t\", \"u\", \"v\"],\n            \"9\": [\"w\", \"x\", \"y\", \"z\"],\n            \"0\": [\" \"]\n        }\n\n        current = []\n        \n        def backtrack(digit: int) -\u003e Generator[None, None, str]:\n            if digit == length:\n                yield \"\".join(current[:])\n                return\n            \n            for char in digit_map[digits[digit]]:\n                current.append(char)\n                yield from backtrack(digit + 1)\n                current.pop()\n\n        return tuple(combination for combination in backtrack(0))",
      "title": "Letter Combinations of a Phone Number",
      "url": "/submissions/detail/1011037555/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691055211,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1011036767,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 17,
      "title_slug": "letter-combinations-of-a-phone-number",
      "code": "class Solution:\n    def letterCombinations(self, digits: str) -\u003e List[str]:\n        length = len(digits)\n        if length == 0:\n            return []\n\n        digit_map: Dict[int, str] = {\n            \"1\": [],\n            \"2\": [\"a\", \"b\", \"c\"],\n            \"3\": [\"d\", \"e\", \"f\"],\n            \"4\": [\"g\", \"h\", \"i\"],\n            \"5\": [\"j\", \"k\", \"l\"],\n            \"6\": [\"m\", \"n\", \"o\"],\n            \"7\": [\"p\", \"q\", \"r\", \"s\"],\n            \"8\": [\"t\", \"u\", \"v\"],\n            \"9\": [\"w\", \"x\", \"y\", \"z\"],\n            \"0\": [\" \"]\n        }\n\n        current = []\n        \n        @cache\n        def backtrack(digit: int) -\u003e Generator[None, None, str]:\n            if digit == length:\n                yield \"\".join(current[:])\n                return\n            \n            for char in digit_map[digits[digit]]:\n                current.append(char)\n                yield from backtrack(digit + 1)\n                current.pop()\n\n        return tuple(combination for combination in backtrack(0))",
      "title": "Letter Combinations of a Phone Number",
      "url": "/submissions/detail/1011036767/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691055130,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0100000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1011036630,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 17,
      "title_slug": "letter-combinations-of-a-phone-number",
      "code": "class Solution:\n    def letterCombinations(self, digits: str) -\u003e List[str]:\n        length = len(digits)\n        if length == 0:\n            return []\n\n        digit_map: Dict[int, str] = {\n            \"1\": [],\n            \"2\": [\"a\", \"b\", \"c\"],\n            \"3\": [\"d\", \"e\", \"f\"],\n            \"4\": [\"g\", \"h\", \"i\"],\n            \"5\": [\"j\", \"k\", \"l\"],\n            \"6\": [\"m\", \"n\", \"o\"],\n            \"7\": [\"p\", \"q\", \"r\", \"s\"],\n            \"8\": [\"t\", \"u\", \"v\"],\n            \"9\": [\"w\", \"x\", \"y\", \"z\"],\n            \"0\": [\" \"]\n        }\n\n        current = []\n        \n        def backtrack(digit: int) -\u003e Generator[None, None, str]:\n            if digit == length:\n                yield \"\".join(current[:])\n                return\n            \n            for char in digit_map[digits[digit]]:\n                current.append(char)\n                yield from backtrack(digit + 1)\n                current.pop()\n\n        return tuple(combination for combination in backtrack(0))",
      "title": "Letter Combinations of a Phone Number",
      "url": "/submissions/detail/1011036630/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691055119,
      "status": 10,
      "runtime": "46 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "1111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1010407820,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 207,
      "title_slug": "course-schedule",
      "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -\u003e bool:\n        courses = defaultdict(set)\n\n        for course, prereq in prerequisites:\n            courses[course].add(prereq)\n\n        if not courses:\n            return True\n        \n        stack = set()\n\n        @cache\n        def check(course: int) -\u003e bool:\n            if course not in courses:\n                return True\n            \n            if course in stack:\n                return False\n\n            prereqs = courses[course]\n\n            if prereqs \u0026 stack:\n                return False\n\n            stack.add(course)\n\n            for prereq in prereqs:\n                if not check(prereq):\n                    return False\n    \n            stack.remove(course)\n            \n            return True\n\n        for course in courses:\n            if not check(course):\n                return False\n\n        return True",
      "title": "Course Schedule",
      "url": "/submissions/detail/1010407820/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690992177,
      "status": 10,
      "runtime": "99 ms",
      "is_pending": "Not Pending",
      "memory": "21 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1010406058,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 207,
      "title_slug": "course-schedule",
      "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -\u003e bool:\n        courses = defaultdict(set)\n\n        for course, prereq in prerequisites:\n            courses[course].add(prereq)\n\n        if not courses:\n            return True\n        \n        stack = set()\n\n        def check(course: int) -\u003e bool:\n            if course not in courses:\n                return True\n            \n            if course in stack:\n                return False\n\n            prereqs = courses[course]\n\n            if prereqs \u0026 stack:\n                return False\n\n            stack.add(course)\n\n            for prereq in prereqs:\n                if not check(prereq):\n                    return False\n    \n            stack.remove(course)\n            \n            return True\n\n        for course in courses:\n            if not check(course):\n                return False\n\n        return True",
      "title": "Course Schedule",
      "url": "/submissions/detail/1010406058/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690992047,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111110000",
      "flag_type": 1
    },
    {
      "id": 1010400880,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 207,
      "title_slug": "course-schedule",
      "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -\u003e bool:\n        courses = defaultdict(set)\n\n        for course, prereq in prerequisites:\n            courses[course].add(prereq)\n\n        if not courses:\n            return True\n        \n        current = set()\n\n        def check(course: int) -\u003e bool:\n            if course not in courses:\n                return True\n\n            prereqs = courses[course]\n\n            if prereqs \u0026 current:\n                return False\n\n            current.add(course)\n            prereqs_valid = all(check(prereq) for prereq in prereqs)\n            current.remove(course)\n            return prereqs_valid\n\n        return all(check(course) for course in courses)",
      "title": "Course Schedule",
      "url": "/submissions/detail/1010400880/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690991663,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111110000",
      "flag_type": 1
    },
    {
      "id": 1010394127,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 207,
      "title_slug": "course-schedule",
      "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -\u003e bool:\n        courses = defaultdict(set)\n\n        for course, prereq in prerequisites:\n            courses[course].add(prereq)\n        \n        if not courses:\n            return True\n        \n        current = set()\n\n        def check(course: int) -\u003e bool:\n            if course not in courses:\n                return True\n\n            prereqs = courses[course]\n\n            if prereqs \u0026 current:\n                return False\n\n            current.add(course)\n            current.update(prereqs)\n            \n            prereqs_valid = all(check(prereq) for prereq in prereqs)\n            \n            current.remove(course)\n            current.difference_update(prereqs)\n            \n            return prereqs_valid\n\n        return all(check(course) for course in courses)",
      "title": "Course Schedule",
      "url": "/submissions/detail/1010394127/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690991154,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111110111111111111111111011111110100110111",
      "flag_type": 1
    },
    {
      "id": 1010367344,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 820,
      "title_slug": "find-eventual-safe-states",
      "code": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -\u003e List[int]:\n        length = len(graph)\n        indegree = [0] * length\n        adj = [[] for _ in range(length)]\n\n        for i in range(length):\n            for edge in graph[i]:\n                adj[edge].append(i)\n                indegree[i] += 1\n\n        q = deque()\n        # Push all the nodes with indegree zero in the queue.\n        for i in range(length):\n            if indegree[i] == 0:\n                q.append(i)\n\n        safe = [False] * length\n        while q:\n            node = q.popleft()\n            safe[node] = True\n\n            for neighbor in adj[node]:\n                # Delete the edge \"node -\u003e neighbor\".\n                indegree[neighbor] -= 1\n                if indegree[neighbor] == 0:\n                    q.append(neighbor)\n\n        safe_nodes = []\n        for i in range(length):\n            if safe[i]:\n                safe_nodes.append(i)\n\n        return safe_nodes",
      "title": "Find Eventual Safe States",
      "url": "/submissions/detail/1010367344/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690989104,
      "status": 10,
      "runtime": "601 ms",
      "is_pending": "Not Pending",
      "memory": "23.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1010366885,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 820,
      "title_slug": "find-eventual-safe-states",
      "code": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -\u003e List[int]:\n        length = len(graph)\n        indegree = [0] * length\n        adj = [[] for _ in range(length)]\n\n        for i in range(length):\n            for edge in graph[i]:\n                adj[edge].append(i)\n                indegree[i] += 1\n\n        q = deque()\n        # Push all the nodes with indegree zero in the queue.\n        for i in range(length):\n            if indegree[i] == 0:\n                q.append(i)\n\n        safe = [False] * length\n        while q:\n            node = q.popleft()\n            safe[node] = True\n\n            for neighbor in adj[node]:\n                # Delete the edge \"node -\u003e neighbor\".\n                indegree[neighbor] -= 1\n                if indegree[neighbor] == 0:\n                    q.append(neighbor)\n\n        for i in range(length):\n            if safe[i]:\n                safeNodes.append(i)\n\n        return safeNodes",
      "title": "Find Eventual Safe States",
      "url": "/submissions/detail/1010366885/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690989066,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1010366757,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 820,
      "title_slug": "find-eventual-safe-states",
      "code": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -\u003e List[int]:\n        length = len(graph)\n        indegree = [0] * length\n        adj = [[] for _ in range(length)]\n\n        for i in range(length):\n            for edge in graph[i]:\n                adj[edge].append(i)\n                indegree[i] += 1\n\n        q = deque()\n        # Push all the nodes with indegree zero in the queue.\n        for i in range(n):\n            if indegree[i] == 0:\n                q.append(i)\n\n        safe = [False] * length\n        while q:\n            node = q.popleft()\n            safe[node] = True\n\n            for neighbor in adj[node]:\n                # Delete the edge \"node -\u003e neighbor\".\n                indegree[neighbor] -= 1\n                if indegree[neighbor] == 0:\n                    q.append(neighbor)\n\n        for i in range(length):\n            if safe[i]:\n                safeNodes.append(i)\n\n        return safeNodes",
      "title": "Find Eventual Safe States",
      "url": "/submissions/detail/1010366757/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690989056,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1010336801,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2134,
      "title_slug": "maximize-the-confusion-of-an-exam",
      "code": "class Solution:\n    def maxConsecutiveAnswers(self, answerKey: str, k: int) -\u003e int:\n        length = len(answerKey)\n        char_t, char_f = \"T\", \"F\"\n        max_size = k\n        count = defaultdict(int)\n        \n        for char in answerKey[:k]:\n            count[char] += 1\n\n        left = 0\n        for right in range(k, length):\n            count[answerKey[right]] += 1\n            \n            while min(count[char_t], count[char_f]) \u003e k: \n                count[answerKey[left]] -= 1\n                left += 1\n            \n            size = right - left + 1\n            if size \u003e max_size:\n                max_size = size\n                    \n        return max_size\n\n\n\n        \n",
      "title": "Maximize the Confusion of an Exam",
      "url": "/submissions/detail/1010336801/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1690986804,
      "status": 10,
      "runtime": "239 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1014567047,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 198,
      "title_slug": "house-robber",
      "code": "class Solution:\n    def rob(self, nums: List[int]) -\u003e int:\n        house_count = len(nums)\n        \n        @cache\n        def dp(house: int) -\u003e int:\n            if house \u003e= house_count:\n                return 0\n\n            return max(dp(house + 1), nums[house] + dp(house + 2)) \n\n        return dp(0)\n",
      "title": "House Robber",
      "url": "/submissions/detail/1014567047/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691402238,
      "status": 10,
      "runtime": "35 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1014562076,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 70,
      "title_slug": "climbing-stairs",
      "code": "class Solution:\n    def climbStairs(self, n: int) -\u003e int:\n        if n \u003c 3:\n            return n\n\n        minus_one, minus_two = 2, 1\n        for step in range(3, n + 1):\n            minus_one, minus_two = minus_one + minus_two, minus_one\n        \n        return minus_one",
      "title": "Climbing Stairs",
      "url": "/submissions/detail/1014562076/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691401796,
      "status": 10,
      "runtime": "36 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1014559313,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 70,
      "title_slug": "climbing-stairs",
      "code": "class Solution:\n    def climbStairs(self, n: int) -\u003e int:\n\n        @cache\n        def dp(step: int) -\u003e int:\n            if step \u003c= 2:\n                return step\n            \n            return dp(step - 1) + dp(step - 2) \n \n        return dp(n)",
      "title": "Climbing Stairs",
      "url": "/submissions/detail/1014559313/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691401554,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1014540797,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 74,
      "title_slug": "search-a-2d-matrix",
      "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -\u003e bool:\n        length_vertical, length_horizontal = len(matrix), len(matrix[0])\n\n\n        left, right = 0, length_vertical - 1\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            mid_number = matrix[mid][0]\n            \n            if mid_number == target:\n                return True\n            \n            if mid_number \u003e target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        vertical_index = right\n        left, right = 0, length_horizontal - 1\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            mid_number = matrix[vertical_index][mid]\n\n            if mid_number == target:\n                return True\n            \n            if mid_number \u003e target:\n                right = mid - 1\n            else:\n                left = mid + 1\n            \n        return False",
      "title": "Search a 2D Matrix",
      "url": "/submissions/detail/1014540797/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691399877,
      "status": 10,
      "runtime": "49 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1013920579,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2886,
      "title_slug": "faulty-keyboard",
      "code": "class Solution:\n    def finalString(self, s: str) -\u003e str:\n        result = []\n        for char in s:\n            if char == \"i\":\n                result.reverse()\n            else:\n                result.append(char)\n        \n        return \"\".join(result)",
      "title": "Faulty Keyboard",
      "url": "/submissions/detail/1013920579/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691334340,
      "status": 10,
      "runtime": "42 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1013917016,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1851,
      "title_slug": "maximum-number-of-events-that-can-be-attended-ii",
      "code": "class Solution:\n    def maxValue(self, events: List[List[int]], k: int) -\u003e int:        \n        events.sort()\n        n = len(events)\n        starts = [start for start, end, value in events]\n        dp = [[-1] * n for _ in range(k + 1)]\n        \n        def dfs(cur_index, count):\n            if count == 0 or cur_index == n:\n                return 0\n            if dp[count][cur_index] != -1:\n                return dp[count][cur_index]\n\n            # Find the nearest available event after attending event 0.\n\n            next_index = bisect_right(starts, events[cur_index][1])\n            dp[count][cur_index] = max(dfs(cur_index + 1, count), events[cur_index][2] + dfs(next_index, count - 1))\n            return dp[count][cur_index]\n        \n        return dfs(0, k)",
      "title": "Maximum Number of Events That Can Be Attended II",
      "url": "/submissions/detail/1013917016/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691334011,
      "status": 10,
      "runtime": "1228 ms",
      "is_pending": "Not Pending",
      "memory": "159.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1013901677,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 956,
      "title_slug": "number-of-music-playlists",
      "code": "class Solution:\n    def numMusicPlaylists(self, n: int, goal: int, k: int) -\u003e int:\n        MOD = 10**9 + 7\n\n        # Initialize the DP table\n        dp = [[0 for _ in range(n + 1)] for _ in range(goal + 1)]\n        dp[0][0] = 1\n\n        for i in range(1, goal + 1):\n            for j in range(1, min(i, n) + 1):\n                # The i-th song is a new song\n                dp[i][j] = dp[i - 1][j - 1] * (n - j + 1) % MOD\n                # The i-th song is a song we have played before\n                if j \u003e k:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j] * (j - k)) % MOD\n\n        return dp[goal][n]",
      "title": "Number of Music Playlists",
      "url": "/submissions/detail/1013901677/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691332676,
      "status": 10,
      "runtime": "66 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1013887989,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1220,
      "title_slug": "smallest-sufficient-team",
      "code": "class Solution:\n    def smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -\u003e List[int]:\n        req_skills_count = len(req_skills)\n        skill_to_people = defaultdict(set)\n        for i, person in enumerate(people):\n            for skill in person:\n                skill_to_people[skill].add(i)\n\n        current = set()\n        \n        def backtrack(skill: int) -\u003e Tuple[int]:\n            if skill == req_skills_count:\n                return tuple(current)\n            \n            suff_team = None\n            people_with_skill = skill_to_people[req_skills[skill]] \n            \n            if current \u0026 people_with_skill:\n                return backtrack(skill + 1)\n        \n            for person in people_with_skill:\n                current.add(person)\n                new_team = backtrack(skill + 1)\n                current.remove(person)\n\n                if suff_team is None or len(new_team) \u003c len(suff_team):\n                    suff_team = new_team\n\n            return suff_team\n\n        return backtrack(0)\n        \n",
      "title": "Smallest Sufficient Team",
      "url": "/submissions/detail/1013887989/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691331521,
      "status": 10,
      "runtime": "5965 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1013075348,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 2920,
      "title_slug": "minimum-seconds-to-equalize-a-circular-array",
      "code": "class Solution:\n    def minimumSeconds(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        \n        if length == 1:\n            return 0\n        \n        max_nums = set(nums)\n        \n        if len(max_nums) == 1:\n            return 0\n        \n        min_seconds = -1\n        \n        for max_num in max_nums:\n            left_to_convert = set(i for i in range(length) if nums[i] != max_num)\n            seconds = 0\n            while left_to_convert and (seconds \u003c min_seconds or min_seconds == -1):\n                to_remove = set()\n                for i in range(length):\n                    if i not in left_to_convert:\n                        continue\n\n                    if (i - 1 + length) % length not in left_to_convert or (i + 1) % length not in left_to_convert:\n                        to_remove.add(i)\n\n                left_to_convert.difference_update(to_remove)\n                seconds += 1\n            \n            if seconds \u003c min_seconds or min_seconds == -1:\n                min_seconds = seconds\n            \n        return min_seconds",
      "title": "Minimum Seconds to Equalize a Circular Array",
      "url": "/submissions/detail/1013075348/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691251334,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1013074677,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2920,
      "title_slug": "minimum-seconds-to-equalize-a-circular-array",
      "code": "class Solution:\n    def minimumSeconds(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        \n        if length == 1:\n            return 0\n        \n        max_nums = set(nums)\n        \n        if len(max_nums) == 1:\n            return 0\n        \n        min_seconds = -1\n        \n        for max_num in max_nums:\n            left_to_convert = set(i for i in range(length) if nums[i] != max_num)\n            seconds = 0\n            while left_to_convert and (seconds \u003c min_seconds or min_seconds == -1):\n                to_remove = set()\n                for i in range(length):\n                    if i not in left_to_convert:\n                        continue\n\n                    if (i - 1 + length) % length not in left_to_convert or (i + 1) % length not in left_to_convert:\n                        to_remove.add(i)\n\n                left_to_convert.difference_update(to_remove)\n                seconds += 1\n            \n            if seconds \u003c min_seconds:\n                min_seconds = seconds\n            \n        return min_seconds",
      "title": "Minimum Seconds to Equalize a Circular Array",
      "url": "/submissions/detail/1013074677/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691251292,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1013073697,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 2920,
      "title_slug": "minimum-seconds-to-equalize-a-circular-array",
      "code": "class Solution:\n    def minimumSeconds(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        \n        if length == 1:\n            return 0\n        \n        max_nums = set(nums)\n        \n        if len(max_nums) == 1:\n            return 0\n        \n        min_seconds = -1\n        \n        def calculate(max_num: int) -\u003e int:\n            left_to_convert = set(i for i in range(length) if nums[i] != max_num)\n            seconds = 0\n            while left_to_convert and (seconds \u003c min_seconds or min_seconds == -1):\n                to_remove = set()\n                for i in range(length):\n                    if i not in left_to_convert:\n                        continue\n\n                    if (i - 1 + length) % length not in left_to_convert or (i + 1) % length not in left_to_convert:\n                        to_remove.add(i)\n\n                left_to_convert.difference_update(to_remove)\n                seconds += 1\n            \n            if seconds \u003c min_seconds:\n                min_seconds = seconds\n        \n        for max_num in max_nums:\n            calculate(max_num)\n            \n        return min_seconds",
      "title": "Minimum Seconds to Equalize a Circular Array",
      "url": "/submissions/detail/1013073697/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691251239,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1013067257,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 2920,
      "title_slug": "minimum-seconds-to-equalize-a-circular-array",
      "code": "class Solution:\n    def minimumSeconds(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        \n        if length == 1:\n            return 0\n        \n        max_nums = set(nums)\n        \n        if len(max_nums) == 1:\n            return 0\n        \n        def calculate(max_num: int) -\u003e int:\n            left_to_convert = set(i for i in range(length) if nums[i] != max_num)\n            seconds = 0\n            while left_to_convert:\n                to_remove = set()\n                for i in range(length):\n                    if i not in left_to_convert:\n                        continue\n\n                    if (i - 1 + length) % length not in left_to_convert or (i + 1) % length not in left_to_convert:\n                        to_remove.add(i)\n\n                left_to_convert.difference_update(to_remove)\n                seconds += 1\n            \n            return seconds\n            \n        return min(calculate(max_num) for max_num in max_nums)",
      "title": "Minimum Seconds to Equalize a Circular Array",
      "url": "/submissions/detail/1013067257/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691250957,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1013065032,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2920,
      "title_slug": "minimum-seconds-to-equalize-a-circular-array",
      "code": "class Solution:\n    def minimumSeconds(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        \n        if length == 1:\n            return 0\n        \n        count = defaultdict(int)\n        max_nums = None\n        for num in nums:\n            count[num] += 1\n            \n            if not max_nums or count[num] \u003e count[max_nums[-1]]:\n                max_nums = [num]\n            elif count[num] == count[max_nums[-1]]:\n                max_nums.append(num)\n        \n        if len(count) == 1:\n            return 0\n        \n        def calculate(max_num: int) -\u003e int:\n            left_to_convert = set(i for i in range(length) if nums[i] != max_num)\n            seconds = 0\n            while left_to_convert:\n                to_remove = set()\n                for i in range(length):\n                    if i not in left_to_convert:\n                        continue\n\n                    if (i - 1 + length) % length not in left_to_convert or (i + 1) % length not in left_to_convert:\n                        to_remove.add(i)\n\n                left_to_convert.difference_update(to_remove)\n                seconds += 1\n            \n            return seconds\n            \n        return min(calculate(max_num) for max_num in max_nums)",
      "title": "Minimum Seconds to Equalize a Circular Array",
      "url": "/submissions/detail/1013065032/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691250858,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1013056363,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2920,
      "title_slug": "minimum-seconds-to-equalize-a-circular-array",
      "code": "class Solution:\n    def minimumSeconds(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        \n        if length == 1:\n            return 0\n        \n        count = defaultdict(int)\n        max_num = nums[0]\n        for num in nums:\n            count[num] += 1\n            if count[num] \u003e count[max_num]:\n                max_num = num\n        \n        if len(count) == 1:\n            return 0\n        \n        left_to_convert = set(i for i in range(length) if nums[i] != max_num)\n        seconds = 0\n        while left_to_convert:\n            to_remove = set()\n            for i in range(length):\n                if i not in left_to_convert:\n                    continue\n                \n                if (i - 1 + length) % length not in left_to_convert or (i + 1) % length not in left_to_convert:\n                    to_remove.add(i)\n            \n            left_to_convert.difference_update(to_remove)\n            seconds += 1\n            \n        return seconds",
      "title": "Minimum Seconds to Equalize a Circular Array",
      "url": "/submissions/detail/1013056363/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691250441,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1013050540,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2920,
      "title_slug": "minimum-seconds-to-equalize-a-circular-array",
      "code": "class Solution:\n    def minimumSeconds(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        \n        if length == 1:\n            return 0\n        \n        count = defaultdict(int)\n        max_num = nums[0]\n        for num in nums:\n            count[num] += 1\n            if count[num] \u003e count[max_num]:\n                max_num = num\n        \n        if len(count) == 1:\n            return 0\n        \n        left_to_convert = set(i for i in range(length) if nums[i] != max_num)\n        \n        converted = set()\n        seconds = 0\n        \n        while left_to_convert:\n            for i in range(length):\n                if i not in left_to_convert:\n                    continue\n                \n                if (i - 1 + length) % length not in left_to_convert or (i + 1) % length not in left_to_convert:\n                    left_to_convert.remove(i)\n            \n            seconds += 1    \n                \n            \n        return seconds",
      "title": "Minimum Seconds to Equalize a Circular Array",
      "url": "/submissions/detail/1013050540/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691250152,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1012983639,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2903,
      "title_slug": "insert-greatest-common-divisors-in-linked-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def insertGreatestCommonDivisors(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        root = head\n        \n        while head and head.next:\n            next = head.next\n            new_node = ListNode(math.gcd(head.val, head.next.val), next)\n            head.next = new_node\n            head = next\n        \n        return root",
      "title": "Insert Greatest Common Divisors in Linked List",
      "url": "/submissions/detail/1012983639/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691247204,
      "status": 10,
      "runtime": "100 ms",
      "is_pending": "Not Pending",
      "memory": "21.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1012956760,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2955,
      "title_slug": "account-balance-after-rounded-purchase",
      "code": "class Solution:\n    def accountBalanceAfterPurchase(self, purchaseAmount: int) -\u003e int:\n        remainder = purchaseAmount % 10\n        if remainder == 0:\n            return 100 - purchaseAmount\n\n        if remainder \u003e= 5:\n            return 100 - ((purchaseAmount // 10) + 1) * 10 \n        \n        return 100 - (purchaseAmount // 10) * 10",
      "title": "Account Balance After Rounded Purchase",
      "url": "/submissions/detail/1012956760/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691246438,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1012946155,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2955,
      "title_slug": "account-balance-after-rounded-purchase",
      "code": "class Solution:\n    def accountBalanceAfterPurchase(self, purchaseAmount: int) -\u003e int:\n        if purchaseAmount % 10 == 0:\n            return 100 - purchaseAmount\n        \n        return 100 - (((purchaseAmount // 10) + 1) * 10)",
      "title": "Account Balance After Rounded Purchase",
      "url": "/submissions/detail/1012946155/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691246223,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11100001111000011111000011111100001111110000111111000011111100001111110000111111000011111100001111111",
      "flag_type": 1
    },
    {
      "id": 1012939832,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2955,
      "title_slug": "account-balance-after-rounded-purchase",
      "code": "class Solution:\n    def accountBalanceAfterPurchase(self, purchaseAmount: int) -\u003e int:\n        return 100 - (((purchaseAmount // 10) + 1) * 10)",
      "title": "Account Balance After Rounded Purchase",
      "url": "/submissions/detail/1012939832/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691246095,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11000001111000011110000011111000001111100000111110000011111000001111100000111110000011111000001111100",
      "flag_type": 1
    },
    {
      "id": 1012748662,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 95,
      "title_slug": "unique-binary-search-trees-ii",
      "code": "class Solution:\n    def generateTrees(self, n: int) -\u003e List[Optional[TreeNode]]:\n        @cache\n        def generate_trees(left, right) -\u003e Generator[None, None, Optional[TreeNode]]:\n            if left \u003e right:\n                yield None\n                return\n            \n            for val in range(left, right + 1):\n                for left in generate_trees(left, val - 1):\n                    for right in generate_trees(val + 1, right):\n                        yield TreeNode(val, left, right)\n        \n        return tuple(generate_trees(1, n))",
      "title": "Unique Binary Search Trees II",
      "url": "/submissions/detail/1012748662/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691228557,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000",
      "flag_type": 1
    },
    {
      "id": 1015902024,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 63,
      "title_slug": "unique-paths-ii",
      "code": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u003e int:\n        row_count = len(obstacleGrid)\n        column_count = len(obstacleGrid[0])\n        dp = [[0] * column_count for _ in range(row_count)]\n        dp[0][0] = 1\n\n        for column in range(1, column_count):\n            if obstacleGrid[0][column] == 1:\n                continue\n            dp[0][column] = dp[0][column-1]\n\n        for row in range(1, row_count):\n            dp[row][0] = dp[row-1][0]\n\n            for column in range(1, column_count):\n                if obstacleGrid[row][column] == 1:\n                    continue\n                \n                dp[row][column] = dp[row-1][column] + dp[row][column-1]\n                     \n        return dp[-1][-1]",
      "title": "Unique Paths II",
      "url": "/submissions/detail/1015902024/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691517365,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11110110110001100001011100000001000111111",
      "flag_type": 1
    },
    {
      "id": 1015893189,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 63,
      "title_slug": "unique-paths-ii",
      "code": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u003e int:\n        row_count = len(obstacleGrid)\n        column_count = len(obstacleGrid[0])\n        # dp = [[0] * column_count for _ in range(row_count)]\n\n        # for row in range(row_count):\n        #     for column in range(column_count):\n\n        @cache\n        def dp(row: int, column: int) -\u003e int:\n            if row == row_count or column == column_count or obstacleGrid[row][column] == 1:\n                return 0\n            \n            if row == row_count - 1 and column == column_count - 1:\n                return 1\n            \n            return dp(row + 1, column) + dp(row, column + 1)\n        \n        return dp(0, 0)",
      "title": "Unique Paths II",
      "url": "/submissions/detail/1015893189/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691516839,
      "status": 10,
      "runtime": "54 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "11111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1015877410,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 64,
      "title_slug": "minimum-path-sum",
      "code": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -\u003e int:\n        row_count = len(grid)\n        column_count = len(grid[0]) if grid else None\n        if not row_count or not column_count:\n            return 0\n\n        dp = [[0] * column_count for _ in range(row_count)]\n        dp[0][0] = grid[0][0]\n\n        for column in range(1, column_count):\n            dp[0][column] = grid[0][column] + dp[0][column - 1]\n\n        for row in range(1, row_count):\n            dp[row][0] = grid[row][0] + dp[row - 1][0]\n\n            for column in range(1, column_count):\n                dp[row][column] = grid[row][column] + min(\n                    dp[row - 1][column], dp[row][column-1]\n                )\n\n        # @cache\n        # def dp(row: int, column: int) -\u003e int:\n        #     if row == row_count or column == column_count:\n        #         return 0\n        #     return grid[row][column] + min(dp(row + 1, column), dp(row, column + 1))\n        #return dp(0, 0)\n\n        return dp[-1][-1]",
      "title": "Minimum Path Sum",
      "url": "/submissions/detail/1015877410/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691515881,
      "status": 10,
      "runtime": "88 ms",
      "is_pending": "Not Pending",
      "memory": "18 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1015841056,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 120,
      "title_slug": "triangle",
      "code": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -\u003e int:\n        row_count = len(triangle)\n        dp = [[0] * row_count for _ in range(row_count)]\n        dp[0][0] = triangle[0][0]\n\n        for row in range(1, row_count):\n            dp[row][0] = triangle[row][0] + dp[row-1][0]\n            dp[row][row] = triangle[row][row] + dp[row-1][row-1]\n\n            for column in range(1, row):\n                dp[row][column] = triangle[row][column] + min(\n                    dp[row-1][column], dp[row-1][column-1]\n                )\n\n        return min(dp[-1])",
      "title": "Triangle",
      "url": "/submissions/detail/1015841056/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691513630,
      "status": 10,
      "runtime": "77 ms",
      "is_pending": "Not Pending",
      "memory": "17.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1015823030,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 120,
      "title_slug": "triangle",
      "code": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -\u003e int:\n        row_count = len(triangle)\n\n\n        @cache\n        def dp(row: int, column: int) -\u003e int:\n            if row == row_count or column == row + 1:\n                return 0\n        \n            return triangle[row][column] + min(dp(row + 1, column), dp(row + 1, column + 1))\n\n        return dp(0, 0)",
      "title": "Triangle",
      "url": "/submissions/detail/1015823030/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691512487,
      "status": 10,
      "runtime": "73 ms",
      "is_pending": "Not Pending",
      "memory": "20.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1015584079,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 215,
      "title_slug": "kth-largest-element-in-an-array",
      "code": "class Solution:\n    def findKthLargest(self, nums, k):\n        heap = []\n        for num in nums:\n            heapq.heappush(heap, num)\n            if len(heap) \u003e k:\n                heapq.heappop(heap)\n        \n        return heap[0]",
      "title": "Kth Largest Element in an Array",
      "url": "/submissions/detail/1015584079/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691494604,
      "status": 10,
      "runtime": "468 ms",
      "is_pending": "Not Pending",
      "memory": "29.4 MB",
      "compare_result": "1111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1015557330,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 33,
      "title_slug": "search-in-rotated-sorted-array",
      "code": "class Solution:\n    def search(self, nums: List[int], target: int) -\u003e int:\n        nums_count = len(nums)\n        left, right = 0, len(nums) - 1\n\n        first_num, last_num = nums[0], nums[-1]\n        if first_num == target:\n            return 0\n        if last_num == target:\n            return nums_count - 1\n        \n        # Find the index of the pivot element (the smallest element)\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            if nums[mid] \u003e last_num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        pivot_num = nums[left]\n        if pivot_num == target:\n            return left\n        \n        if pivot_num \u003c target \u003c last_num:\n            right = nums_count - 1\n        else:\n            left = 0\n        \n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            mid_num = nums[mid]\n            if mid_num == target:\n                return mid\n            elif mid_num \u003e target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return -1",
      "title": "Search in Rotated Sorted Array",
      "url": "/submissions/detail/1015557330/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691492140,
      "status": 10,
      "runtime": "47 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1015556891,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 33,
      "title_slug": "search-in-rotated-sorted-array",
      "code": "class Solution:\n    def search(self, nums: List[int], target: int) -\u003e int:\n        nums_count = len(nums)\n        left, right = 0, len(nums) - 1\n\n        first_num, last_num = nums[0], nums[-1]\n        if first_num == target:\n            return 0\n        if last_num == target:\n            return nums_count - 1\n        \n        # Find the index of the pivot element (the smallest element)\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            if nums[mid] \u003e last_num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        pivot_num = nums[left]\n        if pivot_num == target:\n            return left\n        \n        if pivot_num \u003c target \u003c last_num:\n            right = nums_count - 1\n        else:\n            left = 0\n        \n        while left \u003c= right:\n            mid = (left + right) // 2\n            mid_num = nums[mid]\n            if mid_num == target:\n                return mid\n            elif mid_num \u003e target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return -1",
      "title": "Search in Rotated Sorted Array",
      "url": "/submissions/detail/1015556891/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691492100,
      "status": 10,
      "runtime": "46 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1014752319,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 300,
      "title_slug": "longest-increasing-subsequence",
      "code": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n        dp = [0] * nums_count\n        dp[0] = 1\n        for i in range(1, nums_count):\n            length = 0\n            start = nums[i]\n\n            for j in range(0, i):\n                if start \u003e nums[j]:\n                    length = max(length, dp[j])\n\n            dp[i] = 1 + length\n            \n        return max(dp)",
      "title": "Longest Increasing Subsequence",
      "url": "/submissions/detail/1014752319/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691418246,
      "status": 10,
      "runtime": "1885 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1014742480,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 300,
      "title_slug": "longest-increasing-subsequence",
      "code": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n\n        @cache\n        def dp(idx: int) -\u003e int:            \n            start = nums[idx]\n            max_length = 0\n            for i in range(idx + 1, nums_count):\n                length = dp(i)\n                if nums[i] \u003e start:\n                    length += 1\n\n                if length \u003e max_length:\n                    max_length = length\n          \n            return max_length if max_length else 1\n\n        return dp(0)",
      "title": "Longest Increasing Subsequence",
      "url": "/submissions/detail/1014742480/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691417531,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111101001001111101000101000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1014740294,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 300,
      "title_slug": "longest-increasing-subsequence",
      "code": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n\n        @cache\n        def dp(idx: int) -\u003e int:            \n            start = nums[idx]\n            max_length = 1\n            for i in range(idx + 1, nums_count):\n                length = dp(i)\n                if nums[i] \u003e start:\n                    length += 1\n\n                if length \u003e max_length:\n                    max_length = length\n          \n            return max_length\n\n        return dp(0)",
      "title": "Longest Increasing Subsequence",
      "url": "/submissions/detail/1014740294/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691417369,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111101001001111101000101000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1014738269,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 300,
      "title_slug": "longest-increasing-subsequence",
      "code": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n\n        @cache\n        def dp(idx: int) -\u003e int:            \n            start = nums[idx]\n            max_length = 0\n            for i in range(idx + 1, nums_count):\n                length = dp(i)\n                if nums[i] \u003e start:\n                    length += 1\n\n                if length \u003e max_length:\n                    max_length = length\n          \n            return max_length\n\n        return dp(0) + 1",
      "title": "Longest Increasing Subsequence",
      "url": "/submissions/detail/1014738269/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691417215,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111101001001111101000101000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1014633319,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 322,
      "title_slug": "coin-change",
      "code": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -\u003e int:\n        dp = [amount + 1] * (amount + 1)\n        dp[0] = 0\n\n        for current_amount in range(1, amount + 1):\n            for coin in coins:\n                diff = current_amount - coin\n                if diff \u003c 0:\n                    continue\n                \n                dp[current_amount] = min(dp[current_amount], dp[diff] + 1)\n\n        return dp[-1] if dp[-1] != amount + 1 else -1\n",
      "title": "Coin Change",
      "url": "/submissions/detail/1014633319/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691408344,
      "status": 10,
      "runtime": "918 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1014632966,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 322,
      "title_slug": "coin-change",
      "code": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -\u003e int:\n        dp = [amount + 1] * (amount + 1)\n\n        for current_amount in range(1, amount + 1):\n            for coin in coins:\n                diff = current_amount - coin\n                if diff \u003c 0:\n                    continue\n                \n                dp[current_amount] = min(dp[current_amount], dp[diff] + 1)\n\n        return dp[-1] if dp[-1] != amount + 1 else -1\n",
      "title": "Coin Change",
      "url": "/submissions/detail/1014632966/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691408316,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "010001011000000000000000000000000000000000001000010000010000010001000100000000000000000000000000000000001000000011000000000000000000000000000000000000000000000000000000100000000000000110110",
      "flag_type": 1
    },
    {
      "id": 1014625631,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 322,
      "title_slug": "coin-change",
      "code": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -\u003e int:\n        if amount == 0:\n            return 0\n        \n        @cache\n        def dp(coins_value: int) -\u003e int:\n            if coins_value == amount:\n                return 0\n            \n            if coins_value \u003e amount:\n                return -1\n            \n            min_coins_count = -1\n\n            for coin in coins:\n                new_count = 1 + dp(coin + coins_value)\n                if new_count == 0:\n                    continue\n                \n                if min_coins_count == -1 or new_count \u003c min_coins_count:\n                    min_coins_count = new_count\n            \n            return min_coins_count\n\n        return dp(0)\n",
      "title": "Coin Change",
      "url": "/submissions/detail/1014625631/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691407626,
      "status": 10,
      "runtime": "704 ms",
      "is_pending": "Not Pending",
      "memory": "37.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1014586880,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 139,
      "title_slug": "word-break",
      "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -\u003e bool:\n        n = len(s)\n        words = set(wordDict)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        \n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in words:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]",
      "title": "Word Break",
      "url": "/submissions/detail/1014586880/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691404030,
      "status": 10,
      "runtime": "41 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1014585529,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 139,
      "title_slug": "word-break",
      "code": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -\u003e bool:\n        @cache\n        def dp(i):\n            if i \u003c 0: \n                return True\n\n            for word in wordDict:\n                if s[i - len(word) + 1:i + 1] == word and dp(i - len(word)):\n                    return True\n            \n            return False\n        \n        return dp(len(s) - 1)",
      "title": "Word Break",
      "url": "/submissions/detail/1014585529/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691403903,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1014575649,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 198,
      "title_slug": "house-robber",
      "code": "class Solution:\n    def rob(self, nums: List[int]) -\u003e int:\n        house_count = len(nums)\n\n        prev_1, prev_2 = 0, 0\n\n        for house in range(0, house_count):\n            prev_1, prev_2 = max(prev_2 + nums[house], prev_1), prev_1\n\n        return prev_1\n",
      "title": "House Robber",
      "url": "/submissions/detail/1014575649/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691403004,
      "status": 10,
      "runtime": "36 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1014573838,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 198,
      "title_slug": "house-robber",
      "code": "class Solution:\n    def rob(self, nums: List[int]) -\u003e int:\n        house_count = len(nums)\n\n        dp = [0 for _ in range(house_count + 1)]\n        dp[1] = nums[0]\n\n        for house in range(1, house_count):\n            dp[house+1] = max(dp[house-1] + nums[house], dp[house])\n\n        return dp[-1]\n",
      "title": "House Robber",
      "url": "/submissions/detail/1014573838/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691402840,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1014573008,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 198,
      "title_slug": "house-robber",
      "code": "class Solution:\n    def rob(self, nums: List[int]) -\u003e int:\n        house_count = len(nums)\n\n        dp = [0 for _ in range(house_count + 1)]\n        dp[1] = nums[0]\n\n        for house in range(2, house_count + 1):\n            dp[house] = max(dp[house-2] + nums[house], dp[house-1])\n\n        return dp[-1]\n",
      "title": "House Robber",
      "url": "/submissions/detail/1014573008/",
      "lang_name": "Python3",
      "time": "6 months",
      "timestamp": 1691402766,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1017577860,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 81,
      "title_slug": "search-in-rotated-sorted-array-ii",
      "code": "class Solution:\n    def search(self, nums: List[int], target: int) -\u003e bool:\n        left, right = 0, len(nums) - 1\n        \n        while left \u003c= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return True\n            \n            if nums[mid] == nums[left]:\n                left += 1\n                continue\n\n            if nums[left] \u003c= nums[mid]:\n                if nums[left] \u003c= target \u003c nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] \u003c target \u003c= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return False",
      "title": "Search in Rotated Sorted Array II",
      "url": "/submissions/detail/1017577860/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691676278,
      "status": 10,
      "runtime": "50 ms",
      "is_pending": "Not Pending",
      "memory": "16.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1016554386,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 188,
      "title_slug": "best-time-to-buy-and-sell-stock-iv",
      "code": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -\u003e int:\n        # no transaction, no profit\n        if k == 0: return 0\n        # dp[k][0] = min cost you need to spend at most k transactions\n        # dp[k][1] = max profit you can achieve at most k transactions\n        dp = [[1000, 0] for _ in range(k + 1)]\n        for price in prices:\n            for i in range(1, k + 1):\n                # price - dp[i - 1][1] is how much you need to spend\n                # i.e use the profit you earned from previous transaction to buy the stock\n                # we want to minimize it\n                dp[i][0] = min(dp[i][0], price - dp[i - 1][1])\n                # price - dp[i][0] is how much you can achieve from previous min cost\n                # we want to maximize it\n                dp[i][1] = max(dp[i][1], price - dp[i][0])\n        # return max profit at most k transactions\n\t\t# or you can write `return dp[-1][1]`\n        return dp[k][1]",
      "title": "Best Time to Buy and Sell Stock IV",
      "url": "/submissions/detail/1016554386/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691583208,
      "status": 10,
      "runtime": "99 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1016434342,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2720,
      "title_slug": "minimize-the-maximum-difference-of-pairs",
      "code": "class Solution:\n    def minimizeMax(self, nums: List[int], p: int) -\u003e int:\n        nums.sort()\n        nums_count = len(nums)\n        \n        # Find the number of valid pairs by greedy approach\n        def countValidPairs(threshold: int) -\u003e int:\n            index, count = 0, 0\n            while index \u003c nums_count - 1:\n                # If a valid pair is found, skip both numbers.\n                if nums[index + 1] - nums[index] \u003c= threshold:\n                    count += 1\n                    index += 1\n                index += 1\n            return count\n        \n        left, right = 0, nums[-1] - nums[0]\n        while left \u003c right:\n            mid = left + (right - left) // 2\n\n            # If there are enough pairs, look for a smaller threshold.\n            # Otherwise, look for a larger threshold.\n            if countValidPairs(mid) \u003e= p:\n                right = mid\n            else:\n                left = mid + 1\n\n        return left       ",
      "title": "Minimize the Maximum Difference of Pairs",
      "url": "/submissions/detail/1016434342/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691571946,
      "status": 10,
      "runtime": "943 ms",
      "is_pending": "Not Pending",
      "memory": "30.9 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1016033910,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 123,
      "title_slug": "best-time-to-buy-and-sell-stock-iii",
      "code": "class Solution:\n\tdef maxProfit(self, prices: List[int]) -\u003e int:\n\t\t\t\t\n\t\t'''\n\t\tdp_2_hold: max profit with 2 transactions, and in hold state\n\t\tdp_2_not_hold: max profit with 2 transactions, and not in hold state\n\t\t\n\t\tdp_1_hold: max profit with 1 transaction, and in hold state\n\t\tdp_1_not_hold: max profit with 1 transaction, and not in hold state\n\t\t\n\t\tNote: it is impossible to have stock in hand and sell on first day, therefore -infinity is set as initial profit value for hold state\n\t\t'''\n\t\t\n\t\tdp_2_hold, dp_2_not_hold = -float('inf'), 0\n\t\tdp_1_hold, dp_1_not_hold = -float('inf'), 0\n\t\t\n\t\tfor stock_price in prices:\n\t\t\t\t\n\t\t\t# either keep being in not-hold state, or sell with stock price today\n\t\t\tdp_2_not_hold = max( dp_2_not_hold, dp_2_hold + stock_price )\n\t\n\t\t\t# either keep being in hold state, or just buy with stock price today ( add one more transaction )\n\t\t\tdp_2_hold = max( dp_2_hold, dp_1_not_hold - stock_price )\n\t\t\t\t\n\t\t\t# either keep being in not-hold state, or sell with stock price today\n\t\t\tdp_1_not_hold = max( dp_1_not_hold, dp_1_hold + stock_price )\n\t\n\t\t\t# either keep being in hold state, or just buy with stock price today ( add one more transaction )\n\t\t\tdp_1_hold = max( dp_1_hold, 0 - stock_price )\n\t\t\t\t\n\t\treturn dp_2_not_hold",
      "title": "Best Time to Buy and Sell Stock III",
      "url": "/submissions/detail/1016033910/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691527250,
      "status": 10,
      "runtime": "859 ms",
      "is_pending": "Not Pending",
      "memory": "30.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1016033465,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 123,
      "title_slug": "best-time-to-buy-and-sell-stock-iii",
      "code": "class Solution:\n\tdef maxProfit(self, prices: List[int]) -\u003e int:\n\t\t\t\t\n\t\t'''\n\t\tdp_2_hold: max profit with 2 transactions, and in hold state\n\t\tdp_2_not_hold: max profit with 2 transactions, and not in hold state\n\t\t\n\t\tdp_1_hold: max profit with 1 transaction, and in hold state\n\t\tdp_1_not_hold: max profit with 1 transaction, and not in hold state\n\t\t\n\t\tNote: it is impossible to have stock in hand and sell on first day, therefore -infinity is set as initial profit value for hold state\n\t\t'''\n\t\t\n\t\tdp_2_hold, dp_2_not_hold = -float('inf'), 0\n\t\t\t\tdp_1_hold, dp_1_not_hold = -float('inf'), 0\n\t\t\t\t\n\t\t\t\tfor stock_price in prices:\n\t\t\t\t\t\t\n\t\t\t# either keep being in not-hold state, or sell with stock price today\n\t\t\t\t\t\tdp_2_not_hold = max( dp_2_not_hold, dp_2_hold + stock_price )\n\t\t\t\n\t\t\t# either keep being in hold state, or just buy with stock price today ( add one more transaction )\n\t\t\t\t\t\tdp_2_hold = max( dp_2_hold, dp_1_not_hold - stock_price )\n\t\t\t\t\t\t\n\t\t\t# either keep being in not-hold state, or sell with stock price today\n\t\t\t\t\t\tdp_1_not_hold = max( dp_1_not_hold, dp_1_hold + stock_price )\n\t\t\t\n\t\t\t# either keep being in hold state, or just buy with stock price today ( add one more transaction )\n\t\t\t\t\t\tdp_1_hold = max( dp_1_hold, 0 - stock_price )\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\treturn dp_2_not_hold",
      "title": "Best Time to Buy and Sell Stock III",
      "url": "/submissions/detail/1016033465/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691527200,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1016033198,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 123,
      "title_slug": "best-time-to-buy-and-sell-stock-iii",
      "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        \n\t\t'''\n\t\tdp_2_hold: max profit with 2 transactions, and in hold state\n\t\tdp_2_not_hold: max profit with 2 transactions, and not in hold state\n    \n\t\tdp_1_hold: max profit with 1 transaction, and in hold state\n\t\tdp_1_not_hold: max profit with 1 transaction, and not in hold state\n\t\t\n\t\tNote: it is impossible to have stock in hand and sell on first day, therefore -infinity is set as initial profit value for hold state\n\t\t'''\n\t\t\n\t\tdp_2_hold, dp_2_not_hold = -float('inf'), 0\n        dp_1_hold, dp_1_not_hold = -float('inf'), 0\n        \n        for stock_price in prices:\n            \n\t\t\t# either keep being in not-hold state, or sell with stock price today\n            dp_2_not_hold = max( dp_2_not_hold, dp_2_hold + stock_price )\n\t\t\t\n\t\t\t# either keep being in hold state, or just buy with stock price today ( add one more transaction )\n            dp_2_hold = max( dp_2_hold, dp_1_not_hold - stock_price )\n            \n\t\t\t# either keep being in not-hold state, or sell with stock price today\n            dp_1_not_hold = max( dp_1_not_hold, dp_1_hold + stock_price )\n\t\t\t\n\t\t\t# either keep being in hold state, or just buy with stock price today ( add one more transaction )\n            dp_1_hold = max( dp_1_hold, 0 - stock_price )\n            \n        \n        return dp_2_not_hold",
      "title": "Best Time to Buy and Sell Stock III",
      "url": "/submissions/detail/1016033198/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691527169,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1016031490,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 123,
      "title_slug": "best-time-to-buy-and-sell-stock-iii",
      "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        if not prices:\n            return 0\n\n        # initialize variables for first buy, first sell, second buy, and second sell\n        buy1, buy2 = float('inf'), float('inf')\n        sell1, sell2 = 0, 0\n\n        # iterate over prices to update buy and sell values\n        for price in prices:\n            # update first buy and sell values\n            buy1 = min(buy1, price)\n            sell1 = max(sell1, price - buy1)\n            # update second buy and sell values\n            buy2 = min(buy2, price - sell1)\n            sell2 = max(sell2, price - buy2)\n\n        return sell2\n",
      "title": "Best Time to Buy and Sell Stock III",
      "url": "/submissions/detail/1016031490/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691527008,
      "status": 10,
      "runtime": "845 ms",
      "is_pending": "Not Pending",
      "memory": "30.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1016018977,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 123,
      "title_slug": "best-time-to-buy-and-sell-stock-iii",
      "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        days_count = len(prices)\n\n        @cache\n        def dp(bought_day: int, transactions: int) -\u003e int:\n            if bought_day == days_count or transactions == 0:\n                return 0\n            \n            max_profit = 0\n            bought_price = prices[bought_day]\n\n            for day in range(bought_day + 1, days_count):\n                profit = prices[day] - bought_price\n                max_profit = max(max_profit, \n                                 (profit + dp(day + 1, transactions - 1)) if profit \u003e 0 else 0,\n                                 dp(day, transactions))\n        \n            return max_profit\n    \n        return dp(0, 2)",
      "title": "Best Time to Buy and Sell Stock III",
      "url": "/submissions/detail/1016018977/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691525813,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000",
      "flag_type": 1
    },
    {
      "id": 1016017472,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 123,
      "title_slug": "best-time-to-buy-and-sell-stock-iii",
      "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -\u003e int:\n        days_count = len(prices)\n\n        @cache\n        def dp(bought_day: int, transactions: int) -\u003e int:\n            if bought_day == days_count or transactions == 0:\n                return 0\n            \n            max_profit = 0\n            bought_price = prices[bought_day]\n\n            for day in range(bought_day + 1, days_count):\n                profit = prices[day] - bought_price\n                if profit \u003c 1:\n                    continue\n\n                max_profit = max(max_profit, \n                                 profit + dp(day + 1, transactions - 1),\n                                 dp(day, transactions))\n        \n            return max_profit\n    \n        return dp(0, 2) ",
      "title": "Best Time to Buy and Sell Stock III",
      "url": "/submissions/detail/1016017472/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691525678,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111110101110000000111111111110011110000110000011111111111111101111101010000001111111101111101010000000000001101111101010000000000000000001101010000000000000000000000010110010000000010000001100000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1016005646,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 5,
      "title_slug": "longest-palindromic-substring",
      "code": "class Solution:\n    def longestPalindrome(self, s: str) -\u003e str:\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        ans = [0, 0]\n        \n        for i in range(n):\n            dp[i][i] = True\n        \n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                dp[i][i + 1] = True\n                ans = [i, i + 1]\n\n        for diff in range(2, n):\n            for i in range(n - diff):\n                j = i + diff\n                if s[i] == s[j] and dp[i + 1][j - 1]:\n                    dp[i][j] = True\n                    ans = [i, j]\n\n        i, j = ans\n        return s[i:j + 1]",
      "title": "Longest Palindromic Substring",
      "url": "/submissions/detail/1016005646/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691524635,
      "status": 10,
      "runtime": "2105 ms",
      "is_pending": "Not Pending",
      "memory": "24.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1016005207,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 221,
      "title_slug": "maximal-square",
      "code": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -\u003e int:\n        row_count, column_count = len(matrix), len(matrix[0])\n        \n        dp = [[0] * column_count for _ in range(row_count)]\n        \n        max_size = 0\n        for column in range(column_count):\n            if matrix[0][column] == \"0\":\n                continue\n            dp[0][column] = 1\n            max_size = 1\n\n        for row in range(row_count):\n            if matrix[row][0] == \"0\":\n                continue\n            dp[row][0] = 1\n            max_size = 1\n        \n        for row in range(1, row_count):\n            for column in range(1, column_count):\n                if matrix[row][column] == \"0\":\n                    continue\n                \n                value = min(dp[row-1][column], dp[row][column-1], dp[row-1][column-1]) + 1\n                dp[row][column] = value\n                max_size = max(max_size, value)\n        \n        return max_size * max_size\n",
      "title": "Maximal Square",
      "url": "/submissions/detail/1016005207/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691524596,
      "status": 10,
      "runtime": "584 ms",
      "is_pending": "Not Pending",
      "memory": "19.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1016004075,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 221,
      "title_slug": "maximal-square",
      "code": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -\u003e int:\n        row_count, column_count = len(matrix), len(matrix[0])\n        \n        dp = [[0] * column_count for _ in range(row_count)]\n        \n        max_size = 0\n        for column in range(column_count):\n            if matrix[0][column] == \"0\":\n                continue\n            dp[0][column] = 1\n\n        for row in range(row_count):\n            if matrix[row][0] == \"0\":\n                continue\n            dp[row][0] = 1\n        \n        for row in range(1, row_count):\n            for column in range(1, column_count):\n                if matrix[row][column] == \"0\":\n                    continue\n                \n                value = min(dp[row-1][column], dp[row][column-1], dp[row-1][column-1]) + 1\n                dp[row][column] = value\n                max_size = max(max_size, value)\n        \n        return max_size * max_size\n",
      "title": "Maximal Square",
      "url": "/submissions/detail/1016004075/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691524499,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "101010001101001111111101111111111111101011111111101111110110111111110011111111",
      "flag_type": 1
    },
    {
      "id": 1016001487,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 221,
      "title_slug": "maximal-square",
      "code": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -\u003e int:\n        row_count, column_count = len(matrix), len(matrix[0])\n        \n        dp = [[0] * column_count for _ in range(row_count)]\n        \n        max_size = 0\n        for column in range(column_count):\n            if matrix[0][column] == \"0\":\n                continue\n            dp[0][column] = 1\n\n        for row in range(row_count):\n            if matrix[row][0] == \"0\":\n                continue\n            dp[row][0] = 1\n        \n        for row in range(1, row_count):\n            for column in range(1, column_count):\n                if matrix[row][column] == \"0\":\n                    continue\n                \n                value = min(dp[row-1][column], dp[row][column-1], dp[row-1][column-1]) + 1\n                dp[row][column] = value\n                max_size = max(max_size, value)\n        \n        return max_size * max_size\n",
      "title": "Maximal Square",
      "url": "/submissions/detail/1016001487/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691524273,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "101010001101001111111101111111111111101011111111101111110110111111110011111111",
      "flag_type": 1
    },
    {
      "id": 1015998762,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 221,
      "title_slug": "maximal-square",
      "code": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -\u003e int:\n        row_count, column_count = len(matrix), len(matrix[0])\n        \n        dp = [[0] * column_count for _ in range(row_count)]\n        \n        max_size = 0\n        for column in range(column_count):\n            dp[0][column] = int(matrix[0][column])\n        for row in range(row_count):\n            dp[row][0] = int(matrix[row][0])\n        \n        for row in range(1, row_count):\n            for column in range(1, row_count):\n                if matrix[row][column] == \"0\":\n                    continue\n                \n                value = min(dp[row-1][column], dp[row][column-1], dp[row-1][column-1]) + 1\n                dp[row][column] = value\n                max_size = max(max_size, value)\n        \n        return max_size * max_size\n",
      "title": "Maximal Square",
      "url": "/submissions/detail/1015998762/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691524041,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "101010001101000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1015953562,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 72,
      "title_slug": "edit-distance",
      "code": "class Solution:\n    def minDistance(self, word1: str, word2: str) -\u003e int:\n        length1, length2 = len(word1), len(word2)\n\n        @cache\n        def dp(i1: int, i2: int) -\u003e int:\n            if i1 == length1:\n                return length2 - (i2 + 1)\n\n            if i2 == length2:\n                return length1 - (i1 + 1)\n            \n            if word1[i1] == word2[i2]:\n                return dp(i1 + 1, i2 + 1)\n\n            return 1 + min((\n                # replace or insert\n                dp(i1 + 1, i2 + 1),\n                # remove from i1\n                dp(i1 + 1, i2),\n                # remove from i2\n                dp(i1, i2 + 1)\n            ))\n        \n        return dp(0, 0) + 1",
      "title": "Edit Distance",
      "url": "/submissions/detail/1015953562/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691520630,
      "status": 10,
      "runtime": "82 ms",
      "is_pending": "Not Pending",
      "memory": "18.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1015933091,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 97,
      "title_slug": "interleaving-string",
      "code": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -\u003e bool:\n        length_1, length_2, length_3 = len(s1), len(s2), len(s3)\n        if length_1 + length_2 != length_3:\n            return False\n        \n        @cache\n        def dp(i_1: int, i_2: int, i_3: int) -\u003e bool:\n            if i_3 == length_3:\n                return True\n\n            target = s3[i_3]\n            return (\n                i_1 != length_1 and s1[i_1] == target and dp(i_1 + 1, i_2, i_3 + 1)\n            ) or (\n                i_2 != length_2 and s2[i_2] == target and dp(i_1, i_2 + 1, i_3 + 1)\n            )\n\n        return dp(0, 0, 0)\n",
      "title": "Interleaving String",
      "url": "/submissions/detail/1015933091/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691519261,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "17.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1015907950,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 63,
      "title_slug": "unique-paths-ii",
      "code": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u003e int:\n        row_count = len(obstacleGrid)\n        column_count = len(obstacleGrid[0])\n        \n        if obstacleGrid[0][0] == 1 or obstacleGrid[-1][-1] == 1:\n            return 0\n\n        dp = [[0] * column_count for _ in range(row_count)]\n        dp[0][0] = 1\n\n        for column in range(1, column_count):\n            if obstacleGrid[0][column] == 1:\n                break\n\n            dp[0][column] = dp[0][column-1]\n\n        for row in range(1, row_count):\n            if obstacleGrid[row][0] == 0:\n                dp[row][0] = dp[row-1][0]\n\n            for column in range(1, column_count):\n                if obstacleGrid[row][column] == 1:\n                    continue\n                \n                dp[row][column] = dp[row-1][column] + dp[row][column-1]\n                     \n        return dp[-1][-1]",
      "title": "Unique Paths II",
      "url": "/submissions/detail/1015907950/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691517730,
      "status": 10,
      "runtime": "51 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1015904582,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 63,
      "title_slug": "unique-paths-ii",
      "code": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u003e int:\n        row_count = len(obstacleGrid)\n        column_count = len(obstacleGrid[0])\n        \n        if obstacleGrid[0][0] == 1 or obstacleGrid[-1][-1] == 1:\n            return 0\n\n        dp = [[0] * column_count for _ in range(row_count)]\n        dp[0][0] = 1\n\n        for column in range(1, column_count):\n            if obstacleGrid[0][column] == 1:\n                continue\n            dp[0][column] = dp[0][column-1]\n\n        for row in range(1, row_count):\n            dp[row][0] = dp[row-1][0]\n\n            for column in range(1, column_count):\n                if obstacleGrid[row][column] == 1:\n                    continue\n                \n                dp[row][column] = dp[row-1][column] + dp[row][column-1]\n                     \n        return dp[-1][-1]",
      "title": "Unique Paths II",
      "url": "/submissions/detail/1015904582/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691517524,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111101001011110100001000111111",
      "flag_type": 1
    },
    {
      "id": 1015904071,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 63,
      "title_slug": "unique-paths-ii",
      "code": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u003e int:\n        row_count = len(obstacleGrid)\n        column_count = len(obstacleGrid[0])\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n\n        dp = [[0] * column_count for _ in range(row_count)]\n        dp[0][0] = 1\n\n        for column in range(1, column_count):\n            if obstacleGrid[0][column] == 1:\n                continue\n            dp[0][column] = dp[0][column-1]\n\n        for row in range(1, row_count):\n            dp[row][0] = dp[row-1][0]\n\n            for column in range(1, column_count):\n                if obstacleGrid[row][column] == 1:\n                    continue\n                \n                dp[row][column] = dp[row-1][column] + dp[row][column-1]\n                     \n        return dp[-1][-1]",
      "title": "Unique Paths II",
      "url": "/submissions/detail/1015904071/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691517490,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111110111101001011100100001000111111",
      "flag_type": 1
    },
    {
      "id": 1015903304,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 63,
      "title_slug": "unique-paths-ii",
      "code": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u003e int:\n        row_count = len(obstacleGrid)\n        column_count = len(obstacleGrid[0])\n        if row_count == 1 and column_count == 1:\n            return 0\n        \n        dp = [[0] * column_count for _ in range(row_count)]\n        dp[0][0] = 1\n\n        for column in range(1, column_count):\n            if obstacleGrid[0][column] == 1:\n                continue\n            dp[0][column] = dp[0][column-1]\n\n        for row in range(1, row_count):\n            dp[row][0] = dp[row-1][0]\n\n            for column in range(1, column_count):\n                if obstacleGrid[row][column] == 1:\n                    continue\n                \n                dp[row][column] = dp[row-1][column] + dp[row][column-1]\n                     \n        return dp[-1][-1]",
      "title": "Unique Paths II",
      "url": "/submissions/detail/1015903304/",
      "lang_name": "Python3",
      "time": "5 months, 4 weeks",
      "timestamp": 1691517443,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11101110110001100001011100000001000111111",
      "flag_type": 1
    },
    {
      "id": 1022943534,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 239,
      "title_slug": "sliding-window-maximum",
      "code": "import sortedcontainers\n\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -\u003e List[int]:\n        nums_count = len(nums)\n        if nums_count \u003c= k:\n            return [sum(nums)]\n\n        result = [max(nums[:k])]\n        counter = defaultdict(int)\n        elems = sortedcontainers.SortedSet()\n        \n        for num in nums[:k]:\n            counter[num] += 1\n            elems.add(num)\n        \n        for i in range(k, nums_count):\n            new_num = nums[i]\n            remove_num = nums[i-k]\n            \n            if counter[remove_num] \u003e 1:\n                counter[remove_num] -= 1\n            else:\n                elems.discard(remove_num)\n\n            counter[new_num] += 1\n            elems.add(new_num)\n\n            result.append(elems[-1])\n\n        return result",
      "title": "Sliding Window Maximum",
      "url": "/submissions/detail/1022943534/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1692185420,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111001110111111110111111111111110111011111010001011",
      "flag_type": 1
    },
    {
      "id": 1022833447,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 239,
      "title_slug": "sliding-window-maximum",
      "code": "class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -\u003e List[int]:\n        nums_count = len(nums)\n        if nums_count \u003c= k:\n            return [sum(nums)]\n\n        result = [max(nums[:k])]\n        counter = {}\n        \n        for num in nums[:k]:\n            if num not in counter:\n                counter[num] = 0\n            counter[num] += 1\n        \n        for i in range(k, nums_count):\n            new_num = nums[i]\n            remove_num = nums[i-k]\n            \n            if counter[remove_num] \u003e 1:\n                counter[remove_num] -= 1\n            else:\n                counter.pop(remove_num)\n\n            if new_num in counter:\n                counter[new_num] += 1\n            else:\n                counter[new_num] = 1\n            \n            result.append(max(counter.keys()))\n\n        return result",
      "title": "Sliding Window Maximum",
      "url": "/submissions/detail/1022833447/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1692175410,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111001110111111111111111111111111111111000000000000",
      "flag_type": 1
    },
    {
      "id": 1022829356,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 239,
      "title_slug": "sliding-window-maximum",
      "code": "class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -\u003e List[int]:\n        nums_count = len(nums)\n        if nums_count \u003c= k:\n            return [sum(nums)]\n\n        result = [max(nums[:k])]\n        counter = defaultdict(int)\n        \n        for num in nums[:k]:\n            counter[num] += 1\n        \n        for i in range(k, nums_count):\n            new_num = nums[i]\n            remove_num = nums[i-k]\n            remove_num_count = counter[remove_num]\n            counter[remove_num] = 0 if remove_num_count \u003c 1 else remove_num_count - 1\n            counter[new_num] += 1\n            result.append(max(counter.keys()))\n\n        return result",
      "title": "Sliding Window Maximum",
      "url": "/submissions/detail/1022829356/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1692175005,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110000010101000010011000001101100010010000000000000",
      "flag_type": 1
    },
    {
      "id": 1022117762,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 86,
      "title_slug": "partition-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -\u003e Optional[ListNode]:\n        before_head, after_head = ListNode(0), ListNode(0)\n        before_tail, after_tail = before_head, after_head\n        \n        while head: \n            if head.val \u003c x:\n                before_tail.next, before_tail = head, head\n            else:\n                after_tail.next, after_tail = head, head\n            head = head.next\n        \n        after_tail.next, before_tail.next = None, after_head.next\n        \n        return before_head.next",
      "title": "Partition List",
      "url": "/submissions/detail/1022117762/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1692108409,
      "status": 10,
      "runtime": "42 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1022117512,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 86,
      "title_slug": "partition-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -\u003e Optional[ListNode]:\n        before_head, after_head = ListNode(0), ListNode(0)\n        before_tail, after_tail = before, after\n        \n        while head: \n            if head.val \u003c x:\n                before_tail.next, before_tail = head, head\n            else:\n                after_tail.next, after_tail = head, head\n            head = head.next\n        \n        after_tail.next, before_tail.next = None, after_head.next\n        \n        return before_head.next",
      "title": "Partition List",
      "url": "/submissions/detail/1022117512/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1692108396,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1022114292,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 86,
      "title_slug": "partition-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -\u003e Optional[ListNode]:\n        first_left, last_left, first_right, last_right = None, None, None, None\n\n        while head:\n            is_left = head.val \u003c x\n            is_right = not is_left\n            next_node = head.next\n            head.next = first_right if is_left else None\n            \n            if is_left and last_left:\n                last_left.next = head\n                last_left = head\n            elif is_left and not first_left:\n                first_left, last_left = head, head\n\n            if is_right and first_right:\n                last_right.next = head\n                last_right = head\n            elif is_right and not first_right:\n                first_right, last_right = head, head\n                if last_left:\n                    last_left.next = head\n\n            head = next_node\n\n        return first_left if first_left else first_right",
      "title": "Partition List",
      "url": "/submissions/detail/1022114292/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1692108168,
      "status": 10,
      "runtime": "52 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1020914435,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 215,
      "title_slug": "kth-largest-element-in-an-array",
      "code": "class Solution:\n    def findKthLargest(self, nums, k):\n        heap = []\n        for num in nums:\n            heapq.heappush(heap, num)\n            if len(heap) \u003e k:\n                heapq.heappop(heap)\n        \n        return heap[0]",
      "title": "Kth Largest Element in an Array",
      "url": "/submissions/detail/1020914435/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1692001059,
      "status": 10,
      "runtime": "476 ms",
      "is_pending": "Not Pending",
      "memory": "29.4 MB",
      "compare_result": "1111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1020320273,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2443,
      "title_slug": "check-if-there-is-a-valid-partition-for-the-array",
      "code": "class Solution:\n    def validPartition(self, nums: List[int]) -\u003e bool:\n        n = len(nums)\n        dp = [True] + [False] * n\n\n        # Determine if the prefix array nums[0 ~ i] has a valid partition\n        for i in range(n):\n            dp_index = i + 1\n\n            # Check 3 possibilities\n            if i \u003e 0 and nums[i] == nums[i - 1]:\n                dp[dp_index] |= dp[dp_index - 2]\n            if i \u003e 1 and nums[i] == nums[i - 1] == nums[i - 2]:\n                dp[dp_index] |= dp[dp_index - 3]\n            if i \u003e 1 and nums[i] == nums[i - 1] + 1 == nums[i - 2] + 2:\n                dp[dp_index] |= dp[dp_index - 3]\n \n        return dp[n]",
      "title": "Check if There is a Valid Partition For The Array",
      "url": "/submissions/detail/1020320273/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691940913,
      "status": 10,
      "runtime": "907 ms",
      "is_pending": "Not Pending",
      "memory": "30.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1019347913,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 63,
      "title_slug": "unique-paths-ii",
      "code": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u003e int:\n        row_count = len(obstacleGrid)\n        column_count = len(obstacleGrid[0])\n        \n        if obstacleGrid[0][0] == 1 or obstacleGrid[-1][-1] == 1:\n            return 0\n\n        dp = [[0] * column_count for _ in range(row_count)]\n        dp[0][0] = 1\n\n        for column in range(1, column_count):\n            if obstacleGrid[0][column] == 1:\n                break\n\n            dp[0][column] = dp[0][column-1]\n\n        for row in range(1, row_count):\n            if obstacleGrid[row][0] == 0:\n                dp[row][0] = dp[row-1][0]\n\n            for column in range(1, column_count):\n                if obstacleGrid[row][column] == 1:\n                    continue\n                \n                dp[row][column] = dp[row-1][column] + dp[row][column-1]\n                     \n        return dp[-1][-1]",
      "title": "Unique Paths II",
      "url": "/submissions/detail/1019347913/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691851840,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1018504399,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 15,
      "title_slug": "3sum",
      "code": "class Solution:\n    def threeSum(self, nums: List[int]) -\u003e List[List[int]]:\n        result = set()\n\n        #1. Split nums into three lists: negative numbers, positive numbers, and zeros\n        negatives, positives, zeros = [], [], []\n        for num in nums:\n            if num \u003e 0:\n                positives.append(num)\n            elif num \u003c 0: \n                negatives.append(num)\n            else:\n                zeros.append(num)\n\n        #2. Create a separate set for negatives and positives for O(1) look-up times\n        negatives_count, positives_count, zeros_count = len(negatives), len(positives), len(zeros)\n        negatives_set, positives_set = set(negatives), set(positives)\n\n        #3. If there is at least 1 zero in the list, add all cases where -num exists in N and num exists in P\n        #   i.e. (-3, 0, 3) = 0\n        for num in positives_set if zeros else []:\n            negative = -1 * num\n            if negative in negatives_set:\n                result.add((negative, 0, num))\n\n        #3. If there are at least 3 zeros in the list then also include (0, 0, 0) = 0\n        if zeros_count \u003e= 3:\n            result.add((0, 0, 0))\n\n        #4. For all pairs of negative numbers (-3, -1), check to see if their complement (4)\n        #   exists in the positive number set\n        for i in range(negatives_count):\n            negative_1 = negatives[i]\n            for j in range(i + 1, negatives_count):\n                negative_2 = negatives[j]\n                target = -1 * (negative_1 + negative_2)\n                if target in positives_set:\n                    result.add(tuple(sorted([negative_1, negative_2, target])))\n\n        #5. For all pairs of positive numbers (1, 1), check to see if their complement (-2)\n        #   exists in the negative number set\n        for i in range(positives_count):\n            positive_1 = positives[i]\n            for j in range(i + 1, positives_count):\n                positive_2 = positives[j]\n                target = -1 * (positive_1 + positive_2)\n                if target in negatives_set:\n                    result.add(tuple(sorted([positive_1, positive_2, target])))\n\n        return result",
      "title": "3Sum",
      "url": "/submissions/detail/1018504399/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691765526,
      "status": 10,
      "runtime": "602 ms",
      "is_pending": "Not Pending",
      "memory": "20.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1018502437,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 15,
      "title_slug": "3sum",
      "code": "def threeSum(self, nums: List[int]) -\u003e List[List[int]]:\n\n\tresult = set()\n\n\t#1. Split nums into three lists: negative numbers, positive numbers, and zeros\n\tnegatives, positives, zeros = [], [], []\n\t\n    for num in nums:\n        if num \u003e 0:\n            positives.append(num)\n        elif num \u003c 0: \n            negatives.append(num)\n        else:\n            zeros.append(num)\n\n\t#2. Create a separate set for negatives and positives for O(1) look-up times\n\t\n    negatives_count, positives_count, zeros_count = len(negatives), len(positives), len(zeros)\n    negatives_set, positives_set = set(negatives), set(positives)\n\n\t#3. If there is at least 1 zero in the list, add all cases where -num exists in N and num exists in P\n\t#   i.e. (-3, 0, 3) = 0\n\tfor num in positives_set if zeros else []:\n        negative = -1 * num\n        if negative in negatives_set:\n            result.add((negative, 0, num))\n\n\t#3. If there are at least 3 zeros in the list then also include (0, 0, 0) = 0\n\tif zeros_count \u003e= 3:\n\t\tresult.add((0, 0, 0))\n\n\t#4. For all pairs of negative numbers (-3, -1), check to see if their complement (4)\n\t#   exists in the positive number set\n\tfor i in range(negatives_count):\n        negative_1 = negatives[i]\n\t\tfor j in range(i + 1, negatives_count):\n\t\t\tnegative_2 = negatives[j]\n            target = -1 * (negative_1 + negative_2)\n\t\t\tif target in positives_set:\n\t\t\t\tresult.add(tuple(sorted([negative_1, negative_2, target])))\n\n\t#5. For all pairs of positive numbers (1, 1), check to see if their complement (-2)\n\t#   exists in the negative number set\n\tfor i in range(positives_count):\n\t\tpositive_1 = positives[i]\n        for j in range(i + 1, positives_count):\n            positive_2 = positives[j]\n\t\t\ttarget = -1 * (positive_1 + positive_2)\n\t\t\tif target in negatives_set:\n\t\t\t\tresult.add(tuple(sorted([positive_1, positive_2, target])))\n\n\treturn result",
      "title": "3Sum",
      "url": "/submissions/detail/1018502437/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691765363,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1018502081,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 15,
      "title_slug": "3sum",
      "code": "def threeSum(self, nums: List[int]) -\u003e List[List[int]]:\n\n\tresult = set()\n\n\t#1. Split nums into three lists: negative numbers, positive numbers, and zeros\n\tnegatives, positives, zeros = [], [], []\n\t\n    for num in nums:\n\t\tif num \u003e 0:\n\t\t\tpositives.append(num)\n\t\telif num \u003c 0: \n\t\t\tnegatives.append(num)\n\t\telse:\n\t\t\tzeros.append(num)\n\n\t#2. Create a separate set for negatives and positives for O(1) look-up times\n\t\n    negatives_count, positives_count, zeros_count = len(negatives), len(positives), len(zeros)\n    negatives_set, positives_set = set(negatives), set(positives)\n\n\t#3. If there is at least 1 zero in the list, add all cases where -num exists in N and num exists in P\n\t#   i.e. (-3, 0, 3) = 0\n\tfor num in positives_set if zeros else []:\n        negative = -1 * num\n        if negative in negatives_set:\n            result.add((negative, 0, num))\n\n\t#3. If there are at least 3 zeros in the list then also include (0, 0, 0) = 0\n\tif zeros_count \u003e= 3:\n\t\tresult.add((0, 0, 0))\n\n\t#4. For all pairs of negative numbers (-3, -1), check to see if their complement (4)\n\t#   exists in the positive number set\n\tfor i in range(negatives_count):\n        negative_1 = negatives[i]\n\t\tfor j in range(i + 1, negatives_count):\n\t\t\tnegative_2 = negatives[j]\n            target = -1 * (negative_1 + negative_2)\n\t\t\tif target in positives_set:\n\t\t\t\tresult.add(tuple(sorted([negative_1, negative_2, target])))\n\n\t#5. For all pairs of positive numbers (1, 1), check to see if their complement (-2)\n\t#   exists in the negative number set\n\tfor i in range(positives_count):\n\t\tpositive_1 = positives[i]\n        for j in range(i + 1, positives_count):\n            positive_2 = positives[j]\n\t\t\ttarget = -1 * (positive_1 + positive_2)\n\t\t\tif target in negatives_set:\n\t\t\t\tresult.add(tuple(sorted([positive_1, positive_2, target])))\n\n\treturn result",
      "title": "3Sum",
      "url": "/submissions/detail/1018502081/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691765336,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1018287507,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 238,
      "title_slug": "product-of-array-except-self",
      "code": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -\u003e List[int]:\n        nums_count = len(nums)\n        result = [1] * nums_count\n        prefix = 1\n        postfix = 1\n        for i in range(nums_count):\n            result[i] *= prefix\n            prefix *= nums[i]\n\n            from_end = -1 * (i + 1)\n            result[from_end] *= postfix\n            postfix *= nums[from_end]\n        \n        return result",
      "title": "Product of Array Except Self",
      "url": "/submissions/detail/1018287507/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691744733,
      "status": 10,
      "runtime": "198 ms",
      "is_pending": "Not Pending",
      "memory": "24.1 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1018285235,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 238,
      "title_slug": "product-of-array-except-self",
      "code": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -\u003e List[int]:\n        nums_count = len(nums)\n        result = [1] * nums_count\n        prefix = 1\n        postfix = 1\n        for i in range(nums_count):\n            result[i] *= prefix\n            prefix *= nums[i]\n            result[nums_count-i-1] *= postfix\n            postfix *= nums[nums_count-i-1]\n        \n        return result",
      "title": "Product of Array Except Self",
      "url": "/submissions/detail/1018285235/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691744509,
      "status": 10,
      "runtime": "199 ms",
      "is_pending": "Not Pending",
      "memory": "24.2 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1018268771,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 238,
      "title_slug": "product-of-array-except-self",
      "code": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -\u003e List[int]:\n\n        \n        nums_count = len(nums)\n        result = [1] * nums_count\n\n        for i in range(nums_count):\n            for j in range(nums_count):\n                if j == i:\n                    continue\n                result[i] *= nums[j]\n        \n        return result\n                ",
      "title": "Product of Array Except Self",
      "url": "/submissions/detail/1018268771/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691742822,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111110000",
      "flag_type": 1
    },
    {
      "id": 1018260045,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 518,
      "title_slug": "coin-change-ii",
      "code": "class Solution:\n    def change(self, amount: int, coins: List[int]) -\u003e int:\n        n = len(coins)\n        dp = [[0] * (amount + 1) for _ in range(n + 1)]\n        for i in range(n):\n            dp[i][0] = 1\n\n        for i in range(n - 1, -1, -1):\n            for j in range(1, amount + 1):\n                if coins[i] \u003e j:\n                    dp[i][j] = dp[i + 1][j]\n                else:\n                    dp[i][j] = dp[i + 1][j] + dp[i][j - coins[i]]\n\n        return dp[0][amount]",
      "title": "Coin Change II",
      "url": "/submissions/detail/1018260045/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691741854,
      "status": 10,
      "runtime": "270 ms",
      "is_pending": "Not Pending",
      "memory": "25.9 MB",
      "compare_result": "1111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1018259444,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 518,
      "title_slug": "coin-change-ii",
      "code": "class Solution:\n    def change(self, amount: int, coins: List[int]) -\u003e int:\n        coins_count = len(coins)\n        memo = [[-1] * (amount + 1) for _ in range(coins_count)]\n        \n        def dp(i: int, amount: int) -\u003e int:\n            if amount == 0:\n                return 1\n            if i == coins_count:\n                return 0\n            if memo[i][amount] != -1:\n                return memo[i][amount]\n\n            diff = amount - coins[i]\n            value = dp(i + 1, amount) + dp(i, diff) if diff \u003e= 0 else 0\n            memo[i][amount] = value\n            return value\n\n        return dp(0, amount)",
      "title": "Coin Change II",
      "url": "/submissions/detail/1018259444/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691741785,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111110111111101111011",
      "flag_type": 1
    },
    {
      "id": 1018258984,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 518,
      "title_slug": "coin-change-ii",
      "code": "class Solution:\n    def change(self, amount: int, coins: List[int]) -\u003e int:\n        coins_count = len(coins)\n        \n        @cache\n        def dp(i: int, amount: int) -\u003e int:\n            if amount == 0:\n                return 1\n            if i == coins_count:\n                return 0\n\n            diff = amount - coins[i]\n            return dp(i + 1, amount) + dp(i, diff) if diff \u003e= 0 else 0\n\n        return dp(0, amount)",
      "title": "Coin Change II",
      "url": "/submissions/detail/1018258984/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691741730,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111110111111101111011",
      "flag_type": 1
    },
    {
      "id": 1018258919,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 518,
      "title_slug": "coin-change-ii",
      "code": "class Solution:\n    def change(self, amount: int, coins: List[int]) -\u003e int:\n        coins_count = len(coins)\n        \n        @ccache\n        def dp(i: int, amount: int) -\u003e int:\n            if amount == 0:\n                return 1\n            if i == coins_count:\n                return 0\n\n            diff = amount - coins[i]\n            return dp(i + 1, amount) + dp(i, diff) if diff \u003e= 0 else 0\n\n        return dp(0, amount)",
      "title": "Coin Change II",
      "url": "/submissions/detail/1018258919/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691741723,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1018257389,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 518,
      "title_slug": "coin-change-ii",
      "code": "class Solution:\n    def change(self, amount: int, coins: List[int]) -\u003e int:\n        coins_count = len(coins)\n        memo = [[-1] * (amount + 1) for _ in range(coins_count)]\n        \n        def dp(i: int, amount: int) -\u003e int:\n            if amount == 0:\n                return 1\n            if i == coins_count:\n                return 0\n            if memo[i][amount] != -1:\n                return memo[i][amount]\n\n            value = None\n\n            if coins[i] \u003e amount:\n                value = dp(i + 1, amount)\n            else:\n                value = dp(i, amount - coins[i]) + dp(i + 1, amount)\n\n            memo[i][amount] = value\n            return value\n\n        return dp(0, amount)",
      "title": "Coin Change II",
      "url": "/submissions/detail/1018257389/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1691741550,
      "status": 10,
      "runtime": "331 ms",
      "is_pending": "Not Pending",
      "memory": "40.6 MB",
      "compare_result": "1111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1028015561,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 54,
      "title_slug": "spiral-matrix",
      "code": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -\u003e List[int]:\n        row_count, col_count = len(matrix), len(matrix[0])\n        if row_count == 1:\n            return matrix[0]\n        if col_count == 1:\n            return [row[0] for row in matrix]\n\n\n        result = []\n        top, bot, left, right = 0, row_count - 1, 0, col_count - 1\n        capacity = row_count * col_count\n\n        while len(result) \u003c capacity:\n            result.extend(matrix[top][left:right+1])\n            top += 1\n\n            for row in range(top, bot + 1):\n                result.append(matrix[row][right])\n            right -= 1\n\n            if top \u003c= bot:\n                result.extend(matrix[bot][right:left-1:-1])\n                bot -= 1\n            \n            if left \u003c= right:\n                for row in range(bot, top - 1, -1):\n                    result.append(matrix[row][left])\n                    left += 1\n\n        return result",
      "title": "Spiral Matrix",
      "url": "/submissions/detail/1028015561/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692650164,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1028015445,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 54,
      "title_slug": "spiral-matrix",
      "code": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -\u003e List[int]:\n        row_count, col_count = len(matrix), len(matrix[0])\n        if row_count == 1:\n            return matrix[0]\n        if col_count == 1:\n            return [row[0] for row in matrix]\n\n\n        result = []\n        top, bot, left, right = 0, row_count - 1, 0, col_count - 1\n        capacity = row_count * col_count\n\n        while len(result) \u003c capacity:\n            result.extend(matrix[top][left:right+1])\n            top += 1\n\n            for row in range(top, bot + 1):\n                result.append(matrix[row][right])\n            right -= 1\n\n            if top \u003c= bot:\n                result.extend(matrix[bot][right:left-1:-1])\n                bottom -= 1\n            \n            if left \u003c= right:\n                for row in range(bot, top - 1, -1):\n                    result.append(matrix[row][left])\n                    left += 1\n\n        return result",
      "title": "Spiral Matrix",
      "url": "/submissions/detail/1028015445/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692650156,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1028015239,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 54,
      "title_slug": "spiral-matrix",
      "code": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -\u003e List[int]:\n        row_count, col_count = len(matrix), len(matrix[0])\n        if row_count == 1:\n            return matrix[0]\n        if col_count == 1:\n            return [row[0] for row in matrix]\n\n\n        result = []\n        top, bot, left, right = 0, row_count - 1, 0, col_count - 1\n        capacity = row_count * col_count\n\n        while len(result) \u003c capacity:\n            result.extend(matrix[top][left:right+1])\n            top += 1\n\n            for row in range(top, bottom + 1):\n                result.append(matrix[row][right])\n            right -= 1\n\n            if top \u003c= bottom:\n                result.extend(matrix[bottom][right:left-1:-1])\n                bottom -= 1\n            \n            if left \u003c= right:\n                for row in range(bottom, top - 1, -1):\n                    result.append(matrix[row][left])\n                    left += 1\n\n        return result",
      "title": "Spiral Matrix",
      "url": "/submissions/detail/1028015239/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692650134,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1027896199,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 36,
      "title_slug": "valid-sudoku",
      "code": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -\u003e bool:\n        row_count, column_count = 9, 9\n        row_counters = [defaultdict(bool) for _ in range(row_count)]\n        column_counters = [defaultdict(bool) for _ in range(column_count)]\n        subbox_counters = [[defaultdict(bool) for _ in range(column_count//3)] \n                            for _ in range(row_count//3)]\n\n        for row in range(row_count):\n            for column in range(column_count):\n                char = board[row][column]\n                if char == \".\":\n                    continue\n\n                counters = (\n                    row_counters[row], column_counters[column], \n                    subbox_counters[row//3][column//3]\n                )\n                for counter in counters:\n                    if counter[char]:\n                        return False\n\n                    counter[char] = True\n        \n        return True\n\n        ",
      "title": "Valid Sudoku",
      "url": "/submissions/detail/1027896199/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692641328,
      "status": 10,
      "runtime": "106 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1027895506,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 36,
      "title_slug": "valid-sudoku",
      "code": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -\u003e bool:\n        row_count, column_count = 9, 9\n\n        \n\n        row_counters = [defaultdict(bool) for _ in range(row_count)]\n        column_counters = [defaultdict(bool) for _ in range(column_count)]\n        subbox_counters = [[defaultdict(bool) for _ in range(column_count//3)] \n                            for _ in range(row_count//3)]\n\n        for row in range(row_count):\n            for column in range(column_count):\n                char = board[row][column]\n                if char == \".\":\n                    continue\n\n                counters = (\n                    row_counters[row], column_counters[column], \n                    subbox_counters[row//3][column//3]\n                )\n                for counter in counters:\n                    if counter[char]:\n                        return False\n\n                    counter[char] = True\n        \n        return True\n\n        ",
      "title": "Valid Sudoku",
      "url": "/submissions/detail/1027895506/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692641290,
      "status": 10,
      "runtime": "110 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1027362193,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 459,
      "title_slug": "repeated-substring-pattern",
      "code": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -\u003e bool:\n        length = len(s)\n        for i in range(1, length // 2 + 1):\n            if length % i != 0:\n                continue\n            \n            if s == s[:i] * (length // i):\n                return True\n        \n        return False",
      "title": "Repeated Substring Pattern",
      "url": "/submissions/detail/1027362193/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692599394,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1026672462,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1309,
      "title_slug": "sort-items-by-groups-respecting-dependencies",
      "code": "class Solution:\n    def sortItems(self, n, m, group, beforeItems):\n        # If an item belongs to zero group, assign it a unique group id.\n        group_id = m\n        for i in range(n):\n            if group[i] == -1:\n                group[i] = group_id\n                group_id += 1\n        \n        # Sort all item regardless of group dependencies.\n        item_graph = [[] for _ in range(n)]\n        item_indegree = [0] * n\n        \n        # Sort all groups regardless of item dependencies.\n        group_graph = [[] for _ in range(group_id)]\n        group_indegree = [0] * group_id      \n        \n        for curr in range(n):\n            for prev in beforeItems[curr]:\n                # Each (prev -\u003e curr) represents an edge in the item graph.\n                item_graph[prev].append(curr)\n                item_indegree[curr] += 1\n                \n                # If they belong to different groups, add an edge in the group graph.\n                if group[curr] != group[prev]:\n                    group_graph[group[prev]].append(group[curr])\n                    group_indegree[group[curr]] += 1      \n        \n        # Tologlogical sort nodes in graph, return [] if a cycle exists.\n        def topologicalSort(graph, indegree):\n            visited = []\n            stack = [node for node in range(len(graph)) if indegree[node] == 0]\n            while stack:\n                cur = stack.pop()\n                visited.append(cur)\n                for neib in graph[cur]:\n                    indegree[neib] -= 1\n                    if indegree[neib] == 0:\n                        stack.append(neib)\n            return visited if len(visited) == len(graph) else []\n\n        item_order = topologicalSort(item_graph, item_indegree)\n        group_order = topologicalSort(group_graph, group_indegree)\n        \n        if not item_order or not group_order: \n            return []\n        \n        # Items are sorted regardless of groups, we need to \n        # differentiate them by the groups they belong to.\n        ordered_groups = collections.defaultdict(list)\n        for item in item_order:\n            ordered_groups[group[item]].append(item)\n        \n        # Concatenate sorted items in all sorted groups.\n        # [group 1, group 2, ... ] -\u003e [(item 1, item 2, ...), (item 1, item 2, ...), ...]\n        answer = []\n        for group_index in group_order:\n            answer += ordered_groups[group_index]\n        return answer",
      "title": "Sort Items by Groups Respecting Dependencies",
      "url": "/submissions/detail/1026672462/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692531281,
      "status": 10,
      "runtime": "352 ms",
      "is_pending": "Not Pending",
      "memory": "35.6 MB",
      "compare_result": "11111111111111111",
      "flag_type": 1
    },
    {
      "id": 1025915689,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 3017,
      "title_slug": "number-of-beautiful-integers-in-the-range",
      "code": "class Solution:\n    def numberOfBeautifulIntegers(self, low: int, high: int, k: int) -\u003e int:\n        count = 0\n        for num in range(low, high + 1):\n            if num % k != 0:\n                continue\n                \n            even = 0\n            while num:\n                even += 1 if (num % 10) in (0,2,4,6,8) else -1\n                num //= 10\n            \n            if even == 0:\n                count += 1\n        \n        return count",
      "title": "Number of Beautiful Integers in the Range",
      "url": "/submissions/detail/1025915689/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692460889,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1025910600,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 3017,
      "title_slug": "number-of-beautiful-integers-in-the-range",
      "code": "class Solution:\n    def numberOfBeautifulIntegers(self, low: int, high: int, k: int) -\u003e int:\n        count = 0\n        for num in range(low, high + 1):\n            if num % k != 0:\n                continue\n                \n            even = 0\n            while num:\n                even += 1 if (num % 10) % 2 == 0 else -1\n                num //= 10\n            \n            if even == 0:\n                count += 1\n        \n        return count",
      "title": "Number of Beautiful Integers in the Range",
      "url": "/submissions/detail/1025910600/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692460690,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1025903227,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 3017,
      "title_slug": "number-of-beautiful-integers-in-the-range",
      "code": "class Solution:\n    def numberOfBeautifulIntegers(self, low: int, high: int, k: int) -\u003e int:\n        count = 0\n        for num in range(low, high + 1):\n            if num % k != 0:\n                continue\n                \n            even = 0\n            for digit in str(num):\n                even += 1 if int(digit) % 2 == 0 else -1\n            \n            if even == 0:\n                count += 1\n        \n        return count",
      "title": "Number of Beautiful Integers in the Range",
      "url": "/submissions/detail/1025903227/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692460387,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1025896271,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2904,
      "title_slug": "sorting-three-groups",
      "code": "class Solution:\n    def minimumOperations(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n        \n        if nums_count == 1:\n            return 0\n            \n        @cache\n        def dp(i: int, start_group: int) -\u003e int:\n            if i == nums_count:\n                return 0\n            \n            curr_group = nums[i] - 1\n            actions_min = None\n            \n            for group_available in range(start_group, 3):\n                actions = dp(i + 1, group_available) + (0 if group_available == curr_group else 1)\n                if actions_min is None or actions \u003c actions_min:\n                    actions_min = actions\n            \n            return actions_min\n        \n        return dp(0, 0)",
      "title": "Sorting Three Groups",
      "url": "/submissions/detail/1025896271/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692460101,
      "status": 10,
      "runtime": "286 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1025840714,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 3018,
      "title_slug": "make-string-a-subsequence-using-cyclic-increments",
      "code": "class Solution:\n    def canMakeSubsequence(self, str1: str, str2: str) -\u003e bool:\n        length1, length2 = len(str1), len(str2)\n        \n        for i in range(length1):\n            if i + length2 \u003e length1:\n                break\n            \n            idx2 = 0\n            for idx1 in range(i, length1):\n                if ord(str2[idx2]) - ord(str1[idx1]) in (0, 1, -25):\n                    idx2 += 1\n                \n                if idx2 == length2:\n                    return True\n            \n            \n        return False",
      "title": "Make String a Subsequence Using Cyclic Increments",
      "url": "/submissions/detail/1025840714/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692457999,
      "status": 10,
      "runtime": "110 ms",
      "is_pending": "Not Pending",
      "memory": "17.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1025836294,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 3018,
      "title_slug": "make-string-a-subsequence-using-cyclic-increments",
      "code": "class Solution:\n    def canMakeSubsequence(self, str1: str, str2: str) -\u003e bool:\n        length1, length2 = len(str1), len(str2)\n        \n        for i in range(length1):\n            if i + length2 \u003e length1:\n                break\n            \n            str2_i = 0\n            for j in range(i, length1):\n                if ord(str2[str2_i]) - ord(str1[j]) in (0, 1, -25):\n                    str2_i += 1\n                    continue\n            \n            if str2_i == length2:\n                return True\n            \n        return False",
      "title": "Make String a Subsequence Using Cyclic Increments",
      "url": "/submissions/detail/1025836294/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692457849,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1025770416,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2917,
      "title_slug": "count-pairs-whose-sum-is-less-than-target",
      "code": "class Solution:\n    def countPairs(self, nums: List[int], target: int) -\u003e int:\n        pairs_count = 0\n        nums_count = len(nums)\n        for i in range(nums_count): \n            num1 = nums[i]\n            for j in range(i + 1, nums_count):\n                if num1 + nums[j] \u003c target:\n                    pairs_count += 1\n        \n        return pairs_count",
      "title": "Count Pairs Whose Sum is Less than Target",
      "url": "/submissions/detail/1025770416/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692455810,
      "status": 10,
      "runtime": "50 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1025739989,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1613,
      "title_slug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
      "code": "class Solution:\n\n    class UnionFind:\n        def __init__(self, n):\n            self.parent = list(range(n))\n            self.size = [1] * n\n            self.max_size = 1\n\n        def find(self, x):\n            # Finds the root of x\n            if x != self.parent[x]:\n                self.parent[x] = self.find(self.parent[x])\n            return self.parent[x]\n\n        def union(self, x, y):\n            # Connects x and y\n            root_x = self.find(x)\n            root_y = self.find(y)\n            if root_x != root_y:\n                if self.size[root_x] \u003c self.size[root_y]:\n                    root_x, root_y = root_y, root_x\n                self.parent[root_y] = root_x\n                self.size[root_x] += self.size[root_y]\n                self.max_size = max(self.max_size, self.size[root_x])\n                return True\n            return False\n\n    def findCriticalAndPseudoCriticalEdges(self, n, edges):\n        new_edges = [edge.copy() for edge in edges]\n        # Add index to edges for tracking\n        for i, edge in enumerate(new_edges):\n            edge.append(i)\n        # Sort edges based on weight\n        new_edges.sort(key=lambda x: x[2])\n\n        # Find MST weight using union-find\n        uf_std = self.UnionFind(n)\n        std_weight = 0\n        for u, v, w, _ in new_edges:\n            if uf_std.union(u, v):\n                std_weight += w\n\n        # Check each edge for critical and pseudo-critical\n        critical = []\n        pseudo_critical = []\n        for (u, v, w, i) in new_edges:\n            # Ignore this edge and calculate MST weight\n            uf_ignore = self.UnionFind(n)\n            ignore_weight = 0\n            for (x, y, w_ignore, j) in new_edges:\n                if i != j and uf_ignore.union(x, y):\n                    ignore_weight += w_ignore\n            # If the graph is disconnected or the total weight is greater,\n            # the edge is critical\n            if uf_ignore.max_size \u003c n or ignore_weight \u003e std_weight:\n                critical.append(i)\n                continue\n\n            # Force this edge and calculate MST weight\n            uf_force = self.UnionFind(n)\n            force_weight = w\n            uf_force.union(u, v)\n            for (x, y, w_force, j) in new_edges:\n                if i != j and uf_force.union(x, y):\n                    force_weight += w_force\n            # If total weight is the same, the edge is pseudo-critical\n            if force_weight == std_weight:\n                pseudo_critical.append(i)\n\n        return [critical, pseudo_critical]",
      "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
      "url": "/submissions/detail/1025739989/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692454418,
      "status": 10,
      "runtime": "1147 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1024664738,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1738,
      "title_slug": "maximal-network-rank",
      "code": "class Solution:\n    def maximalNetworkRank(self, n: int, roads: List[List[int]]) -\u003e int:\n        city_roads = [set() for _ in range(n)]\n\n        for city_one, city_two in roads:\n            city_roads[city_one].add(city_two)\n            city_roads[city_two].add(city_one)\n        \n        max_rank = 0\n\n        for city_one in range(n):\n            for city_two in range(city_one + 1, n):\n                rank = len(city_roads[city_one]) + len(city_roads[city_two])\n                if city_one in city_roads[city_two]:\n                    rank -= 1\n                \n                if rank \u003e max_rank:\n                    max_rank = rank\n        \n        return max_rank",
      "title": "Maximal Network Rank",
      "url": "/submissions/detail/1024664738/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692345152,
      "status": 10,
      "runtime": "292 ms",
      "is_pending": "Not Pending",
      "memory": "18.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1023985105,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 542,
      "title_slug": "01-matrix",
      "code": "class Solution:\n    def updateMatrix(self, mat: List[List[int]]) -\u003e List[List[int]]:\n        if not mat or not mat[0]:\n            return []\n\n        row_count, column_count = len(mat), len(mat[0])\n        queue = set()\n        MAX_VALUE = row_count * column_count\n        \n        # Initialize the queue with all 0s and set cells with 1s to MAX_VALUE.\n        for row in range(row_count):\n            for column in range(column_count):\n                if mat[row][column] == 0:\n                    queue.add((row, column))\n                else:\n                    mat[row][column] = MAX_VALUE\n        \n        directions = ((1, 0), (-1, 0), (0, 1), (0, -1))\n        \n        while queue:\n            center_row, center_column = queue.pop()\n            distance_from_center = mat[center_row][center_column] + 1\n\n            for delta_row, delta_column in directions:\n                new_row, new_column = center_row + delta_row, center_column + delta_column\n                if not 0 \u003c= new_row \u003c row_count or not 0 \u003c= new_column \u003c column_count:\n                    continue\n    \n                if mat[new_row][new_column] \u003e distance_from_center:\n                    queue.add((new_row, new_column))\n                    mat[new_row][new_column] = distance_from_center\n        \n        return mat",
      "title": "01 Matrix",
      "url": "/submissions/detail/1023985105/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1692280378,
      "status": 10,
      "runtime": "533 ms",
      "is_pending": "Not Pending",
      "memory": "19.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1023967521,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 542,
      "title_slug": "01-matrix",
      "code": "class Solution:\n    def updateMatrix(self, mat: List[List[int]]) -\u003e List[List[int]]:\n        row_count = len(mat)\n        column_count = len(mat[0])\n        max_distance = row_count + column_count + 1\n        invalid_rows, invalid_columns = (-1, row_count), (-1, column_count)\n\n        distances = [[-1] * column_count for _ in range(row_count)]\n        deltas = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n\n        for row in range(row_count):\n            for column in range(column_count):\n                if mat[row][column] != 0:\n                    continue\n\n                distances[row][column] = 0\n                for delta_row, delta_column in deltas:\n                    new_row, new_column = row + delta_row, column + delta_column\n                    if new_row in invalid_rows or new_column in invalid_columns:\n                        continue\n\n                    if mat[new_row][new_column] == 1 and distances[new_row][new_column] == -1:\n                        distances[new_row][new_column] = 1\n\n        def get_distance(row: int, column: int) -\u003e int:\n            if row in invalid_rows or column in invalid_columns:\n                return max_distance\n            \n            calculated = distances[row][column]\n            if calculated != -1:\n                return calculated\n            \n            min_distance = max_distance\n\n            for delta_row, delta_column in deltas:\n                new_distance = 1 + get_distance(row + delta_row, column + delta_column)\n                if new_distance \u003c min_distance:\n                    min_distance = new_distance\n            \n            distances[row][column] = min_distance\n            return min_distance\n\n        for row in range(row_count):\n            for column in range(column_count):\n                if distances[row][column] != -1:\n                    continue\n                \n                get_distance(row, column)\n        \n        return distances",
      "title": "01 Matrix",
      "url": "/submissions/detail/1023967521/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1692279033,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111100000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1022947511,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 239,
      "title_slug": "sliding-window-maximum",
      "code": "import sortedcontainers\n\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -\u003e List[int]:\n        nums_count = len(nums)\n        if nums_count \u003c= k:\n            return [max(nums)]\n\n        counter = defaultdict(int)\n        elems = sortedcontainers.SortedSet()\n        \n        for num in nums[:k]:\n            counter[num] += 1\n            elems.add(num)\n        \n        result = [elems[-1]]\n        \n        for i in range(k, nums_count):\n            new_num = nums[i]\n            remove_num = nums[i-k]\n\n            counter[new_num] += 1\n            elems.add(new_num)\n\n            counter[remove_num] -= 1\n            if counter[remove_num] == 0:\n                elems.discard(remove_num)\n\n            result.append(elems[-1])\n\n        return result",
      "title": "Sliding Window Maximum",
      "url": "/submissions/detail/1022947511/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1692185780,
      "status": 10,
      "runtime": "2438 ms",
      "is_pending": "Not Pending",
      "memory": "32.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1022945672,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 239,
      "title_slug": "sliding-window-maximum",
      "code": "import sortedcontainers\n\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -\u003e List[int]:\n        nums_count = len(nums)\n        if nums_count \u003c= k:\n            return [max(nums)]\n\n        counter = defaultdict(int)\n        elems = sortedcontainers.SortedSet()\n        \n        for num in nums[:k]:\n            counter[num] += 1\n            elems.add(num)\n        \n        result = [elems[-1]]\n        \n        for i in range(k, nums_count):\n            new_num = nums[i]\n            remove_num = nums[i-k]\n            \n            if counter[remove_num] \u003e 1:\n                counter[remove_num] -= 1\n            else:\n                elems.discard(remove_num)\n\n            counter[new_num] += 1\n            elems.add(new_num)\n\n            result.append(elems[-1])\n\n        return result",
      "title": "Sliding Window Maximum",
      "url": "/submissions/detail/1022945672/",
      "lang_name": "Python3",
      "time": "5 months, 3 weeks",
      "timestamp": 1692185613,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111110111111111111110111011111010001011",
      "flag_type": 1
    },
    {
      "id": 1030402945,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 68,
      "title_slug": "text-justification",
      "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -\u003e List[str]:\n        words_count = len(words)\n        \n        def get_line(word_idx: int) -\u003e Tuple[List[str], int]:\n            line = []\n            line_length = 0\n\n            for i in range(word_idx, words_count):\n                word = words[i]\n                word_length = len(word)\n                if line_length + word_length \u003e maxWidth:\n                    break\n\n                line.append(word)\n                line_length += word_length + 1 \n\n            return line, line_length\n        \n        def create_line(line: List[str], line_length: int, i: int) -\u003e str:\n            extra_spaces = maxWidth - base_length\n\n            if len(line) == 1 or i == words_count:\n                return \" \".join(line) + \" \" * extra_spaces\n\n            word_count = len(line) - 1\n            spaces_per_word = extra_spaces // word_count\n            needs_extra_space = extra_spaces % word_count\n\n            for j in range(needs_extra_space):\n                line[j] += \" \"\n\n            for j in range(word_count):\n                line[j] += \" \" * spaces_per_word\n\n            return \" \".join(line)\n\n        result = []\n        while i \u003c len(words_count):\n            line, line_length = get_line(i)\n            i += len(line)\n            result.append(create_line(line, line_length, i))\n\n        return result",
      "title": "Text Justification",
      "url": "/submissions/detail/1030402945/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692873748,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1030402822,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 68,
      "title_slug": "text-justification",
      "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -\u003e List[str]:\n        words_count = len(words)\n        \n        def get_line(word_idx: int) -\u003e Tuple[List[str], int]:\n            line = []\n            line_length = 0\n\n            for i in range(word_idx, words_count):\n                word = words[i]\n                word_length = len(word)\n                if line_length + word_length \u003e maxWidth:\n                    break\n\n                line.append(word)\n                line_length += word_length + 1 \n\n            return line, line_length\n        \n        def create_line(line: List[str], line_length: int, i: int) -\u003e str:\n            extra_spaces = maxWidth - base_length\n\n            if len(line) == 1 or i == words_count:\n                return \" \".join(line) + \" \" * extra_spaces\n\n            word_count = len(line) - 1\n            spaces_per_word = extra_spaces // word_count\n            needs_extra_space = extra_spaces % word_count\n\n            for j in range(needs_extra_space):\n                line[j] += \" \"\n\n            for j in range(word_count):\n                line[j] += \" \" * spaces_per_word\n\n            return \" \".join(line)\n\n        result = []\n        while i \u003c len(words_count):\n            line, line_length = get_line(i)\n            i += len(line)\n            result.append(create_line(line, line_length i))\n\n        return result",
      "title": "Text Justification",
      "url": "/submissions/detail/1030402822/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692873735,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1030402686,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 68,
      "title_slug": "text-justification",
      "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -\u003e List[str]:\n        words_count = len(words)\n        \n        def get_line(word_idx: int) -\u003e Tuple[List[str], int]:\n            line = []\n            line_length = 0\n\n            for i in range(word_idx, words_count):\n                word = words[i]\n                word_length = len(word)\n                if line_length + word_length \u003e maxWidth:\n                    break\n\n                line.append(word)\n                line_length += word_length + 1 \n\n            return line, line_length\n        \n        def create_line(line: List[str], line_length: int i: int) -\u003e str:\n            extra_spaces = maxWidth - base_length\n\n            if len(line) == 1 or i == words_count:\n                return \" \".join(line) + \" \" * extra_spaces\n\n            word_count = len(line) - 1\n            spaces_per_word = extra_spaces // word_count\n            needs_extra_space = extra_spaces % word_count\n\n            for j in range(needs_extra_space):\n                line[j] += \" \"\n\n            for j in range(word_count):\n                line[j] += \" \" * spaces_per_word\n\n            return \" \".join(line)\n\n        result = []\n        while i \u003c len(words_count):\n            line, line_length = get_line(i)\n            i += len(line)\n            result.append(create_line(line, line_length i))\n\n        return result",
      "title": "Text Justification",
      "url": "/submissions/detail/1030402686/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692873723,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1029908803,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 228,
      "title_slug": "summary-ranges",
      "code": "class Solution:\n    def summaryRanges(self, nums: List[int]) -\u003e List[str]:\n        nums_count = len(nums)\n        if nums_count == 0:\n            return []\n        if nums_count == 1:\n            return [str(nums[0])]\n\n        ranges = [[nums[0]] * 2]\n        for i, num in enumerate(nums[1:]):\n            if ranges[-1][1] == num - 1:\n                ranges[-1][1] = num\n            else:\n                ranges.append([num, num])\n\n        return [f\"{start}-\u003e{end}\" if start != end else str(start) for start, end in ranges]",
      "title": "Summary Ranges",
      "url": "/submissions/detail/1029908803/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692820596,
      "status": 10,
      "runtime": "36 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1029418158,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        result = []\n        # Min heap ordered by character counts, so we will use\n        # negative values for count\n        priority_queue = [(-count, char) for char, count in Counter(s).items()]\n        heapify(priority_queue)\n\n        while priority_queue:\n            count_first, char_first = heappop(priority_queue)\n            if not result or char_first != result[-1]:\n                result.append(char_first)\n                if count_first != -1: \n                    heappush(priority_queue, (count_first + 1, char_first))\n                continue\n            \n            if not priority_queue: \n                return \"\"\n            \n            count_second, char_second = heappop(priority_queue)\n            result.append(char_second)\n            if count_second != -1:\n                heappush(priority_queue, (count_second + 1, char_second))\n            heappush(priority_queue, (count_first, char_first))\n\n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029418158/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692783904,
      "status": 10,
      "runtime": "45 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1029418027,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        result = []\n        # Min heap ordered by character counts, so we will use\n        # negative values for count\n        priority_queue = [(-count, char) for char, count in Counter(s).items()]\n        heapify(priority_queue)\n\n        while priority_queue:\n            count_first, char_first = heappop(priority_queue)\n            if not result or char_first != ans[-1]:\n                result.append(char_first)\n                if count_first != -1: \n                    heappush(priority_queue, (count_first + 1, char_first))\n                continue\n            \n            if not priority_queue: \n                return \"\"\n            \n            count_second, char_second = heappop(priority_queue)\n            result.append(char_second)\n            if count_second != -1:\n                heappush(priority_queue, (count_second + 1, char_second))\n            heappush(priority_queue, (count_first, char_first))\n\n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029418027/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692783893,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1029417916,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        result = []\n        # Min heap ordered by character counts, so we will use\n        # negative values for count\n        priority_queue = [(-count, char) for char, count in Counter(s).items()]\n        heapify(priority_queue)\n\n        while priority_queue:\n            count_first, char_first = heappop(priority_queue)\n            if not result or char_first != ans[-1]:\n                result.append(char_first)\n                if count_first != -1: \n                    heappush(pq, (count_first + 1, char_first))\n                continue\n            \n            if not priority_queue: \n                return \"\"\n            \n            count_second, char_second = heappop(priority_queue)\n            result.append(char_second)\n            if count_second != -1:\n                heappush(priority_queue, (count_second + 1, char_second))\n            heappush(priority_queue, (count_first, char_first))\n\n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029417916/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692783883,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1029417513,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        result = []\n        # Min heap ordered by character counts, so we will use\n        # negative values for count\n        priority_queue = [(-count, char) for char, count in Counter(s).items()]\n        heapify(priority_queue)\n\n        while priority_queue:\n            count_first, char_first = heappop(priority_queue)\n            if not ans or char_first != ans[-1]:\n                ans.append(char_first)\n                if count_first != -1: \n                    heappush(pq, (count_first + 1, char_first))\n                continue\n            \n            if not priority_queue: \n                return \"\"\n            \n            count_second, char_second = heappop(priority_queue)\n            result.append(char_second)\n            if count_second != -1:\n                heappush(priority_queue, (count_second + 1, char_second))\n            heappush(priority_queue, (count_first, char_first))\n\n        return \"\".join(priority_queue)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029417513/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692783845,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1029413306,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        length = len(s)\n        max_count = 0\n        for char in s:\n            counter[char] += 1\n            if counter[char] \u003e max_count:\n                max_count = counter[char]\n\n        char_count = len(counter)\n        \n        if char_count == 1:\n            return \"\"\n        if max_count == 1:\n            return \"\".join(counter.keys())\n\n        char_order = sorted(counter.keys(), key=lambda key: counter[key])\n        \n        result = []\n        left, right = char_count - 2, char_count - 1\n        right_first = True\n        while left \u003e= 0 and right \u003e= 0:\n            left_char, right_char = char_order[left], char_order[right]\n            left_left, right_left = counter[left_char], counter[right_char]\n    \n            if left_left and right_left:\n                result.extend((right_char, left_char) if right_first else (left_char, right_char))\n                counter[left_char] -= 1\n                counter[right_char] -= 1\n                continue\n            \n            if not left_left:\n                left -= 1\n                continue\n            \n            if not right_left:\n                right = left\n                left -= 1\n                right_first = not right_first\n                continue\n\n        if right \u003e= 0:\n            right_char = char_order[right]\n            right_left = counter[right_char] \n            if right_left \u003e 1:\n                return \"\"\n\n            if right_left == 1 and right_char != result[-1]:\n                result.append(right_char)\n            elif right_left == 1 and right_char != result[0]:\n                result.insert(0, right_char)\n\n        if left \u003e= 0:\n            left_char = char_order[left] \n            left_left = counter[left_char]\n            if left_left \u003e 1:\n                return \"\"\n            if left_left == 1 and left_char != result[-1]:\n                result.append(right_char)\n            elif left_left == 1 and left_char != result[0]:\n                result.insert(0, left_char)\n            \n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029413306/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692783462,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111100001000",
      "flag_type": 1
    },
    {
      "id": 1029410984,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        length = len(s)\n        max_count = 0\n        for char in s:\n            counter[char] += 1\n            if counter[char] \u003e max_count:\n                max_count = counter[char]\n\n        char_count = len(counter)\n        \n        if char_count == 1:\n            return \"\"\n        if max_count == 1:\n            return \"\".join(counter.keys())\n\n        char_order = sorted(counter.keys(), key=lambda key: counter[key])\n        \n        result = []\n        left, right = char_count - 2, char_count - 1\n        right_first = True\n        while left \u003e= 0 and right \u003e= 0:\n            left_char, right_char = char_order[left], char_order[right]\n            left_left, right_left = counter[left_char], counter[right_char]\n    \n            if left_left and right_left:\n                result.extend((right_char, left_char) if right_first else (left_char, right_char))\n                counter[left_char] -= 1\n                counter[right_char] -= 1\n                continue\n            \n            if not left_left:\n                left -= 1\n                continue\n            \n            if not right_left:\n                right = left\n                left -= 1\n                right_first = not right_first\n                continue\n\n        if right \u003e= 0:\n            right_char = char_order[right]\n            right_left = counter[right_char] \n            if right_left \u003e 1:\n                return \"\"\n            if right_left == 1:\n                result.append(right_char)\n\n        if left \u003e= 0:\n            left_char = char_order[left] \n            left_left = counter[left_char]\n            if left_left \u003e 1:\n                return \"\"\n            if left_left == 1:\n                result.append(left_char)\n            \n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029410984/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692783243,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111011111100001000",
      "flag_type": 1
    },
    {
      "id": 1029406158,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        length = len(s)\n        max_count = 0\n        for char in s:\n            counter[char] += 1\n            if counter[char] \u003e max_count:\n                max_count = counter[char]\n\n        char_count = len(counter)\n        \n        if char_count == 1:\n            return \"\"\n        if max_count == 1:\n            return \"\".join(counter.keys())\n\n        char_order = sorted(counter.keys(), key=lambda key: counter[key])\n        \n        result = []\n        left, right = char_count - 2, char_count - 1\n        while left \u003e= 0 and right \u003e= 0:\n            left_char, right_char = char_order[left], char_order[right]\n            left_left, right_left = counter[left_char], counter[right_char]\n    \n            if left_left and right_left:\n                result.extend((right_char, left_char))\n                counter[left_char] -= 1\n                counter[right_char] -= 1\n                continue\n            \n            if not left_left:\n                left -= 1\n                continue\n            \n            if not right_left:\n                right = left\n                left -= 1\n                continue\n\n        if right \u003e= 0:\n            right_char = char_order[right]\n            right_left = counter[right_char] \n            if right_left \u003e 1:\n                return \"\"\n            if right_left == 1:\n                result.append(right_char)\n        if left \u003e= 0:\n            left_char = char_order[left] \n            left_left = counter[left_char]\n            if left_left \u003e 1:\n                return \"\"\n            if left_left == 1:\n                result.append(left_char)\n            \n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029406158/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692782812,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111011011111011011011011011011100001000",
      "flag_type": 1
    },
    {
      "id": 1029405934,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        length = len(s)\n        max_count = 0\n        for char in s:\n            counter[char] += 1\n            if counter[char] \u003e max_count:\n                max_count = counter[char]\n\n        char_count = len(counter)\n        \n        if char_count == 1:\n            return \"\"\n        if max_count == 1:\n            return counter.keys()\n\n        char_order = sorted(counter.keys(), key=lambda key: counter[key])\n        \n        result = []\n        left, right = char_count - 2, char_count - 1\n        while left \u003e= 0 and right \u003e= 0:\n            left_char, right_char = char_order[left], char_order[right]\n            left_left, right_left = counter[left_char], counter[right_char]\n    \n            if left_left and right_left:\n                result.extend((right_char, left_char))\n                counter[left_char] -= 1\n                counter[right_char] -= 1\n                continue\n            \n            if not left_left:\n                left -= 1\n                continue\n            \n            if not right_left:\n                right = left\n                left -= 1\n                continue\n\n        if right \u003e= 0:\n            right_char = char_order[right]\n            right_left = counter[right_char] \n            if right_left \u003e 1:\n                return \"\"\n            if right_left == 1:\n                result.append(right_char)\n        if left \u003e= 0:\n            left_char = char_order[left] \n            left_left = counter[left_char]\n            if left_left \u003e 1:\n                return \"\"\n            if left_left == 1:\n                result.append(left_char)\n\n            \n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029405934/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692782791,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1029401290,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        length = len(s)\n        for char in s:\n            counter[char] += 1\n        char_count = len(counter)\n        \n        if char_count == 1:\n            return \"\"\n\n        char_order = sorted(counter.keys(), key=lambda key: counter[key])\n        \n        result = []\n        left, right = char_count - 2, char_count - 1\n        while left \u003e= 0 and right \u003e= 0:\n            left_char, right_char = char_order[left], char_order[right]\n            left_left, right_left = counter[left_char], counter[right_char]\n\n            if left_left and right_left:\n                result.extend((right_char, left_char))\n                counter[left_char] -= 1\n                counter[right_char] -= 1\n                continue\n            \n            if not left_left:\n                left -= 1\n                continue\n            \n            if not right_left:\n                right = left\n                left -= 1\n                continue\n        \n        if right \u003e= 0:\n            right_char, right_left = char_order[right], counter[right_char] \n            if right_left \u003e 1:\n                return \"\"\n            if right_left == 1:\n                result.append(right_char)\n        if left \u003e= 0:\n            left_char, left_left = char_order[left], counter[left_char] \n            if left_left \u003e 1:\n                return \"\"\n            if left_left == 1:\n                result.append(left_char)\n\n            \n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029401290/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692782363,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111011011011011011011111111011011011011011011011011011011011000001000",
      "flag_type": 1
    },
    {
      "id": 1029310653,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        char_count = len(s)\n        for char in s:\n            counter[char] += 1\n        \n        result = []\n        remove_chars = set()\n\n        while counter:\n            for char, count in counter.items():\n                if char in remove_chars:\n                    continue\n                if result and result[-1] == char:\n                    return \"\"\n\n                result.append(char)\n                if count == 1:\n                    remove_chars.add(char)\n                else:\n                    counter[char] -= 1\n\n            for char in remove_chars:\n                counter.pop(char)\n            \n            remove_chars.clear()\n             \n        \n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029310653/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692773680,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1100101101100101101101101100100101101101101001101101001101001011111111",
      "flag_type": 1
    },
    {
      "id": 1029306229,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        char_count = len(s)\n        for char in s:\n            counter[char] += 1\n        \n        result = []\n        while True:\n            zero_count = 0\n            for char, count in counter.items():\n                if count == 0:\n                    zero_count += 1\n                    continue\n                if result and result[-1] == char:\n                    return \"\"\n                result.append(char)\n                counter[char] -= 1\n            \n            if zero_count == char_count:\n                break \n        \n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029306229/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692773316,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1029305301,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        for char in s:\n            counter[char] += 1\n        \n        result = []\n        while True:\n            for char, count in counter.items():\n                if count == 0:\n                    continue\n                if result and result[-1] == char:\n                    return \"\"\n                result.append(char)\n                counter[char] -= 1\n        \n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029305301/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692773242,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1029304778,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        for char in s:\n            counter[char] += 1\n        \n        result = []\n\n        for char, count in counter.items():\n            if count == 0:\n                continue\n            if result and result[-1] == char:\n                return \"\"\n            result.append(char)\n            counter[char] -= 1\n        \n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029304778/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692773199,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000100000100000000000000000000000000000000000000000000000000000001",
      "flag_type": 1
    },
    {
      "id": 1029304636,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 778,
      "title_slug": "reorganize-string",
      "code": "class Solution:\n    def reorganizeString(self, s: str) -\u003e str:\n        counter = defaultdict(int)\n        for char in s:\n            counter[char] += 1\n        \n        result = []\n\n        for char, count in counter.items():\n            if count == 0:\n                continue\n            if result[-1] == char:\n                return \"\"\n            result.append(char)\n            counter[char] -= 1\n        \n        return \"\".join(result)",
      "title": "Reorganize String",
      "url": "/submissions/detail/1029304636/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692773188,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1028376688,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 168,
      "title_slug": "excel-sheet-column-title",
      "code": "class Solution:\n    def convertToTitle(self, columnNumber: int) -\u003e str:\n        result = []\n        while columnNumber:\n            columnNumber, remainder = divmod(columnNumber - 1, 26)\n            result.append(chr(65 + remainder))\n        return ''.join(reversed(result))",
      "title": "Excel Sheet Column Title",
      "url": "/submissions/detail/1028376688/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692689547,
      "status": 10,
      "runtime": "32 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "1111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1028017265,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 54,
      "title_slug": "spiral-matrix",
      "code": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -\u003e List[int]:\n        row_count, col_count = len(matrix), len(matrix[0])\n        if row_count == 1:\n            return matrix[0]\n        if col_count == 1:\n            return [row[0] for row in matrix]\n\n\n        result = []\n        top, bot, left, right = 0, row_count - 1, 0, col_count - 1\n        capacity = row_count * col_count\n\n        while len(result) \u003c capacity:\n            for col in range(left, right + 1):\n                result.append(matrix[top][col])\n            top += 1\n\n            for row in range(top, bot + 1):\n                result.append(matrix[row][right])\n            right -= 1\n\n            if top \u003c= bot:\n                for col in range(right, left - 1, -1):\n                    result.append(matrix[bot][col])\n                bot -= 1\n            \n            if left \u003c= right:\n                for row in range(bot, top - 1, -1):\n                    result.append(matrix[row][left])\n                left += 1\n\n        return result",
      "title": "Spiral Matrix",
      "url": "/submissions/detail/1028017265/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692650326,
      "status": 10,
      "runtime": "37 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1032247497,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        if not root:\n            return False\n\n        def check(node: TreeNode, target: int) -\u003e bool:\n            if not node:\n                return target == 0\n            \n            new_target = target - node.val\n            if new_target \u003c 0:\n                return False\n            \n            return check(node.left, new_target) or check(node.right, new_target)\n            \n        return check(root, targetSum)",
      "title": "Path Sum",
      "url": "/submissions/detail/1032247497/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693053981,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111110111010111011101011110110111111010111100111110101110110001010110100010111001111010101101101111001001100100001",
      "flag_type": 1
    },
    {
      "id": 1032247168,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        def check(node: TreeNode, target: int) -\u003e bool:\n            if not node:\n                return target == 0\n            \n            new_target = target - node.val\n            if new_target \u003c 0:\n                return False\n            \n            return check(node.left, new_target) or check(node.right, new_target)\n            \n        return check(root, targetSum)",
      "title": "Path Sum",
      "url": "/submissions/detail/1032247168/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693053947,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110111110111010111011101011110110111111010111100111110101110110001010110100010111001111010101101101111001001100100001",
      "flag_type": 1
    },
    {
      "id": 1032247065,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        def check(node: TreeNode, target: int) -\u003e bool:\n            if not node:\n                return target == 0\n            \n            new_target = target - node\n            if new_target \u003c 0:\n                return False\n            \n            return check(node.left, new_target) or check(node.right, new_target)\n            \n        return check(root, targetSum)",
      "title": "Path Sum",
      "url": "/submissions/detail/1032247065/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693053937,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1032246926,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        def check(node: TreeNode, target: int) -\u003e bool:\n            if not node:\n                return target == 0\n            \n            new_target = target - node\n            if new_target \u003c 0:\n                return False\n            \n            return check(node.left, new_target) or check(node.right, new_target)\n            \n        return check(root)",
      "title": "Path Sum",
      "url": "/submissions/detail/1032246926/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693053925,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1032242433,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 101,
      "title_slug": "symmetric-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -\u003e bool:\n        comparison_stack = [(root.left, root.right)]\n        while comparison_stack:\n            left, right = comparison_stack.pop()\n            \n            if not left and not right:\n                continue\n            if not left or not right or left.val != right.val:\n                return False\n\n            comparison_stack.extend(((left.left, right.right), (left.right, right.left)))\n        \n        return True\n\n",
      "title": "Symmetric Tree",
      "url": "/submissions/detail/1032242433/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693053491,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1032234143,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 101,
      "title_slug": "symmetric-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -\u003e bool:\n        return self.check(root.left, root.right)\n\n    def check(self, left: TreeNode, right: TreeNode) -\u003e bool:\n        if not left and not right:\n            return True\n        \n        if not left or not right or left.val != right.val:\n            return False\n        \n        return self.check(left.left, right.right) and self.check(left.right, right.left)\n",
      "title": "Symmetric Tree",
      "url": "/submissions/detail/1032234143/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693052671,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1032231485,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 226,
      "title_slug": "invert-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -\u003e Optional[TreeNode]:\n        if root:\n            root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)\n        return root",
      "title": "Invert Binary Tree",
      "url": "/submissions/detail/1032231485/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693052417,
      "status": 10,
      "runtime": "31 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1032231368,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 226,
      "title_slug": "invert-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -\u003e Optional[TreeNode]:\n        if root:\n            root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)\n        return root ",
      "title": "Invert Binary Tree",
      "url": "/submissions/detail/1032231368/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693052407,
      "status": 10,
      "runtime": "41 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1032231027,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 226,
      "title_slug": "invert-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -\u003e Optional[TreeNode]:\n        if not root:\n            return None\n\n        root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)\n        return root ",
      "title": "Invert Binary Tree",
      "url": "/submissions/detail/1032231027/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693052373,
      "status": 10,
      "runtime": "28 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1032230638,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 226,
      "title_slug": "invert-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -\u003e Optional[TreeNode]:\n        if not root:\n            return None\n\n        self.invertTree(root.left)\n        self.invertTree(root.right) \n        root.left, root.right = root.right, root.left\n        \n        return root ",
      "title": "Invert Binary Tree",
      "url": "/submissions/detail/1032230638/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693052336,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1032115733,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 646,
      "title_slug": "maximum-length-of-pair-chain",
      "code": "class Solution:\n    def findLongestChain(self, pairs: List[List[int]]) -\u003e int:\n        pairs_count = len(pairs)\n        if pairs_count \u003c 2:\n            return pairs_count\n        \n        pairs.sort()\n        \n        @cache\n        def dp(curr_pair: int) -\u003e int:\n            right = pairs[curr_pair][1]\n            max_length = 1\n\n            for new_pair in range(curr_pair + 1, pairs_count):\n                new_left = pairs[new_pair][0]\n                new_length = dp(new_pair) + (1 if new_left \u003e right else 0)\n\n                if new_length \u003e max_length:\n                    max_length = new_length\n            \n            return max_length\n        \n        return dp(0)",
      "title": "Maximum Length of Pair Chain",
      "url": "/submissions/detail/1032115733/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693041387,
      "status": 10,
      "runtime": "1564 ms",
      "is_pending": "Not Pending",
      "memory": "18.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1031179359,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 97,
      "title_slug": "interleaving-string",
      "code": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -\u003e bool:\n        length_1, length_2, length_3 = len(s1), len(s2), len(s3)\n        if length_1 + length_2 != length_3:\n            return False\n\n        @cache\n        def dp(i_1: int, i_2: int, i_3: int) -\u003e bool:\n            if i_3 == length_3:\n                return True\n\n            target = s3[i_3]\n            return (\n                i_1 != length_1 and s1[i_1] == target and dp(i_1 + 1, i_2, i_3 + 1)\n            ) or (\n                i_2 != length_2 and s2[i_2] == target and dp(i_1, i_2 + 1, i_3 + 1)\n            )\n\n        return dp(0, 0, 0)\n",
      "title": "Interleaving String",
      "url": "/submissions/detail/1031179359/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1692947089,
      "status": 10,
      "runtime": "34 ms",
      "is_pending": "Not Pending",
      "memory": "17.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1031178949,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 97,
      "title_slug": "interleaving-string",
      "code": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -\u003e bool:\n        length_1, length_2, length_3 = len(s1), len(s2), len(s3)\n        if length_1 + length_2 != length_3:\n            return False\n\n        dp = [[[False] * length_3 for _ in range(length_3)] for _ in range(length_3)]\n        dp[0][0][0] = s1[0] == s3[0]\n        dp[0][1][0]\n        i_3 = 0\n\n        for i_1 in range(0, length_1):\n            \n            for i_2 in range(0, length_2):\n                for i_3 in range(0, length_3):\n\n\n        return dp[-1][-1][-1]\n\n        @cache\n        def dp(i_1: int, i_2: int, i_3: int) -\u003e bool:\n            if i_3 == length_3:\n                return True\n\n            target = s3[i_3]\n            return (\n                i_1 != length_1 and s1[i_1] == target and dp(i_1 + 1, i_2, i_3 + 1)\n            ) or (\n                i_2 != length_2 and s2[i_2] == target and dp(i_1, i_2 + 1, i_3 + 1)\n            )\n\n        return dp(0, 0, 0)\n",
      "title": "Interleaving String",
      "url": "/submissions/detail/1031178949/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1692947052,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1030523976,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 373,
      "title_slug": "find-k-pairs-with-smallest-sums",
      "code": "class Solution:\n    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -\u003e List[List[int]]:\n        nums1_count, nums2_count = len(nums1), len(nums2)\n        result = []\n        visited = set(((0, 0)))\n        min_heap = [(nums1[0] + nums2[0], (0, 0))]\n        count = 0\n\n        while k \u003e 0 and min_heap:\n            _, (i, j) = heappop(min_heap)\n            new_i, new_j = i + 1, j + 1\n            new_pair1, new_pair2 = (new_i, j), (i, new_j)\n            num1, num2 = nums1[i], nums2[j]\n            result.append((num1, num2))\n\n            if new_i \u003c nums1_count and new_pair1 not in visited:\n                heappush(min_heap, (nums1[new_i] + num2, new_pair1))\n                visited.add(new_pair1)\n\n            if new_j \u003c nums2_count and new_pair2 not in visited:\n                heappush(min_heap, (num1 + nums2[new_j], new_pair2))\n                visited.add(new_pair2)\n\n            k -= 1\n        \n        return result",
      "title": "Find K Pairs with Smallest Sums",
      "url": "/submissions/detail/1030523976/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692884526,
      "status": 10,
      "runtime": "930 ms",
      "is_pending": "Not Pending",
      "memory": "36.5 MB",
      "compare_result": "111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1030523490,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 373,
      "title_slug": "find-k-pairs-with-smallest-sums",
      "code": "class Solution:\n    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -\u003e List[List[int]]:\n        nums1_count = len(nums1)\n        nums2_count = len(nums2)\n\n        result = []\n        visited = set(((0, 0)))\n        min_heap = [(nums1[0] + nums2[0], (0, 0))]\n        count = 0\n\n        while k \u003e 0 and min_heap:\n            _, (i, j) = heappop(min_heap)\n            new_i, new_j = i + 1, j + 1\n            new_pair1, new_pair2 = (new_j, j), (i, new_j)\n            num1, num2 = nums1[i], nums2[j]\n            result.append((num1, num2))\n\n            if new_i \u003c nums1_count and new_pair1 not in visited:\n                heappush(min_heap, (nums1[new_i] + num2, new_pair1))\n                visited.add(new_pair1)\n\n            if new_j \u003c nums2_count and new_pair2 not in visited:\n                heappush(min_heap, (num1 + nums2[new_j], new_pair2))\n                visited.add(new_pair2)\n\n            k -= 1\n        \n        return result",
      "title": "Find K Pairs with Smallest Sums",
      "url": "/submissions/detail/1030523490/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692884486,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1030513752,
      "status_display": "Memory Limit Exceeded",
      "lang": "python3",
      "question_id": 373,
      "title_slug": "find-k-pairs-with-smallest-sums",
      "code": "class Solution:\n    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -\u003e List[List[int]]:\n        heap = []\n        heapify(heap)\n\n        for first in nums1:\n            for second in nums2:\n                heappush(heap, (first + second, (first, second)))\n        \n        return tuple(pair for sum, pair in nsmallest(k, heap))",
      "title": "Find K Pairs with Smallest Sums",
      "url": "/submissions/detail/1030513752/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692883694,
      "status": 12,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111100000000000",
      "flag_type": 1
    },
    {
      "id": 1030404988,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 68,
      "title_slug": "text-justification",
      "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -\u003e List[str]:\n        words_count = len(words)\n        \n        def get_line(word_idx: int) -\u003e Tuple[List[str], int]:\n            line = []\n            line_length = 0\n\n            for i in range(word_idx, words_count):\n                word = words[i]\n                word_length = len(word)\n                if line_length + word_length \u003e maxWidth:\n                    break\n\n                line.append(word)\n                line_length += word_length + 1 \n\n            return line, line_length\n        \n        def create_line(line: List[str], line_length: int, word_idx: int) -\u003e str:\n            base_length = line_length - 1\n            extra_spaces = maxWidth - base_length\n\n            if len(line) == 1 or word_idx == words_count:\n                return \" \".join(line) + \" \" * extra_spaces\n\n            word_count = len(line) - 1\n            spaces_per_word = extra_spaces // word_count\n            needs_extra_space = extra_spaces % word_count\n\n            for j in range(needs_extra_space):\n                line[j] += \" \"\n\n            for j in range(word_count):\n                line[j] += \" \" * spaces_per_word\n\n            return \" \".join(line)\n\n        result = []\n        i = 0\n        while i \u003c words_count:\n            line, line_length = get_line(i)\n            i += len(line)\n            result.append(create_line(line, line_length, i))\n\n        return result",
      "title": "Text Justification",
      "url": "/submissions/detail/1030404988/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692873941,
      "status": 10,
      "runtime": "38 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1030403268,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 68,
      "title_slug": "text-justification",
      "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -\u003e List[str]:\n        words_count = len(words)\n        \n        def get_line(word_idx: int) -\u003e Tuple[List[str], int]:\n            line = []\n            line_length = 0\n\n            for i in range(word_idx, words_count):\n                word = words[i]\n                word_length = len(word)\n                if line_length + word_length \u003e maxWidth:\n                    break\n\n                line.append(word)\n                line_length += word_length + 1 \n\n            return line, line_length\n        \n        def create_line(line: List[str], line_length: int, i: int) -\u003e str:\n            extra_spaces = maxWidth - line_length\n\n            if len(line) == 1 or i == words_count:\n                return \" \".join(line) + \" \" * extra_spaces\n\n            word_count = len(line) - 1\n            spaces_per_word = extra_spaces // word_count\n            needs_extra_space = extra_spaces % word_count\n\n            for j in range(needs_extra_space):\n                line[j] += \" \"\n\n            for j in range(word_count):\n                line[j] += \" \" * spaces_per_word\n\n            return \" \".join(line)\n\n        result = []\n        i = 0\n        while i \u003c words_count:\n            line, line_length = get_line(i)\n            i += len(line)\n            result.append(create_line(line, line_length, i))\n\n        return result",
      "title": "Text Justification",
      "url": "/submissions/detail/1030403268/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692873781,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000101000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1030403153,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 68,
      "title_slug": "text-justification",
      "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -\u003e List[str]:\n        words_count = len(words)\n        \n        def get_line(word_idx: int) -\u003e Tuple[List[str], int]:\n            line = []\n            line_length = 0\n\n            for i in range(word_idx, words_count):\n                word = words[i]\n                word_length = len(word)\n                if line_length + word_length \u003e maxWidth:\n                    break\n\n                line.append(word)\n                line_length += word_length + 1 \n\n            return line, line_length\n        \n        def create_line(line: List[str], line_length: int, i: int) -\u003e str:\n            extra_spaces = maxWidth - base_length\n\n            if len(line) == 1 or i == words_count:\n                return \" \".join(line) + \" \" * extra_spaces\n\n            word_count = len(line) - 1\n            spaces_per_word = extra_spaces // word_count\n            needs_extra_space = extra_spaces % word_count\n\n            for j in range(needs_extra_space):\n                line[j] += \" \"\n\n            for j in range(word_count):\n                line[j] += \" \" * spaces_per_word\n\n            return \" \".join(line)\n\n        result = []\n        i = 0\n        while i \u003c words_count:\n            line, line_length = get_line(i)\n            i += len(line)\n            result.append(create_line(line, line_length, i))\n\n        return result",
      "title": "Text Justification",
      "url": "/submissions/detail/1030403153/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692873768,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1030403076,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 68,
      "title_slug": "text-justification",
      "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -\u003e List[str]:\n        words_count = len(words)\n        \n        def get_line(word_idx: int) -\u003e Tuple[List[str], int]:\n            line = []\n            line_length = 0\n\n            for i in range(word_idx, words_count):\n                word = words[i]\n                word_length = len(word)\n                if line_length + word_length \u003e maxWidth:\n                    break\n\n                line.append(word)\n                line_length += word_length + 1 \n\n            return line, line_length\n        \n        def create_line(line: List[str], line_length: int, i: int) -\u003e str:\n            extra_spaces = maxWidth - base_length\n\n            if len(line) == 1 or i == words_count:\n                return \" \".join(line) + \" \" * extra_spaces\n\n            word_count = len(line) - 1\n            spaces_per_word = extra_spaces // word_count\n            needs_extra_space = extra_spaces % word_count\n\n            for j in range(needs_extra_space):\n                line[j] += \" \"\n\n            for j in range(word_count):\n                line[j] += \" \" * spaces_per_word\n\n            return \" \".join(line)\n\n        result = []\n        i = 0\n        while i \u003c len(words_count):\n            line, line_length = get_line(i)\n            i += len(line)\n            result.append(create_line(line, line_length, i))\n\n        return result",
      "title": "Text Justification",
      "url": "/submissions/detail/1030403076/",
      "lang_name": "Python3",
      "time": "5 months, 2 weeks",
      "timestamp": 1692873760,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1033976175,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 225,
      "title_slug": "implement-stack-using-queues",
      "code": "class MyStack:\n\n    def __init__(self):\n        self._queue = []\n\n    def push(self, x: int) -\u003e None:\n        self._queue.append(x)\n\n    def pop(self) -\u003e int:\n        self._queue.pop()\n\n    def top(self) -\u003e int:\n        return self._queue[-1]\n\n    def empty(self) -\u003e bool:\n        return len(self._queue == 0)\n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()",
      "title": "Implement Stack using Queues",
      "url": "/submissions/detail/1033976175/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693218882,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000",
      "flag_type": 1
    },
    {
      "id": 1033975821,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 225,
      "title_slug": "implement-stack-using-queues",
      "code": "class MyStack:\n\n    def __init__(self):\n        self._queue = []\n\n    def push(self, x: int) -\u003e None:\n        self._queue.append(x)\n\n    def pop(self) -\u003e int:\n        self._queue.pop()\n\n    def top(self) -\u003e int:\n        return self._queue[-1]\n\n    def empty(self) -\u003e bool:\n        return self._queue.empty()\n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()",
      "title": "Implement Stack using Queues",
      "url": "/submissions/detail/1033975821/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693218848,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000",
      "flag_type": 1
    },
    {
      "id": 1033974531,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 225,
      "title_slug": "implement-stack-using-queues",
      "code": "class MyStack:\n\n    def __init__(self):\n        \n\n    def push(self, x: int) -\u003e None:\n        \n\n    def pop(self) -\u003e int:\n        \n\n    def top(self) -\u003e int:\n        \n\n    def empty(self) -\u003e bool:\n        \n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()",
      "title": "Implement Stack using Queues",
      "url": "/submissions/detail/1033974531/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693218729,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000",
      "flag_type": 1
    },
    {
      "id": 1033285385,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 530,
      "title_slug": "minimum-absolute-difference-in-bst",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -\u003e int:\n        \n        def min_node_diff(node: TreeNode, low: int, high: int) -\u003e int:\n            if not node:\n                return high - low\n\n            return min(min_node_diff(node.left, low, node.val),\n                       min_node_diff(node.right, node.val, high))\n    \n        return min_node_diff(root, -maxsize, maxsize)",
      "title": "Minimum Absolute Difference in BST",
      "url": "/submissions/detail/1033285385/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693148975,
      "status": 10,
      "runtime": "58 ms",
      "is_pending": "Not Pending",
      "memory": "18.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1033285214,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 530,
      "title_slug": "minimum-absolute-difference-in-bst",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -\u003e int:\n        \n        def min_node_diff(node: TreeNode, low: int, high: int) -\u003e int:\n            if not node:\n                return high - low\n\n            return min(min_node_diff(node.left, low, node.val),\n                       min_node_diff(node.right, node.val, high))\n    \n        return min_node_diff(root, -maxsize, maxsise)",
      "title": "Minimum Absolute Difference in BST",
      "url": "/submissions/detail/1033285214/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693148961,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1033280927,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 530,
      "title_slug": "minimum-absolute-difference-in-bst",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -\u003e int:\n        values = []\n        def fall(node: TreeNode) -\u003e None:\n            if not node:\n                return\n            values.append(node.val)\n            if node.left:\n                fall(node.left)\n            if node.right:\n                fall(node.right)\n        \n        fall(root)\n        values.sort()\n        min_diff = abs(values[1] - values[0])\n        for i in range(1, len(values) - 1):\n            min_diff = min(min_diff, abs(values[i] - values[i+1]))\n        \n        return min_diff",
      "title": "Minimum Absolute Difference in BST",
      "url": "/submissions/detail/1033280927/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693148603,
      "status": 10,
      "runtime": "65 ms",
      "is_pending": "Not Pending",
      "memory": "18.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1033274823,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 403,
      "title_slug": "frog-jump",
      "code": "class Solution:\n    def canCross(self, stones: List[int]) -\u003e bool:\n        m = set(stones)\n        @cache\n        def dfs(i, j):\n            if i == stones[-1]: return True\n            return any(x and x + i in m and dfs(x + i, x) for x in range(j - 1, j + 2))\n        return dfs(0, 0)",
      "title": "Frog Jump",
      "url": "/submissions/detail/1033274823/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693148108,
      "status": 10,
      "runtime": "160 ms",
      "is_pending": "Not Pending",
      "memory": "25.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1033274592,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 403,
      "title_slug": "frog-jump",
      "code": "def canCross(self, stones: List[int]) -\u003e bool:\n    m = set(stones)\n    @cache\n    def dfs(i, j):\n        if i == stones[-1]: return True\n        return any(x and x + i in m and dfs(x + i, x) for x in range(j - 1, j + 2))\n    return dfs(0, 0)",
      "title": "Frog Jump",
      "url": "/submissions/detail/1033274592/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693148089,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1032267446,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 222,
      "title_slug": "count-complete-tree-nodes",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countNodes(self, root: Optional[TreeNode]) -\u003e int:\n        def left_height(root: TreeNode) -\u003e int:\n            return 0 if not root else 1 + left_height(root.left)\n        \n        def right_height(root: TreeNode) -\u003e int:\n            return 0 if not root else 1 + right_height(root.right)\n        \n        left, right = left_height(root), right_height(root)\n        if left \u003e right:\n            return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        return 2**left - 1\n\n        ",
      "title": "Count Complete Tree Nodes",
      "url": "/submissions/detail/1032267446/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693055864,
      "status": 10,
      "runtime": "64 ms",
      "is_pending": "Not Pending",
      "memory": "23.8 MB",
      "compare_result": "111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1032267265,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 222,
      "title_slug": "count-complete-tree-nodes",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countNodes(self, root: Optional[TreeNode]) -\u003e int:\n        def left_height(root: TreeNode) -\u003e int:\n            return 0 if not root else 1 + left_height(root.left)\n        \n        def right_height(root: TreeNode) -\u003e int:\n            return 0 if not root else 1+ right_height(root.right)\n        \n        left, right = left_height(root), right_height(root)\n        if left \u003e right:\n            return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        return 2**left - 1\n\n        ",
      "title": "Count Complete Tree Nodes",
      "url": "/submissions/detail/1032267265/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693055848,
      "status": 10,
      "runtime": "67 ms",
      "is_pending": "Not Pending",
      "memory": "23.8 MB",
      "compare_result": "111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1032266807,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 222,
      "title_slug": "count-complete-tree-nodes",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countNodes(self, root: Optional[TreeNode]) -\u003e int:\n        if not root:\n            return 0\n        \n        def left_height(root: TreeNode) -\u003e int:\n            return 0 if not root else 1 + left_height(root.left)\n        \n        def right_height(root: TreeNode) -\u003e int:\n            return 0 if not root else 1+ right_height(root.right)\n        \n        left, right = left_height(root), right_height(root)\n        if left \u003e right:\n            return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n        return 2**left - 1\n\n        ",
      "title": "Count Complete Tree Nodes",
      "url": "/submissions/detail/1032266807/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693055806,
      "status": 10,
      "runtime": "67 ms",
      "is_pending": "Not Pending",
      "memory": "23.7 MB",
      "compare_result": "111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1032260045,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        node_stack = [(root, 0)]\n        while node_stack:\n            node, curr_sum = node_stack.pop()\n            if not node:\n                continue\n            \n            new_sum = curr_sum + node.val\n            if new_sum == targetSum and not node.left and not node.right:\n                return True\n            \n            node_stack.extend(((node.left, new_sum), (node.right, new_sum)))\n                \n        return False",
      "title": "Path Sum",
      "url": "/submissions/detail/1032260045/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693055164,
      "status": 10,
      "runtime": "36 ms",
      "is_pending": "Not Pending",
      "memory": "17.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1032259637,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        node_stack = [(root, 0)]\n        while node_stack:\n            node, curr_sum = node_stack.pop()\n            if not node:\n                continue\n            \n            if curr_sum == targetSum and not node.left and not node.right:\n                return True\n            \n            node_stack.extend(((node.left, new_target), (node.right, new_target)))\n                \n        return False",
      "title": "Path Sum",
      "url": "/submissions/detail/1032259637/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693055125,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1032258347,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        node_stack = [(root, targetSum)]\n        while node_stack:\n            node, target = node_stack.pop()\n            if not node:\n                continue\n            new_target = target - node.val\n            if new_target == 0 and not node.left and not node.right:\n                return True\n            if new_target \u003e 0:\n                node_stack.extend(((node.left, new_target), (node.right, new_target)))\n                \n        return False",
      "title": "Path Sum",
      "url": "/submissions/detail/1032258347/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693055010,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111110111011111111110110111111111110010111110111110110101010110110010111001111010101101101111001001100100001",
      "flag_type": 1
    },
    {
      "id": 1032255237,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        node_stack = [(root, targetSum)]\n        while node_stack:\n            node, target = node_stack.pop()\n            if not node:\n                continue\n\n            new_target = target - node.val\n            if target == 0 and not node.left and not node.right:\n                return True\n            if target \u003e 0:\n                node_stack.extend(((node.left, new_target), (node.right, new_target)))\n                \n        return False",
      "title": "Path Sum",
      "url": "/submissions/detail/1032255237/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693054719,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "011111000101110011001010110110110000010011101110111110111110100100010110010000111001111010101101101011001001100100001",
      "flag_type": 1
    },
    {
      "id": 1032254546,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        node_stack = [(root, targetSum)]\n        while node_stack:\n            node, target = node_stack.pop()\n            if not node:\n                continue\n\n            new_target = target - node.val\n            if new_target \u003c 0:\n                continue\n            if not node.left and not node.right and target == 0:\n                return True\n            if node.left:\n                node_stack.append((node.left, new_target))\n            if node.right:\n                node_stack.append((node.right, new_target))\n    \n        return False",
      "title": "Path Sum",
      "url": "/submissions/detail/1032254546/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693054651,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "011111011101010011001010110110110000111111101110111110111110100100010110000000111001111010101101101011001001100100001",
      "flag_type": 1
    },
    {
      "id": 1032253287,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        node_stack = [(root, targetSum)]\n        while node_stack:\n            node, target = node_stack.pop()\n            if not node:\n                continue\n\n            new_target = target - node.val\n            if not node.left and node.right and target == 0:\n                return True\n            if new_target \u003c 0:\n                continue\n            node_stack.extend(((node.left, new_target), (node.right, new_target)))\n                \n        return False",
      "title": "Path Sum",
      "url": "/submissions/detail/1032253287/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693054532,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "011111011101110111001010010110110000110111100000111110101110100100010110010000111001111010101101101011001001100100001",
      "flag_type": 1
    },
    {
      "id": 1032252078,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        if not root:\n            return False\n        \n        node_stack = [(root, targetSum)]\n        while node_stack:\n            node, target = node_stack.pop()\n            new_target = (target - node.val) if node else -1\n            if not node and target == 0:\n                return True\n            if new_target \u003c 0:\n                continue\n            node_stack.extend(((node.left, new_target), (node.right, new_target)))\n                \n        return False",
      "title": "Path Sum",
      "url": "/submissions/detail/1032252078/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693054413,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111110111010111011101011110110111111010111100111110101110110001010110100010111001111010101101101111001001100100001",
      "flag_type": 1
    },
    {
      "id": 1032251573,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        if not root:\n            return False\n        \n        node_stack = [(root, targetSum)]\n        while node_stack:\n            node, target = node_stack.pop()\n            new_target = target - node.val if node else -1\n            if not node and target == 0:\n                return True\n            if new_target \u003c 0:\n                continue\n            node_stack.extend(((node.left, new_target), (node.right, new_target)))\n                \n        return False",
      "title": "Path Sum",
      "url": "/submissions/detail/1032251573/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693054368,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111110111010111011101011110110111111010111100111110101110110001010110100010111001111010101101101111001001100100001",
      "flag_type": 1
    },
    {
      "id": 1032251439,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 112,
      "title_slug": "path-sum",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u003e bool:\n        if not root:\n            return False\n        \n        node_stack = [(root, targetSum)]\n        while node_stack:\n            node, target = node_stack.pop()\n            new_target = target - node.val if node else -1\n            if not node and target == 0:\n                return True\n            if new_target \u003c 0:\n                continue\n            node_stack.extend((node.left, new_target), (node.right, new_target))\n                \n        return False",
      "title": "Path Sum",
      "url": "/submissions/detail/1032251439/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693054356,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1035182855,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        @cache\n        def dfs(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or grid[row][col] == \"0\":\n                return\n            \n            grid[row][col] = \"0\"\n            for row_delta, col_delta in moves:\n                dfs(row + row_delta, col + col_delta)\n\n        for row in range(row_count):\n            for col in range(col_count):\n                if grid[row][col] == \"0\":\n                    continue\n\n                dfs(row, col)\n                island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035182855/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693324849,
      "status": 10,
      "runtime": "321 ms",
      "is_pending": "Not Pending",
      "memory": "34.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1035179997,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        @cache\n        def dfs(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or grid[row][col] == 0:\n                return\n            \n            grid[row][col] = 0\n            for row_delta, col_delta in moves:\n                dfs(row + row_delta, col + col_delta)\n\n        for row in range(row_count):\n            for col in range(col_count):\n                if grid[row][col] == 0:\n                    continue\n\n                dfs(row, col)\n                island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035179997/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693324648,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1010111001101001111011000001011011000001001000000",
      "flag_type": 1
    },
    {
      "id": 1035179834,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        @cache\n        def dfs(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or grid[row][col] == 0:\n                return\n            \n            grid[row][col] = 0\n            for row_delta, col_delta in moves:\n                remove_island(row + row_delta, col + col_delta)\n\n        for row in range(row_count):\n            for col in range(col_count):\n                if grid[row][col] == 0:\n                    continue\n\n                dfs(row, col)\n                island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035179834/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693324637,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1035178900,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        @cache\n        def dfs(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or grid[row][col] == 0:\n                return\n            \n            grid[row][col] = 0\n            for row_delta, col_delta in moves:\n                remove_island(row + row_delta, col + col_delta)\n\n        for row in range(row_count):\n            for col in range(col_count):\n                if grid[row][col] != 1:\n                    continue\n\n                dfs(row, col)\n                island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035178900/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693324568,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0001000100000000000100000100000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1035178237,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        @cache\n        def dfs(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or grid[row][col] == 0:\n                return\n            \n            grid[row][col] = 0\n\n            for row_delta, col_delta in moves:\n                new_cell = (row + row_delta, col + col_delta)\n                remove_island(*new_cell)\n\n        for row in range(row_count):\n            for col in range(col_count):\n                if grid[row][col] != 1:\n                    continue\n\n                bfs(row, col)\n                island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035178237/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693324520,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0001000100000000000100000100000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1035172436,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        queue = set((row, col) \n                    for row in range(row_count) \n                    for col in range(col_count) \n                    if grid[row][col] == \"1\")\n\n        @cache\n        def remove_island(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return\n\n            for row_delta, col_delta in moves:\n                new_cell = (row + row_delta, col + col_delta)\n                if new_cell in queue:\n                    queue.remove(new_cell)\n                    remove_island(*new_cell)\n\n        while queue:\n            remove_island(*queue.pop())\n            island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035172436/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693324101,
      "status": 10,
      "runtime": "299 ms",
      "is_pending": "Not Pending",
      "memory": "30.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1035172243,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        queue = set((row, col) \n                    for row in range(row_count) \n                    for col in range(col_count) \n                    if grid[row][col] == \"1\")\n\n        @cache\n        def remove_island(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return\n\n            for row_delta, col_delta in moves:\n                new_cell = (row + row_delta, col + col_delta)\n                if new_cell in queue:\n                    queue.remove(new_cell)\n                    remove_island(*new_cell)\n\n        while queue:\n            remove_island(*queue.pop())\n            island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035172243/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693324089,
      "status": 10,
      "runtime": "310 ms",
      "is_pending": "Not Pending",
      "memory": "30.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1035169027,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        queue = set((row, col) \n                    for row in range(row_count) \n                    for col in range(col_count) \n                    if grid[row][col] == \"1\")\n\n        def remove_island(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or (row, col) not in queue:\n                return\n\n            queue.remove((row, col))\n\n            for row_delta, col_delta in moves:\n                remove_island(row + row_delta, col + col_delta)    \n\n        while queue:\n            remove_island(*next(iter(queue)))\n            island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035169027/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693323857,
      "status": 10,
      "runtime": "871 ms",
      "is_pending": "Not Pending",
      "memory": "26.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1035168282,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        queue = set((row, col) \n                    for row in range(row_count) \n                    for col in range(col_count) \n                    if grid[row][col] == \"1\")\n\n        @cache\n        def remove_island(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or (row, col) not in queue:\n                return\n\n            queue.remove((row, col))\n\n            for row_delta, col_delta in moves:\n                remove_island(row + row_delta, col + col_delta)    \n\n        while queue:\n            remove_island(*next(iter(queue)))\n            island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035168282/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693323802,
      "status": 10,
      "runtime": "883 ms",
      "is_pending": "Not Pending",
      "memory": "37.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1035167446,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        queue = set((row, col) \n                    for row in range(row_count) \n                    for col in range(col_count) \n                    if grid[row][col] == \"1\")\n\n        @cache\n        def remove_island(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return\n\n            queue.remove((row, col))\n\n            for row_delta, col_delta in moves:\n                remove_island(row + row_delta, col + col_delta)    \n\n        while queue:\n            remove_island(*next(iter(queue)))\n            island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035167446/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693323744,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1035167274,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        queue = set((row, col) \n                    for row in range(row_count) \n                    for col in range(col_count) \n                    if grid[row][col] == \"1\")\n\n        @cache\n        def remove_island(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return\n\n            queue.remove((row, col))\n\n            for row_delta, col_delta in moves:\n                remove_island(row + row_delta, col + col_delta)    \n\n        while queue:\n            remove_island(next(iter(queue)))\n            island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035167274/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693323731,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1035164982,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        queue = set((row, col) \n                    for row in range(row_count) \n                    for col in range(col_count) \n                    if grid[row][col] == \"1\")\n\n        def remove_island(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or (row, col) not in queue:\n                return\n\n            queue.remove((row, col))\n\n            for row_delta, col_delta in moves:\n                remove_island(row + row_delta, col + col_delta)    \n\n        while queue:\n            remove_island(*queue.pop())\n            island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035164982/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693323560,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0011100101011110000100010100000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1035164496,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        queue = set((row, col) \n                    for row in range(row_count) \n                    for col in range(col_count) \n                    if grid[row][col] == \"1\")\n\n        @cache\n        def remove_island(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return\n\n            queue.remove((row, col))\n\n            for row_delta, col_delta in moves:\n                remove_island(row + row_delta, col + col_delta)    \n\n        while queue:\n            remove_island(*queue.pop())\n            island_count += 1\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035164496/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693323525,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1035162284,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        queue = set((row, col) \n                    for row in range(row_count) \n                    for col in range(col_count) \n                    if grid[row][col] == 1)\n\n        @cache\n        def remove_island(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return\n\n            queue.remove((row, col))\n\n            for row_delta, col_delta in moves:\n                remove_island(row + row_delta, col + col_delta)    \n\n        while queue:\n            island_count += 1\n            remove_island(*queue.pop())\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035162284/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693323353,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0001000100000000000100000100000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1035162053,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        queue = set((row, col) \n                    for row in range(row_count) \n                    for col in range(col_count) \n                    if grid[row][col] == 1)\n\n        def remove_island(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return\n\n            queue.remove((row, col))\n\n            for row_delta, col_delta in moves:\n                remove_island(row + row_delta, col + col_delta)    \n\n        while queue:\n            island_count += 1\n            remove_island(*queue.pop())\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035162053/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693323336,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0001000100000000000100000100000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1035161935,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 200,
      "title_slug": "number-of-islands",
      "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -\u003e int:\n        row_count, col_count = len(grid), len(grid[0])\n\n        island_count = 0\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        queue = set((row, col) \n                    for row in range(row_count) \n                    for col in range(col_count) \n                    if grid[row][col] == 1)\n\n        def remove_island(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                continue\n\n            queue.remove((row, col))\n\n            for row_delta, col_delta in moves:\n                remove_island(row + row_delta, col + col_delta)    \n\n        while queue:\n            island_count += 1\n            remove_island(*queue.pop())\n\n        return island_count\n\n            ",
      "title": "Number of Islands",
      "url": "/submissions/detail/1035161935/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693323328,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1034869404,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2576,
      "title_slug": "minimum-penalty-for-a-shop",
      "code": "class Solution:\n    def bestClosingTime(self, customers: str) -\u003e int:\n        # Start with closing at hour 0, the penalty equals all 'Y' in closed hours.\n        cur_penalty = min_penalty = customers.count(\"Y\")\n        earliest_hour = 0\n        \n        for hour, customer in enumerate(customers):\n            # If status in hour i is 'Y', moving it to open hours decrement\n            # penalty by 1. Otherwise, moving 'N' to open hours increment\n            # penatly by 1.\n            cur_penalty += 1 if customer == \"N\" else -1\n\n            # Update earliest_hour if a smaller penatly is encountered\n            if cur_penalty \u003c min_penalty:\n                earliest_hour = hour + 1\n                min_penalty = cur_penalty\n                \n        return earliest_hour",
      "title": "Minimum Penalty for a Shop",
      "url": "/submissions/detail/1034869404/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693299053,
      "status": 10,
      "runtime": "101 ms",
      "is_pending": "Not Pending",
      "memory": "17.4 MB",
      "compare_result": "111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1033978238,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 677,
      "title_slug": "map-sum-pairs",
      "code": "class MapSum:\n\n    def __init__(self):\n        self._map = {}\n\n    def insert(self, key: str, val: int) -\u003e None:\n        self._map[key] = val\n\n    def sum(self, prefix: str) -\u003e int:\n        return sum(value for key, value in self._map.items() if key.startswith(prefix))\n\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)",
      "title": "Map Sum Pairs",
      "url": "/submissions/detail/1033978238/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693219078,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "11111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1033976929,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 225,
      "title_slug": "implement-stack-using-queues",
      "code": "class MyStack:\n\n    def __init__(self):\n        self._queue = []\n\n    def push(self, x: int) -\u003e None:\n        self._queue.append(x)\n\n    def pop(self) -\u003e int:\n        return self._queue.pop()\n\n    def top(self) -\u003e int:\n        return self._queue[-1]\n\n    def empty(self) -\u003e bool:\n        return len(self._queue) == 0 \n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()",
      "title": "Implement Stack using Queues",
      "url": "/submissions/detail/1033976929/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693218954,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111",
      "flag_type": 1
    },
    {
      "id": 1033976789,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 225,
      "title_slug": "implement-stack-using-queues",
      "code": "class MyStack:\n\n    def __init__(self):\n        self._queue = []\n\n    def push(self, x: int) -\u003e None:\n        self._queue.append(x)\n\n    def pop(self) -\u003e int:\n        return self._queue.pop()\n\n    def top(self) -\u003e int:\n        return self._queue[-1]\n\n    def empty(self) -\u003e bool:\n        return len(self._queue == 0)\n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()",
      "title": "Implement Stack using Queues",
      "url": "/submissions/detail/1033976789/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693218941,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000",
      "flag_type": 1
    },
    {
      "id": 1037062866,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 399,
      "title_slug": "evaluate-division",
      "code": "class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -\u003e List[float]:\n        equations_count = len(equations)\n        queries_count = len(queries) \n        edges = defaultdict(dict)\n        # a = 2 b \n        # c = 1 / 3 b\n\n        @cache\n        def find_value(val1: str, val2: str) -\u003e float:\n            if val1 not in edges or val2 not in edges:\n                return -1.0\n            if val1 == val2:\n                return 1.0\n            if val2 in edges[val1]:\n                return edges[val1][val2]\n\n            common_edges = edges[val1].keys() \u0026 edges[val2].keys()\n            if not common_edges:\n                return -1.0\n            edge = common_edges.pop()\n            return edges[val1][edge] / edges[val2][edge]\n\n        for i in range(equations_count):\n            (val1, val2), res = equations[i], values[i]\n            edges[val1][val2], edges[val2][val1] = res, 1 / res\n        \n        for i in range(queries_count):\n            queries[i] = find_value(*queries[i])\n\n        return queries",
      "title": "Evaluate Division",
      "url": "/submissions/detail/1037062866/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693507243,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111100101110001110101110100",
      "flag_type": 1
    },
    {
      "id": 1037014705,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 133,
      "title_slug": "clone-graph",
      "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\n\nclass Solution:\n    def cloneGraph(self, node: 'Node') -\u003e 'Node':\n        old_to_new = {}\n        \n        def clone(node: Node) -\u003e Node:\n            if node in old_to_new:\n                return old_to_new[node]\n            \n            new_node = Node(node.val)\n            old_to_new[node] = new_node\n            new_node.neighbors = [clone(neighbor) for neighbor in node.neighbors]\n\n            return new_node\n\n        return clone(node) if node else node",
      "title": "Clone Graph",
      "url": "/submissions/detail/1037014705/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693503902,
      "status": 10,
      "runtime": "49 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1037006695,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 130,
      "title_slug": "surrounded-regions",
      "code": "class Solution:\n    def solve(self, board: List[List[str]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        row_count, col_count = len(board), len(board[0])\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        ignore_cells = set()\n\n        def bfs(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return\n            if (row, col) in ignore_cells or board[row][col] == \"X\":\n                return\n\n            ignore_cells.add((row, col))\n            for row_delta, col_delta in moves:\n                bfs(row + row_delta, col + col_delta)\n        \n        for row, col in itertools.chain(\n            ((0, col) for col in range(col_count)),\n            ((row_count - 1, col) for col in range(col_count)),\n            ((row, 0) for row in range(row_count)),\n            ((row, col_count - 1) for row in range(row_count))\n        ):\n            bfs(row, col)\n        \n        for row in range(1, row_count - 1):\n            for col in range(1, col_count - 1):\n                if (row, col) in ignore_cells:\n                    continue\n\n                board[row][col] = \"X\"\n        ",
      "title": "Surrounded Regions",
      "url": "/submissions/detail/1037006695/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693503351,
      "status": 10,
      "runtime": "142 ms",
      "is_pending": "Not Pending",
      "memory": "18.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1037005876,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 130,
      "title_slug": "surrounded-regions",
      "code": "class Solution:\n    def solve(self, board: List[List[str]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        row_count, col_count = len(board), len(board[0])\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        ignore_stack = set()\n\n        def bfs(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return\n            if (row, col) in ignore_stack or board[row][col] == \"X\":\n                return\n\n            ignore_stack.add((row, col))\n            for row_delta, col_delta in moves:\n                bfs(row + row_delta, col + col_delta)\n        \n        for row, col in itertools.chain(\n            ((0, col) for col in range(col_count)),\n            ((row_count - 1, col) for col in range(col_count)),\n            ((row, 0) for row in range(row_count)),\n            ((row, col_count - 1) for row in range(row_count))\n        ):\n            bfs(row, col)\n        \n        flip_x = True\n        for row in range(1, row_count - 1):\n            for col in range(1, col_count - 1):\n                if (row, col) in ignore_stack:\n                    continue\n\n                board[row][col] = \"X\"\n        ",
      "title": "Surrounded Regions",
      "url": "/submissions/detail/1037005876/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693503299,
      "status": 10,
      "runtime": "133 ms",
      "is_pending": "Not Pending",
      "memory": "18.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1037005476,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 130,
      "title_slug": "surrounded-regions",
      "code": "class Solution:\n    def solve(self, board: List[List[str]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        row_count, col_count = len(board), len(board[0])\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        ignore_stack = set()\n\n        @cache\n        def bfs(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return\n            if (row, col) in ignore_stack or board[row][col] == \"X\":\n                return\n\n            ignore_stack.add((row, col))\n            for row_delta, col_delta in moves:\n                bfs(row + row_delta, col + col_delta)\n        \n        for row, col in itertools.chain(\n            ((0, col) for col in range(col_count)),\n            ((row_count - 1, col) for col in range(col_count)),\n            ((row, 0) for row in range(row_count)),\n            ((row, col_count - 1) for row in range(row_count))\n        ):\n            bfs(row, col)\n        \n        flip_x = True\n        for row in range(1, row_count - 1):\n            for col in range(1, col_count - 1):\n                if (row, col) in ignore_stack:\n                    continue\n\n                board[row][col] = \"X\"\n        ",
      "title": "Surrounded Regions",
      "url": "/submissions/detail/1037005476/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693503270,
      "status": 10,
      "runtime": "145 ms",
      "is_pending": "Not Pending",
      "memory": "18.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1037002120,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 130,
      "title_slug": "surrounded-regions",
      "code": "class Solution:\n    def solve(self, board: List[List[str]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        row_count, col_count = len(board), len(board[0])\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        flip_x = False\n\n        @cache\n        def bfs(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or board[row][col] == \"X\":\n                return\n\n            if flip_x:\n                board[row][col] = \"X\"\n            \n            for row_delta, col_delta in moves:\n                bfs(row + row_delta, col + col_delta)\n        \n        for row, col in itertools.chain(\n            ((0, col) for col in range(col_count)),\n            ((row_count - 1, col) for col in range(col_count)),\n            ((row, 0) for row in range(row_count)),\n            ((row, col_count - 1) for row in range(row_count))\n        ):\n            bfs(row, col)\n        \n        flip_x = True\n        for row in range(1, row_count - 1):\n            for col in range(1, col_count - 1):\n                bfs(row, col)\n        ",
      "title": "Surrounded Regions",
      "url": "/submissions/detail/1037002120/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693503039,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1036998180,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 130,
      "title_slug": "surrounded-regions",
      "code": "class Solution:\n    def solve(self, board: List[List[str]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        row_count, col_count = len(board), len(board[0])\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n        ignore_stack = set()\n        ignore = True\n\n        @cache\n        def bfs(row: int, col: int) -\u003e None:\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or board[row][col] == \"X\":\n                return\n\n            if ignore:\n                ignore_stack.add((row, col))\n            else:\n                board[row][col] = \"X\"\n            \n            for row_delta, col_delta in moves:\n                bfs(row + row_delta, col + col_delta)\n        \n        for row, col in itertools.chain(\n            ((0, col) for col in range(col_count)),\n            ((row_count - 1, col) for col in range(col_count)),\n            ((row, 0) for row in range(row_count)),\n            ((row, col_count - 1) for row in range(row_count))\n        ):\n            bfs(row, col)\n        \n        ignore = False\n        for row in range(1, row_count - 1):\n            for col in range(1, col_count - 1):\n                bfs(row, col)\n        ",
      "title": "Surrounded Regions",
      "url": "/submissions/detail/1036998180/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693502764,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1036785038,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1451,
      "title_slug": "minimum-number-of-taps-to-open-to-water-a-garden",
      "code": "class Solution:\n    def minTaps(self, n: int, ranges: List[int]) -\u003e int:\n        inf = float(\"inf\")\n        dp = [inf] * (n + 1)\n        dp[0] = 0\n        \n        for i in range(n + 1):\n            cur_range = ranges[i]\n            tap_start, tap_end = max(0, i - cur_range), min(n, i + cur_range)\n            \n            for j in range(tap_start, tap_end + 1):\n                dp[tap_end] = min(dp[tap_end], dp[j] + 1)\n        \n        min_taps = dp[n]\n        return -1 if min_taps == inf else min_taps ",
      "title": "Minimum Number of Taps to Open to Water a Garden",
      "url": "/submissions/detail/1036785038/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693484983,
      "status": 10,
      "runtime": "458 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1036774294,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 1451,
      "title_slug": "minimum-number-of-taps-to-open-to-water-a-garden",
      "code": "class Solution:\n    def minTaps(self, n: int, ranges: List[int]) -\u003e int:\n\n        taps_to_remove = []\n\n        for tap in range(n + 1):\n            tap_range = ranges[tap]\n            if tap_range == 0:\n                taps_to_remove.append(tap)\n                continue\n            \n            start, end = tap - tap_range, tap + tap_range\n            if start \u003c= 0 and end \u003e= n:\n                return 1\n\n            ranges[tap] = (start, end)\n        \n        for tap_to_remove in reversed(taps_to_remove):\n            ranges[tap_to_remove] = ranges[-1]\n            ranges.pop()\n        \n        taps_count = len(ranges)\n        if taps_count == 0:\n            return -1\n\n        ranges.sort() \n        \n        @cache\n        def dp(i: int, covered: int, curr_tap: int) -\u003e int:\n            if i == n:\n                return 0\n            \n            min_taps = dp(i + 1, covered, curr_tap) if i \u003c covered else -1\n            \n            for start, end in ranges[curr_tap:taps_count]:\n                if not start \u003c= i \u003c= end:\n                    continue\n                \n                taps = 1 + dp(i + 1, end, curr_tap + 1)\n                if taps == 0:\n                    continue\n\n                if min_taps == -1 or taps \u003c min_taps:\n                    min_taps = taps\n\n            return min_taps\n            \n        return dp(0, 0, 0)",
      "title": "Minimum Number of Taps to Open to Water a Garden",
      "url": "/submissions/detail/1036774294/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693483849,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1036773155,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 1451,
      "title_slug": "minimum-number-of-taps-to-open-to-water-a-garden",
      "code": "class Solution:\n    def minTaps(self, n: int, ranges: List[int]) -\u003e int:\n\n        taps_to_remove = []\n\n        for tap in range(n + 1):\n            tap_range = ranges[tap]\n            if tap_range == 0:\n                taps_to_remove.append(tap)\n                continue\n            \n            start, end = tap - tap_range, tap + tap_range\n            if start \u003c= 0 and end \u003e= n:\n                return 1\n\n            ranges[tap] = (start, end)\n        \n        for tap_to_remove in reversed(taps_to_remove):\n            ranges[tap_to_remove] = ranges[-1]\n            ranges.pop()\n        \n        taps_count = len(ranges)\n        if taps_count == 0:\n            return -1\n\n        ranges.sort() \n        \n        @cache\n        def dp(i: int, covered: int) -\u003e int:\n            if i == n:\n                return 0\n            \n            min_taps = dp(i + 1, covered) if i \u003c covered else -1\n            \n            for start, end in ranges:\n                if not start \u003c= i \u003c= end:\n                    continue\n                \n                taps = 1 + dp(i + 1, end)\n                if taps == 0:\n                    continue\n\n                if min_taps == -1 or taps \u003c min_taps:\n                    min_taps = taps\n\n            return min_taps\n            \n        return dp(0, 0)",
      "title": "Minimum Number of Taps to Open to Water a Garden",
      "url": "/submissions/detail/1036773155/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693483731,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111100000000000",
      "flag_type": 1
    },
    {
      "id": 1036763602,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1451,
      "title_slug": "minimum-number-of-taps-to-open-to-water-a-garden",
      "code": "class Solution:\n    def minTaps(self, n: int, ranges: List[int]) -\u003e int:\n\n        taps_to_remove = []\n\n        for tap in range(n + 1):\n            tap_range = ranges[tap]\n            if tap_range == 0:\n                taps_to_remove.append(tap)\n                continue\n            \n            start, end = tap - tap_range, tap + tap_range\n            if start \u003c= 0 and end \u003e= n:\n                return 1\n\n            ranges[tap] = (start, end)\n        \n        for tap_to_remove in reversed(taps_to_remove):\n            ranges[tap_to_remove] = ranges[-1]\n            ranges.pop()\n        \n        taps_count = len(ranges)\n        if taps_count == 0:\n            return -1\n\n        ranges.sort() \n        \n        @cache\n        def dp(i: int, curr_tap: int) -\u003e int:\n            if i == n:\n                return 0\n            \n            min_taps = -1\n            for start, end in ranges[curr_tap:taps_count]:\n                if not start \u003c= i \u003c= end:\n                    break\n                \n                taps = dp(i + 1, curr_tap + 1)\n                if min_taps == -1 or taps \u003c min_taps:\n                    min_taps = taps\n\n            return min_taps\n            \n        return dp(0, 0)",
      "title": "Minimum Number of Taps to Open to Water a Garden",
      "url": "/submissions/detail/1036763602/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693482694,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11001110000000000000000000000000001011",
      "flag_type": 1
    },
    {
      "id": 1036763447,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1451,
      "title_slug": "minimum-number-of-taps-to-open-to-water-a-garden",
      "code": "class Solution:\n    def minTaps(self, n: int, ranges: List[int]) -\u003e int:\n\n        taps_to_remove = []\n\n        for tap in range(n + 1):\n            tap_range = ranges[tap]\n            if tap_range == 0:\n                taps_to_remove.append(tap)\n                continue\n            \n            start, end = tap - tap_range, tap + tap_range\n            if start \u003c= 0 and end \u003e= n:\n                return 1\n\n            ranges[tap] = (start, end)\n        \n        for tap_to_remove in reversed(taps_to_remove):\n            ranges[tap_to_remove] = ranges[-1]\n            ranges.pop()\n        \n        taps_count = len(ranges)\n        if taps_count == 0:\n            return -1\n\n        ranges.sort() \n        \n        @cache\n        def dp(i: int, curr_tap: int) -\u003e int:\n            if i == n:\n                return 0\n            \n            min_taps = -1\n            for start, end in ranges[curr_tap:taps_count]:\n                if not start \u003c= i \u003c= end:\n                    break\n                \n                taps = dp(i + 1, curr_tap + 1)\n                if min_taps == -1 or taps \u003c min_taps:\n                    min_taps = taps\n\n            return min_taps\n            \n        return dp(0)",
      "title": "Minimum Number of Taps to Open to Water a Garden",
      "url": "/submissions/detail/1036763447/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693482675,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1036676232,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1451,
      "title_slug": "minimum-number-of-taps-to-open-to-water-a-garden",
      "code": "class Solution:\n    def minTaps(self, n: int, ranges: List[int]) -\u003e int:\n        arr = [0] * (n + 1)\n        for i, r in enumerate(ranges):\n            if r == 0:\n                continue\n            left = max(0, i - r)\n            arr[left] = max(arr[left], i + r)\n\n        end, far_can_reach, cnt = 0, 0, 0\n        \n        for i, reach in enumerate(arr):\n            if i \u003e end:\n                if far_can_reach \u003c= end:\n                    return -1\n                end, cnt = far_can_reach, cnt + 1\n            far_can_reach = max(far_can_reach, reach)\n\n        return cnt + (end \u003c n)\n",
      "title": "Minimum Number of Taps to Open to Water a Garden",
      "url": "/submissions/detail/1036676232/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693473280,
      "status": 10,
      "runtime": "116 ms",
      "is_pending": "Not Pending",
      "memory": "16.9 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1036091559,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2450,
      "title_slug": "minimum-replacements-to-sort-the-array",
      "code": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n        operations_count = 0\n        for i in reversed(range(nums_count - 1)):\n            cur, prev = nums[i], nums[i+1]\n            if cur \u003c= prev:\n                continue\n            \n            elements_count = (cur + prev - 1) // prev\n            operations_count += elements_count - 1\n            nums[i] //= elements_count\n\n        return operations_count",
      "title": "Minimum Replacements to Sort the Array",
      "url": "/submissions/detail/1036091559/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693411584,
      "status": 10,
      "runtime": "486 ms",
      "is_pending": "Not Pending",
      "memory": "28 MB",
      "compare_result": "11111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1036086869,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2450,
      "title_slug": "minimum-replacements-to-sort-the-array",
      "code": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n        operations_count = 0\n        max_val = nums[-1]\n        for i in reversed(range(nums_count - 1)):\n            num = nums[i]\n            if num \u003c max_val:\n                max_val = num\n            if num \u003c= max_val:\n                continue\n            \n            mod = num % max_val\n            operations_count += num // max_val - 1\n            if mod:\n                operations_count += 1\n                max_val -= 1\n\n        return operations_count",
      "title": "Minimum Replacements to Sort the Array",
      "url": "/submissions/detail/1036086869/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693411209,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11110011111001010000011111111000011111111111111",
      "flag_type": 1
    },
    {
      "id": 1036086716,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 2450,
      "title_slug": "minimum-replacements-to-sort-the-array",
      "code": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n        operations_count = 0\n        for i in reversed(range(nums_count - 1)):\n            num = nums[i]\n            if num \u003c max_val:\n                max_val = num\n            if num \u003c= max_val:\n                continue\n            \n            mod = num % max_val\n            operations_count += num // max_val - 1\n            if mod:\n                operations_count += 1\n                max_val -= 1\n\n        return operations_count",
      "title": "Minimum Replacements to Sort the Array",
      "url": "/submissions/detail/1036086716/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693411197,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1036082953,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2450,
      "title_slug": "minimum-replacements-to-sort-the-array",
      "code": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n        max_val = nums[-1]\n        operations_count = 0\n        for i in reversed(range(nums_count - 1)):\n            num = nums[i]\n            if num \u003c max_val:\n                max_val = num\n            if num \u003c= max_val:\n                continue\n            \n            mod = num % max_val\n            operations_count += num // max_val - 1\n            if mod:\n                operations_count += 1\n                max_val = (max_val + mod) // 2\n\n        return operations_count",
      "title": "Minimum Replacements to Sort the Array",
      "url": "/submissions/detail/1036082953/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693410904,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111000010000011111111000011111111111111",
      "flag_type": 1
    },
    {
      "id": 1036078106,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2450,
      "title_slug": "minimum-replacements-to-sort-the-array",
      "code": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n        if nums_count == 1:\n            return 0\n        \n        max_val = nums[-1]\n        operations_count = 0\n        for i in reversed(range(nums_count - 1)):\n            num = nums[i]\n            if num \u003c= max_val:\n                max_val = num\n                continue\n            \n            mod = num % max_val\n            operations_count += num // max_val - 1\n            if mod:\n                operations_count += 1\n                max_val = (max_val + mod) // 2\n\n        return operations_count",
      "title": "Minimum Replacements to Sort the Array",
      "url": "/submissions/detail/1036078106/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693410510,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111000010000011111111000011111111111111",
      "flag_type": 1
    },
    {
      "id": 1036077532,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2450,
      "title_slug": "minimum-replacements-to-sort-the-array",
      "code": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n        if nums_count == 1:\n            return 0\n        \n        max_val = nums[-1]\n        operations_count = 0\n        for i in reversed(range(nums_count - 1)):\n            num = nums[i]\n            if num \u003c= max_val:\n                continue\n            \n            mod = num % max_val\n            operations_count += num // max_val - 1\n            if mod:\n                operations_count += 1\n                max_val = (max_val + mod) // 2\n\n        return operations_count",
      "title": "Minimum Replacements to Sort the Array",
      "url": "/submissions/detail/1036077532/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693410462,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11100101111000000000011111111000011111111110111",
      "flag_type": 1
    },
    {
      "id": 1036064128,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2450,
      "title_slug": "minimum-replacements-to-sort-the-array",
      "code": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n        if nums_count == 1:\n            return 0\n        \n        max_val = nums[-1]\n        operations_count = 0\n        for i in reversed(range(nums_count - 1)):\n            num = nums[i]\n            if num \u003c= max_val:\n                continue\n            max_val = num // 2\n            operations_count += 1\n\n        return operations_count",
      "title": "Minimum Replacements to Sort the Array",
      "url": "/submissions/detail/1036064128/",
      "lang_name": "Python3",
      "time": "5 months, 1 week",
      "timestamp": 1693409349,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "01000001111000000000000000011000000001000100001",
      "flag_type": 1
    },
    {
      "id": 1040051608,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 141,
      "title_slug": "linked-list-cycle",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -\u003e bool:\n        slow_p, fast_p = head, head.next if head else None\n        while fast_p and fast_p.next:\n            if slow_p == fast_p:\n                return True\n            slow_p, fast_p = slow_p.next, fast_p.next.next\n\n        return False",
      "title": "Linked List Cycle",
      "url": "/submissions/detail/1040051608/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693809429,
      "status": 10,
      "runtime": "64 ms",
      "is_pending": "Not Pending",
      "memory": "20.6 MB",
      "compare_result": "11111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1039615645,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 289,
      "title_slug": "game-of-life",
      "code": "class Solution:\n    def gameOfLife(self, board: List[List[int]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        rows_count, cols_count = len(board), len(board[0])\n        moves = ((0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1))\n        flip_cells = set()\n        \n        for row in range(rows_count):\n            for col in range(cols_count):\n                live_neighbors = 0\n                is_alive = board[row][col] == 1\n\n                for row_delta, col_delta in moves:\n                    new_row, new_col = row + row_delta, col + col_delta\n                    if not 0 \u003c= new_row \u003c rows_count or not 0 \u003c= new_col \u003c cols_count:\n                        continue\n                    if board[new_row][new_col] == 1:\n                        live_neighbors += 1\n\n                if (is_alive and (live_neighbors \u003c 2 or live_neighbors \u003e 3)) or (\n                    not is_alive and live_neighbors == 3\n                ):\n                    flip_cells.add((row, col))\n        \n        while flip_cells:\n            row, col = flip_cells.pop()\n            board[row][col] = 0 if board[row][col] == 1 else 1",
      "title": "Game of Life",
      "url": "/submissions/detail/1039615645/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693760789,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1039602903,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 73,
      "title_slug": "set-matrix-zeroes",
      "code": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        rows_count, cols_count = len(matrix), len(matrix[0])\n        flip_rows, flip_cols = set(), set()\n\n        for row in range(rows_count):\n            for col in range(cols_count):\n                if matrix[row][col] == 0:\n                    flip_rows.add(row)\n                    flip_cols.add(col)\n\n        while flip_rows:\n            row = flip_rows.pop()\n            for col in range(cols_count):\n                if matrix[row][col] != 0:\n                    matrix[row][col] = 0\n        \n        while flip_cols:\n            col = flip_cols.pop()\n            for row in range(rows_count):\n                if matrix[row][col] != 0:\n                    matrix[row][col] = 0\n        \n            \n",
      "title": "Set Matrix Zeroes",
      "url": "/submissions/detail/1039602903/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693759778,
      "status": 10,
      "runtime": "121 ms",
      "is_pending": "Not Pending",
      "memory": "17.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1039602854,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 73,
      "title_slug": "set-matrix-zeroes",
      "code": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        rows_count, cols_count = len(matrix), len(matrix[0])\n        flip_rows, flip_cols = set(), set()\n\n        for row in range(rows_count):\n            for col in range(cols_count):\n                if matrix[row][col] == 0:\n                    flip_rows.add(row)\n                    flip_cols.add(col)\n\n        while flip_rows:\n            row = flip_rows.pop()\n            for col in range(cols_count):\n                if matrix[row][col] != 0:\n                    matrix[row][col] = 0\n        \n        while flip_cols:\n            col = flip_cols.pop()\n            for row in range(rows_count):\n                if matrix[row][col] != 1:\n                    matrix[row][col] = 0\n        \n            \n",
      "title": "Set Matrix Zeroes",
      "url": "/submissions/detail/1039602854/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693759773,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "001111001100010011100001111101111111001100111111111010011110001101001100100100110000000000000000011000001010110000101100000010000001111111101110001000000000000000000000001001",
      "flag_type": 1
    },
    {
      "id": 1039594946,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 73,
      "title_slug": "set-matrix-zeroes",
      "code": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        side_length = len(matrix)\n        flip_rows, flip_cols = set(), set()\n\n        for row in range(side_length):\n            for col in range(side_length):\n                if col in flip_cols:\n                    continue\n        \n                if matrix[row][col] == 0:\n                    flip_rows.add(row)\n                    flip_cols.add(col)\n\n        while flip_rows:\n            row = flip_rows.pop()\n            for col in range(side_length):\n                if matrix[row][col] == 1:\n                    matrix[row][col] = 0\n        \n        while flip_cols:\n            col = flip_cols.pop()\n            for row in range(side_length):\n                if matrix[row][col] == 1:\n                    matrix[row][col] = 0\n        \n            \n",
      "title": "Set Matrix Zeroes",
      "url": "/submissions/detail/1039594946/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693759143,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "101100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1039594770,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 73,
      "title_slug": "set-matrix-zeroes",
      "code": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        side_length = len(matrix)\n        flip_rows, flip_cols = set(), set()\n\n        for row in range(side_length):\n            for col in range(side_length):\n                if col in flip_cols:\n                    continue\n        \n                if matrix[row][col] == 0:\n                    flip_rows.add(row)\n                    flip_cols.add(col)\n\n        while flip_rows:\n            row = flip_rows.pop()\n            for col in range(side_length):\n                if matrix[row][col] == 1:\n                    matrix[row][col] = 0\n        \n        while flip_col:\n            col = flip_col.pop()\n            for row in range(side_length):\n                if matrix[row][col] == 1:\n                    matrix[row][col] = 0\n        \n            \n",
      "title": "Set Matrix Zeroes",
      "url": "/submissions/detail/1039594770/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693759130,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1039265347,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 62,
      "title_slug": "unique-paths",
      "code": "class Solution:\n    def uniquePaths(self, m: int, n: int) -\u003e int:\n\n        @cache\n        def dp(row: int, col: int) -\u003e int:\n            if not 0 \u003c= row \u003c m or not 0 \u003c= col \u003c n:\n                return 0\n            \n            if row == m - 1 and col == n - 1:\n                return 1\n            \n            return dp(row + 1, col) + dp(row, col + 1)\n\n        return dp(0, 0)",
      "title": "Unique Paths",
      "url": "/submissions/detail/1039265347/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693729437,
      "status": 10,
      "runtime": "45 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1038443511,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 48,
      "title_slug": "rotate-image",
      "code": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        side_length = len(matrix)\n\n        for row in range(side_length // 2):\n            matrix[row], matrix[-row-1] = matrix[-row-1], matrix[row]\n        \n        for i in range(side_length):\n            for j in range(i):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]",
      "title": "Rotate Image",
      "url": "/submissions/detail/1038443511/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693661173,
      "status": 10,
      "runtime": "46 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1038261354,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2755,
      "title_slug": "extra-characters-in-a-string",
      "code": "class Solution:\n    def minExtraChar(self, s: str, dictionary: List[str]) -\u003e int:\n        chars_count = len(s)\n\n        @cache\n        def dp(i: int) -\u003e int:\n            chars_left = chars_count - i\n            if chars_left == 0:\n                return 0\n            \n            min_extra_chars = chars_left\n\n            for word in dictionary:\n                word_length = len(word)\n\n                if word_length \u003e chars_left or s[i:i+word_length] != word:\n                    continue\n                \n                if word_length == chars_left:\n                    return 0\n\n                min_extra_chars = min(min_extra_chars, dp(i + word_length))\n\n            return min(min_extra_chars, 1 + dp(i + 1))\n        \n        return dp(0)\n\n                \n",
      "title": "Extra Characters in a String",
      "url": "/submissions/detail/1038261354/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693641041,
      "status": 10,
      "runtime": "247 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1037777045,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 42,
      "title_slug": "trapping-rain-water",
      "code": "class Solution:\n    def trap(self, height: List[int]) -\u003e int:\n        left_edge, left_edge_val = -1, -1\n        volume, cur_volume = 0, 0\n        heights_count = len(height)\n\n        i = 0\n        while i \u003c heights_count:\n            cur_height = height[i]\n\n            if cur_height \u003c left_edge_val:\n                cur_volume += left_edge_val - cur_height\n            else:\n                left_edge, left_edge_val = i, cur_height\n                volume += cur_volume\n                cur_volume = 0\n            \n            i += 1\n\n            if i == heights_count and cur_volume != 0:\n                left_edge, left_edge_val = left_edge + 1, height[left_edge + 1]\n                i = left_edge + 1\n                cur_volume = 0\n        \n        return volume",
      "title": "Trapping Rain Water",
      "url": "/submissions/detail/1037777045/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693584268,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111110101110101010111011101001001001010101100110110111110111011010100111011000010100010110011101011000001111011100011100000101001000111001000110010100111101011001000111010011111110000010001101000001000001110100010001010001000010001100010101111011011001000000010011000000011000010101010101000001000100001001000000010010101",
      "flag_type": 1
    },
    {
      "id": 1037760198,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 68,
      "title_slug": "text-justification",
      "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -\u003e List[str]:\n        words_count = len(words)\n        \n        def get_line(word_idx: int) -\u003e Tuple[List[str], int]:\n            line = []\n            line_length = 0\n\n            for i in range(word_idx, words_count):\n                word = words[i]\n                word_length = len(word)\n                if line_length + word_length \u003e maxWidth:\n                    break\n\n                line.append(word)\n                line_length += word_length + 1 \n\n            return line, line_length\n        \n        def create_line(line: List[str], line_length: int, word_idx: int) -\u003e str:\n            base_length = line_length - 1\n            extra_spaces = maxWidth - base_length\n\n            if len(line) == 1 or word_idx == words_count:\n                return \" \".join(line) + \" \" * extra_spaces\n\n            word_count = len(line) - 1\n            spaces_per_word = extra_spaces // word_count\n            needs_extra_space = extra_spaces % word_count\n\n            for j in range(needs_extra_space):\n                line[j] += \" \"\n\n            for j in range(word_count):\n                line[j] += \" \" * spaces_per_word\n\n            return \" \".join(line)\n\n        result = []\n        i = 0\n        while i \u003c words_count:\n            line, line_length = get_line(i)\n            i += len(line)\n            result.append(create_line(line, line_length, i))\n\n        return result",
      "title": "Text Justification",
      "url": "/submissions/detail/1037760198/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693582876,
      "status": 10,
      "runtime": "46 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1037759664,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 207,
      "title_slug": "course-schedule",
      "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -\u003e bool:\n        \n        nodes = [set() for _ in range(numCourses)]\n        for target, required in prerequisites:\n            nodes[target].add(required)\n\n        visited = set()\n\n        @cache\n        def dfs(course: int) -\u003e bool:\n            if course in visited:\n                return False\n    \n            edges = nodes[course]\n            if not edges:\n                return True\n            if visited \u0026 edges:\n                return False\n            \n            visited.add(course)\n            return all(dfs(edge) for edge in edges)\n\n        for course in range(numCourses):\n            if not dfs(course):\n                return False\n            visited.clear()\n        \n        return True",
      "title": "Course Schedule",
      "url": "/submissions/detail/1037759664/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693582830,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111011111111111111111",
      "flag_type": 1
    },
    {
      "id": 1037759299,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 207,
      "title_slug": "course-schedule",
      "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -\u003e bool:\n        \n        nodes = [[] for _ in range(numCourses)]\n        for target, required in prerequisites:\n            nodes[target].append(required)\n\n        visited = set()\n\n        @cache\n        def dfs(course: int) -\u003e bool:\n            if course in visited:\n                return False\n    \n            edges = nodes[course]\n            if not edges:\n                return True\n            if visited \u0026 edges:\n                return False\n            \n            visited.add(course)\n            return all(dfs(edge) for edge in edges)\n\n        for course in range(numCourses):\n            if not dfs(course):\n                return False\n            visited.clear()\n        \n        return True",
      "title": "Course Schedule",
      "url": "/submissions/detail/1037759299/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693582799,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1037758248,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 207,
      "title_slug": "course-schedule",
      "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -\u003e bool:\n        \n        nodes = [[] for _ in range(numCourses)]\n        for target, required in prerequisites:\n            nodes[target].append(required)\n\n        visited = set()\n\n        @cache\n        def dfs(course: int) -\u003e bool:\n            if course in visited:\n                return False\n    \n            edges = nodes[course]\n            if not edges:\n                return True\n            \n            visited.add(course)\n            return all(dfs(edge) for edge in edges)\n\n        for course in range(numCourses):\n            if not dfs(course):\n                return False\n            visited.clear()\n        \n        return True",
      "title": "Course Schedule",
      "url": "/submissions/detail/1037758248/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693582708,
      "status": 10,
      "runtime": "110 ms",
      "is_pending": "Not Pending",
      "memory": "22.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1037758080,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 207,
      "title_slug": "course-schedule",
      "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -\u003e bool:\n        \n        nodes = [[] for _ in range(numCourses)]\n        for target, required in prerequisites:\n            nodes[target].append(required)\n\n        visited = set()\n\n        def dfs(course: int) -\u003e bool:\n            if course in visited:\n                return False\n    \n            edges = nodes[course]\n            if not edges:\n                return True\n            \n            visited.add(course)\n            return all(dfs(edge) for edge in edges)\n\n        for course in range(numCourses):\n            if not dfs(course):\n                return False\n            visited.clear()\n        \n        return True",
      "title": "Course Schedule",
      "url": "/submissions/detail/1037758080/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693582692,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111011011111110100110111",
      "flag_type": 1
    },
    {
      "id": 1037757786,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 207,
      "title_slug": "course-schedule",
      "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -\u003e bool:\n        \n        nodes = [[] for _ in range(numCourses)]\n        for target, required in prerequisites:\n            nodes[target].append(required)\n\n        visited = set()\n\n        @cache\n        def dfs(course: int) -\u003e bool:\n            if course in visited:\n                return False\n    \n            edges = nodes[course]\n            if not edges:\n                return True\n            \n            visited.add(course)\n            return all(dfs(edge) for edge in edges)\n\n        for course in range(numCourses):\n            if not dfs(course):\n                return False\n            visited.clear()\n        \n        return True",
      "title": "Course Schedule",
      "url": "/submissions/detail/1037757786/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693582667,
      "status": 10,
      "runtime": "105 ms",
      "is_pending": "Not Pending",
      "memory": "22.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1037438619,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 338,
      "title_slug": "counting-bits",
      "code": "class Solution:\n    def countBits(self, n: int) -\u003e List[int]:\n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i \u003e\u003e 1] + (i \u0026 1)\n        return ans",
      "title": "Counting Bits",
      "url": "/submissions/detail/1037438619/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693551500,
      "status": 10,
      "runtime": "72 ms",
      "is_pending": "Not Pending",
      "memory": "23 MB",
      "compare_result": "111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1037436534,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 338,
      "title_slug": "counting-bits",
      "code": "class Solution:\n    def countBits(self, n: int) -\u003e List[int]:\n        return tuple(bin(i).count(\"1\") for i in range(n + 1))",
      "title": "Counting Bits",
      "url": "/submissions/detail/1037436534/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693551312,
      "status": 10,
      "runtime": "78 ms",
      "is_pending": "Not Pending",
      "memory": "23.1 MB",
      "compare_result": "111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1037088395,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 399,
      "title_slug": "evaluate-division",
      "code": "class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -\u003e List[float]:\n        equations_count = len(equations)\n        queries_count = len(queries) \n        edges = defaultdict(dict)\n        seen_nodes = set()\n        invalid = -1.0\n\n        def dfs(val1: str, val2: str) -\u003e float:\n            if val1 == val2:\n                return 1.0\n\n            if val2 in edges[val1]:\n                return edges[val1][val2]\n\n            if val1 in seen_nodes:\n                return invalid\n\n            seen_nodes.add(val1)\n\n            for connected_node in edges[val1]:\n                new_edge_res = dfs(connected_node, val2)\n                if new_edge_res == invalid:\n                    continue\n                new_edge_res *= edges[val1][connected_node]\n                edges[val1][val2] = new_edge_res\n                return new_edge_res\n            \n            return invalid\n\n        for i in range(equations_count):\n            (val1, val2), res = equations[i], values[i]\n            edges[val1][val2], edges[val2][val1] = res, 1 / res\n        \n        for i in range(queries_count):\n            res, (val1, val2) = -1, queries[i]\n            if val1 in edges and val2 in edges:\n                seen_nodes.clear()\n                res = dfs(val1, val2)\n            queries[i] = res\n\n        return queries",
      "title": "Evaluate Division",
      "url": "/submissions/detail/1037088395/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693509297,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1037085765,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 399,
      "title_slug": "evaluate-division",
      "code": "class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -\u003e List[float]:\n        equations_count = len(equations)\n        queries_count = len(queries) \n        edges = defaultdict(dict)\n        seen_nodes = set()\n        invalid = -1.0\n\n        @cache\n        def dfs(val1: str, val2: str) -\u003e float:\n            if val1 == val2:\n                return 1.0\n\n            if val2 in edges[val1]:\n                return edges[val1][val2]\n\n            if val1 in seen_nodes:\n                return invalid\n\n            seen_nodes.add(val1)\n\n            for edge in edges[val1]:\n                found_path = dfs(edge, val2)\n                if found_path != invalid:\n                    return edges[val1][edge] * found_path\n            \n            return invalid\n\n        for i in range(equations_count):\n            (val1, val2), res = equations[i], values[i]\n            edges[val1][val2], edges[val2][val1] = res, 1 / res\n        \n        for i in range(queries_count):\n            res, (val1, val2) = -1, queries[i]\n            if val1 in edges and val2 in edges:\n                seen_nodes.clear()\n                res = dfs(val1, val2)\n            queries[i] = res\n\n        return queries",
      "title": "Evaluate Division",
      "url": "/submissions/detail/1037085765/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693509074,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111110",
      "flag_type": 1
    },
    {
      "id": 1043077842,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 92,
      "title_slug": "reverse-linked-list-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -\u003e Optional[ListNode]:\n        cur_node = 1\n        left_head, left_tail = head if left \u003e 1 else None, None\n\n        while cur_node \u003c left:\n            cur_node += 1\n            head, left_tail = head.next, head\n\n        cur_node += 1\n        mid_head, mid_tail, head = head, head, head.next\n        mid_head.next = None\n\n        while cur_node \u003c= right:\n            cur_node += 1\n            next_node = head.next\n            mid_head, head.next = mid_head, head\n            head = next_node\n    \n        mid_tail.next = head\n        if left_head:\n            left_tail.next = mid_head\n        else:\n            left_head = mid_head\n\n        return left_head",
      "title": "Reverse Linked List II",
      "url": "/submissions/detail/1043077842/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1694095989,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "01110111000000000000111011010100000000000000",
      "flag_type": 1
    },
    {
      "id": 1043077572,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 92,
      "title_slug": "reverse-linked-list-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -\u003e Optional[ListNode]:\n        cur_node = 1\n        left_head, left_tail = head if left \u003e 1 else None, None\n\n        while cur_node \u003c left:\n            cur_node += 1\n            head, left_tail = head.next, head\n\n        cur_node += 1\n        mid_head, mid_tail, head = head, head, head.next\n        mid_head.next = None\n\n        while cur_node \u003c= right:\n            cur_node += 1\n            next_node = head.next\n            head.next = mid_head\n            mid_head = head\n            head = next_node\n    \n        mid_tail.next = head\n        if left_head:\n            left_tail.next = mid_head\n        else:\n            left_head = mid_head\n\n        return left_head",
      "title": "Reverse Linked List II",
      "url": "/submissions/detail/1043077572/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1694095969,
      "status": 10,
      "runtime": "33 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1043077405,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 92,
      "title_slug": "reverse-linked-list-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -\u003e Optional[ListNode]:\n        cur_node = 1\n        left_head, left_tail = head if left \u003e 1 else None, None\n\n        while cur_node \u003c left:\n            cur_node += 1\n            head, left_tail = head.next, head\n\n        cur_node += 1\n        mid_head, mid_tail, head = head, head, head.next\n        mid_head.next = None\n\n        while cur_node \u003c= right:\n            cur_node += 1\n            head, head.next, mid_head = head.next, mid_head, head\n    \n        mid_tail.next = head\n        if left_head:\n            left_tail.next = mid_head\n        else:\n            left_head = mid_head\n\n        return left_head",
      "title": "Reverse Linked List II",
      "url": "/submissions/detail/1043077405/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1694095957,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "01110000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1042088778,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 725,
      "title_slug": "split-linked-list-in-parts",
      "code": "class Solution:\n    def splitListToParts(self, head: Optional[ListNode], k: int) -\u003e List[Optional[ListNode]]:        \n        nodes_count = 0\n        tail = head\n        while tail:\n            tail = tail.next\n            nodes_count += 1\n        \n        quotient, remainder = divmod(nodes_count, k)\n        answer = []\n        for i in range(k):\n            size = quotient + 1 if (remainder := remainder - 1) \u003e= 0 else quotient\n\n            answer.append(head)\n            last = None\n            while size \u003e 0:\n                last = head\n                head = head.next\n                size -= 1\n            if last: \n                last.next = None\n                \n        return answer",
      "title": "Split Linked List in Parts",
      "url": "/submissions/detail/1042088778/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1694001543,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1042088664,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 725,
      "title_slug": "split-linked-list-in-parts",
      "code": "class Solution:\n    def splitListToParts(self, head: Optional[ListNode], k: int) -\u003e List[Optional[ListNode]]:        \n        nodes_count = 0\n        tail = head\n        while tail:\n            tail = tail.next\n            nodes_count += 1\n        \n        quotient, remainder = divmod(nodes_count, k)\n        answer = []\n        for i in range(k):\n            size = quotient + 1 if (remainder := remainder - 1) \u003e= 0 else q\n\n            answer.append(head)\n            last = None\n            while size \u003e 0:\n                last = head\n                head = head.next\n                size -= 1\n            if last: \n                last.next = None\n                \n        return answer",
      "title": "Split Linked List in Parts",
      "url": "/submissions/detail/1042088664/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1694001532,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1042088522,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 725,
      "title_slug": "split-linked-list-in-parts",
      "code": "class Solution:\n    def splitListToParts(self, head: Optional[ListNode], k: int) -\u003e List[Optional[ListNode]]:        \n        nodes_count = 0\n        tail = head\n        while tail:\n            tail = tail.next\n            nodes_count += 1\n        \n        quotient, remainder = divmod(nodes_count, k)\n        answer = []\n        for i in range(k):\n            size = quotient + 1 if (r := r - 1) \u003e= 0 else q\n\n            answer.append(head)\n            last = None\n            while size \u003e 0:\n                last = head\n                head = head.next\n                size -= 1\n            if last: \n                last.next = None\n                \n        return answer",
      "title": "Split Linked List in Parts",
      "url": "/submissions/detail/1042088522/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1694001519,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1042085353,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 725,
      "title_slug": "split-linked-list-in-parts",
      "code": "class Solution(object):\n    def splitListToParts(self, root, k):\n        cur = root\n        for N in xrange(1001):\n            if not cur: break\n            cur = cur.next\n        width, remainder = divmod(N, k)\n\n        ans = []\n        cur = root\n        for i in xrange(k):\n            head = write = ListNode(None)\n            for j in xrange(width + (i \u003c remainder)):\n                write.next = write = ListNode(cur.val)\n                if cur: cur = cur.next\n            ans.append(head.next)\n        return ans",
      "title": "Split Linked List in Parts",
      "url": "/submissions/detail/1042085353/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1694001195,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1042084951,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 725,
      "title_slug": "split-linked-list-in-parts",
      "code": "class Solution(object):\n    def splitListToParts(self, root, k):\n        cur = root\n        for N in xrange(1001):\n            if not cur: \n                break\n            cur = cur.next\n        width, remainder = divmod(N, k)\n\n        ans = []\n        cur = root\n        for i in range(k):\n            head = cur\n            for j in range(width + (i \u003c remainder) - 1):\n                if cur: \n                    cur = cur.next\n            if cur:\n                cur.next, cur = None, cur.next\n            ans.append(head)\n        return ans",
      "title": "Split Linked List in Parts",
      "url": "/submissions/detail/1042084951/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1694001152,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1042044665,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 725,
      "title_slug": "split-linked-list-in-parts",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def splitListToParts(self, head: Optional[ListNode], k: int) -\u003e List[Optional[ListNode]]:\n        heads = []\n\n        while head and len(heads) \u003c k:\n            head.next, next_node = None, head.next \n            heads.append(head)\n            head = next_node\n        \n        if not head:\n            return heads + [None] * (k - len(heads))\n        \n        tails = heads[:]\n        nodes_count = len(tails)\n\n        i = 0\n        while head:\n            if i == nodes_count:\n                i = 0 \n            \n            head.next, next_node = None, head.next \n            tails[i], tails[i].next = head, head\n            head = next_node\n            i += 1\n\n        return heads\n        ",
      "title": "Split Linked List in Parts",
      "url": "/submissions/detail/1042044665/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693997433,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1010111111101111100111100011100001100000000",
      "flag_type": 1
    },
    {
      "id": 1042044375,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 725,
      "title_slug": "split-linked-list-in-parts",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def splitListToParts(self, head: Optional[ListNode], k: int) -\u003e List[Optional[ListNode]]:\n        heads = []\n\n        while head and len(heads) \u003c k:\n            head.next, next_node = None, head.next \n            heads.append(head)\n            head = next_node\n        \n        if not head:\n            return heads + [None] * (k - len(heads))\n        \n        tails = copy(heads)\n        nodes_count = len(tails)\n\n        i = 0\n        while head:\n            if i == nodes_count:\n                i = 0 \n            \n            head.next, next_node = None, head.next \n            tails[i], tails[i].next = head, head\n            head = next_node\n            i += 1\n\n        return heads\n        ",
      "title": "Split Linked List in Parts",
      "url": "/submissions/detail/1042044375/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693997404,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1041053709,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 138,
      "title_slug": "copy-list-with-random-pointer",
      "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\n\nclass Solution:\n    def copyRandomList(self, head: 'Optional[Node]') -\u003e 'Optional[Node]':\n        \n        copied = {None: None}\n\n        def copy_node(node: Node) -\u003e Node:\n            if node in copied:\n                return copied[node]\n            \n            new_node = Node(node.val)\n            copied[node] = new_node\n            new_node.next = copy_node(node.next)\n            new_node.random = copy_node(node.random)\n            return new_node\n        \n        return copy_node(head)\n",
      "title": "Copy List with Random Pointer",
      "url": "/submissions/detail/1041053709/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693903283,
      "status": 10,
      "runtime": "38 ms",
      "is_pending": "Not Pending",
      "memory": "17.8 MB",
      "compare_result": "1111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1041053257,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 138,
      "title_slug": "copy-list-with-random-pointer",
      "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\n\nclass Solution:\n    def copyRandomList(self, head: 'Optional[Node]') -\u003e 'Optional[Node]':\n        \n        copied = {}\n\n        def copy_node(head: Node) -\u003e Node:\n            if not head:\n                return head\n            if head in copied:\n                return copied[head]\n            \n            new_node = Node(head.val)\n            copied[head] = new_node\n            new_node.next = copy_node(new_node.next)\n            new_node.random = copy_node(new_node.random)\n            return new_node\n        \n        return copy_node(head)\n",
      "title": "Copy List with Random Pointer",
      "url": "/submissions/detail/1041053257/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693903234,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0001100000000000000",
      "flag_type": 1
    },
    {
      "id": 1041052827,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 138,
      "title_slug": "copy-list-with-random-pointer",
      "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\n\nclass Solution:\n    def copyRandomList(self, head: 'Optional[Node]') -\u003e 'Optional[Node]':\n        \n        copied = {None: None}\n\n        def copy_node(head: Node) -\u003e Node:\n            if head in copied:\n                return copied[head]\n            \n            new_node = Node(head.val)\n            copied[head] = new_node\n            new_node.next = copy_node(new_node.next)\n            new_node.random = copy_node(new_node.random)\n            return new_node\n        \n        return copy_node(head)\n",
      "title": "Copy List with Random Pointer",
      "url": "/submissions/detail/1041052827/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693903191,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0001100000000000000",
      "flag_type": 1
    },
    {
      "id": 1040286655,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 39,
      "title_slug": "combination-sum",
      "code": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -\u003e List[List[int]]:\n        result = set()\n        cur_nums = []\n\n        def backtrack(cur_sum: int) -\u003e None:\n            if cur_sum == target:\n                result.add(tuple(sorted(cur_nums[:])))\n            if cur_sum \u003e= target:\n                return\n\n            for num in candidates:\n                cur_nums.append(num)\n                backtrack(num + cur_sum)\n                cur_nums.pop() \n\n        backtrack(0)\n\n        return result",
      "title": "Combination Sum",
      "url": "/submissions/detail/1040286655/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693832085,
      "status": 10,
      "runtime": "593 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1040286472,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 39,
      "title_slug": "combination-sum",
      "code": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -\u003e List[List[int]]:\n        result = set()\n        cur_nums = []\n\n        def backtrack(cur_sum: int) -\u003e None:\n            if cur_sum == target:\n                result.add(tuple(cur_nums[:].sort()))\n            if cur_sum \u003e= target:\n                return\n\n            for num in candidates:\n                cur_nums.append(num)\n                backtrack(num + cur_sum)\n                cur_nums.pop() \n\n        backtrack(0)\n\n        return result",
      "title": "Combination Sum",
      "url": "/submissions/detail/1040286472/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693832068,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1040284065,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 39,
      "title_slug": "combination-sum",
      "code": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -\u003e List[List[int]]:\n        \n        result = []\n        cur_nums = []\n        cur_sum = 0\n\n        def backtrack() -\u003e None:\n            if cur_sum == target:\n                result.append(cur_nums[:])\n            if cur_sum \u003e target:\n                return\n\n            for num in candidates:\n                cur_nums.append(num)\n                cur_sum += num\n\n                backtrack()\n                \n                cur_sum -= num\n                cur_num.pop() \n\n        backtrack()\n\n        return result",
      "title": "Combination Sum",
      "url": "/submissions/detail/1040284065/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693831849,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1040170625,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 108,
      "title_slug": "convert-sorted-array-to-binary-search-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -\u003e Optional[TreeNode]:\n        nums_count = len(nums)\n        if nums_count == 0:\n            return None\n        \n        mid = nums_count // 2\n        return TreeNode(nums[mid], \n                        self.sortedArrayToBST(nums[:mid]), \n                        self.sortedArrayToBST(nums[mid+1:]))",
      "title": "Convert Sorted Array to Binary Search Tree",
      "url": "/submissions/detail/1040170625/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693820641,
      "status": 10,
      "runtime": "55 ms",
      "is_pending": "Not Pending",
      "memory": "17.9 MB",
      "compare_result": "1111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1040147646,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 108,
      "title_slug": "convert-sorted-array-to-binary-search-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -\u003e Optional[TreeNode]:\n        nums_count = len(nums)\n        mid = nums_count // 2\n        print(mid) \n        root = TreeNode(nums[mid])\n        left_tail, right_tail = root, root\n        for i in reversed(range(mid)):\n            left_tail.left = TreeNode(nums[i])\n            left_tail = left_tail.left\n        \n        for i in range(mid + 1, nums_count):\n            right_tail.right = TreeNode(nums[i])\n            right_tail = right_tail.right\n\n        return root",
      "title": "Convert Sorted Array to Binary Search Tree",
      "url": "/submissions/detail/1040147646/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693818535,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111100000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1040143293,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 108,
      "title_slug": "convert-sorted-array-to-binary-search-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -\u003e Optional[TreeNode]:\n        nums_count = len(nums)\n        mid = nums_count // 2\n        root = TreeNode(nums[mid])\n        left_tail, right_tail = root, root\n        for i in reversed(range(mid)):\n            left_tail.left = TreeNode(nums[i])\n            left_tail = left_tail.left\n        \n        for i in range(mid + 1, nums_count):\n            right_tail.right = TreeNode(nums[i])\n            right_tail = right_tail.right\n\n        return root",
      "title": "Convert Sorted Array to Binary Search Tree",
      "url": "/submissions/detail/1040143293/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693818117,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111100000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1040142750,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 108,
      "title_slug": "convert-sorted-array-to-binary-search-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -\u003e Optional[TreeNode]:\n        nums_count = len(nums)\n        mid = nums_count // 2\n        root = TreeNode(nums[mid])\n        left_tail, right_tail = root, root\n        for i in reversed(range(mid)):\n            left_tail.left = TreeNode(nums[i])\n            left_tail = left_tail.left\n        \n        for i in range(mid + 1, nums_count):\n            right_tail.right = TreeNode(nums[i])\n            right_tail = right_tail.right\n\n        return root",
      "title": "Convert Sorted Array to Binary Search Tree",
      "url": "/submissions/detail/1040142750/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1693818066,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111100000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1044722121,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 945,
      "title_slug": "snakes-and-ladders",
      "code": "class Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -\u003e int:\n        n = len(board)\n        board.reverse()\n\n        def intToPos(square):\n            r = (square - 1) // n\n            c = (square - 1) % n\n            if r % 2:\n                c = n - 1 - c\n            return [r, c]\n\n        q = deque()\n        q.append([1, 0]) \n        visit = set()\n        while q:\n            square, moves = q.popleft()\n            for i in range(1, 7):\n                nextSquare = square + i\n                r, c = intToPos(nextSquare)\n                if board[r][c] != -1:\n                    nextSquare = board[r][c]\n                if nextSquare == n * n:\n                    return moves + 1\n                if nextSquare not in visit:\n                    visit.add(nextSquare)\n                    q.append([nextSquare, moves + 1])\n        return -1",
      "title": "Snakes and Ladders",
      "url": "/submissions/detail/1044722121/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694264815,
      "status": 10,
      "runtime": "92 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1044721872,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 945,
      "title_slug": "snakes-and-ladders",
      "code": "def snakesAndLadders(self, board: List[List[int]]) -\u003e int:\n        n = len(board)\n        board.reverse()\n\n        def intToPos(square):\n            r = (square - 1) // n\n            c = (square - 1) % n\n            if r % 2:\n                c = n - 1 - c\n            return [r, c]\n\n        q = deque()\n        q.append([1, 0]) \n        visit = set()\n        while q:\n            square, moves = q.popleft()\n            for i in range(1, 7):\n                nextSquare = square + i\n                r, c = intToPos(nextSquare)\n                if board[r][c] != -1:\n                    nextSquare = board[r][c]\n                if nextSquare == n * n:\n                    return moves + 1\n                if nextSquare not in visit:\n                    visit.add(nextSquare)\n                    q.append([nextSquare, moves + 1])\n        return -1",
      "title": "Snakes and Ladders",
      "url": "/submissions/detail/1044721872/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694264790,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1044711108,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 945,
      "title_slug": "snakes-and-ladders",
      "code": "class Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -\u003e int:\n        side_length = len(board)\n        square_count = side_length ** 2\n\n        @cache\n        def get_square(square: int) -\u003e int:\n            quotient, remainder = divmod(square - 1, side_length)\n            col = remainder if quotient % 2 == 0 else side_length - remainder - 1\n            row = side_length - quotient - 1\n            return board[row][col]\n\n        @cache\n        def dp(square: int) -\u003e int:\n            if square \u003e= square_count:\n                return 0\n            target = get_square(square)\n            if target == square_count:\n                return 0\n            if target != -1 and target \u003c square:\n                return -1\n            elif target != -1:\n                square = target\n\n            min_move_count = -1\n            for move in range(1, 7):\n                move_count = 1 + dp(square + move) \n                if move_count \u003e 0 and (min_move_count == -1 or move_count \u003c min_move_count):\n                    min_move_count = move_count\n            return min_move_count\n\n        return dp(1)",
      "title": "Snakes and Ladders",
      "url": "/submissions/detail/1044711108/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694263703,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111110111111111111111111111111111111111111111011111111111111111111111111111011111111111111111111111011110111111110011011111100111111111111111110111111111101111111111111101111111111111010110111",
      "flag_type": 1
    },
    {
      "id": 1044703361,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 945,
      "title_slug": "snakes-and-ladders",
      "code": "class Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -\u003e int:\n        side_length = len(board)\n        square_count = side_length ** 2\n\n        @cache\n        def get_square(square: int) -\u003e int:\n            quotient, remainder = divmod(square - 1, side_length)\n            col = remainder if quotient % 2 == 0 else side_length - remainder - 1\n            row = side_length - quotient - 1\n            return board[row][col]\n\n        @cache\n        def dp(square: int) -\u003e int:\n            if square \u003e= square_count:\n                return 0\n            \n            target = get_square(square)\n            if target == square_count:\n                return 0\n            if target != -1 and target \u003c square:\n                return -1\n            elif target != -1:\n                square = target\n\n            min_moves = -1\n            for move in range(1, 7):\n                moves = 1 + dp(square + move)\n                if moves == 0:\n                    continue\n                if min_moves == -1 or moves \u003c min_moves:\n                   min_moves = moves\n\n            return min_moves\n\n        return dp(1)",
      "title": "Snakes and Ladders",
      "url": "/submissions/detail/1044703361/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694262915,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111110111111111111111111111111111111111111111011111111111111111111111111111011111111111111111111111011110111111110011011111100111111111111111110111111111101111111111111101111111111111010110111",
      "flag_type": 1
    },
    {
      "id": 1044699632,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 945,
      "title_slug": "snakes-and-ladders",
      "code": "class Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -\u003e int:\n        side_length = len(board)\n        square_count = side_length ** 2\n\n        @cache\n        def get_square(square: int) -\u003e int:\n            quotient, remainder = divmod(square - 1, side_length)\n            col = remainder if quotient % 2 == 0 else side_length - remainder - 1\n            row = side_length - quotient - 1\n            return board[row][col]\n\n        @cache\n        def dp(square: int) -\u003e int:\n            if square \u003e= square_count:\n                return 0\n            \n            target = get_square(square)\n            if target != -1 and target \u003c square:\n                return -1\n            elif target != -1:\n                square = target\n\n            min_moves = -1\n            for move in range(1, 7):\n                moves = 1 + dp(square + move)\n                if moves == 0:\n                    continue\n                if min_moves == -1 or moves \u003c min_moves:\n                   min_moves = moves\n\n            return min_moves\n\n        return dp(1)",
      "title": "Snakes and Ladders",
      "url": "/submissions/detail/1044699632/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694262534,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11100110010101101100011110000111111111011101101111111111111111111111011110101111111111010111101111011111111111110111111101011110111111110011011111000111111011111111110111111111101111111111111101111111111111010110111",
      "flag_type": 1
    },
    {
      "id": 1044519790,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 377,
      "title_slug": "combination-sum-iv",
      "code": "class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -\u003e int:\n\n        @cache\n        def dp(cur_sum: int) -\u003e int:\n            if cur_sum == target:\n                return 1\n            if cur_sum \u003e target:\n                return 0\n            \n            return sum(dp(cur_sum + num) for num in nums)\n\n        return dp(0)\n            ",
      "title": "Combination Sum IV",
      "url": "/submissions/detail/1044519790/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694244057,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.9 MB",
      "compare_result": "111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1044519670,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 377,
      "title_slug": "combination-sum-iv",
      "code": "class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -\u003e int:\n\n        @cache\n        def dp(cur_sum: int) -\u003e int:\n            if cur_sum == target:\n                return 1\n            if cur_sum \u003e target:\n                return 0\n            \n            return sum(backtrack(cur_sum + num) for num in nums)\n\n        return dp(0)\n            ",
      "title": "Combination Sum IV",
      "url": "/submissions/detail/1044519670/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694244047,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000",
      "flag_type": 1
    },
    {
      "id": 1044519448,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 377,
      "title_slug": "combination-sum-iv",
      "code": "class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -\u003e int:\n\n        @cache\n        def backtrack(cur_sum: int) -\u003e int:\n            if cur_sum == target:\n                return 1\n            if cur_sum \u003e target:\n                return 0\n            \n            return sum(backtrack(cur_sum + num) for num in nums)\n\n        return backtrack(0)\n            ",
      "title": "Combination Sum IV",
      "url": "/submissions/detail/1044519448/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694244026,
      "status": 10,
      "runtime": "38 ms",
      "is_pending": "Not Pending",
      "memory": "17 MB",
      "compare_result": "111111111111111",
      "flag_type": 1
    },
    {
      "id": 1044518246,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 377,
      "title_slug": "combination-sum-iv",
      "code": "class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -\u003e int:\n\n        def backtrack(cur_sum) -\u003e int:\n            if cur_sum == target:\n                return 1\n            if cur_sum \u003e target:\n                return 0\n            \n            return sum(backtrack(cur_sum + num) for num in nums)\n\n        return backtrack(0)\n            ",
      "title": "Combination Sum IV",
      "url": "/submissions/detail/1044518246/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694243910,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111110000000",
      "flag_type": 1
    },
    {
      "id": 1044517658,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 377,
      "title_slug": "combination-sum-iv",
      "code": "class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -\u003e int:\n        stack = []\n\n        def backtrack(cur_sum) -\u003e int:\n            if cur_sum == target:\n                return 1\n            if cur_sum \u003e target:\n                return 0\n            \n            comb_count = 0\n\n            for num in nums:\n                stack.append(num)\n                comb_count += backtrack(cur_sum + num)\n                stack.pop()\n            \n            return comb_count\n        \n        return backtrack(0)\n            ",
      "title": "Combination Sum IV",
      "url": "/submissions/detail/1044517658/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694243855,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111110000000",
      "flag_type": 1
    },
    {
      "id": 1043928491,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 162,
      "title_slug": "find-peak-element",
      "code": "class Solution:\n    def findPeakElement(self, nums: List[int]) -\u003e int:\n        num_count = len(nums)\n        if num_count \u003c 4:\n            return sorted(enumerate(nums), key=lambda item: item[1])[-1][0]\n            \n        left, right = 0, num_count - 1\n\n        while left \u003c right:\n            mid = left + (right - left) // 2\n            num_left, num_mid, num_right = nums[mid-1], nums[mid], nums[mid+1]\n            if num_left \u003c num_mid \u003e num_right:\n                return mid\n        \n            if num_left \u003e num_mid:\n                right = mid\n            else:\n                left = mid\n\n        return left\n\n\n        ",
      "title": "Find Peak Element",
      "url": "/submissions/detail/1043928491/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694180586,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111110000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1043821324,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 118,
      "title_slug": "pascals-triangle",
      "code": "class Solution:\n    def generate(self, numRows: int) -\u003e List[List[int]]:\n        answer = [[1]]\n        numRows -= 1\n\n        while numRows \u003e 0:\n            cur, prev = [1], answer[-1]\n            for i in range(len(prev) - 1):\n                cur.append(prev[i] + prev[i+1])\n            cur.append(1)\n            answer.append(cur)\n            numRows -= 1\n        \n        return answer",
      "title": "Pascal's Triangle",
      "url": "/submissions/detail/1043821324/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694169669,
      "status": 10,
      "runtime": "41 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1043216738,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 79,
      "title_slug": "word-search",
      "code": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -\u003e bool:\n        row_count, col_count = len(board), len(board[0])\n        word_length = len(word)\n        delta = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        if word_length == 1:\n            return any(word in row for row in board)\n        if word_length \u003e row_count * col_count:\n            return False\n\n        visited = set()\n\n        def backtrack(row: int, col: int, target: int) -\u003e bool:\n            if target == word_length:\n                return True\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or (\n                (row, col) in visited or board[row][col] != word[target]\n            ):\n                return False\n\n            visited.add((row, col))\n            answer = any(backtrack(row + delta_row, col + delta_col, target + 1)\n                         for delta_row, delta_col in delta)\n            visited.remove((row, col))\n            return answer\n\n        return any(backtrack(row, col, 0) \n                   for row in range(row_count) \n                   for col in range(col_count))",
      "title": "Word Search",
      "url": "/submissions/detail/1043216738/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694106543,
      "status": 10,
      "runtime": "9244 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1043216125,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 79,
      "title_slug": "word-search",
      "code": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -\u003e bool:\n        row_count, col_count = len(board), len(board[0])\n        word_length = len(word)\n        delta = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        if word_length == 1:\n            return any(word in row for row in board)\n        if word_length \u003e row_count * col_count:\n            return False\n\n        visited = set()\n\n        def backtrack(row: int, col: int, target: int) -\u003e bool:\n            if target == word_length:\n                return True\n            if not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count or (\n                (row, col) in visited or board[row][col] != word[target]\n            ):\n                return False\n\n            visited.add((row, col))\n            answer = any(backtrack(row + delta_row, col + delta_col, visited, target + 1)\n                         for delta_row, delta_col in delta):\n            visited.remove((row, col))\n            return answer\n\n        return any(backtrack(row, col, 0) \n                   for row in range(row_count) \n                   for col in range(col_count))",
      "title": "Word Search",
      "url": "/submissions/detail/1043216125/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694106503,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1043209423,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 79,
      "title_slug": "word-search",
      "code": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -\u003e bool:\n        row_count, col_count = len(board), len(board[0])\n        word_length = len(word)\n        delta = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        if word_length == 1:\n            return any(word in row for row in board)\n\n        def backtrack(row: int, col: int, visited: Set, target: int) -\u003e bool:\n            if (row, col) in visited or not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return False\n\n            if board[row][col] != word[target]:\n                return False\n            \n            if target == word_length - 1:\n                return True\n\n            visited.add((row, col))\n            if any(backtrack(row + delta_row, col + delta_col, visited, target + 1)\n                   for delta_row, delta_col in delta):\n                return True\n            visited.remove((row, col))\n            return False\n        \n        start_char = word[0]\n\n        return any(backtrack(row, col, set(), 0) \n                   for row in range(row_count) \n                   for col in range(col_count)\n                   if board[row][col] == start_char)",
      "title": "Word Search",
      "url": "/submissions/detail/1043209423/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694106009,
      "status": 10,
      "runtime": "9144 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1043205644,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 79,
      "title_slug": "word-search",
      "code": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -\u003e bool:\n        row_count, col_count = len(board), len(board[0])\n        word_length = len(word)\n        delta = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        if word_length == 1:\n            return any(word in row for row in board)\n\n        def backtrack(row: int, col: int, visited: Set, target: int) -\u003e bool:\n            if (row, col) in visited or not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return False\n\n            if board[row][col] != word[target]:\n                return False\n            \n            if target == word_length - 1:\n                return True\n\n            visited.add((row, col))\n            if any(backtrack(row + delta_row, col + delta_col, visited, target + 1)\n                   for delta_row, delta_col in delta):\n                return True\n            visited.remove((row, col))\n            return False\n        \n        for row in range(row_count):\n            for col in range(col_count):\n                if backtrack(row, col, set(), 0):\n                    return True\n        \n        return False",
      "title": "Word Search",
      "url": "/submissions/detail/1043205644/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694105731,
      "status": 10,
      "runtime": "9148 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1043173686,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 79,
      "title_slug": "word-search",
      "code": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -\u003e bool:\n        row_count, col_count = len(board), len(board[0])\n        word_length = len(word)\n        visited = set()\n        delta = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        if word_length == 1:\n            return any(word in row for row in board)\n\n        def backtrack(row: int, col: int, target: int) -\u003e bool:\n            if (row, col) in visited or not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return False\n\n            is_valid = board[row][col] == word[target]\n            if target == word_length - 1:\n                return is_valid\n\n            visited.add((row, col))\n            for delta_row, delta_col in delta:\n                new_row, new_col = row + delta_row, col + delta_col\n                try_next = is_valid and backtrack(new_row, new_col, target + 1)\n                try_start = backtrack(new_row, new_col, 0)\n                if try_next or try_start:\n                    return True\n\n            visited.remove((row, col))\n            return False\n\n        return backtrack(0, 0, 0)",
      "title": "Word Search",
      "url": "/submissions/detail/1043173686/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694103400,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111110111000100011110111111111111111110000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1043173431,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 79,
      "title_slug": "word-search",
      "code": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -\u003e bool:\n        row_count, col_count = len(board), len(board[0])\n        word_length = len(word)\n        visited = set()\n        delta = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n        if word_length == 1:\n            return any(char in row for row in board)\n\n        def backtrack(row: int, col: int, target: int) -\u003e bool:\n            if (row, col) in visited or not 0 \u003c= row \u003c row_count or not 0 \u003c= col \u003c col_count:\n                return False\n\n            is_valid = board[row][col] == word[target]\n            if target == word_length - 1:\n                return is_valid\n\n            visited.add((row, col))\n            for delta_row, delta_col in delta:\n                new_row, new_col = row + delta_row, col + delta_col\n                try_next = is_valid and backtrack(new_row, new_col, target + 1)\n                try_start = backtrack(new_row, new_col, 0)\n                if try_next or try_start:\n                    return True\n\n            visited.remove((row, col))\n            return False\n\n        return backtrack(0, 0, 0)",
      "title": "Word Search",
      "url": "/submissions/detail/1043173431/",
      "lang_name": "Python3",
      "time": "4 months, 4 weeks",
      "timestamp": 1694103381,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11100000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1043078348,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 92,
      "title_slug": "reverse-linked-list-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -\u003e Optional[ListNode]:\n        cur_node = 1\n        left_head, left_tail = head if left \u003e 1 else None, None\n\n        while cur_node \u003c left:\n            cur_node += 1\n            head, left_tail = head.next, head\n\n        cur_node += 1\n        mid_head, mid_tail, head = head, head, head.next\n        mid_head.next = None\n\n        while cur_node \u003c= right:\n            cur_node += 1\n            mid_head, head.next, head = head, mid_head, head.next\n    \n        mid_tail.next = head\n        if left_head:\n            left_tail.next = mid_head\n        else:\n            left_head = mid_head\n\n        return left_head",
      "title": "Reverse Linked List II",
      "url": "/submissions/detail/1043078348/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1694096031,
      "status": 10,
      "runtime": "33 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1043078135,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 92,
      "title_slug": "reverse-linked-list-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -\u003e Optional[ListNode]:\n        cur_node = 1\n        left_head, left_tail = head if left \u003e 1 else None, None\n\n        while cur_node \u003c left:\n            cur_node += 1\n            head, left_tail = head.next, head\n\n        cur_node += 1\n        mid_head, mid_tail, head = head, head, head.next\n        mid_head.next = None\n\n        while cur_node \u003c= right:\n            cur_node += 1\n            next_node = head.next\n            mid_head, head.next = head, mid_head\n            head = next_node\n    \n        mid_tail.next = head\n        if left_head:\n            left_tail.next = mid_head\n        else:\n            left_head = mid_head\n\n        return left_head",
      "title": "Reverse Linked List II",
      "url": "/submissions/detail/1043078135/",
      "lang_name": "Python3",
      "time": "5 months",
      "timestamp": 1694096013,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1046647036,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 136,
      "title_slug": "single-number",
      "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -\u003e int:\n        nums_count = len(nums)\n        if nums_count == 1:\n            return nums[0]\n        \n        nums.sort()\n        for i in range(0, nums_count, 2):\n            if i + 1 == nums_count:\n                return nums[i]\n\n            cur_num, next_num = nums[i], nums[i+1]\n            if cur_num == next_num:\n                continue\n            \n            return cur_num\n        \n        return 0",
      "title": "Single Number",
      "url": "/submissions/detail/1046647036/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694447748,
      "status": 10,
      "runtime": "131 ms",
      "is_pending": "Not Pending",
      "memory": "19.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1046639098,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 111,
      "title_slug": "minimum-depth-of-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minDepth(self, root: Optional[TreeNode]) -\u003e int:\n        \n        def dfs(node: TreeNode) -\u003e int:\n            if not node:\n                return 0\n\n            return 1 + min((depth for depth in (dfs(node.left), dfs(node.right)) if depth \u003e 0),\n                           default=0)\n\n        return dfs(root)",
      "title": "Minimum Depth of Binary Tree",
      "url": "/submissions/detail/1046639098/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694447170,
      "status": 10,
      "runtime": "595 ms",
      "is_pending": "Not Pending",
      "memory": "58.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1046638836,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 111,
      "title_slug": "minimum-depth-of-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minDepth(self, root: Optional[TreeNode]) -\u003e int:\n        if not root:\n            return 1\n        \n        def dfs(node: TreeNode) -\u003e int:\n            if not node:\n                return 0\n\n            return 1 + min((depth for depth in (dfs(node.left), dfs(node.right)) if depth \u003e 0),\n                           default=0)\n\n        return dfs(root)",
      "title": "Minimum Depth of Binary Tree",
      "url": "/submissions/detail/1046638836/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694447151,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11011111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1046627083,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 94,
      "title_slug": "binary-tree-inorder-traversal",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -\u003e List[int]:\n        def get_nodes(root: TreeNode) -\u003e Generator[None, None, TreeNode]:\n            if not root:\n                return\n\n            yield from get_nodes(root.left)\n            yield root.val\n            yield from get_nodes(root.right)\n        \n        return tuple(get_nodes(root))",
      "title": "Binary Tree Inorder Traversal",
      "url": "/submissions/detail/1046627083/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694446275,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1046626817,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 94,
      "title_slug": "binary-tree-inorder-traversal",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -\u003e List[int]:\n        def get_nodes(root: TreeNode) -\u003e Generator[None, None, TreeNode]:\n            if not root:\n                return\n\n            if root.left:\n                yield from get_nodes(root.left)\n            \n            yield root.val\n\n            if root.right:\n                yield from get_nodes(root.right)\n        \n        return tuple(get_nodes(root))",
      "title": "Binary Tree Inorder Traversal",
      "url": "/submissions/detail/1046626817/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694446255,
      "status": 10,
      "runtime": "41 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1046482817,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1407,
      "title_slug": "group-the-people-given-the-group-size-they-belong-to",
      "code": "class Solution:\n    def groupThePeople(self, groupSizes: List[int]) -\u003e List[List[int]]:\n        answer = []\n        cur_groups = defaultdict(list)\n        \n        for i in range(len(groupSizes)):\n            size = groupSizes[i]\n            group = cur_groups[size]\n            group.append(i)\n            if len(group) == size:\n                answer.append(group)\n                del cur_groups[size]\n        \n        return answer",
      "title": "Group the People Given the Group Size They Belong To",
      "url": "/submissions/detail/1046482817/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694434015,
      "status": 10,
      "runtime": "69 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1045535680,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1461,
      "title_slug": "count-all-valid-pickup-and-delivery-options",
      "code": "class Solution:\n    def countOrders(self, n: int) -\u003e int:\n        # P1, D1                 [01] -\u003e (P1, D1)\n        # P1, D1, P2, D2         [06] -\u003e (P1, P2, D1, D2), (P1, P2, D2, D1), \n        #                                (P1, D1, P2, D2), (P2, P1, D1, D2), \n        #                                (P2, P1, D2, D1), (P2, D2, P1, D1).\n        # P1, D1, P2, D2, P3, D3 [90]\n        \n        ways_count = 1\n        mod = 10**9 + 7\n        for order in range(2, n + 1):\n            pos_avail_count = 1 + (order - 1) * 2\n            cur_ways_count = pos_avail_count * (pos_avail_count + 1) // 2\n            ways_count = (ways_count * cur_ways_count) % mod\n\n        return ways_count",
      "title": "Count All Valid Pickup and Delivery Options",
      "url": "/submissions/detail/1045535680/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694339294,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1045529518,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1461,
      "title_slug": "count-all-valid-pickup-and-delivery-options",
      "code": "class Solution:\n    def countOrders(self, n: int) -\u003e int:\n        # P1, D1                 [01] -\u003e (P1, D1)\n        # P1, D1, P2, D2         [06] -\u003e (P1, P2, D1, D2), (P1, P2, D2, D1), \n        #                                (P1, D1, P2, D2), (P2, P1, D1, D2), \n        #                                (P2, P1, D2, D1), (P2, D2, P1, D1).\n        # P1, D1, P2, D2, P3, D3 [90]\n        \n        ways_count = 1\n        for order in range(2, n + 1):\n            avail_pos_count = 1 + (order - 1) * 2\n            ways_count *= sum(avail_pos_count - pos for pos in range(avail_pos_count))\n\n        return ways_count % (10**9 + 7)",
      "title": "Count All Valid Pickup and Delivery Options",
      "url": "/submissions/detail/1045529518/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694338658,
      "status": 10,
      "runtime": "120 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1045529288,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1461,
      "title_slug": "count-all-valid-pickup-and-delivery-options",
      "code": "class Solution:\n    def countOrders(self, n: int) -\u003e int:\n        # P1, D1                 [01] -\u003e (P1, D1)\n        # P1, D1, P2, D2         [06] -\u003e (P1, P2, D1, D2), (P1, P2, D2, D1), \n        #                                (P1, D1, P2, D2), (P2, P1, D1, D2), \n        #                                (P2, P1, D2, D1), (P2, D2, P1, D1).\n        # P1, D1, P2, D2, P3, D3 [90]\n        \n        ways_count = 1\n        for order in range(2, n + 1):\n            avail_pos_count = 1 + (order - 1) * 2\n            ways_count *= sum(avail_pos_count - pos for pos in range(avail_pos_count))\n\n        return ways_count ",
      "title": "Count All Valid Pickup and Delivery Options",
      "url": "/submissions/detail/1045529288/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694338636,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111100000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1045511473,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 1461,
      "title_slug": "count-all-valid-pickup-and-delivery-options",
      "code": "class Solution:\n    def countOrders(self, n: int) -\u003e int:\n\n        pickup, delivery = set(), set()\n\n        def backtrack() -\u003e int:\n            if len(pickup) == len(delivery) == n:\n                return 1\n            \n            ways_count = 0\n\n            for i in range(n):\n                is_picked, is_delivered = i in pickup, i in delivery\n                if not is_picked and not is_delivered:\n                    pickup.add(i)\n                    ways_count += backtrack()\n                    pickup.remove(i)\n                \n                if is_picked and not is_delivered:\n                    delivery.add(i)\n                    ways_count += backtrack()\n                    delivery.remove(i)                    \n\n            return ways_count\n\n        return backtrack()",
      "title": "Count All Valid Pickup and Delivery Options",
      "url": "/submissions/detail/1045511473/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694336846,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1045511109,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1461,
      "title_slug": "count-all-valid-pickup-and-delivery-options",
      "code": "class Solution:\n    def countOrders(self, n: int) -\u003e int:\n\n        pickup, delivery = set(), set()\n\n        def backtrack() -\u003e int:\n            if len(pickup) == len(delivery) == n:\n                return 1\n            \n            ways_count = 0\n\n            for i in range(n):\n                is_picked, is_delivered = i in pickup, i in delivery\n                if not is_picked:\n                    pickup.add(i)\n                    ways_count += backtrack()\n                    pickup.remove(i)\n                \n                if not is_delivered:\n                    delivery.add(i)\n                    ways_count += backtrack()\n                    delivery.remove(i)                    \n\n            return ways_count\n\n        return backtrack()",
      "title": "Count All Valid Pickup and Delivery Options",
      "url": "/submissions/detail/1045511109/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694336812,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1045510640,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1461,
      "title_slug": "count-all-valid-pickup-and-delivery-options",
      "code": "class Solution:\n    def countOrders(self, n: int) -\u003e int:\n\n        pickup, delivery = set(), set()\n\n        def backtrack() -\u003e int:\n            if len(pickup) == len(delivery) == n:\n                return 1\n            \n            ways_count = 0\n\n            for i in range(n):\n                if i not in pickup:\n                    pickup.add(i)\n                    ways_count += backtrack()\n                    pickup.remove(i)\n                \n                if i not in delivery:\n                    delivery.add(i)\n                    ways_count += backtrack()\n                    delivery.remove(i)                    \n\n            return ways_count\n\n        return backtrack()",
      "title": "Count All Valid Pickup and Delivery Options",
      "url": "/submissions/detail/1045510640/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694336768,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1045445214,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 1461,
      "title_slug": "count-all-valid-pickup-and-delivery-options",
      "code": "class Solution:\n    def countOrders(self, n: int) -\u003e int:\n\n        pickup, delivery = set(), set()\n\n        def backtrack() -\u003e int:\n            if len(pickup) == len(delivery) == n:\n                return 1\n            \n            ways_count = 0\n\n            for i in range(n):\n                is_picked, is_delivered = i in pickup, i in delivery\n                if not is_picked and not is_delivered:\n                    pickup.add(i)\n                    ways_count += backtrack()\n                    pickup.remove(i)\n                \n                if is_picked and not is_delivered:\n                    delivery.add(i)\n                    ways_count += backtrack()\n                    delivery.remove(i)                    \n\n            return ways_count\n\n        return backtrack()",
      "title": "Count All Valid Pickup and Delivery Options",
      "url": "/submissions/detail/1045445214/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694330283,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1044895894,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 91,
      "title_slug": "decode-ways",
      "code": "class Solution:\n    def numDecodings(self, s: str) -\u003e int:\n        char_count = len(s)\n\n        @cache\n        def dfs(i: int) -\u003e int:\n            if i == char_count: \n                return 1\n            if s[i] == \"0\": \n                return 0\n            return dfs(i + 1) + (\n                dfs(i + 2) if i + 1 \u003c char_count and s[i:i+2] \u003c \"27\" else 0\n            )\n\n        return dfs(0)",
      "title": "Decode Ways",
      "url": "/submissions/detail/1044895894/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694279522,
      "status": 10,
      "runtime": "46 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1044895401,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 91,
      "title_slug": "decode-ways",
      "code": "class Solution:\n    def numDecodings(self, s: str) -\u003e int:\n        char_count = len(s)\n\n        @cache\n        def dfs(i: int) -\u003e int:\n            if i == char_count: \n                return 1\n            if s[i] == \"0\": \n                return 0\n            return dfs(i + 1) + (dfs(i + 2) if i + 1 \u003c char_count and s[i:i+2] \u003c \"27\" else 0)\n\n        return dfs(0)",
      "title": "Decode Ways",
      "url": "/submissions/detail/1044895401/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694279483,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1044894614,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 91,
      "title_slug": "decode-ways",
      "code": "class Solution:\n    def numDecodings(self, s: str) -\u003e int:\n        char_count = len(s)\n\n        @cache\n        def dfs(i: int) -\u003e int:\n            if i == char_count: \n                return 1\n            if s[i] == \"0\": \n                return 0\n            ways_count = dfs(i + 1)\n            if i + 1 \u003c char_count and s[i:i+2] \u003c \"27\":\n                ways_count += dfs(i + 2)\n            return ways_count\n\n        return dfs(0)",
      "title": "Decode Ways",
      "url": "/submissions/detail/1044894614/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694279418,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1044884848,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 91,
      "title_slug": "decode-ways",
      "code": "class Solution:\n    def numDecodings(self, s: str) -\u003e int:\n        char_count = len(s)\n        if s[0] == \"0\":\n            return 0\n        if char_count == 1:\n            return 1\n\n        ways_count = 1\n        for i in range(1, char_count):\n            num, next_num = s[i-1:i+1], s[i+1] if i + 1 \u003c char_count else \"-1\"\n            if num == \"00\":\n                return 0\n            if \"0\" in num or num \u003e \"26\" or next_num == \"0\":\n                continue\n            ways_count += 1\n        \n        return ways_count",
      "title": "Decode Ways",
      "url": "/submissions/detail/1044884848/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694278693,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111101101110011111111001110111111111111111111111101111111110111111111011111111101111111110111111111011111111101111111110111110111111101111011101110001111110111111001110111111110111110100011111111111111111110111111101111100000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1044883938,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 91,
      "title_slug": "decode-ways",
      "code": "class Solution:\n    def numDecodings(self, s: str) -\u003e int:\n        char_count = len(s)\n        if s[0] == \"0\":\n            return 0\n        if char_count == 1:\n            return 1\n\n        ways_count = 1\n        for i in range(1, char_count):\n            num, next_num = s[i-1:i+1], s[i+1] if i + 1 \u003c char_count else \"-1\"\n            if num == \"00\":\n                return 0\n            if \"0\" in num or num \u003e \"27\" or next_num == \"0\":\n                continue\n            ways_count += 1\n        \n        return ways_count",
      "title": "Decode Ways",
      "url": "/submissions/detail/1044883938/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694278624,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111110111101101110011111110001110111111111111111111111101111111110111111111011111111101111111110111111111011111111101111111110111110111111101111011101110001111110111111001110111111110111110100011111111111111111110111111101111100000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1044869551,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 91,
      "title_slug": "decode-ways",
      "code": "class Solution:\n    def numDecodings(self, s: str) -\u003e int:\n        char_count = len(s)\n        if s[0] == \"0\":\n            return 0\n        if char_count == 1:\n            return 1\n            \n        ways_count = 1\n        for i in range(1, char_count):\n            if s[i] == \"0\":\n                continue\n            ways_count += 1 if s[i-1:i+1] \u003c \"27\" else 0\n        \n        return ways_count",
      "title": "Decode Ways",
      "url": "/submissions/detail/1044869551/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694277521,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111110000000000011000111000000011111111111111111111101111111110111111111011111111101111111110111111111011111111101111111110111110101111101111011101110001111110011111001110011111110111110100011111111111111011100111111101110100000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1044869242,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 91,
      "title_slug": "decode-ways",
      "code": "class Solution:\n    def numDecodings(self, s: str) -\u003e int:\n        char_count = len(s)\n        if char_count == 1:\n            return 1\n        if s[0] == \"0\":\n            return 0\n        ways_count = 1\n        for i in range(1, char_count):\n            if s[i] == \"0\":\n                continue\n            ways_count += 1 if s[i-1:i+1] \u003c \"27\" else 0\n        \n        return ways_count",
      "title": "Decode Ways",
      "url": "/submissions/detail/1044869242/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694277497,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11101111111110000000000011000111000000011111111111111111111101111111110111111111011111111101111111110111111111011111111101111111110111110101111101111011101110001111110011111001110011111110111110100011111111111111011100111111101110100000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1047428915,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 969,
      "title_slug": "number-of-recent-calls",
      "code": "class RecentCounter:\n\n    def __init__(self):\n        self._queue = deque()\n\n    def ping(self, t: int) -\u003e int:\n        self._queue.append(t)\n        while self._queue:\n            if t - self._queue[0] \u003e 3000:\n                self._queue.popleft()\n            else:\n                break\n\n        return len(self._queue) \n\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()\n# param_1 = obj.ping(t)",
      "title": "Number of Recent Calls",
      "url": "/submissions/detail/1047428915/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694521265,
      "status": 10,
      "runtime": "217 ms",
      "is_pending": "Not Pending",
      "memory": "21.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1047428596,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 969,
      "title_slug": "number-of-recent-calls",
      "code": "class RecentCounter:\n\n    def __init__(self):\n        self._queue = queue()\n\n    def ping(self, t: int) -\u003e int:\n        self._queue.append(t)\n        while self._queue:\n            if t - self._queue[0] \u003e 3000:\n                self._queue.popleft()\n            else:\n                break\n\n        return len(self._queue) \n\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()\n# param_1 = obj.ping(t)",
      "title": "Number of Recent Calls",
      "url": "/submissions/detail/1047428596/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694521233,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1047394948,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 303,
      "title_slug": "range-sum-query-immutable",
      "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self._sums = tuple(accumulate(nums))\n\n    def sumRange(self, left: int, right: int) -\u003e int:\n        # [-2, 0, 3, -5, 2, -1], [-2, -2, 1, -4, -2, -3]\n        # [0, 2] -\u003e 1\n        if left == 0:\n            return self._sums[right]\n\n        return self._sums[right] - self._sums[left-1]\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(left,right)",
      "title": "Range Sum Query - Immutable",
      "url": "/submissions/detail/1047394948/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694517838,
      "status": 10,
      "runtime": "77 ms",
      "is_pending": "Not Pending",
      "memory": "20.1 MB",
      "compare_result": "111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1047389431,
      "status_display": "Memory Limit Exceeded",
      "lang": "python3",
      "question_id": 303,
      "title_slug": "range-sum-query-immutable",
      "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self._nums = nums\n\n    @cache\n    def sumRange(self, left: int, right: int) -\u003e int:\n        if right == left:\n            return self._nums[left]\n        if right - left == 1:\n            return self._nums[left] + self._nums[right]\n        \n        return self.sumRange(left, left + 1) + self.sumRange(left + 2, right)\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(left,right)",
      "title": "Range Sum Query - Immutable",
      "url": "/submissions/detail/1047389431/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694517282,
      "status": 12,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111110",
      "flag_type": 1
    },
    {
      "id": 1047388315,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 303,
      "title_slug": "range-sum-query-immutable",
      "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self._nums = nums\n\n    @cache\n    def sumRange(self, left: int, right: int) -\u003e int:\n        if right == left:\n            return self._nums[left]\n        if right - left == 1:\n            return self._nums[right] + self._nums[left]\n        mid = left + (right - left) // 2\n        return self.sumRange(left, mid) + self.sumRange(mid + 1, right)\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(left,right)",
      "title": "Range Sum Query - Immutable",
      "url": "/submissions/detail/1047388315/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694517173,
      "status": 10,
      "runtime": "1321 ms",
      "is_pending": "Not Pending",
      "memory": "174.7 MB",
      "compare_result": "111111111111111",
      "flag_type": 1
    },
    {
      "id": 1047387801,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 303,
      "title_slug": "range-sum-query-immutable",
      "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self._nums = nums\n\n    @cache\n    def sumRange(self, left: int, right: int) -\u003e int:\n        if right == left:\n            return nums[left]\n        if right - left == 1:\n            return nums[right] - nums[left]\n        mid = left + (right - left) // 2\n        return self.sumRange(left, mid) + self.sumRange(mid + 1, right)\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(left,right)",
      "title": "Range Sum Query - Immutable",
      "url": "/submissions/detail/1047387801/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694517121,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000",
      "flag_type": 1
    },
    {
      "id": 1047384950,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 303,
      "title_slug": "range-sum-query-immutable",
      "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self._nums = nums\n\n    def sumRange(self, left: int, right: int) -\u003e int:\n        return sum(self._nums[left:right+1])\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(left,right)",
      "title": "Range Sum Query - Immutable",
      "url": "/submissions/detail/1047384950/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694516837,
      "status": 10,
      "runtime": "1025 ms",
      "is_pending": "Not Pending",
      "memory": "19.9 MB",
      "compare_result": "111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1047384848,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 303,
      "title_slug": "range-sum-query-immutable",
      "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self._nums = nums\n\n    def sumRange(self, left: int, right: int) -\u003e int:\n        return sum(nums[left:right+1])\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(left,right)",
      "title": "Range Sum Query - Immutable",
      "url": "/submissions/detail/1047384848/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694516827,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000",
      "flag_type": 1
    },
    {
      "id": 1047383991,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 173,
      "title_slug": "binary-search-tree-iterator",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        def generate(node: TreeNode) -\u003e int:\n            if not node:\n                return\n            yield from generate(node.left)\n            yield node\n            yield from generate(node.right)\n\n        self._generate = generate(root)\n        self._next = next(self._generate)\n\n    def next(self) -\u003e int:\n        next_val = self._next.val\n        self._next = next(self._generate, None)\n        return next_val \n\n    def hasNext(self) -\u003e bool:\n        return self._next is not None\n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()",
      "title": "Binary Search Tree Iterator",
      "url": "/submissions/detail/1047383991/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694516744,
      "status": 10,
      "runtime": "77 ms",
      "is_pending": "Not Pending",
      "memory": "22.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1047383676,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 173,
      "title_slug": "binary-search-tree-iterator",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        def generate(node: TreeNode) -\u003e int:\n            if not node:\n                return\n            yield from generate(node.left)\n            yield node\n            yield from generate(node.right)\n\n        self._generate = generate(root)\n        self._next = next(self._generate)\n\n    def next(self) -\u003e int:\n        next_val = self._next.val\n        self._next = next(self._generate, None)\n        return next_val \n\n    def hasNext(self) -\u003e bool:\n        return not self._next is None\n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()",
      "title": "Binary Search Tree Iterator",
      "url": "/submissions/detail/1047383676/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694516712,
      "status": 10,
      "runtime": "76 ms",
      "is_pending": "Not Pending",
      "memory": "23 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1047381678,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 173,
      "title_slug": "binary-search-tree-iterator",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        self._stack = []\n        while root:\n            self._stack.append(root)\n            root = root.left\n\n    def next(self) -\u003e int:\n        node = self._stack.pop()\n        right = node.right\n        while right:\n            self._stack.append(right)\n            right = right.left\n        \n        return node.val\n\n    def hasNext(self) -\u003e bool:\n        return self._stack\n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()",
      "title": "Binary Search Tree Iterator",
      "url": "/submissions/detail/1047381678/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694516504,
      "status": 10,
      "runtime": "73 ms",
      "is_pending": "Not Pending",
      "memory": "22.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1047278821,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 110,
      "title_slug": "balanced-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -\u003e bool:\n        def get_height(node: TreeNode) -\u003e int:\n            if not node:\n                return 0\n            \n            h_left = get_height(node.left)\n            if h_left \u003c 0:\n                return -1\n            h_right = get_height(node.right)\n            if h_right \u003c 0 or abs(h_left - h_right) \u003e 1:\n                return -1\n\n            return max(h_left, h_right) + 1\n        \n        return get_height(root) \u003e= 0",
      "title": "Balanced Binary Tree",
      "url": "/submissions/detail/1047278821/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694506665,
      "status": 10,
      "runtime": "38 ms",
      "is_pending": "Not Pending",
      "memory": "21.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1047265181,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1770,
      "title_slug": "minimum-deletions-to-make-character-frequencies-unique",
      "code": "class Solution:\n    def minDeletions(self, s: str) -\u003e int:\n        length = len(s)\n        char_count = Counter(s)\n        counts = set()\n        deleted_chars = 0\n\n        for char, count in char_count.items():\n            while count != 0 and count in counts:\n                count -= 1\n                deleted_chars += 1\n            if count != 0:\n                counts.add(count)\n            \n        return deleted_chars\n",
      "title": "Minimum Deletions to Make Character Frequencies Unique",
      "url": "/submissions/detail/1047265181/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694505304,
      "status": 10,
      "runtime": "111 ms",
      "is_pending": "Not Pending",
      "memory": "17.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1047264287,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1770,
      "title_slug": "minimum-deletions-to-make-character-frequencies-unique",
      "code": "class Solution:\n    def minDeletions(self, s: str) -\u003e int:\n        length = len(s)\n        char_count = Counter(s)\n        counts = set()\n        deleted_chars = 0\n\n        for char, count in char_count.items():\n            if count == 0:\n                continue\n            while count in counts:\n                count -= 1\n                deleted_chars += 1\n            counts.add(count)\n        \n        return deleted_chars\n",
      "title": "Minimum Deletions to Make Character Frequencies Unique",
      "url": "/submissions/detail/1047264287/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694505215,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111110110001110110011011100000000000000000000000000000011111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1046677697,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 160,
      "title_slug": "intersection-of-two-linked-lists",
      "code": "class Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -\u003e Optional[ListNode]:\n        if not headA or not headB:\n            return None\n        \n        tail1, tail2 = headA, headB\n        while tail1 != tail2:\n            tail1 = tail1.next if tail1 else headB\n            tail2 = tail2.next if tail2 else headA\n        \n        return tail2\n    ",
      "title": "Intersection of Two Linked Lists",
      "url": "/submissions/detail/1046677697/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694449935,
      "status": 10,
      "runtime": "119 ms",
      "is_pending": "Not Pending",
      "memory": "31.8 MB",
      "compare_result": "111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1046676809,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 160,
      "title_slug": "intersection-of-two-linked-lists",
      "code": "class Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -\u003e Optional[ListNode]:\n        if headA and headB:\n            A, B = headA, headB\n            while A != B:\n                A = A.next if A else headB\n                B = B.next if B else headA\n            return B\n        ",
      "title": "Intersection of Two Linked Lists",
      "url": "/submissions/detail/1046676809/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694449871,
      "status": 10,
      "runtime": "130 ms",
      "is_pending": "Not Pending",
      "memory": "31.4 MB",
      "compare_result": "111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1046666987,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 160,
      "title_slug": "intersection-of-two-linked-lists",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -\u003e Optional[ListNode]:\n        while headA and headB:\n            if headA is headB:\n                return headA\n            headA, headB = headA.next, headB.next\n\n        return None",
      "title": "Intersection of Two Linked Lists",
      "url": "/submissions/detail/1046666987/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694449169,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "001111111111110000000000000000100000011",
      "flag_type": 1
    },
    {
      "id": 1046664602,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 119,
      "title_slug": "pascals-triangle-ii",
      "code": "class Solution:\n    def getRow(self, rowIndex: int) -\u003e List[int]:\n        prev_row = (1,)\n        \n        for i in range(1, rowIndex + 1):\n            prev_row = (1, *(prev_row[j] + prev_row[j+1] for j in range(len(prev_row) - 1)), 1)\n        \n        return prev_row",
      "title": "Pascal's Triangle II",
      "url": "/submissions/detail/1046664602/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694448999,
      "status": 10,
      "runtime": "33 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1046655572,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 136,
      "title_slug": "single-number",
      "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -\u003e int:\n        return reduce(xor, nums)",
      "title": "Single Number",
      "url": "/submissions/detail/1046655572/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694448359,
      "status": 10,
      "runtime": "131 ms",
      "is_pending": "Not Pending",
      "memory": "19.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1046649051,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 136,
      "title_slug": "single-number",
      "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -\u003e int:\n        return reduce(lambda total, element: total ^ element, nums)",
      "title": "Single Number",
      "url": "/submissions/detail/1046649051/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694447895,
      "status": 10,
      "runtime": "128 ms",
      "is_pending": "Not Pending",
      "memory": "19 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1049299959,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2587,
      "title_slug": "design-memory-allocator",
      "code": "class Allocator:\n\n    def __init__(self, n: int):\n      self._units = [1] * n\n      self._units[0] = n\n      self._id_units = defaultdict(list)\n      self._units_count = n\n\n    def allocate(self, size: int, mID: int) -\u003e int:\n        i = 0\n        while i \u003c self._units_count:\n            units_avail = self._units[i]\n            if units_avail \u003c 0:\n                i += -units_avail\n                continue\n            if units_avail \u003c size:\n                i += units_avail\n                continue\n            \n            self._units[i] = -size\n            if units_avail \u003e size:\n                self._units[i+size] = units_avail - size\n            self._id_units[mID].append(i)\n            return i\n        \n        return -1\n\n    def free(self, mID: int) -\u003e int:\n        count = 0\n        conseq_units = self._id_units[mID]\n        while conseq_units:\n            units_start = conseq_units.pop()\n            units_freed = -self._units[units_start]\n            count += units_freed\n            self._units[units_start] = units_freed\n\n            units_next = units_start + units_freed\n            if units_next \u003e= self._units_count:\n                continue\n            units_next_val = self._units[units_next]\n            if units_next_val \u003e 0:\n                self._units[units_start] += units_next_val\n\n        return count\n\n\n# Your Allocator object will be instantiated and called as such:\n# obj = Allocator(n)\n# param_1 = obj.allocate(size,mID)\n# param_2 = obj.free(mID)",
      "title": "Design Memory Allocator",
      "url": "/submissions/detail/1049299959/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694698835,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111101111111111110110100001111011100101010001010111100100011000110111010111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1049284790,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2587,
      "title_slug": "design-memory-allocator",
      "code": "class Allocator:\n\n    def __init__(self, n: int):\n      self._units = [0] * n\n      self._units[0] = -n\n      self._id_units = defaultdict(list)\n      self._units_count = n\n\n    def allocate(self, size: int, mID: int) -\u003e int:\n        i = 0\n        while i \u003c self._units_count:\n            val = self._units[i]\n            if val == 0:\n                raise Exception()\n            if val \u003e 0:\n                i += val\n                continue\n            if -val \u003c size:\n                i -= val\n                continue\n            \n            self._units[i] = size\n            if -val != size:\n                self._units[i+size] = val + size\n            self._id_units[mID].append(i)\n            return i\n        \n        return -1\n\n    def free(self, mID: int) -\u003e int:\n        count = 0\n        for unit in self._id_units[mID]:\n            count += self._units[unit]\n            self._units[unit] *= -1\n        return count\n\n\n# Your Allocator object will be instantiated and called as such:\n# obj = Allocator(n)\n# param_1 = obj.allocate(size,mID)\n# param_2 = obj.free(mID)",
      "title": "Design Memory Allocator",
      "url": "/submissions/detail/1049284790/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694697511,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111110010011110101110000000000000100001010000100100000000000100000000000000100000010001111111111111111",
      "flag_type": 1
    },
    {
      "id": 1049228462,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 332,
      "title_slug": "reconstruct-itinerary",
      "code": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -\u003e List[str]:\n        graph = defaultdict(list)\n        \n        for src, dst in sorted(tickets, reverse=True):\n            graph[src].append(dst)\n            \n        itinerary = []\n        def dfs(airport: str) -\u003e None:\n            while graph[airport]:\n                dfs(graph[airport].pop())\n            \n            itinerary.append(airport)\n        \n        dfs(\"JFK\")\n        \n        return itinerary[::-1]",
      "title": "Reconstruct Itinerary",
      "url": "/submissions/detail/1049228462/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694691703,
      "status": 10,
      "runtime": "84 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1049213507,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 332,
      "title_slug": "reconstruct-itinerary",
      "code": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -\u003e List[str]:\n        t_from_to = defaultdict(list)\n        for t_from, t_to in tickets:\n            t_from_to[t_from].append(t_to)\n        \n        for t_from in t_from_to:\n            t_from_to[t_from].sort(reverse=True)\n        \n        print(t_from_to)\n\n        answer = [\"JFK\"]\n        while t_from_to:\n            t_from = answer[-1]\n            t_to_avail = t_from_to[t_from]\n            answer.append(t_to_avail.pop())\n            if not t_to_avail:\n                t_from_to.pop(t_from)\n        \n        return answer\n\n",
      "title": "Reconstruct Itinerary",
      "url": "/submissions/detail/1049213507/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694690116,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11110000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1048533130,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2139,
      "title_slug": "detect-squares",
      "code": "class DetectSquares:\n\n    def __init__(self):\n        self._row_col = defaultdict(lambda: defaultdict(int))\n\n    def add(self, point: List[int]) -\u003e None:\n        self._row_col[point[0]][point[1]] += 1\n\n    def count(self, point: List[int]) -\u003e int:\n        ways_count = 0\n        row1, col1 = point\n        for col2, col2_count in self._row_col[row1].items():\n            if col2 == col1:\n                continue\n\n            side = col2 - col1\n            for row2 in (row1 + side, row1 - side):\n                point3_count = self._row_col[row2][col1]\n                point4_count = self._row_col[row2][col2]\n                ways_count += col2_count * point3_count * point4_count\n\n        return ways_count\n\n# Your DetectSquares object will be instantiated and called as such:\n# obj = DetectSquares()\n# obj.add(point)\n# param_2 = obj.count(point)",
      "title": "Detect Squares",
      "url": "/submissions/detail/1048533130/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694622004,
      "status": 10,
      "runtime": "217 ms",
      "is_pending": "Not Pending",
      "memory": "18.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1048516632,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2139,
      "title_slug": "detect-squares",
      "code": "class DetectSquares:\n\n    def __init__(self):\n        self._row_col = defaultdict(list)\n        self._col_row = defaultdict(list)\n\n    def add(self, point: List[int]) -\u003e None:\n        row, col = point\n        self._row_col[row].append(col)\n        self._col_row[col].append(row)\n\n    def count(self, point: List[int]) -\u003e int:\n        ways_count = 0\n        row1, col1 = point\n        for col2 in self._row_col[row1]:\n            if col2 == col1:\n                continue\n\n            for row2 in self._col_row[col1]:\n                if row2 == row1:\n                    continue\n                \n                col1_count, col2_count = 0, 0\n                for col3 in self._row_col[row2]:\n                    if col3 == col1:\n                        col1_count += 1\n                    elif col3 == col2:\n                        col2_count += 1\n\n                ways_count += min(col1_count, col2_count)\n\n        return ways_count\n\n# Your DetectSquares object will be instantiated and called as such:\n# obj = DetectSquares()\n# obj.add(point)\n# param_2 = obj.count(point)",
      "title": "Detect Squares",
      "url": "/submissions/detail/1048516632/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694620799,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111100000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1048513624,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2139,
      "title_slug": "detect-squares",
      "code": "class DetectSquares:\n\n    def __init__(self):\n        self._row_col = defaultdict(list)\n        self._col_row = defaultdict(list)\n\n    def add(self, point: List[int]) -\u003e None:\n        row, col = point\n        self._row_col[row].append(col)\n        self._col_row[col].append(row)\n\n    def count(self, point: List[int]) -\u003e int:\n        ways_count = 0\n        row1, col1 = point\n        for col2 in self._row_col[row1]:\n            if col2 == col1:\n                continue\n\n            for row2 in self._col_row[col2]:\n                if row2 == row1:\n                    continue\n                \n                col1_count, col2_count = 0, 0\n                for col3 in self._row_col[row2]:\n                    if col3 == col1:\n                        col1_count += 1\n                    elif col3 == col2:\n                        col2_count += 1\n\n                ways_count += min(col1_count, col2_count)\n\n        return ways_count\n\n# Your DetectSquares object will be instantiated and called as such:\n# obj = DetectSquares()\n# obj.add(point)\n# param_2 = obj.count(point)",
      "title": "Detect Squares",
      "url": "/submissions/detail/1048513624/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694620571,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111100000000000000000000000000110011011100",
      "flag_type": 1
    },
    {
      "id": 1048207654,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 135,
      "title_slug": "candy",
      "code": "class Solution:\n    def candy(self, ratings: List[int]) -\u003e int:\n        child_count = len(ratings)\n        candies = [1] * child_count \n\n        for i in range(1, child_count):\n            if ratings[i] \u003e ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n\n        for i in reversed(range(child_count - 1)):\n            if ratings[i] \u003e ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        \n        return sum(candies)",
      "title": "Candy",
      "url": "/submissions/detail/1048207654/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694593128,
      "status": 10,
      "runtime": "133 ms",
      "is_pending": "Not Pending",
      "memory": "19.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1048207148,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 135,
      "title_slug": "candy",
      "code": "class Solution:\n    def candy(self, ratings: List[int]) -\u003e int:\n        child_count = len(ratings)\n        candies = [1] * child_count \n\n        for i in range(1, child_count):\n            if ratings[i] \u003e ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n\n        for i in reversed(range(child_count - 2)):\n            if ratings[i] \u003e ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        \n        return sum(candies)",
      "title": "Candy",
      "url": "/submissions/detail/1048207148/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694593078,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110001000011100101110011101110010101111101000110",
      "flag_type": 1
    },
    {
      "id": 1048206065,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 135,
      "title_slug": "candy",
      "code": "class Solution:\n    def candy(self, ratings: List[int]) -\u003e int:\n        child_count = len(ratings)\n        candies = [1] * child_count\n        start_index = 0\n        while True:\n            try_again = False\n\n            for i in range(start_index, child_count - 1):\n                cur_rat, next_rat = ratings[i], ratings[i+1]\n                cur_can, next_can = candies[i], candies[i+1]\n                \n                if cur_rat \u003e next_rat and cur_can \u003c= next_can:\n                    candies[i] = next_can + 1\n                    start_index = min(start_index, i)\n                    try_again = True\n                elif cur_rat \u003c next_rat and cur_can \u003e= next_can:\n                    candies[i+1] = cur_can + 1\n                    start_index = min(start_index, i)\n                    try_again = True\n            \n            if not try_again:\n                break\n\n        return sum(candies)",
      "title": "Candy",
      "url": "/submissions/detail/1048206065/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694592961,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111110000",
      "flag_type": 1
    },
    {
      "id": 1048204264,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 135,
      "title_slug": "candy",
      "code": "class Solution:\n    def candy(self, ratings: List[int]) -\u003e int:\n        child_count = len(ratings)\n        candies = [1] * child_count\n        while True:\n            try_again = False\n\n            for i in range(child_count - 1):\n                cur_rat, next_rat = ratings[i], ratings[i+1]\n                cur_can, next_can = candies[i], candies[i+1]\n                \n                if cur_rat \u003e next_rat and cur_can \u003c= next_can:\n                    candies[i] = next_can + 1\n                    try_again = True\n                elif cur_rat \u003c next_rat and cur_can \u003e= next_can:\n                    candies[i+1] = cur_can + 1\n                    try_again = True\n            \n            if not try_again:\n                break\n        return sum(candies)",
      "title": "Candy",
      "url": "/submissions/detail/1048204264/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694592767,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111110000",
      "flag_type": 1
    },
    {
      "id": 1048202076,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 135,
      "title_slug": "candy",
      "code": "class Solution:\n    def candy(self, ratings: List[int]) -\u003e int:\n        child_count = len(ratings)\n        candies = [1] * child_count\n        \n        for i in range(child_count - 1):\n            cur_rat, next_rat = ratings[i], ratings[i+1]\n            cur_can, next_can = candies[i], candies[i+1]\n            \n            if cur_rat \u003e next_rat and cur_can \u003c= next_can:\n                candies[i] = next_can + 1\n            elif cur_rat \u003c next_rat and cur_can \u003e= next_can:\n                candies[i+1] = cur_can + 1\n        \n        return sum(candies)",
      "title": "Candy",
      "url": "/submissions/detail/1048202076/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694592534,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111001110111100001101011111110111100100000000010",
      "flag_type": 1
    },
    {
      "id": 1047631211,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1470,
      "title_slug": "tweet-counts-per-frequency",
      "code": "class TweetCounts:\n\n    def __init__(self):\n        self._tweets = defaultdict(list)\n        self._chunk_ranges = {\n            \"minute\": 60, \n            \"hour\": 3600, \n            \"day\": 86400\n        }\n\n    def recordTweet(self, tweetName: str, time: int) -\u003e None:\n        self._tweets[tweetName].append(time)\n\n    def getTweetCountsPerFrequency(self, freq: str, tweetName: str, startTime: int, endTime: int) -\u003e List[int]:\n        chunk_range = self._chunk_ranges[freq]\n        chunks = [0] * (1 + (endTime - startTime) // chunk_range)\n\n        for tweet in self._tweets[tweetName]:\n            if not startTime \u003c= tweet \u003c= endTime:\n                continue\n            chunks[(tweet - startTime) // chunk_range] += 1\n        \n        return chunks\n\n\n\n\n# Your TweetCounts object will be instantiated and called as such:\n# obj = TweetCounts()\n# obj.recordTweet(tweetName,time)\n# param_2 = obj.getTweetCountsPerFrequency(freq,tweetName,startTime,endTime)",
      "title": "Tweet Counts Per Frequency",
      "url": "/submissions/detail/1047631211/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694536595,
      "status": 10,
      "runtime": "318 ms",
      "is_pending": "Not Pending",
      "memory": "22.2 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1047626357,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1470,
      "title_slug": "tweet-counts-per-frequency",
      "code": "class TweetCounts:\n\n    def __init__(self):\n        self._tweets = defaultdict(list)\n        self._chunk_ranges = {\n            \"minute\": 59, \n            \"hour\": 3599, \n            \"day\": 86399\n        }\n\n    def recordTweet(self, tweetName: str, time: int) -\u003e None:\n        self._tweets[tweetName].append(time)\n\n    def getTweetCountsPerFrequency(self, freq: str, tweetName: str, startTime: int, endTime: int) -\u003e List[int]:\n        chunk_range = self._chunk_ranges[freq]\n        chunks = [0] * ceil((endTime - startTime) / chunk_range)\n\n        for tweet in self._tweets[tweetName]:\n            if not startTime \u003c= tweet \u003c= endTime:\n                continue\n            chunks[(tweet - startTime) // chunk_range] += 1\n        \n        return chunks\n\n\n\n\n# Your TweetCounts object will be instantiated and called as such:\n# obj = TweetCounts()\n# obj.recordTweet(tweetName,time)\n# param_2 = obj.getTweetCountsPerFrequency(freq,tweetName,startTime,endTime)",
      "title": "Tweet Counts Per Frequency",
      "url": "/submissions/detail/1047626357/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694536272,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111110111110100010",
      "flag_type": 1
    },
    {
      "id": 1047476950,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1249,
      "title_slug": "snapshot-array",
      "code": "class SnapshotArray:\n\n    def __init__(self, length: int):\n        self._cur_snap = 0\n        self._elems = [[(0, 0)] for _ in range(length)]\n\n    def set(self, index: int, val: int) -\u003e None:\n        values = self._elems[index]\n        if values[-1][0] == self._cur_snap:\n            values.pop()\n        values.append((self._cur_snap, val))\n\n    def snap(self) -\u003e int:\n        self._cur_snap += 1\n        return self._cur_snap - 1 \n\n    def get(self, index: int, snap_id: int) -\u003e int:\n        for cur_snap_id, val in reversed(self._elems[index]):\n            if cur_snap_id \u003e snap_id:\n                continue\n            return val\n        \n        return -1\n        \n\n\n# Your SnapshotArray object will be instantiated and called as such:\n# obj = SnapshotArray(length)\n# obj.set(index,val)\n# param_2 = obj.snap()\n# param_3 = obj.get(index,snap_id)",
      "title": "Snapshot Array",
      "url": "/submissions/detail/1047476950/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694525529,
      "status": 10,
      "runtime": "3918 ms",
      "is_pending": "Not Pending",
      "memory": "41.8 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1047469771,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1249,
      "title_slug": "snapshot-array",
      "code": "class SnapshotArray:\n\n    def __init__(self, length: int):\n        self._snap_count = 0\n        self._elems = [[(0, 0)] for _ in range(length)]\n\n    def set(self, index: int, val: int) -\u003e None:\n        values = self._elems[index]\n        if values[-1][0] == self._snap_count:\n            values[-1] = (self._snap_count, val)\n        else:\n            values.append((self._snap_count, val))\n\n    def snap(self) -\u003e int:\n        self._snap_count += 1\n        return self._snap_count - 1\n\n    def get(self, index: int, snap_id: int) -\u003e int:\n        for cur_snap_id, val in self._elems[index]:\n            if cur_snap_id \u003e snap_id:\n                continue\n            return val\n        \n        return -1\n        \n\n\n# Your SnapshotArray object will be instantiated and called as such:\n# obj = SnapshotArray(length)\n# obj.set(index,val)\n# param_2 = obj.snap()\n# param_3 = obj.get(index,snap_id)",
      "title": "Snapshot Array",
      "url": "/submissions/detail/1047469771/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694524926,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111100111110011101011111001001000001000100010011000000000000010110",
      "flag_type": 1
    },
    {
      "id": 1047442678,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1023,
      "title_slug": "time-based-key-value-store",
      "code": "class TimeMap:\n\n    def __init__(self):\n        self._cache = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -\u003e None:\n        self._cache[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -\u003e str:\n        for cur_timestamp, value in reversed(self._cache[key]):\n            if cur_timestamp \u003e timestamp:\n                continue\n            return value\n\n        return \"\"\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)",
      "title": "Time Based Key-Value Store",
      "url": "/submissions/detail/1047442678/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694522555,
      "status": 10,
      "runtime": "583 ms",
      "is_pending": "Not Pending",
      "memory": "73.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1047433200,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1708,
      "title_slug": "design-parking-system",
      "code": "class ParkingSystem:\n\n    def __init__(self, big: int, medium: int, small: int):\n        self._slots = [0, big, medium, small]\n\n    def addCar(self, carType: int) -\u003e bool:\n        slots_avail = self._slots[carType]\n        if not slots_avail:\n            return False\n        self._slots[carType] = slots_avail - 1\n        return True\n\n\n# Your ParkingSystem object will be instantiated and called as such:\n# obj = ParkingSystem(big, medium, small)\n# param_1 = obj.addCar(carType)",
      "title": "Design Parking System",
      "url": "/submissions/detail/1047433200/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694521675,
      "status": 10,
      "runtime": "109 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1047430740,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1708,
      "title_slug": "design-parking-system",
      "code": "class ParkingSystem:\n\n    def __init__(self, big: int, medium: int, small: int):\n        self._slots = [big, medium, small]\n\n    def addCar(self, carType: int) -\u003e bool:\n        if self._slots[carType-1] == 0:\n            return False\n        self._slots[carType-1] -= 1\n        return True\n\n\n# Your ParkingSystem object will be instantiated and called as such:\n# obj = ParkingSystem(big, medium, small)\n# param_1 = obj.addCar(carType)",
      "title": "Design Parking System",
      "url": "/submissions/detail/1047430740/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694521436,
      "status": 10,
      "runtime": "125 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1047430610,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1708,
      "title_slug": "design-parking-system",
      "code": "class ParkingSystem:\n\n    def __init__(self, big: int, medium: int, small: int):\n        self._slots = [big, medium, small]\n\n    def addCar(self, carType: int) -\u003e bool:\n        if self._slots[carType-1] == 0:\n            return False\n        self._slots[carType-1] -= 1\n\n\n# Your ParkingSystem object will be instantiated and called as such:\n# obj = ParkingSystem(big, medium, small)\n# param_1 = obj.addCar(carType)",
      "title": "Design Parking System",
      "url": "/submissions/detail/1047430610/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694521425,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1050240620,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 1995,
      "title_slug": "finding-pairs-with-a-certain-sum",
      "code": "class FindSumPairs:\n\n    def __init__(self, nums1: List[int], nums2: List[int]):\n        self._nums2 = nums2\n        self._nums1 = Counter(nums1)\n\n    def add(self, index: int, val: int) -\u003e None:\n        self._nums2[index] += val\n\n    def count(self, tot: int) -\u003e int:\n        count = 0\n        for num in self._nums2:\n            count += self._nums1.get(tot - num, 0)\n\n        return count\n\n\n# Your FindSumPairs object will be instantiated and called as such:\n# obj = FindSumPairs(nums1, nums2)\n# obj.add(index,val)\n# param_2 = obj.count(tot)",
      "title": "Finding Pairs With a Certain Sum",
      "url": "/submissions/detail/1050240620/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694794934,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111100",
      "flag_type": 1
    },
    {
      "id": 1050234332,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1582,
      "title_slug": "design-browser-history",
      "code": "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self._history = [homepage]\n        self._cur = 0\n\n    def visit(self, url: str) -\u003e None:\n        self._history[self._cur+1:] = (url, )\n        self._cur += 1\n\n    def back(self, steps: int) -\u003e str:\n        self._cur = max(0, self._cur - steps)\n        return self._history[self._cur]\n\n    def forward(self, steps: int) -\u003e str:\n        self._cur = min(len(self._history) - 1, self._cur + steps)\n        return self._history[self._cur]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)",
      "title": "Design Browser History",
      "url": "/submissions/detail/1050234332/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694794372,
      "status": 10,
      "runtime": "208 ms",
      "is_pending": "Not Pending",
      "memory": "19.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050229425,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1497,
      "title_slug": "design-a-stack-with-increment-operation",
      "code": "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self._stack = []\n        self._max_size = maxSize\n\n    def push(self, x: int) -\u003e None:\n        if len(self._stack) != self._max_size:\n            self._stack.append(x)\n\n    def pop(self) -\u003e int:\n        return self._stack.pop() if self._stack else -1 \n        \n    def increment(self, k: int, val: int) -\u003e None:\n        for i in range(min(k, len(self._stack))):\n            self._stack[i] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)",
      "title": "Design a Stack With Increment Operation",
      "url": "/submissions/detail/1050229425/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694793916,
      "status": 10,
      "runtime": "100 ms",
      "is_pending": "Not Pending",
      "memory": "17.3 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050227710,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1497,
      "title_slug": "design-a-stack-with-increment-operation",
      "code": "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self._stack = []\n        self._max_size = maxSize\n        self._size = 0\n\n    def push(self, x: int) -\u003e None:\n        if self._size == self._max_size:\n            return\n        self._stack.append(x)\n        self._size += 1\n\n    def pop(self) -\u003e int:\n        if self._size == 0:\n            return -1\n        last = self._stack.pop()\n        self._size -= 1\n        return last\n\n    def increment(self, k: int, val: int) -\u003e None:\n        for i in range(min(k, self._size)):\n            self._stack[i] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)",
      "title": "Design a Stack With Increment Operation",
      "url": "/submissions/detail/1050227710/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694793762,
      "status": 10,
      "runtime": "112 ms",
      "is_pending": "Not Pending",
      "memory": "17.1 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050221160,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 838,
      "title_slug": "design-linked-list",
      "code": "class Node:\n    def __init__(self, val: int = 0, prev_node: 'Node' = None, next_node: 'Node' = None):\n        self.val, self.prev, self.next = val, prev_node, next_node\n\nclass MyLinkedList:\n\n    def __init__(self):\n        self._head, self._tail = Node(float(\"-inf\")), Node(float(\"inf\"))\n        self._head.next, self._tail.prev = self._tail, self._head\n        self._length = 0\n\n    def _getNode(self, index: int) -\u003e Node:\n        if not 0 \u003c= index \u003c self._length:\n            return None\n        if index == 0:\n            return self._head.next\n        if index == self._length - 1:\n            return self._tail.prev\n\n        cur_idx, cur_node = 0, self._head.next\n        while cur_idx \u003c index:\n            cur_node = cur_node.next\n            cur_idx += 1\n\n        return cur_node\n    \n    def get(self, index: int) -\u003e int:\n        node = self._getNode(index)\n        return node.val if node else -1\n\n    def addAtHead(self, val: int) -\u003e None:\n        old_first = self._head.next\n        new_node = Node(val, self._head, old_first)\n        self._head.next, old_first.prev = new_node, new_node\n        self._length += 1\n\n    def addAtTail(self, val: int) -\u003e None:\n        old_tail = self._tail.prev\n        new_node = Node(val, old_tail, self._tail)\n        self._tail.prev, old_tail.next = new_node, new_node\n        self._length += 1\n\n    def addAtIndex(self, index: int, val: int) -\u003e None:\n        if not 0 \u003c= index \u003c= self._length:\n            return\n        if index == 0:\n            self.addAtHead(val)\n            return\n        if index == self._length:\n            self.addAtTail(val)\n            return\n        \n        target_node = self._getNode(index)\n        prev_node = target_node.prev\n        new_node = Node(val, prev_node, target_node)\n        prev_node.next, target_node.prev = new_node, new_node\n        self._length += 1\n\n    def deleteAtIndex(self, index: int) -\u003e None:\n        if not 0 \u003c= index \u003c self._length:\n            return\n        \n        target_node = self._getNode(index)\n        old_prev, old_next = target_node.prev, target_node.next\n        old_prev.next, old_next.prev = old_next, old_prev\n        self._length -= 1\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)",
      "title": "Design Linked List",
      "url": "/submissions/detail/1050221160/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694793179,
      "status": 10,
      "runtime": "148 ms",
      "is_pending": "Not Pending",
      "memory": "17.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050205879,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 838,
      "title_slug": "design-linked-list",
      "code": "class Node:\n    def __init__(self, val: int = 0, prev_node: 'Node' = None, next_node: 'Node' = None):\n        self.val, self.prev, self.next = val, prev_node, next_node\n\nclass MyLinkedList:\n\n    def __init__(self):\n        self._head, self._tail = Node(), Node()\n        self._head.next, self._tail.prev = self._tail, self._head\n        self._length = 0\n\n    def _getNode(self, index: int) -\u003e Node:\n        if not 0 \u003c= index \u003c self._length:\n            return None\n        if index == 0:\n            return self._head.next\n        if index == self._length - 1:\n            return self._tail.prev\n\n        cur_idx, cur_node = 0, self._head.next\n        while cur_idx \u003c index:\n            cur_node = cur_node.next\n            cur_idx += 1\n        \n        return cur_node\n    \n    def get(self, index: int) -\u003e int:\n        node = self._getNode(index)\n        return node.val if node else -1\n\n    def addAtHead(self, val: int) -\u003e None:\n        old_first = self._head.next\n        new_node = Node(val, self._head, old_first)\n        self._head.next, old_first.prev = new_node, new_node\n        self._length += 1\n\n    def addAtTail(self, val: int) -\u003e None:\n        old_tail = self._tail.prev\n        new_node = Node(val, old_tail, self._tail)\n        self._tail.prev, old_tail.next = new_node, new_node\n        self._length += 1\n\n    def addAtIndex(self, index: int, val: int) -\u003e None:\n        if index == 0:\n            self.addAtHead(val)\n            return\n        if index == self._length:\n            self.addAtTail(val)\n            return\n        if not 0 \u003c index \u003c self._length:\n            return\n        \n        target_node = self._getNode(index)\n        prev_node = target_node.prev\n        prev_node.next = Node(val, prev_node, target_node)\n        self._length += 1\n\n    def deleteAtIndex(self, index: int) -\u003e None:\n        if not 0 \u003c= index \u003c self._length:\n            return\n        \n        target_node = self._getNode(index)\n        old_prev, old_next = target_node.prev, target_node.next\n        old_prev.next, old_next.prev = old_next, old_prev\n        self._length -= 1\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)",
      "title": "Design Linked List",
      "url": "/submissions/detail/1050205879/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694791794,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1050202460,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 838,
      "title_slug": "design-linked-list",
      "code": "class Node:\n    def __init__(self, val: int = 0, prev_node: 'Node' = None, next_node: 'Node' = None):\n        self.val, self.prev, self.next = val, prev_node, next_node\n\nclass MyLinkedList:\n\n    def __init__(self):\n        self._head, self._tail = Node(), Node()\n        self._head.next, self._tail.prev = self._tail, self._head\n        self._length = 0\n\n    def _getNode(self, index: int) -\u003e Node:\n        if not 0 \u003c= index \u003c self._length:\n            return None\n\n        cur_idx, cur_node = 0, self._head.next\n        while cur_idx \u003c index:\n            cur_node = cur_node.next\n            cur_idx += 1\n        \n        print(index, cur_idx, cur_node)\n        return cur_node\n    \n    def get(self, index: int) -\u003e int:\n        node = self._getNode(index)\n        return node.val if node else -1\n\n    def addAtHead(self, val: int) -\u003e None:\n        old_first = self._head.next\n        new_node = Node(val, self._head, old_first)\n        self._head.next, old_first.prev = new_node, new_node\n        self._length += 1\n\n    def addAtTail(self, val: int) -\u003e None:\n        old_last = self._tail.prev\n        new_node = Node(val, old_last)\n        self._tail.prev, old_last.next = new_node, new_node\n        self._length += 1\n\n    def addAtIndex(self, index: int, val: int) -\u003e None:\n        if index == 0:\n            self.addAtHead(val)\n            return\n        if index == self._length:\n            self.addAtTail(val)\n            return\n        if not 0 \u003c index \u003c self._length:\n            return\n        \n        target_node = self._getNode(index)\n        prev_node = target_node.prev\n        prev_node.next = Node(val, prev_node, target_node)\n        self._length += 1\n\n    def deleteAtIndex(self, index: int) -\u003e None:\n        if not 0 \u003c= index \u003c self._length:\n            return\n        \n        target_node = self._getNode(index)\n        old_prev, old_next = target_node.prev, target_node.next\n        old_prev.next, old_next.prev = old_next, old_prev\n        self._length -= 1\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)",
      "title": "Design Linked List",
      "url": "/submissions/detail/1050202460/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694791479,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1050200560,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 838,
      "title_slug": "design-linked-list",
      "code": "class Node:\n    def __init__(self, val: int = 0, prev_node: 'Node' = None, next_node: 'Node' = None):\n        self.val, self.prev, self.next = val, prev_node, next_node\n\nclass MyLinkedList:\n\n    def __init__(self):\n        self._head, self._tail = Node(), Node()\n        self._head.next, self._tail.prev = self._tail, self._head\n        self._length = 0\n\n    def _getNode(self, index: int) -\u003e Node:\n        if not 0 \u003c= index \u003c self._length:\n            return None\n\n        cur_idx, cur_node = 0, self._head.next\n        while cur_idx \u003c index:\n            cur_node = cur_node.next\n            cur_idx += 1\n        \n        return cur_node\n    \n    def get(self, index: int) -\u003e int:\n        node = self._getNode(index)\n        return node.val if node else -1\n\n    def addAtHead(self, val: int) -\u003e None:\n        old_first = self._head.next\n        new_node = Node(val, self._head, old_first)\n        self._head.next, old_first.prev = new_node, new_node\n        self._length += 1\n\n    def addAtTail(self, val: int) -\u003e None:\n        old_last = self._tail.prev\n        new_node = Node(val, old_last)\n        self._tail.prev, old_last.next = new_node, new_node\n        self._length += 1\n\n    def addAtIndex(self, index: int, val: int) -\u003e None:\n        if index == 0:\n            self.addAtHead(val)\n            return\n        if index == self._length:\n            self.addAtTail(val)\n            return\n        if not 0 \u003c index \u003c self._length:\n            return\n        \n        target_node = self._getNode(index)\n        prev_node = target_node.prev\n        prev_node.next = Node(val, prev_node, target_node)\n        self._length += 1\n\n    def deleteAtIndex(self, index: int) -\u003e None:\n        if not 0 \u003c= index \u003c self._length:\n            return\n        \n        target_node = self._getNode(index)\n        old_prev, old_next = target_node.prev, target_node.next\n        old_prev.next, old_next.prev = old_next, old_prev\n        self._length -= 1\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)",
      "title": "Design Linked List",
      "url": "/submissions/detail/1050200560/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694791304,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1050192908,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 838,
      "title_slug": "design-linked-list",
      "code": "class Node:\n    def __init__(self, val: int = 0, prev_node: 'Node' = None, next_node: 'Node' = None):\n        self.val, self.prev, self.next = val, prev_node, next_node\n\nclass MyLinkedList:\n\n    def __init__(self):\n        self._head, self._tail = Node(), Node()\n        self._head.next, self._tail.prev = self._tail, self._head\n        self._length = 0\n\n    def _getNode(self, index: int) -\u003e Node:\n        if not 0 \u003c= index \u003c self._length:\n            return None\n\n        cur_idx, cur_node = 0, self._head.next\n        while cur_idx \u003c index:\n            cur_node = cur_node.next\n            cur_idx += 1\n        \n        return cur_node\n    \n    def get(self, index: int) -\u003e int:\n        node = self._getNode(index)\n        return node.val if node else -1\n\n    def addAtHead(self, val: int) -\u003e None:\n        old_first = self._head.next\n        new_node = Node(val, self._head, old_first)\n        self._head.next, old_first.prev = new_node, new_node\n        self._length += 1\n\n    def addAtTail(self, val: int) -\u003e None:\n        old_last = self._tail.prev\n        new_node = Node(val, old_last)\n        self._tail.prev, old_last.next = new_node, new_node\n        self._length += 1\n\n    def addAtIndex(self, index: int, val: int) -\u003e None:\n        if not 0 \u003c= index \u003c= self._length:\n            return\n        if index == self._length:\n            self.addAtTail(val)\n            return \n        \n        target_node = self._getNode(index)\n        prev_node = target_node.prev\n        prev_node.next = Node(val, prev_node, target_node)\n        self._length += 1\n\n    def deleteAtIndex(self, index: int) -\u003e None:\n        if not 0 \u003c= index \u003c self._length:\n            return\n        \n        target_node = self._getNode(index)\n        old_prev, old_next = target_node.prev, target_node.next\n        old_prev.next, old_next.prev = old_next, old_prev\n        self._length -= 1\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)",
      "title": "Design Linked List",
      "url": "/submissions/detail/1050192908/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694790593,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111101000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1050151618,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 304,
      "title_slug": "range-sum-query-2d-immutable",
      "code": "class NumMatrix:\n\n    def __init__(self, matrix: List[List[int]]):\n        self.dp=[[0] * (len(matrix[0])+1) for _ in range(len(matrix)+1)]\n        \n\t\t# calculate prefix sum\n        for r in range(len(self.dp)-1):\n            for c in range(len(self.dp[0])-1):\n                self.dp[r+1][c+1]=matrix[r][c] + self.dp[r][c+1] + self.dp[r+1][c] - self.dp[r][c]\n        \n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -\u003e int:\n        return self.dp[row2+1][col2+1] - self.dp[row1][col2+1] - self.dp[row2+1][col1] + self.dp[row1][col1]\n                ",
      "title": "Range Sum Query 2D - Immutable",
      "url": "/submissions/detail/1050151618/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694786879,
      "status": 10,
      "runtime": "1162 ms",
      "is_pending": "Not Pending",
      "memory": "26.9 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050013916,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 284,
      "title_slug": "peeking-iterator",
      "code": "# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator:\n#     def __init__(self, nums):\n#         \"\"\"\n#         Initializes an iterator object to the beginning of a list.\n#         :type nums: List[int]\n#         \"\"\"\n#\n#     def hasNext(self):\n#         \"\"\"\n#         Returns true if the iteration has more elements.\n#         :rtype: bool\n#         \"\"\"\n#\n#     def next(self):\n#         \"\"\"\n#         Returns the next element in the iteration.\n#         :rtype: int\n#         \"\"\"\n\nclass PeekingIterator:\n    def __init__(self, iterator):\n        \"\"\"\n        Initialize your data structure here.\n        :type iterator: Iterator\n        \"\"\"\n        self._iter = iterator\n        self._next = iterator.next()\n        \n\n    def peek(self):\n        \"\"\"\n        Returns the next element in the iteration without advancing the iterator.\n        :rtype: int\n        \"\"\"\n        return self._next\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        cur_next = self._next\n        self._next = self._iter.next() if self._iter.hasNext() else None\n        return cur_next\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self._next is not None\n        \n\n# Your PeekingIterator object will be instantiated and called as such:\n# iter = PeekingIterator(Iterator(nums))\n# while iter.hasNext():\n#     val = iter.peek()   # Get the next element but not advance the iterator.\n#     iter.next()         # Should return the same value as [val].",
      "title": "Peeking Iterator",
      "url": "/submissions/detail/1050013916/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694771470,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111",
      "flag_type": 1
    },
    {
      "id": 1049921218,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1706,
      "title_slug": "min-cost-to-connect-all-points",
      "code": "def manhattan_distance(p1: List[int], p2: List[int]) -\u003e int:\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\nclass Solution:\n    def minCostConnectPoints(self, points: List[List[int]]) -\u003e int:\n        n = len(points)\n        visited = [False] * n\n        heap_dict = {0: 0}  \n        min_heap = [(0, 0)]\n        \n        mst_weight = 0\n        \n        while min_heap:\n            w, u = heappop(min_heap)\n            \n            if visited[u] or heap_dict.get(u, float('inf')) \u003c w:\n                continue\n            \n            visited[u] = True\n            mst_weight += w\n            \n            for v in range(n):\n                if not visited[v]:\n                    new_distance = manhattan_distance(points[u], points[v])\n      \n                    if new_distance \u003c heap_dict.get(v, float('inf')):\n                        heap_dict[v] = new_distance\n                        heappush(min_heap, (new_distance, v))\n        \n        return mst_weight",
      "title": "Min Cost to Connect All Points",
      "url": "/submissions/detail/1049921218/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694761155,
      "status": 10,
      "runtime": "742 ms",
      "is_pending": "Not Pending",
      "memory": "20.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1049427509,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 2178,
      "title_slug": "walking-robot-simulation-ii",
      "code": "class Robot:\n\n    def __init__(self, width: int, height: int):\n        self._width, self._height = width, height\n        self._pos = (0, 0)\n        self._dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n        self._cur_dir = 0\n        self._dir_names = ((\"East\", \"North\", \"West\", \"South\"))\n\n    def step(self, num: int) -\u003e None:\n        cur_dir = self._cur_dir\n        cur_row, cur_col = self._pos \n        while num \u003e 0:\n            delta_row, delta_col = self._dirs[cur_dir]\n            new_row, new_col = cur_row + delta_row, cur_col + delta_col\n            if not 0 \u003c= new_row \u003c self._height or not 0 \u003c= new_col \u003c self._width:\n                cur_dir = cur_dir + 1 if cur_dir \u003c 3 else 0\n                continue\n            cur_row, cur_col = new_row, new_col\n            num -= 1\n\n        self._cur_dir, self._pos = cur_dir, (cur_row, cur_col)\n\n    def getPos(self) -\u003e List[int]:\n        return (self._pos[1], self._pos[0])\n\n    def getDir(self) -\u003e str:\n        return self._dir_names[self._cur_dir]\n\n\n# Your Robot object will be instantiated and called as such:\n# obj = Robot(width, height)\n# obj.step(num)\n# param_2 = obj.getPos()\n# param_3 = obj.getDir()",
      "title": "Walking Robot Simulation II",
      "url": "/submissions/detail/1049427509/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694708827,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1049407796,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2778,
      "title_slug": "frequency-tracker",
      "code": "class FrequencyTracker:\n\n    def __init__(self):\n        self._num_freq = defaultdict(int)\n        self._freq_nums = defaultdict(set)    \n\n    def add(self, number: int) -\u003e None:\n        cur_freq = self._num_freq[number]\n        self._num_freq[number] = cur_freq + 1\n        self._freq_nums[cur_freq].discard(number)\n        self._freq_nums[cur_freq + 1].add(number)\n\n    def deleteOne(self, number: int) -\u003e None:\n        cur_freq = self._num_freq[number]\n        if cur_freq == 0:\n            return    \n        self._num_freq[number] = cur_freq - 1 \n        self._freq_nums[cur_freq].discard(number)\n        if cur_freq != 1:\n            self._freq_nums[cur_freq - 1].add(number)\n\n    def hasFrequency(self, frequency: int) -\u003e bool:\n        return len(self._freq_nums[frequency]) != 0\n\n\n# Your FrequencyTracker object will be instantiated and called as such:\n# obj = FrequencyTracker()\n# obj.add(number)\n# obj.deleteOne(number)\n# param_3 = obj.hasFrequency(frequency)",
      "title": "Frequency Tracker",
      "url": "/submissions/detail/1049407796/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694707334,
      "status": 10,
      "runtime": "536 ms",
      "is_pending": "Not Pending",
      "memory": "80.1 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1049403328,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2778,
      "title_slug": "frequency-tracker",
      "code": "class FrequencyTracker:\n\n    def __init__(self):\n        self._num_freq = defaultdict(int)\n        self._freq_nums = defaultdict(set)    \n\n    def add(self, number: int) -\u003e None:\n        cur_freq = self._num_freq[number]\n        self._num_freq[number] = cur_freq + 1\n        self._freq_nums[cur_freq].discard(number)\n        self._freq_nums[cur_freq + 1].add(number)\n\n    def deleteOne(self, number: int) -\u003e None:\n        cur_freq = self._num_freq[number]\n        if cur_freq == 0:\n            return\n        self._num_freq[number] = cur_freq - 1 \n        self._freq_nums[cur_freq].discard(number)\n        self._freq_nums[cur_freq + 1].add(number)\n\n    def hasFrequency(self, frequency: int) -\u003e bool:\n        return len(self._freq_nums[frequency]) != 0\n\n\n# Your FrequencyTracker object will be instantiated and called as such:\n# obj = FrequencyTracker()\n# obj.add(number)\n# obj.deleteOne(number)\n# param_3 = obj.hasFrequency(frequency)",
      "title": "Frequency Tracker",
      "url": "/submissions/detail/1049403328/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694706982,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111011111111110011111111111111111111111101111111111111101101011011111111111111011011111010111111111101111111111111111101111111110111110111111111011010101011111011110010110101101110111101111011010110111011111100101111001111111101110100011111111000110101111011110001111111001011010111101111010101101111111100010010011111111010010101010010011111100101111010101001100101011101110010101110111101110100011010111011111110001110111111110100101011000100011101100110001011101000101011001100101000010000110100111001110111000000101110101100001111000100110011011000011100000101000000010011101100101111110111101101000011111110111011011111010100111101111111111111111011110111101111111111111111011111111111100000001101111111010011111111110110101101000111101101110000100101101001000000000000000100000000000000000000000000000000000000000000000000111011111111111",
      "flag_type": 1
    },
    {
      "id": 1049400128,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2778,
      "title_slug": "frequency-tracker",
      "code": "class FrequencyTracker:\n\n    def __init__(self):\n        self._num_freq = defaultdict(int)\n        self._freq_nums = defaultdict(set)        \n\n    def add(self, number: int) -\u003e None:\n        cur_freq = self._num_freq[number]\n        self._num_freq[number] = cur_freq + 1\n        if number in self._freq_nums[cur_freq]:\n            self._freq_nums[cur_freq].remove(number)\n        self._freq_nums[cur_freq + 1].add(number)\n\n    def deleteOne(self, number: int) -\u003e None:\n        cur_freq = self._num_freq[number]\n        if cur_freq == 0:\n            return\n        self._num_freq[number] = cur_freq - 1\n        if number in self._freq_nums[cur_freq]: \n            self._freq_nums[cur_freq].remove(number)\n        self._freq_nums[cur_freq + 1].add(number)\n\n    def hasFrequency(self, frequency: int) -\u003e bool:\n        return len(self._freq_nums[frequency]) != 0\n\n\n# Your FrequencyTracker object will be instantiated and called as such:\n# obj = FrequencyTracker()\n# obj.add(number)\n# obj.deleteOne(number)\n# param_3 = obj.hasFrequency(frequency)",
      "title": "Frequency Tracker",
      "url": "/submissions/detail/1049400128/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694706725,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1049394708,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2352,
      "title_slug": "design-an-atm-machine",
      "code": "class ATM:\n\n    def __init__(self):\n        self._banknotes = (0, ) * 5\n        self._values = (20, 50, 100, 200, 500)\n\n    def deposit(self, banknotesCount: List[int]) -\u003e None:\n        self._banknotes = tuple(banknotesCount[i] + self._banknotes[i] for i in range(5))\n\n    def withdraw(self, amount: int) -\u003e List[int]:\n        withdrawn = [0] * 5\n        for i in reversed(range(5)):\n            value, notes_left = self._values[i], self._banknotes[i]\n            notes_need = min(notes_left, amount // value)\n            \n            if notes_need == 0:\n                continue\n            \n            amount -= value * notes_need\n            withdrawn[i] = notes_need\n\n            if amount == 0:\n                self._banknotes = tuple(self._banknotes[i] - withdrawn[i] \n                                        for i in range(5))\n                return withdrawn\n\n        return (-1, )\n\n\n# Your ATM object will be instantiated and called as such:\n# obj = ATM()\n# obj.deposit(banknotesCount)\n# param_2 = obj.withdraw(amount)",
      "title": "Design an ATM Machine",
      "url": "/submissions/detail/1049394708/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694706301,
      "status": 10,
      "runtime": "592 ms",
      "is_pending": "Not Pending",
      "memory": "20.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1049394271,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2352,
      "title_slug": "design-an-atm-machine",
      "code": "class ATM:\n\n    def __init__(self):\n        self._banknotes = (0, ) * 5\n        self._values = (20, 50, 100, 200, 500)\n\n    def deposit(self, banknotesCount: List[int]) -\u003e None:\n        self._banknotes = tuple(banknotesCount[i] + self._banknotes[i] for i in range(5))\n\n    def withdraw(self, amount: int) -\u003e List[int]:\n        withdrawn = [0] * 5\n        for i in reversed(range(5)):\n            value, notes_left = self._values[i], self._banknotes[i]\n            notes_need = min(notes_left, amount // value)\n            \n            if notes_need == 0:\n                continue\n            \n            amount -= value * notes_need\n            withdrawn[i] = notes_need\n\n            if amount == 0:\n                self._banknotes = tuple(self._banknotes[i] - withdrawn[i] \n                                        for i in range(5))\n                return withdrawn\n\n        return (-1, )\n\n\n# Your ATM object will be instantiated and called as such:\n# obj = ATM()\n# obj.deposit(banknotesCount)\n# param_2 = obj.withdraw(amount)",
      "title": "Design an ATM Machine",
      "url": "/submissions/detail/1049394271/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694706267,
      "status": 10,
      "runtime": "605 ms",
      "is_pending": "Not Pending",
      "memory": "19.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1049391559,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2352,
      "title_slug": "design-an-atm-machine",
      "code": "class ATM:\n\n    def __init__(self):\n        self._banknotes = [0] * 5\n        self._values = (20, 50, 100, 200, 500)\n\n    def deposit(self, banknotesCount: List[int]) -\u003e None:\n        for i in range(5):\n            self._banknotes[i] += banknotesCount[i]\n\n    def withdraw(self, amount: int) -\u003e List[int]:\n        withdrawn = [0] * 5\n        for i in reversed(range(5)):\n            value, notes_left = self._values[i], self._banknotes[i]\n            notes_need = min(notes_left, amount // value)\n            \n            if notes_need == 0:\n                continue\n            \n            amount -= value * notes_need\n            withdrawn[i] = notes_need\n\n            if amount == 0:\n                for i in range(5):\n                    self._banknotes[i] -= withdrawn[i]\n                return withdrawn\n\n        return [-1]\n\n\n# Your ATM object will be instantiated and called as such:\n# obj = ATM()\n# obj.deposit(banknotesCount)\n# param_2 = obj.withdraw(amount)",
      "title": "Design an ATM Machine",
      "url": "/submissions/detail/1049391559/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694706054,
      "status": 10,
      "runtime": "554 ms",
      "is_pending": "Not Pending",
      "memory": "20.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1049366325,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2587,
      "title_slug": "design-memory-allocator",
      "code": "class Allocator:\n\n    def __init__(self, n: int):\n      self._units = [1] * n\n      self._units[0] = n\n      self._id_units = defaultdict(list)\n      self._units_count = n\n\n    def find_avail_units(self, start: int, size: int) -\u003e Tuple[int, int]:\n        i = start\n        count = 0\n        while i \u003c self._units_count and i - start \u003c size:\n            units_avail = self._units[i]\n            if units_avail \u003c 0:\n                return i + units_avail if i == start else i, count\n            i += units_avail\n            count += units_avail\n\n        return i, count\n            \n\n    def allocate(self, size: int, mID: int) -\u003e int:\n        i = 0\n        units_start, units_count = None, 0\n        while i \u003c self._units_count and units_count \u003c size:\n            units_avail = self._units[i]\n            if units_avail \u003c 0:\n                i += -units_avail\n                units_start, units_count = None, 0\n                continue\n\n            if units_start is None:\n                units_start = i\n            units_count += units_avail\n            i += units_avail\n\n        if units_count \u003c size:\n            return -1 \n\n        self._units[units_start] = -size\n        if units_count \u003e size:\n            self._units[units_start + size] = units_count - size\n        self._id_units[mID].append(units_start)\n        return units_start\n\n    def free(self, mID: int) -\u003e int:\n        count = 0\n        conseq_units = self._id_units[mID]\n        while conseq_units:\n            units_start = conseq_units.pop()\n            units_freed = -self._units[units_start]\n            count += units_freed\n            self._units[units_start] = units_freed\n\n        return count\n\n\n# Your Allocator object will be instantiated and called as such:\n# obj = Allocator(n)\n# param_1 = obj.allocate(size,mID)\n# param_2 = obj.free(mID)",
      "title": "Design Memory Allocator",
      "url": "/submissions/detail/1049366325/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694704090,
      "status": 10,
      "runtime": "139 ms",
      "is_pending": "Not Pending",
      "memory": "17 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1051157804,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1459,
      "title_slug": "apply-discount-every-n-orders",
      "code": "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.freq, self.discount = n, (100 - discount) / 100\n        self.cur = 0\n        self.products = {id: price for id, price in zip(products, prices)}\n\n    def getBill(self, product: List[int], amount: List[int]) -\u003e float:\n        self.cur += 1\n        total = sum(amount[i] * self.products[product[i]] for i in range(len(product)))\n        if self.cur \u003c self.freq:\n            return total\n        self.cur = 0\n        return total * self.discount\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)",
      "title": "Apply Discount Every n Orders",
      "url": "/submissions/detail/1051157804/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694887805,
      "status": 10,
      "runtime": "1201 ms",
      "is_pending": "Not Pending",
      "memory": "24.8 MB",
      "compare_result": "1111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1051155745,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1459,
      "title_slug": "apply-discount-every-n-orders",
      "code": "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.freq, self.discount = n, (100 - discount) / 100\n        self.cur = 0\n        self.products = {id: price for id, price in zip(products, prices)}\n\n    def getBill(self, product: List[int], amount: List[int]) -\u003e float:\n        self.cur += 1\n        multiplier = 1\n        if self.cur == self.freq:\n            self.cur, multiplier = 0, self.discount\n        total = sum(amount[i] * self.products[product[i]] for i in range(len(product)))\n        return total * multiplier\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)",
      "title": "Apply Discount Every n Orders",
      "url": "/submissions/detail/1051155745/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694887653,
      "status": 10,
      "runtime": "808 ms",
      "is_pending": "Not Pending",
      "memory": "24.8 MB",
      "compare_result": "1111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1051152086,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1459,
      "title_slug": "apply-discount-every-n-orders",
      "code": "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.products, self.prices = products, prices\n        self.freq, self.discount = n, (100 - discount) / 100\n        self.cur = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -\u003e float:\n        self.cur += 1\n        multiplier = 1\n        if self.cur == self.freq:\n            self.cur = 0\n            multiplier = self.discount\n        total = sum(amount[i] * self.prices[product[i] - 1] for i in range(len(product)))\n        return total * multiplier\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)",
      "title": "Apply Discount Every n Orders",
      "url": "/submissions/detail/1051152086/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694887380,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1100000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1051136998,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1512,
      "title_slug": "design-underground-system",
      "code": "class UndergroundSystem:\n\n    def __init__(self):\n        self.from_to = defaultdict(lambda: defaultdict(list))\n        self.in_transit = {}\n\n    def checkIn(self, id: int, stationName: str, t: int) -\u003e None:\n        self.in_transit[id] = (stationName, t)\n\n    def checkOut(self, id: int, stationName: str, t: int) -\u003e None:\n        station_from, time_from = self.in_transit.pop(id)\n        self.from_to[station_from][stationName].append(t - time_from)\n\n    def getAverageTime(self, startStation: str, endStation: str) -\u003e float:\n        times = self.from_to[startStation][endStation]\n        return sum(times) / len(times)\n\n\n# Your UndergroundSystem object will be instantiated and called as such:\n# obj = UndergroundSystem()\n# obj.checkIn(id,stationName,t)\n# obj.checkOut(id,stationName,t)\n# param_3 = obj.getAverageTime(startStation,endStation)",
      "title": "Design Underground System",
      "url": "/submissions/detail/1051136998/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694886274,
      "status": 10,
      "runtime": "241 ms",
      "is_pending": "Not Pending",
      "memory": "26.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1051126004,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1775,
      "title_slug": "design-an-ordered-stream",
      "code": "class OrderedStream:\n\n    def __init__(self, n: int):\n        self.data = [None]*n\n        self.ptr = 0 # 0-indexed \n\n    def insert(self, id: int, value: str) -\u003e List[str]:\n        id -= 1 # 0-indexed \n        self.data[id] = value \n        if id \u003e self.ptr: return [] # not reaching ptr \n        \n        while self.ptr \u003c len(self.data) and self.data[self.ptr]: self.ptr += 1 # update self.ptr \n        return self.data[id:self.ptr]\n\n\n\n# Your OrderedStream object will be instantiated and called as such:\n# obj = OrderedStream(n)\n# param_1 = obj.insert(idKey,value)",
      "title": "Design an Ordered Stream",
      "url": "/submissions/detail/1051126004/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694884821,
      "status": 10,
      "runtime": "251 ms",
      "is_pending": "Not Pending",
      "memory": "17 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1051124372,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1775,
      "title_slug": "design-an-ordered-stream",
      "code": "class OrderedStream:\n\n    def __init__(self, n: int):\n        self.values = [None] * n\n        self.length = n\n        self.cur = 0\n\n    def insert(self, idKey: int, value: str) -\u003e List[str]:\n        self.values[idKey - 1] = value\n        for i in range(self.cur, self.length):\n            if self.values[i] is not None:\n                continue\n            \n            self.cur, answer = i, self.values[self.cur:i]\n            return answer\n\n        return self.values[self.cur:]\n\n\n\n# Your OrderedStream object will be instantiated and called as such:\n# obj = OrderedStream(n)\n# param_1 = obj.insert(idKey,value)",
      "title": "Design an Ordered Stream",
      "url": "/submissions/detail/1051124372/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694884699,
      "status": 10,
      "runtime": "251 ms",
      "is_pending": "Not Pending",
      "memory": "17 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050849923,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1905,
      "title_slug": "design-authentication-manager",
      "code": "class AuthenticationManager:\n\n    def __init__(self, timeToLive: int):\n        self.ttl = timeToLive\n        self.tokens = {}\n\n    def generate(self, tokenId: str, currentTime: int) -\u003e None:\n        self.tokens[tokenId] = currentTime + self.ttl\n\n    def renew(self, tokenId: str, currentTime: int) -\u003e None:\n        if currentTime \u003c self.tokens.get(tokenId, currentTime):\n            self.generate(tokenId, currentTime)\n        else:\n            self.tokens.pop(tokenId, None)\n\n    def countUnexpiredTokens(self, currentTime: int) -\u003e int:\n        count = 0\n        remove_tokens = []\n        for token, expir_time in self.tokens.items():\n            if currentTime \u003c expir_time:\n                count += 1\n            else:\n                remove_tokens.append(token)\n        \n        for token in remove_tokens:\n            self.tokens.pop(token)\n        \n        return count\n\n\n# Your AuthenticationManager object will be instantiated and called as such:\n# obj = AuthenticationManager(timeToLive)\n# obj.generate(tokenId,currentTime)\n# obj.renew(tokenId,currentTime)\n# param_3 = obj.countUnexpiredTokens(currentTime)",
      "title": "Design Authentication Manager",
      "url": "/submissions/detail/1050849923/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694868403,
      "status": 10,
      "runtime": "189 ms",
      "is_pending": "Not Pending",
      "memory": "17.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050843823,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1955,
      "title_slug": "seat-reservation-manager",
      "code": "class SeatManager:\n\n    def __init__(self, n: int):\n        self.heap = list(range(1, n + 1))  \n\n    def reserve(self) -\u003e int:\n        return heappop(self.heap)\n\n    def unreserve(self, seatNumber: int) -\u003e None:\n        heappush(self.heap, seatNumber)\n\n\n# Your SeatManager object will be instantiated and called as such:\n# obj = SeatManager(n)\n# param_1 = obj.reserve()\n# obj.unreserve(seatNumber)",
      "title": "Seat Reservation Manager",
      "url": "/submissions/detail/1050843823/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694867737,
      "status": 10,
      "runtime": "420 ms",
      "is_pending": "Not Pending",
      "memory": "44.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050843067,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1955,
      "title_slug": "seat-reservation-manager",
      "code": "class SeatManager:\n\n    def __init__(self, n: int):\n        self.heap = list(range(1, n + 1))\n        heapify(self.heap)        \n\n    def reserve(self) -\u003e int:\n        return heappop(self.heap)\n\n    def unreserve(self, seatNumber: int) -\u003e None:\n        heappush(self.heap, seatNumber)\n\n\n# Your SeatManager object will be instantiated and called as such:\n# obj = SeatManager(n)\n# param_1 = obj.reserve()\n# obj.unreserve(seatNumber)",
      "title": "Seat Reservation Manager",
      "url": "/submissions/detail/1050843067/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694867654,
      "status": 10,
      "runtime": "439 ms",
      "is_pending": "Not Pending",
      "memory": "44.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050716326,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2169,
      "title_slug": "simple-bank-system",
      "code": "class Bank:\n\n    def __init__(self, balance: List[int]):\n        self.balance = balance\n        self.size = len(balance)\n\n    def transfer(self, account1: int, account2: int, money: int) -\u003e bool:\n        if not 0 \u003c account1 \u003c= self.size or not 0 \u003c account2 \u003c= self.size or (\n            self.balance[account1-1] \u003c money\n        ):\n            return False\n        self.balance[account2-1] += money\n        self.balance[account1-1] -= money\n        return True\n\n    def deposit(self, account: int, money: int) -\u003e bool:\n        if not 0 \u003c account \u003c= self.size:\n            return False\n        self.balance[account-1] += money\n        return True\n\n    def withdraw(self, account: int, money: int) -\u003e bool:\n        if not 0 \u003c account \u003c= self.size or self.balance[account-1] \u003c money:\n            return False\n        self.balance[account-1] -= money\n        return True\n\n\n# Your Bank object will be instantiated and called as such:\n# obj = Bank(balance)\n# param_1 = obj.transfer(account1,account2,money)\n# param_2 = obj.deposit(account,money)\n# param_3 = obj.withdraw(account,money)",
      "title": "Simple Bank System",
      "url": "/submissions/detail/1050716326/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694853351,
      "status": 10,
      "runtime": "590 ms",
      "is_pending": "Not Pending",
      "memory": "46.2 MB",
      "compare_result": "11111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050711409,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1753,
      "title_slug": "path-with-minimum-effort",
      "code": "class Solution:\r\n\r\n    def minimumEffortPath(self, heights: List[List[int]]) -\u003e int:\r\n        rows, cols = len(heights), len(heights[0])\r\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\r\n        dist = [[math.inf for _ in range(cols)] for _ in range(rows)]\r\n        dist[0][0] = 0\r\n        minHeap = [(0, 0, 0)] \r\n        while minHeap:\r\n            effort, x, y = heappop(minHeap)\r\n            if x == rows - 1 and y == cols - 1:\r\n                return effort\r\n            for dx, dy in directions:\r\n                nx, ny = x + dx, y + dy\r\n                if 0 \u003c= nx \u003c rows and 0 \u003c= ny \u003c cols:\r\n                    new_effort = max(effort, abs(heights[x][y] - heights[nx][ny]))\r\n                    if new_effort \u003c dist[nx][ny]:\r\n                        dist[nx][ny] = new_effort\r\n                        heappush(minHeap, (new_effort, nx, ny))",
      "title": "Path With Minimum Effort",
      "url": "/submissions/detail/1050711409/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694852754,
      "status": 10,
      "runtime": "521 ms",
      "is_pending": "Not Pending",
      "memory": "17.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050267339,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2434,
      "title_slug": "design-a-number-container-system",
      "code": "class NumberContainers:\n\n    def __init__(self):\n        self.num_indices = defaultdict(list)\n        self.num_at_index = {}\n        \n\n    def change(self, index: int, number: int) -\u003e None:\n        self.num_at_index[index] = number\n        heapq.heappush(self.num_indices[number], index)\n        \n\n    def find(self, number: int) -\u003e int:\n        while self.num_indices[number] and self.num_at_index[self.num_indices[number][0]] != number:\n            heapq.heappop(self.num_indices[number])\n        \n        return self.num_indices[number][0] if len(self.num_indices[number]) \u003e 0 else -1\n        \n\n\n# Your NumberContainers object will be instantiated and called as such:\n# obj = NumberContainers()\n# obj.change(index,number)\n# param_2 = obj.find(number)",
      "title": "Design a Number Container System",
      "url": "/submissions/detail/1050267339/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694797196,
      "status": 10,
      "runtime": "584 ms",
      "is_pending": "Not Pending",
      "memory": "72.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050262307,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2434,
      "title_slug": "design-a-number-container-system",
      "code": "import sortedcontainers\n\nclass NumberContainers:\n\n    def __init__(self):\n        self._idx_number = {}\n        self._number_idx = defaultdict(sortedcontainers.SortedSet)\n\n    def change(self, index: int, number: int) -\u003e None:\n        cur_number = self._idx_number.get(index, -1)\n        if cur_number != -1:\n            self._number_idx[cur_number].remove(index)\n        self._idx_number[index] = number\n        self._number_idx[number].add(index)\n\n    def find(self, number: int) -\u003e int:\n        ids = self._number_idx[number]\n        return ids[0] if ids else -1\n\n\n# Your NumberContainers object will be instantiated and called as such:\n# obj = NumberContainers()\n# obj.change(index,number)\n# param_2 = obj.find(number)",
      "title": "Design a Number Container System",
      "url": "/submissions/detail/1050262307/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694796782,
      "status": 10,
      "runtime": "1415 ms",
      "is_pending": "Not Pending",
      "memory": "156.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050260603,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 2434,
      "title_slug": "design-a-number-container-system",
      "code": "class NumberContainers:\n\n    def __init__(self):\n        self._idx_number = {}\n        self._number_idx = defaultdict(set)\n\n    def change(self, index: int, number: int) -\u003e None:\n        cur_number = self._idx_number.get(index, -1)\n        if cur_number != -1:\n            self._number_idx[cur_number].remove(index)\n        self._idx_number[index] = number\n        self._number_idx[number].add(index)\n\n    def find(self, number: int) -\u003e int:\n        ids = self._number_idx[number]\n        return min(ids) if ids else -1\n\n\n# Your NumberContainers object will be instantiated and called as such:\n# obj = NumberContainers()\n# obj.change(index,number)\n# param_2 = obj.find(number)",
      "title": "Design a Number Container System",
      "url": "/submissions/detail/1050260603/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694796640,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111110000000",
      "flag_type": 1
    },
    {
      "id": 1050258557,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2434,
      "title_slug": "design-a-number-container-system",
      "code": "class NumberContainers:\n\n    def __init__(self):\n        self._idx_number = {}\n        self._number_idx = defaultdict(set)\n\n    def change(self, index: int, number: int) -\u003e None:\n        cur_number = self._idx_number.get(index, -1)\n        self._idx_number[index] = number\n        self._number_idx[number].add(index)\n        if cur_number != -1:\n            self._number_idx[cur_number].discard(index)\n\n    def find(self, number: int) -\u003e int:\n        ids = self._number_idx[number]\n        return min(ids) if ids else -1\n\n\n# Your NumberContainers object will be instantiated and called as such:\n# obj = NumberContainers()\n# obj.change(index,number)\n# param_2 = obj.find(number)",
      "title": "Design a Number Container System",
      "url": "/submissions/detail/1050258557/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694796466,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111011111101111110011110111101111011010000000",
      "flag_type": 1
    },
    {
      "id": 1050258304,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 2434,
      "title_slug": "design-a-number-container-system",
      "code": "class NumberContainers:\n\n    def __init__(self):\n        self._idx_number = {}\n        self._number_idx = defaultdict(set)\n\n    def change(self, index: int, number: int) -\u003e None:\n        cur_number = self._idx_number.get(index, -1)\n        self._idx_number[index] = number\n        self._number_idx[number].add(index)\n        if cur_number != -1:\n            self._number_idx[cur_number].remove(index)\n\n    def find(self, number: int) -\u003e int:\n        ids = self._number_idx[number]\n        return min(ids) if ids else -1\n\n\n# Your NumberContainers object will be instantiated and called as such:\n# obj = NumberContainers()\n# obj.change(index,number)\n# param_2 = obj.find(number)",
      "title": "Design a Number Container System",
      "url": "/submissions/detail/1050258304/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694796446,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1050257239,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 2434,
      "title_slug": "design-a-number-container-system",
      "code": "class NumberContainers:\n\n    def __init__(self):\n        self._idx_number = {}\n        self._number_idx = defaultdict(set)\n\n    def change(self, index: int, number: int) -\u003e None:\n        cur_number = self._idx_number.get(index, -1)\n        self._idx_number[index] = number\n        self._number_idx[number].add(index)\n        if cur_number != -1:\n            self._number_idx[cur_number].remove(index)\n\n    def find(self, number: int) -\u003e int:\n        return min(self._number_idx.get(number, (-1, )))\n\n\n# Your NumberContainers object will be instantiated and called as such:\n# obj = NumberContainers()\n# obj.change(index,number)\n# param_2 = obj.find(number)",
      "title": "Design a Number Container System",
      "url": "/submissions/detail/1050257239/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694796357,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1050249342,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1995,
      "title_slug": "finding-pairs-with-a-certain-sum",
      "code": "class FindSumPairs:\n\n    def __init__(self, nums1: List[int], nums2: List[int]):\n        self._nums1, self._nums2, self._nums2_raw = Counter(nums1), Counter(nums2), nums2\n\n    def add(self, index: int, val: int) -\u003e None:\n        nums2_raw, nums2 = self._nums2_raw, self._nums2\n        cur_val = nums2_raw[index]\n        new_val = cur_val + val\n        if nums2[cur_val] \u003e 0:\n            nums2[cur_val] -= 1\n        \n        nums2_raw[index] = new_val\n        nums2[new_val] += 1\n\n    def count(self, tot: int) -\u003e int:       \n        return sum(num1_count * self._nums2.get(tot - num1, 0) \n                   for num1, num1_count in self._nums1.items())\n\n\n# Your FindSumPairs object will be instantiated and called as such:\n# obj = FindSumPairs(nums1, nums2)\n# obj.add(index,val)\n# param_2 = obj.count(tot)",
      "title": "Finding Pairs With a Certain Sum",
      "url": "/submissions/detail/1050249342/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694795684,
      "status": 10,
      "runtime": "596 ms",
      "is_pending": "Not Pending",
      "memory": "48.8 MB",
      "compare_result": "11111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050248394,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1995,
      "title_slug": "finding-pairs-with-a-certain-sum",
      "code": "class FindSumPairs:\n\n    def __init__(self, nums1: List[int], nums2: List[int]):\n        self._nums1, self._nums2, self._nums2_raw = Counter(nums1), Counter(nums2), nums2\n\n    def add(self, index: int, val: int) -\u003e None:\n        nums2_raw, nums2 = self._nums2_raw, self._nums2\n        cur_val = nums2_raw[index]\n        new_val = cur_val + val\n        if nums2[cur_val] \u003e 0:\n            nums2[cur_val] -= 1\n        \n        nums2_raw[index] = new_val\n        nums2[new_val] += 1\n\n    def count(self, tot: int) -\u003e int:\n        sum_count = 0\n        nums2 = self._nums2\n        for num1, num1_count in self._nums1.items():\n            sum_count += num1_count * nums2.get(tot - num1, 0) \n\n        return sum_count\n\n\n# Your FindSumPairs object will be instantiated and called as such:\n# obj = FindSumPairs(nums1, nums2)\n# obj.add(index,val)\n# param_2 = obj.count(tot)",
      "title": "Finding Pairs With a Certain Sum",
      "url": "/submissions/detail/1050248394/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694795603,
      "status": 10,
      "runtime": "583 ms",
      "is_pending": "Not Pending",
      "memory": "48.6 MB",
      "compare_result": "11111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1050245061,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 1995,
      "title_slug": "finding-pairs-with-a-certain-sum",
      "code": "class FindSumPairs:\n\n    def __init__(self, nums1: List[int], nums2: List[int]):\n        self._nums1, self._nums2, self._nums2_raw = Counter(nums1), Counter(nums2), nums2\n\n    def add(self, index: int, val: int) -\u003e None:\n        nums2_raw, nums2 = self._nums2_raw, self._nums2\n        cur_val = nums2_raw[index]\n        new_val = cur_val + val\n        nums2_raw[index] = new_val\n        if nums2[cur_val] \u003e 0:\n            nums2[cur_val] -= 1\n        nums2[new_val] += 1\n\n    def count(self, tot: int) -\u003e int:\n        sum_count = 0\n        nums1 = self._nums1\n        for num, cur_count in self._nums2.items():\n            diff = tot - num\n            if diff in nums1:\n                sum_count += nums1[diff] * cur_count \n\n        return sum_count\n\n\n# Your FindSumPairs object will be instantiated and called as such:\n# obj = FindSumPairs(nums1, nums2)\n# obj.add(index,val)\n# param_2 = obj.count(tot)",
      "title": "Finding Pairs With a Certain Sum",
      "url": "/submissions/detail/1050245061/",
      "lang_name": "Python3",
      "time": "4 months, 3 weeks",
      "timestamp": 1694795320,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111110",
      "flag_type": 1
    },
    {
      "id": 1052566251,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1387,
      "title_slug": "find-elements-in-a-contaminated-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass FindElements:\n\n    def __init__(self, root: Optional[TreeNode]):\n        root.val = 0\n        nodes = [root]\n        self.values = set() \n        while nodes:\n            node = nodes.pop()\n            if node.left:\n                val = 2 * node.val + 1\n                node.left.val = val\n                nodes.append(node.left)\n                self.values.add(val)\n            if node.right:\n                val = 2 * node.val + 2\n                node.right.val = val\n                nodes.append(node.right)\n                self.values.add(val)\n\n    def find(self, target: int) -\u003e bool:\n        return target in self.values\n\n# Your FindElements object will be instantiated and called as such:\n# obj = FindElements(root)\n# param_1 = obj.find(target)",
      "title": "Find Elements in a Contaminated Binary Tree",
      "url": "/submissions/detail/1052566251/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695037017,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111101",
      "flag_type": 1
    },
    {
      "id": 1052565015,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1387,
      "title_slug": "find-elements-in-a-contaminated-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass FindElements:\n\n    def __init__(self, root: Optional[TreeNode]):\n        self.root = root\n        root.val = 0\n        nodes = [root]\n        while nodes:\n            node = nodes.pop()\n            new_val = 2 * node.val\n            if node.left:\n                node.left.val = new_val + 1\n                nodes.append(node.left)\n            if node.right:\n                node.right.val = new_val + 2\n                nodes.append(node.right)\n\n    def dfs(self, node: TreeNode, target: int) -\u003e bool:\n        if not node or node.val \u003e target:\n            return False\n        if node.val == target:\n            return True\n        return self.dfs(node.left, target) or self.dfs(node.right, target)\n\n    def find(self, target: int) -\u003e bool:\n        return self.dfs(self.root, target)\n\n# Your FindElements object will be instantiated and called as such:\n# obj = FindElements(root)\n# param_1 = obj.find(target)",
      "title": "Find Elements in a Contaminated Binary Tree",
      "url": "/submissions/detail/1052565015/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695036888,
      "status": 10,
      "runtime": "3275 ms",
      "is_pending": "Not Pending",
      "memory": "20 MB",
      "compare_result": "1111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1052563124,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1387,
      "title_slug": "find-elements-in-a-contaminated-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass FindElements:\n\n    def __init__(self, root: Optional[TreeNode]):\n        self.root = root\n        root.val = 0\n        nodes = [root]\n        while nodes:\n            node = nodes.pop()\n            new_val = 2 * node.val\n            if node.left:\n                node.left.val = new_val + 1\n                nodes.append(node.left)\n            if node.right:\n                node.right.val = new_val + 2\n                nodes.append(node.right)\n\n    def find(self, target: int) -\u003e bool:\n        nodes = [self.root]\n        while nodes:\n            node = nodes.pop()\n            if node.val == target:\n                return True\n            if node.val \u003e target:\n                return False\n            if node.right:\n                nodes.append(node.right)\n            if node.left:\n                nodes.append(node.left)\n\n        return False\n\n# Your FindElements object will be instantiated and called as such:\n# obj = FindElements(root)\n# param_1 = obj.find(target)",
      "title": "Find Elements in a Contaminated Binary Tree",
      "url": "/submissions/detail/1052563124/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695036694,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111100000100000000000000000010",
      "flag_type": 1
    },
    {
      "id": 1052541293,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1294,
      "title_slug": "range-frequency-queries",
      "code": "class RangeFreqQuery:\n    def __init__(self, arr: List[int]):\n        self.l = [[] for _ in range(10001)]\n        for i, v in enumerate(arr):\n            self.l[v].append(i)\n            \n    def query(self, left: int, right: int, v: int) -\u003e int:\n        return bisect_right(self.l[v], right) - bisect_left(self.l[v], left)\n\n# Your RangeFreqQuery object will be instantiated and called as such:\n# obj = RangeFreqQuery(arr)\n# param_1 = obj.query(left,right,value)",
      "title": "Range Frequency Queries",
      "url": "/submissions/detail/1052541293/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695034450,
      "status": 10,
      "runtime": "1095 ms",
      "is_pending": "Not Pending",
      "memory": "55.8 MB",
      "compare_result": "11111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1052540035,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 1294,
      "title_slug": "range-frequency-queries",
      "code": "class RangeFreqQuery:\n\n    def __init__(self, arr: List[int]):\n        self.freq = {num: [0] for num in arr}\n        self.freq[arr[0]][0] = 1\n        for arr_val in arr[1:]:\n            for num, cur_freq in self.freq.items():\n                cur_freq.append(cur_freq[-1] + (1 if arr_val == num else 0))\n  \n\n    def query(self, left: int, right: int, value: int) -\u003e int:\n        freqs = self.freq.get(value, None)\n        if freqs is None:\n            return 0\n        return freqs[right] - (freqs[left-1] if left \u003e 0 else 0)\n\n# Your RangeFreqQuery object will be instantiated and called as such:\n# obj = RangeFreqQuery(arr)\n# param_1 = obj.query(left,right,value)",
      "title": "Range Frequency Queries",
      "url": "/submissions/detail/1052540035/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695034319,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111100000",
      "flag_type": 1
    },
    {
      "id": 1052539688,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1294,
      "title_slug": "range-frequency-queries",
      "code": "class RangeFreqQuery:\n\n    def __init__(self, arr: List[int]):\n        self.freq = {num: [0] for num in arr}\n        self.freq[arr[0]][0] = 1\n        for arr_val in arr[1:]:\n            for num, cur_freq in self.freq.items():\n                cur_freq.append(cur_freq[-1] + (1 if arr_val == num else 0))\n  \n\n    def query(self, left: int, right: int, value: int) -\u003e int:\n        freqs = self.freq[value]\n        print(left, right, value, self.freq[value])\n        return freqs[right] - (freqs[left-1] if left \u003e 0 else 0)\n\n# Your RangeFreqQuery object will be instantiated and called as such:\n# obj = RangeFreqQuery(arr)\n# param_1 = obj.query(left,right,value)",
      "title": "Range Frequency Queries",
      "url": "/submissions/detail/1052539688/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695034281,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11110000000000000000",
      "flag_type": 1
    },
    {
      "id": 1052530678,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 1294,
      "title_slug": "range-frequency-queries",
      "code": "class RangeFreqQuery:\n\n    def __init__(self, arr: List[int]):\n        self.nums = arr\n\n    def query(self, left: int, right: int, value: int) -\u003e int:\n        count = 0\n        for i in range(left, right + 1):\n            if self.nums[i] == value:\n                count += 1\n        \n        return count\n\n# Your RangeFreqQuery object will be instantiated and called as such:\n# obj = RangeFreqQuery(arr)\n# param_1 = obj.query(left,right,value)",
      "title": "Range Frequency Queries",
      "url": "/submissions/detail/1052530678/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695033353,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111110000",
      "flag_type": 1
    },
    {
      "id": 1052396767,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1463,
      "title_slug": "the-k-weakest-rows-in-a-matrix",
      "code": "class Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -\u003e List[int]:\n        rows_count, cols_count = len(mat), len(mat[0])\n        heap = []\n\n        for i, row in enumerate(mat):\n            count = 0\n            for j, val in enumerate(row):\n                if val == 0:\n                    count = j\n                    break\n            else:\n                count = cols_count\n        \n            heappush(heap, (count, i))\n        \n        return tuple(item[1] for item in nsmallest(k, heap))\n\n",
      "title": "The K Weakest Rows in a Matrix",
      "url": "/submissions/detail/1052396767/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695019672,
      "status": 10,
      "runtime": "108 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1051859689,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 947,
      "title_slug": "online-election",
      "code": "class TopVotedCandidate:\n\n    def __init__(self, persons: List[int], times: List[int]):\n        times_people_last = defaultdict(lambda: defaultdict(int)) \n        times_people = defaultdict(lambda: defaultdict(int))\n        for i in reversed(range(len(times))):\n            person, time = persons[i], times[i] \n            cur_votes = times_people[time][person]\n            if cur_votes == 0:\n                times_people_last[time][person] = i\n            times_people[time][person] += 1\n        \n        self.results = {}\n        for time in times_people:\n            max_votes_person, max_votes_count = None, None\n            for person, count in times_people[time].items():\n                if max_votes_count and count \u003c max_votes_count:\n                    continue\n                if max_votes_count is None or count \u003e max_votes_count:\n                    max_votes_person, max_votes_count = person, count \n                    continue\n                if times_people_last[time][max_votes_person] \u003e times_people_last[time][person]:\n                    max_votes_person, max_votes_count = person, count\n            self.results[time] = max_votes_person\n            \n    def q(self, t: int) -\u003e int:\n        for i in reversed(range(t + 1)):\n            if i in self.results:\n                return self.results[i]\n        \n        return -1\n\n\n# Your TopVotedCandidate object will be instantiated and called as such:\n# obj = TopVotedCandidate(persons, times)\n# param_1 = obj.q(t)",
      "title": "Online Election",
      "url": "/submissions/detail/1051859689/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694962815,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "10101101100100000000000000000000010000000000000000000000000000000000000000000000000000000000000010",
      "flag_type": 1
    },
    {
      "id": 1051798721,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 676,
      "title_slug": "implement-magic-dictionary",
      "code": "class MagicDictionary:\n\n    def __init__(self):\n        self.dict = []\n\n    def buildDict(self, dictionary: List[str]) -\u003e None:\n        self.dict = dictionary\n\n    def search(self, searchWord: str) -\u003e bool:\n        target_length = len(searchWord)\n        for word in self.dict:\n            if len(word) != target_length or word == searchWord:\n                continue\n            found_diff = False\n            for i in range(target_length):\n                if word[i] == searchWord[i]:\n                    continue\n                if found_diff:\n                    break\n\n                found_diff = True\n            else:\n                return True\n\n        return False\n\n# Your MagicDictionary object will be instantiated and called as such:\n# obj = MagicDictionary()\n# obj.buildDict(dictionary)\n# param_2 = obj.search(searchWord)",
      "title": "Implement Magic Dictionary",
      "url": "/submissions/detail/1051798721/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694957224,
      "status": 10,
      "runtime": "66 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1051792418,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 535,
      "title_slug": "encode-and-decode-tinyurl",
      "code": "class Codec:\n\n    def __init__(self):\n        self.urls = []\n\n    def encode(self, longUrl: str) -\u003e str:\n        \"\"\"Encodes a URL to a shortened URL.\n        \"\"\"\n        self.urls.append(longUrl)\n        return len(self.urls)\n        \n\n    def decode(self, shortUrl: str) -\u003e str:\n        \"\"\"Decodes a shortened URL to its original URL.\n        \"\"\"\n        return self.urls[shortUrl - 1]\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))",
      "title": "Encode and Decode TinyURL",
      "url": "/submissions/detail/1051792418/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694956613,
      "status": 10,
      "runtime": "45 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1051791289,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 535,
      "title_slug": "encode-and-decode-tinyurl",
      "code": "class Codec:\n\n    def __init__(self):\n        self.urls = {}\n        self.id = 0\n\n    def encode(self, longUrl: str) -\u003e str:\n        \"\"\"Encodes a URL to a shortened URL.\n        \"\"\"\n        id = self.id\n        self.urls[id] = longUrl\n        self.id += 1\n        return id\n        \n\n    def decode(self, shortUrl: str) -\u003e str:\n        \"\"\"Decodes a shortened URL to its original URL.\n        \"\"\"\n        return self.urls[int(shortUrl)]\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))",
      "title": "Encode and Decode TinyURL",
      "url": "/submissions/detail/1051791289/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694956499,
      "status": 10,
      "runtime": "28 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1051790057,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 535,
      "title_slug": "encode-and-decode-tinyurl",
      "code": "class Codec:\n\n    def __init__(self):\n        self.urls = []\n\n    def encode(self, longUrl: str) -\u003e str:\n        \"\"\"Encodes a URL to a shortened URL.\n        \"\"\"\n        self.urls.append(longUrl)\n        return str(len(self.urls) - 1)\n        \n\n    def decode(self, shortUrl: str) -\u003e str:\n        \"\"\"Decodes a shortened URL to its original URL.\n        \"\"\"\n        return self.urls[int(shortUrl)]\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))",
      "title": "Encode and Decode TinyURL",
      "url": "/submissions/detail/1051790057/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694956372,
      "status": 10,
      "runtime": "42 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1051787417,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 355,
      "title_slug": "design-twitter",
      "code": "class Twitter:\n\n    def __init__(self):\n        self.tweets = []\n        self.following = defaultdict(set)\n\n    def postTweet(self, userId: int, tweetId: int) -\u003e None:\n        self.tweets.append((userId, tweetId))\n\n    def getNewsFeed(self, userId: int) -\u003e List[int]:\n        tweets, following = [], self.following[userId]\n        for poster, tweet in reversed(self.tweets):\n            if poster != userId and poster not in following:\n                continue\n            tweets.append(tweet)\n            if len(tweets) == 10:\n                break\n            \n        return tweets\n\n    def follow(self, followerId: int, followeeId: int) -\u003e None:\n        self.following[followerId].add(followeeId)\n\n    def unfollow(self, followerId: int, followeeId: int) -\u003e None:\n        self.following[followerId].discard(followeeId)\n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter()\n# obj.postTweet(userId,tweetId)\n# param_2 = obj.getNewsFeed(userId)\n# obj.follow(followerId,followeeId)\n# obj.unfollow(followerId,followeeId)",
      "title": "Design Twitter",
      "url": "/submissions/detail/1051787417/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694956091,
      "status": 10,
      "runtime": "38 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111",
      "flag_type": 1
    },
    {
      "id": 1051787304,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 355,
      "title_slug": "design-twitter",
      "code": "class Twitter:\n\n    def __init__(self):\n        self.tweets = []\n        self.following = defaultdict(set)\n\n    def postTweet(self, userId: int, tweetId: int) -\u003e None:\n        self.tweets.append((userId, tweetId))\n\n    def getNewsFeed(self, userId: int) -\u003e List[int]:\n        tweets, following = [], self.following[userId]\n        for poster, tweet in reversed(self.tweets):\n            if poster != userId and poster not in following:\n                continue\n            tweets.append(tweet)\n            if len(tweets) == 10:\n                break\n            \n        return tweets\n\n    def follow(self, followerId: int, followeeId: int) -\u003e None:\n        self.following[followerId].add(followeeId)\n\n    def unfollow(self, followerId: int, followeeId: int) -\u003e None:\n        self.following[followerId].remove(followeeId)\n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter()\n# obj.postTweet(userId,tweetId)\n# param_2 = obj.getNewsFeed(userId)\n# obj.follow(followerId,followeeId)\n# obj.unfollow(followerId,followeeId)",
      "title": "Design Twitter",
      "url": "/submissions/detail/1051787304/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694956081,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111100000000000",
      "flag_type": 1
    },
    {
      "id": 1051688736,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 307,
      "title_slug": "range-sum-query-mutable",
      "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self.sums = list(accumulate(nums))\n        self.nums = nums\n        self.length = len(nums)\n\n    def update(self, index: int, val: int) -\u003e None:\n        self.nums[index], diff = val, val - self.nums[index]\n        for i in range(index, self.length):\n            self.sums[i] += diff\n\n    def sumRange(self, left: int, right: int) -\u003e int:\n        if left == 0:\n            return self.sums[right]\n        return self.sums[right] - self.sums[left - 1]\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(index,val)\n# param_2 = obj.sumRange(left,right)",
      "title": "Range Sum Query - Mutable",
      "url": "/submissions/detail/1051688736/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694944720,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111110000000",
      "flag_type": 1
    },
    {
      "id": 1051649878,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 877,
      "title_slug": "shortest-path-visiting-all-nodes",
      "code": "from collections import deque, namedtuple\n\nclass Solution:\n    def shortestPathLength(self, graph):\n        n = len(graph)\n        all_mask = (1 \u003c\u003c n) - 1\n        visited = set()\n        Node = namedtuple('Node', ['node', 'mask', 'cost'])\n\n        q = deque()\n        for i in range(n):\n            mask_value = (1 \u003c\u003c i)\n            this_node = Node(i, mask_value, 1)\n            q.append(this_node)\n            visited.add((i, mask_value))\n\n        while q:\n            curr = q.popleft()\n\n            if curr.mask == all_mask:\n                return curr.cost - 1\n\n            for adj in graph[curr.node]:\n                both_visited_mask = curr.mask | (1 \u003c\u003c adj)\n                this_node = Node(adj, both_visited_mask, curr.cost + 1)\n\n                if (adj, both_visited_mask) not in visited:\n                    visited.add((adj, both_visited_mask))\n                    q.append(this_node)\n\n        return -1\n",
      "title": "Shortest Path Visiting All Nodes",
      "url": "/submissions/detail/1051649878/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694940338,
      "status": 10,
      "runtime": "340 ms",
      "is_pending": "Not Pending",
      "memory": "21.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1051649022,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 208,
      "title_slug": "implement-trie-prefix-tree",
      "code": "class Trie:\n\n    def __init__(self):\n        self.root = {}\n\n    def insert(self, word: str) -\u003e None:\n        cur = self.root\n        for char in word:\n            if char not in cur:\n                cur[char] = {}\n            cur = cur[char]\n        \n        cur[\"_is_word\"] = None\n\n    def search(self, word: str) -\u003e bool:\n        cur = self.root\n        for char in word:\n            if char not in cur:\n                return False\n            cur = cur[char]\n        \n        return \"_is_word\" in cur\n\n    def startsWith(self, prefix: str) -\u003e bool:\n        cur = self.root\n        for char in prefix:\n            if char not in cur:\n                return False\n            cur = cur[char]\n            \n        return True\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)",
      "title": "Implement Trie (Prefix Tree)",
      "url": "/submissions/detail/1051649022/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694940243,
      "status": 10,
      "runtime": "114 ms",
      "is_pending": "Not Pending",
      "memory": "29.7 MB",
      "compare_result": "1111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1051646948,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 208,
      "title_slug": "implement-trie-prefix-tree",
      "code": "class Node:\n    def __init__(self):\n        self.ch, self.is_word = [None] * 128, False\n\nclass Trie:\n\n    def __init__(self):\n        self.head = Node()\n\n    def insert(self, word: str) -\u003e None:\n        cur_node = self.head\n        for i in range(len(word)):\n            char = ord(word[i])\n            if cur_node.ch[char] is None:\n                cur_node.ch[char] = Node()\n            cur_node = cur_node.ch[char]\n        cur_node.is_word = True\n\n    def search(self, word: str) -\u003e bool:\n        cur_node = self.head\n        for i in range(len(word)):\n            char = ord(word[i])\n            if cur_node.ch[char] is None:\n                return False\n            cur_node = cur_node.ch[char]\n        \n        return cur_node.is_word\n\n    def startsWith(self, prefix: str) -\u003e bool:\n        cur_node = self.head\n        for i in range(len(prefix)):\n            char = ord(prefix[i])\n            if cur_node.ch[char] is None:\n                return False\n            cur_node = cur_node.ch[char]\n        \n        return True\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)",
      "title": "Implement Trie (Prefix Tree)",
      "url": "/submissions/detail/1051646948/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694940000,
      "status": 10,
      "runtime": "297 ms",
      "is_pending": "Not Pending",
      "memory": "60.3 MB",
      "compare_result": "1111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1051646483,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 208,
      "title_slug": "implement-trie-prefix-tree",
      "code": "class Node:\n    def __init__(self):\n        self.ch, self.is_word = [None] * 57, False\n\nclass Trie:\n\n    def __init__(self):\n        self.head = Node()\n\n    def insert(self, word: str) -\u003e None:\n        cur_node = self.head\n        for i in range(len(word)):\n            char = ord(word[i]) - 65\n            if cur_node.ch[char] is None:\n                cur_node.ch[char] = Node()\n            cur_node = cur_node.ch[char]\n        cur_node.is_word = True\n\n    def search(self, word: str) -\u003e bool:\n        cur_node = self.head\n        for i in range(len(word)):\n            char = ord(word[i]) - 65\n            if cur_node.ch[char] is None:\n                return False\n            cur_node = cur_node.ch[char]\n        \n        return cur_node.is_word\n\n    def startsWith(self, prefix: str) -\u003e bool:\n        cur_node = self.head\n        for i in range(len(prefix)):\n            char = ord(prefix[i]) - 65\n            if cur_node.ch[char] is None:\n                return False\n            cur_node = cur_node.ch[char]\n        \n        return True\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)",
      "title": "Implement Trie (Prefix Tree)",
      "url": "/submissions/detail/1051646483/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1694939946,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111000",
      "flag_type": 1
    },
    {
      "id": 1054343833,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1776,
      "title_slug": "minimum-operations-to-reduce-x-to-zero",
      "code": "class Solution:\n    def minOperations(self, nums: List[int], x: int) -\u003e int:\n        target, length = sum(nums) - x, len(nums)\n        max_len = cur_sum = left = 0\n        \n        if target == 0:\n            return length\n        \n        for right, val in enumerate(nums):\n            cur_sum += val\n            while left \u003c= right and cur_sum \u003e target:\n                cur_sum -= nums[left]\n                left += 1\n            if cur_sum == target:\n                max_len = max(max_len, right - left + 1)\n        \n        return length - max_len if max_len else -1",
      "title": "Minimum Operations to Reduce X to Zero",
      "url": "/submissions/detail/1054343833/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695199644,
      "status": 10,
      "runtime": "946 ms",
      "is_pending": "Not Pending",
      "memory": "30.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1054343361,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1776,
      "title_slug": "minimum-operations-to-reduce-x-to-zero",
      "code": "class Solution:\n    def minOperations(self, nums: List[int], x: int) -\u003e int:\n        length = len(nums)\n        if sum(nums) == x:\n            return length\n        \n        max_len = cur_sum = left = 0\n        \n        for right, val in enumerate(nums):\n            cur_sum += val\n            while left \u003c= right and cur_sum \u003e target:\n                cur_sum -= nums[left]\n                left += 1\n            if cur_sum == target:\n                max_len = max(max_len, right - left + 1)\n        \n        return length - max_len if max_len else -1",
      "title": "Minimum Operations to Reduce X to Zero",
      "url": "/submissions/detail/1054343361/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695199593,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1054331408,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 1776,
      "title_slug": "minimum-operations-to-reduce-x-to-zero",
      "code": "class Solution:\n    def minOperations(self, nums: List[int], x: int) -\u003e int:\n        length = len(nums)\n        queue = [(0, length - 1, x)]\n        results_heap = []\n        while queue:\n            left, right, val = queue.pop()\n            if val == 0:\n                heappush(results_heap, left + length - 1 - right)\n            elif left == right and nums[left] == val:\n                heappush(results_heap, length)\n            elif left != right and val \u003e 0:\n                queue.append((left + 1, right, val - nums[left]))\n                queue.append((left, right - 1, val - nums[right]))\n                \n        return results_heap[0] if results_heap else -1",
      "title": "Minimum Operations to Reduce X to Zero",
      "url": "/submissions/detail/1054331408/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695198282,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1054327432,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1776,
      "title_slug": "minimum-operations-to-reduce-x-to-zero",
      "code": "class Solution:\n    def minOperations(self, nums: List[int], x: int) -\u003e int:\n        length = len(nums)\n        queue = [(0, length - 1, x)]\n        results_heap = []\n        while queue:\n            left, right, val = queue.pop()\n            if val \u003e 0:\n                queue.append((left + 1, right, val - nums[left]))\n                queue.append((left, right - 1, val - nums[right]))\n            elif val == 0 :\n                heappush(results_heap, left + length - 1 - right)\n            elif left == right and nums[left] == val:\n                heappush(results_heap, length)\n\n        return results_heap[0] if results_heap else -1",
      "title": "Minimum Operations to Reduce X to Zero",
      "url": "/submissions/detail/1054327432/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695197842,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1054320310,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 1776,
      "title_slug": "minimum-operations-to-reduce-x-to-zero",
      "code": "class Solution:\n    def minOperations(self, nums: List[int], x: int) -\u003e int:\n\n        def dp(left: int, right: int, x: int) -\u003e int:\n            if x == 0:\n                return 0\n            if x \u003c 0:\n                return -1\n            if left == right:\n                return 1 if nums[left] == x else -1\n            \n            results = (1 + dp(left + 1, right, x - nums[left]), 1 + dp(left, right - 1, x - nums[right]))\n            return min((result for result in results if result \u003e 0), default=-1)\n\n        return dp(0, len(nums) - 1, x)",
      "title": "Minimum Operations to Reduce X to Zero",
      "url": "/submissions/detail/1054320310/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695197065,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1054319955,
      "status_display": "Memory Limit Exceeded",
      "lang": "python3",
      "question_id": 1776,
      "title_slug": "minimum-operations-to-reduce-x-to-zero",
      "code": "class Solution:\n    def minOperations(self, nums: List[int], x: int) -\u003e int:\n\n        @cache\n        def dp(left: int, right: int, x: int) -\u003e int:\n            if x == 0:\n                return 0\n            if x \u003c 0:\n                return -1\n            if left == right:\n                return 1 if nums[left] == x else -1\n            \n            results = (1 + dp(left + 1, right, x - nums[left]), 1 + dp(left, right - 1, x - nums[right]))\n            return min((result for result in results if result \u003e 0), default=-1)\n\n        return dp(0, len(nums) - 1, x)",
      "title": "Minimum Operations to Reduce X to Zero",
      "url": "/submissions/detail/1054319955/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695197028,
      "status": 12,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1054317674,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1776,
      "title_slug": "minimum-operations-to-reduce-x-to-zero",
      "code": "class Solution:\n    def minOperations(self, nums: List[int], x: int) -\u003e int:\n\n        @cache\n        def dp(left: int, right: int, x: int) -\u003e int:\n            if x \u003c 0:\n                return -1\n            if x == 0:\n                return 0\n            if left == right:\n                return 0 if nums[left] == x else -1\n            \n            results = (1 + dp(left + 1, right, x - nums[left]), 1 + dp(left, right - 1, x - nums[right]))\n            return min((result for result in results if result \u003e 0), default=-1)\n\n        return dp(0, len(nums) - 1, x)",
      "title": "Minimum Operations to Reduce X to Zero",
      "url": "/submissions/detail/1054317674/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695196774,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111101110111011111111111111111111111111111111111111111111111111111000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1053831460,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2285,
      "title_slug": "design-bitset",
      "code": "class Bitset:\n\n    def __init__(self, size: int):\n        self.bits = [0] * size\n        self.ones_count = 0\n        self.do_flip = False\n        self.size = size\n\n    def fix(self, idx: int) -\u003e None:\n        cur = self.bits[idx]\n        if self.do_flip and cur == 1:\n            self.ones_count -= 1\n            self.bits[idx] = 0\n        elif not self.do_flip and cur == 0:\n            self.ones_count += 1\n            self.bits[idx] = 1\n\n    def unfix(self, idx: int) -\u003e None:\n        cur = self.bits[idx]\n        if self.do_flip and cur == 0:\n            self.ones_count += 1\n            self.bits[idx] = 1\n        elif not self.do_flip and cur == 1:\n            self.ones_count -= 1\n            self.bits[idx] = 0\n\n    def flip(self) -\u003e None:\n        self.do_flip = not self.do_flip\n\n    def all(self) -\u003e bool:\n        return self.count() == self.size\n\n    def one(self) -\u003e bool:\n        return self.count() \u003e 0\n\n    def count(self) -\u003e int:\n        return self.size - self.ones_count if self.do_flip else self.ones_count\n\n    def toString(self) -\u003e str:\n        target = (bit ^ 1 for bit in self.bits) if self.do_flip else self.bits\n        return \"\".join(str(num) for num in target)\n\n\n# Your Bitset object will be instantiated and called as such:\n# obj = Bitset(size)\n# obj.fix(idx)\n# obj.unfix(idx)\n# obj.flip()\n# param_4 = obj.all()\n# param_5 = obj.one()\n# param_6 = obj.count()\n# param_7 = obj.toString()",
      "title": "Design Bitset",
      "url": "/submissions/detail/1053831460/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695146896,
      "status": 10,
      "runtime": "605 ms",
      "is_pending": "Not Pending",
      "memory": "47.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1053767971,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 287,
      "title_slug": "find-the-duplicate-number",
      "code": "class Solution:\n    def findDuplicate(self, nums: List[int]) -\u003e int:\n        freqs = [False] * (10**5 + 1)\n        for num in nums:\n            if freqs[num] == True:\n                return num\n            freqs[num] = True\n\n        raise Exception()",
      "title": "Find the Duplicate Number",
      "url": "/submissions/detail/1053767971/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695142819,
      "status": 10,
      "runtime": "502 ms",
      "is_pending": "Not Pending",
      "memory": "30.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1053766402,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 287,
      "title_slug": "find-the-duplicate-number",
      "code": "class Solution:\n    def findDuplicate(self, nums: List[int]) -\u003e int:\n        freqs = [0] * (10**5 + 1)\n        for num in nums:\n            freqs[num] += 1\n            if freqs[num] \u003e 1:\n                return num\n\n        raise Exception()",
      "title": "Find the Duplicate Number",
      "url": "/submissions/detail/1053766402/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695142716,
      "status": 10,
      "runtime": "486 ms",
      "is_pending": "Not Pending",
      "memory": "30.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1052608131,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1477,
      "title_slug": "product-of-the-last-k-numbers",
      "code": "class ProductOfNumbers:\n\n    def __init__(self):\n        self.products = [1]\n\n    def add(self, num: int) -\u003e None:\n        if num == 0:\n            self.products.clear()\n            self.products.append(1)\n            return\n        self.products.append(num * self.products[-1])\n\n    def getProduct(self, k: int) -\u003e int:\n        if len(self.products) - 1 \u003c k:\n            return 0\n        return self.products[-1] // self.products[-(k + 1)]\n\n\n# Your ProductOfNumbers object will be instantiated and called as such:\n# obj = ProductOfNumbers()\n# obj.add(num)\n# param_2 = obj.getProduct(k)",
      "title": "Product of the Last K Numbers",
      "url": "/submissions/detail/1052608131/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695041195,
      "status": 10,
      "runtime": "218 ms",
      "is_pending": "Not Pending",
      "memory": "31.4 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1052607905,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1477,
      "title_slug": "product-of-the-last-k-numbers",
      "code": "class ProductOfNumbers:\n\n    def __init__(self):\n        self.products = [1]\n\n    def add(self, num: int) -\u003e None:\n        if num == 0:\n            self.products = [1]\n            return\n        self.products.append(num * self.products[-1])\n\n    def getProduct(self, k: int) -\u003e int:\n        if len(self.products) - 1 \u003c k:\n            return 0\n        return self.products[-1] // self.products[-(k + 1)]\n\n\n# Your ProductOfNumbers object will be instantiated and called as such:\n# obj = ProductOfNumbers()\n# obj.add(num)\n# param_2 = obj.getProduct(k)",
      "title": "Product of the Last K Numbers",
      "url": "/submissions/detail/1052607905/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695041174,
      "status": 10,
      "runtime": "228 ms",
      "is_pending": "Not Pending",
      "memory": "31.7 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1052602589,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1477,
      "title_slug": "product-of-the-last-k-numbers",
      "code": "class ProductOfNumbers:\n\n    def __init__(self):\n        self.products, self.last_zero, self.length = [], -1, 0\n\n    def add(self, num: int) -\u003e None:\n        if num == 0:\n            self.last_zero = self.length\n            num = 1\n        self.products.append(num * (self.products[-1] if self.products else 1))\n        self.length += 1\n\n    def getProduct(self, k: int) -\u003e int:\n        first_elem = self.length - k\n        if self.last_zero \u003e= first_elem:\n            return 0\n        if first_elem == 0:\n            return self.products[-1]\n        return self.products[-1] // self.products[first_elem - 1]\n\n\n# Your ProductOfNumbers object will be instantiated and called as such:\n# obj = ProductOfNumbers()\n# obj.add(num)\n# param_2 = obj.getProduct(k)",
      "title": "Product of the Last K Numbers",
      "url": "/submissions/detail/1052602589/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695040684,
      "status": 10,
      "runtime": "235 ms",
      "is_pending": "Not Pending",
      "memory": "165.6 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1052601116,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1477,
      "title_slug": "product-of-the-last-k-numbers",
      "code": "class ProductOfNumbers:\n\n    def __init__(self):\n        self.products, self.zero_indexes = [], []\n\n    def add(self, num: int) -\u003e None:\n        if num == 0:\n            self.zero_indexes.append(len(self.products))\n            num = 1\n        new_product = num * (self.products[-1] if self.products else 1)\n        self.products.append(new_product)\n\n    def getProduct(self, k: int) -\u003e int:\n        first_elem = len(self.products) - k\n        if self.zero_indexes and self.zero_indexes[-1] \u003e= first_elem:\n            return 0\n        if first_elem == 0:\n            return self.products[-1]\n        return self.products[-1] // self.products[first_elem - 1]\n\n\n# Your ProductOfNumbers object will be instantiated and called as such:\n# obj = ProductOfNumbers()\n# obj.add(num)\n# param_2 = obj.getProduct(k)",
      "title": "Product of the Last K Numbers",
      "url": "/submissions/detail/1052601116/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695040546,
      "status": 10,
      "runtime": "269 ms",
      "is_pending": "Not Pending",
      "memory": "165.8 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1052587571,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2620,
      "title_slug": "find-consecutive-integers-from-a-data-stream",
      "code": "class DataStream:\n\n    def __init__(self, value: int, k: int):\n        self.required, self.value, self.value_count = k, value, 0\n\n    def consec(self, num: int) -\u003e bool:\n        if num != self.value:\n            self.value_count = 0\n            return False\n        self.value_count += 1\n        return self.value_count \u003e= self.required\n\n\n# Your DataStream object will be instantiated and called as such:\n# obj = DataStream(value, k)\n# param_1 = obj.consec(num)",
      "title": "Find Consecutive Integers from a Data Stream",
      "url": "/submissions/detail/1052587571/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695039177,
      "status": 10,
      "runtime": "400 ms",
      "is_pending": "Not Pending",
      "memory": "42.5 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1052587062,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2620,
      "title_slug": "find-consecutive-integers-from-a-data-stream",
      "code": "class DataStream:\n\n    def __init__(self, value: int, k: int):\n        self.required, self.value, self.value_count = k, value, 0\n        \n\n    def consec(self, num: int) -\u003e bool:\n        if num != self.value:\n            self.value_count = 0\n            return False\n        \n        self.value_count += 1\n        return self.value_count \u003e= self.required\n\n\n# Your DataStream object will be instantiated and called as such:\n# obj = DataStream(value, k)\n# param_1 = obj.consec(num)",
      "title": "Find Consecutive Integers from a Data Stream",
      "url": "/submissions/detail/1052587062/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695039127,
      "status": 10,
      "runtime": "412 ms",
      "is_pending": "Not Pending",
      "memory": "42.2 MB",
      "compare_result": "11111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1052580166,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2413,
      "title_slug": "smallest-number-in-infinite-set",
      "code": "class SmallestInfiniteSet:\n\n    def __init__(self):\n        self.heap, self.next_num, self.nums = [], 1, set() \n\n    def popSmallest(self) -\u003e int:\n        if self.heap:\n            val = heappop(self.heap)\n            self.nums.remove(val)\n            return val\n        self.next_num += 1\n        return self.next_num - 1\n\n    def addBack(self, num: int) -\u003e None:\n        if num in self.nums or num \u003e= self.next_num:\n            return\n        self.nums.add(num)\n        heappush(self.heap, num)\n\n\n# Your SmallestInfiniteSet object will be instantiated and called as such:\n# obj = SmallestInfiniteSet()\n# param_1 = obj.popSmallest()\n# obj.addBack(num)",
      "title": "Smallest Number in Infinite Set",
      "url": "/submissions/detail/1052580166/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695038424,
      "status": 10,
      "runtime": "96 ms",
      "is_pending": "Not Pending",
      "memory": "16.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1052579467,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2413,
      "title_slug": "smallest-number-in-infinite-set",
      "code": "class SmallestInfiniteSet:\n\n    def __init__(self):\n        self.heap, self.next_num, self.nums = [], 1, set() \n\n\n    def popSmallest(self) -\u003e int:\n        if not self.heap:\n            self.next_num += 1\n            return self.next_num - 1\n            \n        val = heappop(self.heap)\n        if val \u003c self.next_num:\n            self.nums.remove(val)\n            return val\n        heappush(self.heap, val)\n        self.next_num += 1\n        return self.next_num - 1\n        \n\n    def addBack(self, num: int) -\u003e None:\n        if num in self.nums or num \u003e= self.next_num:\n            return\n        self.nums.add(num)\n        heappush(self.heap, num)\n\n\n# Your SmallestInfiniteSet object will be instantiated and called as such:\n# obj = SmallestInfiniteSet()\n# param_1 = obj.popSmallest()\n# obj.addBack(num)",
      "title": "Smallest Number in Infinite Set",
      "url": "/submissions/detail/1052579467/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695038355,
      "status": 10,
      "runtime": "109 ms",
      "is_pending": "Not Pending",
      "memory": "16.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1052574465,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2413,
      "title_slug": "smallest-number-in-infinite-set",
      "code": "class SmallestInfiniteSet:\n\n    def __init__(self):\n        self.heap = []\n        heappush(self.heap, 1)\n        self.cur = 2\n        self.nums = set((1, ))\n\n\n    def popSmallest(self) -\u003e int:\n        if self.heap:\n            val = heappop(self.heap)\n            self.nums.remove(val)\n            return val\n        \n        smallest = self.cur\n        self.cur += 1\n        return smallest\n\n    def addBack(self, num: int) -\u003e None:\n        if num in self.nums:\n            return\n        self.nums.add(num)\n        heappush(self.heap, num)\n\n\n# Your SmallestInfiniteSet object will be instantiated and called as such:\n# obj = SmallestInfiniteSet()\n# param_1 = obj.popSmallest()\n# obj.addBack(num)",
      "title": "Smallest Number in Infinite Set",
      "url": "/submissions/detail/1052574465/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695037865,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "001111101100000000000000000000000000000000011111111111111111111000000000000000000000000000000000000000000000000000000000000000000000011",
      "flag_type": 1
    },
    {
      "id": 1052566573,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1387,
      "title_slug": "find-elements-in-a-contaminated-binary-tree",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass FindElements:\n\n    def __init__(self, root: Optional[TreeNode]):\n        root.val = 0\n        nodes = [root]\n        self.values = set((0, )) \n        while nodes:\n            node = nodes.pop()\n            if node.left:\n                val = 2 * node.val + 1\n                node.left.val = val\n                nodes.append(node.left)\n                self.values.add(val)\n            if node.right:\n                val = 2 * node.val + 2\n                node.right.val = val\n                nodes.append(node.right)\n                self.values.add(val)\n\n    def find(self, target: int) -\u003e bool:\n        return target in self.values\n\n# Your FindElements object will be instantiated and called as such:\n# obj = FindElements(root)\n# param_1 = obj.find(target)",
      "title": "Find Elements in a Contaminated Binary Tree",
      "url": "/submissions/detail/1052566573/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695037048,
      "status": 10,
      "runtime": "69 ms",
      "is_pending": "Not Pending",
      "memory": "20.6 MB",
      "compare_result": "1111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1054836434,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 3093,
      "title_slug": "sum-of-values-at-indices-with-k-set-bits",
      "code": "class Solution:\n    def sumIndicesWithKSetBits(self, nums: List[int], k: int) -\u003e int:\n        return sum(num for i, num in enumerate(nums) if i.bit_count() == k)",
      "title": "Sum of Values at Indices With K Set Bits",
      "url": "/submissions/detail/1054836434/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695238346,
      "status": 10,
      "runtime": "81 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1054833349,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1458,
      "title_slug": "sort-integers-by-the-number-of-1-bits",
      "code": "class Solution:\n    def sortByBits(self, arr: List[int]) -\u003e List[int]:\n        return tuple(num for num in sorted(arr, key=lambda num: (num.bit_count(), num)))",
      "title": "Sort Integers by The Number of 1 Bits",
      "url": "/submissions/detail/1054833349/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695238096,
      "status": 10,
      "runtime": "60 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1054829486,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2659,
      "title_slug": "number-of-even-and-odd-bits",
      "code": "class Solution:\n    def evenOddBit(self, n: int) -\u003e List[int]:\n        return (n \u0026 0x55555555).bit_count(), (n \u0026 0xaaaaaaaa).bit_count()",
      "title": "Number of Even and Odd Bits",
      "url": "/submissions/detail/1054829486/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695237768,
      "status": 10,
      "runtime": "36 ms",
      "is_pending": "Not Pending",
      "memory": "16 MB",
      "compare_result
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1054827616,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2659,
      "title_slug": "number-of-even-and-odd-bits",
      "code": "class Solution:\n    def evenOddBit(self, n: int) -\u003e List[int]:\n        even, odd = n \u0026 0x55555555, n \u0026 0xaaaaaaaa\n        even_count, odd_count = 0, 0\n        while even:\n            if even \u0026 1 == 1:\n                even_count += 1\n            even \u003e\u003e= 1\n            \n        while odd:\n            if odd \u0026 1 == 1:\n                odd_count += 1\n            odd \u003e\u003e= 1\n        \n        return even_count, odd_count",
      "title": "Number of Even and Odd Bits",
      "url": "/submissions/detail/1054827616/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695237616,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1054695718,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 693,
      "title_slug": "binary-number-with-alternating-bits",
      "code": "class Solution:\n    def hasAlternatingBits(self, n: int) -\u003e bool:\n        return n \u0026 (n \u003e\u003e 1) == 0 and n \u0026 (n \u003e\u003e 2) == n \u003e\u003e 2",
      "title": "Binary Number with Alternating Bits",
      "url": "/submissions/detail/1054695718/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695228656,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1054684695,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 693,
      "title_slug": "binary-number-with-alternating-bits",
      "code": "class Solution:\n    def hasAlternatingBits(self, n: int) -\u003e bool:\n        return n \u0026 0x55555555 == n or n \u0026 0xaaaaaaaa == n",
      "title": "Binary Number with Alternating Bits",
      "url": "/submissions/detail/1054684695/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695227937,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111011101111110011011111111111010111110111111111111111111111110011001111111111001101111111111111111111111111111111111111111111011101111101111101111101111101111101111101111101111101111101111101111101111",
      "flag_type": 1
    },
    {
      "id": 1054681449,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 326,
      "title_slug": "power-of-three",
      "code": "class Solution:\n    def isPowerOfThree(self, n: int) -\u003e bool:\n        #                3 ** 20\n        return n \u003e 0 and 3486784401 % n == 0",
      "title": "Power of Three",
      "url": "/submissions/detail/1054681449/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695227710,
      "status": 10,
      "runtime": "64 ms",
      "is_pending": "Not Pending",
      "memory": "16 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1054681058,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 326,
      "title_slug": "power-of-three",
      "code": "class Solution:\n    def isPowerOfThree(self, n: int) -\u003e bool:\n        #                           3 ** 20\n        return n not in (0, -1) and 3486784401 % n == 0",
      "title": "Power of Three",
      "url": "/submissions/detail/1054681058/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695227683,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1054657627,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 231,
      "title_slug": "power-of-two",
      "code": "class Solution:\n    def isPowerOfTwo(self, n: int) -\u003e bool:\n        return n \u003e 0 and n \u0026 (n - 1) == 0",
      "title": "Power of Two",
      "url": "/submissions/detail/1054657627/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695226030,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1054657414,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 231,
      "title_slug": "power-of-two",
      "code": "class Solution:\n    def isPowerOfTwo(self, n: int) -\u003e bool:\n        return n == 0 or n \u0026 (n - 1) == 0",
      "title": "Power of Two",
      "url": "/submissions/detail/1054657414/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695226016,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1054657214,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 231,
      "title_slug": "power-of-two",
      "code": "class Solution:\n    def isPowerOfTwo(self, n: int) -\u003e bool:\n        return n \u0026 (n - 1) == 0",
      "title": "Power of Two",
      "url": "/submissions/detail/1054657214/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695226003,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1054631891,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 342,
      "title_slug": "power-of-four",
      "code": "class Solution:\n    def isPowerOfFour(self, n: int) -\u003e bool:\n        # Check if the number is greater than zero and is a power of two\n        if n \u003e 0 and (n \u0026 (n - 1)) == 0:\n            # Check if the number is of the form 4^x\n            return n \u0026 0x55555555 == n\n        else:\n            return False\n",
      "title": "Power of Four",
      "url": "/submissions/detail/1054631891/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695224195,
      "status": 10,
      "runtime": "33 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1054628737,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 342,
      "title_slug": "power-of-four",
      "code": "class Solution:\n    def isPowerOfFour(self, n: int) -\u003e bool:\n        return n and not (n \u0026 (n - 1)) and (n \u0026 0x55555555)",
      "title": "Power of Four",
      "url": "/submissions/detail/1054628737/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695223978,
      "status": 10,
      "runtime": "38 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1054628639,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 342,
      "title_slug": "power-of-four",
      "code": "class Solution:\n    def isPowerOfFour(self, n: int) -\u003e bool:\n        return n and not (n \u0026 (n - 1)) and (n \u0026 0x55555555)",
      "title": "Power of Four",
      "url": "/submissions/detail/1054628639/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695223971,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1054628401,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 342,
      "title_slug": "power-of-four",
      "code": "class Solution:\n    def isPowerOfFour(self, n: int) -\u003e bool:\n        return n and not (n \u0026 (n - 1)) and (n \u0026 0x55555555)",
      "title": "Power of Four",
      "url": "/submissions/detail/1054628401/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695223954,
      "status": 10,
      "runtime": "47 ms",
      "is_pending": "Not Pending",
      "memory": "16 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1054605267,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 268,
      "title_slug": "missing-number",
      "code": "class Solution:\n    def missingNumber(self, nums: List[int]) -\u003e int:\n        def xor(total: int, i: int) -\u003e int:\n            return total ^ nums[i] ^ (i + 1)\n        return reduce(xor, chain((0, ), range(len(nums))))",
      "title": "Missing Number",
      "url": "/submissions/detail/1054605267/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695222159,
      "status": 10,
      "runtime": "126 ms",
      "is_pending": "Not Pending",
      "memory": "17.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1054604639,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 268,
      "title_slug": "missing-number",
      "code": "class Solution:\n    def missingNumber(self, nums: List[int]) -\u003e int:\n        return reduce(lambda total, i: total ^ nums[i] ^ (i + 1), chain((0, ), range(len(nums))))",
      "title": "Missing Number",
      "url": "/submissions/detail/1054604639/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695222110,
      "status": 10,
      "runtime": "130 ms",
      "is_pending": "Not Pending",
      "memory": "17.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1054578246,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 268,
      "title_slug": "missing-number",
      "code": "class Solution:\n    def missingNumber(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        return ((length + 1) * length) // 2 - sum(nums)",
      "title": "Missing Number",
      "url": "/submissions/detail/1054578246/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695220121,
      "status": 10,
      "runtime": "124 ms",
      "is_pending": "Not Pending",
      "memory": "17.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1054561079,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 190,
      "title_slug": "reverse-bits",
      "code": "class Solution:\n    def reverseBits(self, n: int) -\u003e int:\n        # Initialize the reversed number to 0\n        reversed_num = 0\n        \n        # Iterate over all 32 bits of the given number\n        for i in range(32):\n            # Left shift the reversed number by 1 and add the last bit of the given number to it\n            reversed_num = (reversed_num \u003c\u003c 1) | (n \u0026 1)\n            # remove the last bit from the original number\n            n \u003e\u003e= 1\n        \n        # Return the reversed number\n        return reversed_num\n",
      "title": "Reverse Bits",
      "url": "/submissions/detail/1054561079/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695218869,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1054531291,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 67,
      "title_slug": "add-binary",
      "code": "class Solution:\n    def addBinary(self, a: str, b: str) -\u003e str:\n        answer = []\n        carry = 0\n        for char1, char2 in zip_longest(reversed(a), reversed(b)):\n            num1, num2 = int(char1) if char1 else 0, int(char2) if char2 else 0\n            cur_sum = num1 + num2 + carry\n            carry = 0\n            if cur_sum \u003e 1:\n                cur_sum -= 2\n                carry = 1\n            \n            answer.append(str(cur_sum))\n        \n        if carry:\n            answer.append(\"1\")\n\n        return \"\".join(reversed(answer))",
      "title": "Add Binary",
      "url": "/submissions/detail/1054531291/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695216691,
      "status": 10,
      "runtime": "54 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1056400663,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2323,
      "title_slug": "minimum-bit-flips-to-convert-number",
      "code": "class Solution:\n    def minBitFlips(self, start: int, goal: int) -\u003e int:\n        flips_count = 0\n        while start or goal:\n            start_is_one, goal_is_one = start \u0026 1, goal \u0026 1\n            if start_is_one and not goal_is_one or (not start_is_one and goal_is_one):\n                flips_count += 1\n            start \u003e\u003e= 1\n            goal \u003e\u003e= 1\n        return flips_count",
      "title": "Minimum Bit Flips to Convert Number",
      "url": "/submissions/detail/1056400663/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695396598,
      "status": 10,
      "runtime": "37 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1056218717,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1993,
      "title_slug": "sum-of-all-subset-xor-totals",
      "code": "class Solution:\n    def subsetXORSum(self, nums: List[int]) -\u003e int:\n        return reduce(operator.or_, nums) * 1 \u003c\u003c (len(nums) - 1)\n        ",
      "title": "Sum of All Subset XOR Totals",
      "url": "/submissions/detail/1056218717/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695379909,
      "status": 10,
      "runtime": "45 ms",
      "is_pending": "Not Pending",
      "memory": "16 MB",
      "compare_result": "111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1056216664,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1993,
      "title_slug": "sum-of-all-subset-xor-totals",
      "code": "class Solution:\n    def subsetXORSum(self, nums: List[int]) -\u003e int:\n        subsets_count = 2**(len(nums) - 1)\n        return reduce(operator.or_, nums) * subsets_count\n        ",
      "title": "Sum of All Subset XOR Totals",
      "url": "/submissions/detail/1056216664/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695379750,
      "status": 10,
      "runtime": "33 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1056159909,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1873,
      "title_slug": "longest-nice-substring",
      "code": "class Solution:\n    def longestNiceSubstring(self, s: str) -\u003e str:\n        sSet = set(s)\n        for i in range(len(s)):\n            if s[i].lower() not in sSet or s[i].upper() not in sSet:\n                lns1 = self.longestNiceSubstring(s[:i])\n                lns2 = self.longestNiceSubstring(s[i+1:])\n\n                return max(lns1, lns2, key=len)\n\n        return s\n",
      "title": "Longest Nice Substring",
      "url": "/submissions/detail/1056159909/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695374062,
      "status": 10,
      "runtime": "46 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1056137764,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1786,
      "title_slug": "count-the-number-of-consistent-strings",
      "code": "class Solution:\n    def countConsistentStrings(self, allowed: str, words: List[str]) -\u003e int:\n        allowed = set(allowed)\n        count = 0\n        for word in words:\n            if all(char in allowed for char in word):\n                count += 1\n        return count",
      "title": "Count the Number of Consistent Strings",
      "url": "/submissions/detail/1056137764/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695371681,
      "status": 10,
      "runtime": "239 ms",
      "is_pending": "Not Pending",
      "memory": "18.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1056133899,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1786,
      "title_slug": "count-the-number-of-consistent-strings",
      "code": "class Solution:\n    def countConsistentStrings(self, allowed: str, words: List[str]) -\u003e int:\n        allowed = set(allowed)\n        count = 0\n        for word in words:\n            if not set(word) - allowed:\n                count += 1\n        return count",
      "title": "Count the Number of Consistent Strings",
      "url": "/submissions/detail/1056133899/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695371261,
      "status": 10,
      "runtime": "244 ms",
      "is_pending": "Not Pending",
      "memory": "18.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1056131848,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1610,
      "title_slug": "xor-operation-in-an-array",
      "code": "class Solution:\n    def xorOperation(self, n: int, start: int) -\u003e int:\n        return reduce(lambda total, i: total ^ (start + 2 * i), chain((0, ), range(n)))",
      "title": "XOR Operation in an Array",
      "url": "/submissions/detail/1056131848/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695371035,
      "status": 10,
      "runtime": "38 ms",
      "is_pending": "Not Pending",
      "memory": "16 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1056094367,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 899,
      "title_slug": "binary-gap",
      "code": "class Solution:\n    def binaryGap(self, n: int) -\u003e int:\n        i, first_bit = 0, None\n        max_distance = 0\n        while n:\n            is_one = n \u0026 1 == 1\n            if is_one and first_bit is None:\n                first_bit = i\n            elif is_one:\n                max_distance, first_bit = max(max_distance, i - first_bit), i\n            n \u003e\u003e= 1\n            i += 1\n        \n        return max_distance ",
      "title": "Binary Gap",
      "url": "/submissions/detail/1056094367/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695367478,
      "status": 10,
      "runtime": "45 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1056031768,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 392,
      "title_slug": "is-subsequence",
      "code": "class Solution:\n    def isSubsequence(self, s: str, t: str) -\u003e bool:\n        i = 0\n        length = len(s)\n        for char in t:\n            if i == length:\n                break\n            if s[i] == char:\n                i += 1\n            \n        return i == length",
      "title": "Is Subsequence",
      "url": "/submissions/detail/1056031768/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695362226,
      "status": 10,
      "runtime": "38 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1056030666,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 392,
      "title_slug": "is-subsequence",
      "code": "class Solution:\n    def isSubsequence(self, s: str, t: str) -\u003e bool:\n        i, s_char = 0, s[0]\n        length = len(s)\n        for char in t:\n            if i == length:\n                break\n            if s_char == char:\n                s_char = s[i]\n                i += 1\n            \n        return i == length",
      "title": "Is Subsequence",
      "url": "/submissions/detail/1056030666/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695362130,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0100000000000000000",
      "flag_type": 1
    },
    {
      "id": 1056030501,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 392,
      "title_slug": "is-subsequence",
      "code": "class Solution:\n    def isSubsequence(self, s: str, t: str) -\u003e bool:\n        i, s_char = 0, s[0]\n        length = len(s)\n        for char in t:\n            if i == length:\n                break\n            if s_char == char:\n                i += 1\n                s_char = s[i]\n            \n        return i == length",
      "title": "Is Subsequence",
      "url": "/submissions/detail/1056030501/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695362118,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1056029965,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 392,
      "title_slug": "is-subsequence",
      "code": "class Solution:\n    def isSubsequence(self, s: str, t: str) -\u003e bool:\n        i, s_char = 0, s[0]\n        length = len(s)\n        for char in t:\n            if i == length:\n                break\n            if s_char == char:\n                i += 0\n                s_char = s[i]\n            \n        return i == length",
      "title": "Is Subsequence",
      "url": "/submissions/detail/1056029965/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695362068,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0100000000000000000",
      "flag_type": 1
    },
    {
      "id": 1056027873,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 767,
      "title_slug": "prime-number-of-set-bits-in-binary-representation",
      "code": "class Solution:\n    def countPrimeSetBits(self, left: int, right: int) -\u003e int:\n        prime_bits = (2, 3, 5, 7, 11, 13, 17, 19)\n        answer = 0\n        for num in range(left, right + 1):\n            bit_count = num.bit_count()\n            if bit_count in prime_bits:\n                answer += 1\n            \n        return answer",
      "title": "Prime Number of Set Bits in Binary Representation",
      "url": "/submissions/detail/1056027873/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695361885,
      "status": 10,
      "runtime": "85 ms",
      "is_pending": "Not Pending",
      "memory": "16 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1055572388,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 645,
      "title_slug": "set-mismatch",
      "code": "class Solution:\n    def findErrorNums(self, nums: List[int]) -\u003e List[int]:\n        length = len(nums)\n        # dupl_xor_miss = duplicate ^ missing\n        dupl_xor_miss = reduce(lambda total, i: total ^ i ^ nums[i - 1], range(length + 1))\n        rightmost_set_bit = dupl_xor_miss \u0026 -dupl_xor_miss\n        xor_group1 = xor_group2 = 0\n        for i in range(1, length + 1):\n            if i \u0026 rightmost_set_bit:\n                xor_group1 ^= i\n            else:\n                xor_group2 ^= i\n            if nums[i - 1] \u0026 rightmost_set_bit:\n                xor_group1 ^= nums[i - 1]\n            else:\n                xor_group2 ^= nums[i - 1]\n        for num in nums:\n            if num == xor_group1:\n                return num, xor_group2\n            if num == xor_group2:\n                return num, xor_group1 \n        \n        raise Exception()",
      "title": "Set Mismatch",
      "url": "/submissions/detail/1055572388/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695314169,
      "status": 10,
      "runtime": "203 ms",
      "is_pending": "Not Pending",
      "memory": "17.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1055572006,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 645,
      "title_slug": "set-mismatch",
      "code": "class Solution:\n    def findErrorNums(self, nums: List[int]) -\u003e List[int]:\n        length = len(nums)\n        # dupl_xor_miss = duplicate ^ missing\n        dupl_xor_miss = reduce(lambda total, i: total ^ i ^ nums[i - 1], nums)\n        rightmost_set_bit = dupl_xor_miss \u0026 -dupl_xor_miss\n        xor_group1 = xor_group2 = 0\n        for i in range(1, length + 1):\n            if i \u0026 rightmost_set_bit:\n                xor_group1 ^= i\n            else:\n                xor_group2 ^= i\n            if nums[i - 1] \u0026 rightmost_set_bit:\n                xor_group1 ^= nums[i - 1]\n            else:\n                xor_group2 ^= nums[i - 1]\n        for num in nums:\n            if num == xor_group1:\n                return num, xor_group2\n            if num == xor_group2:\n                return num, xor_group1 \n        \n        raise Exception()",
      "title": "Set Mismatch",
      "url": "/submissions/detail/1055572006/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695314140,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111110011001111001101111101111000000000000000",
      "flag_type": 1
    },
    {
      "id": 1055552901,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 645,
      "title_slug": "set-mismatch",
      "code": "class Solution:\n    def findErrorNums(self, nums: List[int]) -\u003e List[int]:\n        n = len(nums)\n        dupl_xor_miss = 0\n        for i in range(1, n+1):\n            dupl_xor_miss ^= i ^ nums[i-1]\n        \n        # example for get rightmost set bit\n        # x:             01110000\n        # ~x:            10001111\n        # -x or ~x + 1:  10010000\n        # x \u0026 -x:        00010000\n\n        # example for unset rightmost set bit\n        # x:             01110000\n        # x-1:           01101111\n        # x \u0026 (x-1):     01100000\n        rightmost_set_bit = dupl_xor_miss \u0026 -dupl_xor_miss\n        xor_group1 = xor_group2 = 0\n        for i in range(1, n + 1):\n            if i \u0026 rightmost_set_bit:\n                xor_group1 ^= i\n            else:\n                xor_group2 ^= i\n            if nums[i-1] \u0026 rightmost_set_bit:\n                xor_group1 ^= nums[i-1]\n            else:\n                xor_group2 ^= nums[i-1]\n        \n        for num in nums:\n            if num == xor_group1:\n                return [num, xor_group2]\n            if num == xor_group2:\n                return [num, xor_group1]\n\n        return []",
      "title": "Set Mismatch",
      "url": "/submissions/detail/1055552901/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695312693,
      "status": 10,
      "runtime": "197 ms",
      "is_pending": "Not Pending",
      "memory": "17.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1055524154,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 476,
      "title_slug": "number-complement",
      "code": "class Solution:\n    def findComplement(self, num: int) -\u003e int:\n        return ~num + (1 \u003c\u003c num.bit_length())",
      "title": "Number Complement",
      "url": "/submissions/detail/1055524154/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695310383,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1055510838,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 476,
      "title_slug": "number-complement",
      "code": "class Solution:\n    def findComplement(self, num: int) -\u003e int:\n        answer = 0\n        while num:    \n            answer = (answer \u003c\u003c 1) | ((num \u0026 1) ^ 1)\n            num \u003e\u003e= 1\n\n        return answer",
      "title": "Number Complement",
      "url": "/submissions/detail/1055510838/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695309273,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11010010100000101000100000100010100000000100000000000000000000000000000000000000000000000000000000000000000000000000000010000000010000000000100000000",
      "flag_type": 1
    },
    {
      "id": 1055412495,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 476,
      "title_slug": "number-complement",
      "code": "class Solution:\n    def findComplement(self, num: int) -\u003e int:\n        return ~num",
      "title": "Number Complement",
      "url": "/submissions/detail/1055412495/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695301064,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1055193922,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 4,
      "title_slug": "median-of-two-sorted-arrays",
      "code": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -\u003e float:\n        m, n = len(nums1), len(nums2)\n        p1, p2 = 0, 0\n        \n        # Get the smaller value between nums1[p1] and nums2[p2].\n        def get_min():\n            nonlocal p1, p2\n            if p1 \u003c m and p2 \u003c n:\n                if nums1[p1] \u003c nums2[p2]:\n                    ans = nums1[p1]\n                    p1 += 1\n                else:\n                    ans = nums2[p2]\n                    p2 += 1\n            elif p2 == n:\n                ans = nums1[p1]\n                p1 += 1\n            else:\n                ans = nums2[p2]\n                p2 += 1\n            return ans\n        \n        if (m + n) % 2 == 0:\n            for _ in range((m + n) // 2 - 1):\n                _ = get_min()\n            return (get_min() + get_min()) / 2\n        else:\n            for _ in range((m + n) // 2):\n                _ = get_min()\n            return get_min()",
      "title": "Median of Two Sorted Arrays",
      "url": "/submissions/detail/1055193922/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695279112,
      "status": 10,
      "runtime": "95 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057800782,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 86,
      "title_slug": "partition-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -\u003e Optional[ListNode]:\n        before_head, after_head = ListNode(0), ListNode(0)\n        before_tail, after_tail = before_head, after_head\n        \n        while head: \n            if head.val \u003c x:\n                before_tail.next, before_tail = head, head\n            else:\n                after_tail.next, after_tail = head, head\n            head = head.next\n        \n        after_tail.next, before_tail.next = None, after_head.next\n        \n        return before_head.next",
      "title": "Partition List",
      "url": "/submissions/detail/1057800782/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695548444,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057800513,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 92,
      "title_slug": "reverse-linked-list-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -\u003e Optional[ListNode]:\n        cur_node = 1\n        left_head, left_tail = head if left \u003e 1 else None, None\n\n        while cur_node \u003c left:\n            cur_node += 1\n            head, left_tail = head.next, head\n\n        cur_node += 1\n        mid_head, mid_tail, head = head, head, head.next\n        mid_head.next = None\n\n        while cur_node \u003c= right:\n            cur_node += 1\n            mid_head, head.next, head = head, mid_head, head.next\n    \n        mid_tail.next = head\n        if left_head:\n            left_tail.next = mid_head\n        else:\n            left_head = mid_head\n\n        return left_head",
      "title": "Reverse Linked List II",
      "url": "/submissions/detail/1057800513/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695548414,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057800291,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 138,
      "title_slug": "copy-list-with-random-pointer",
      "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\n\nclass Solution:\n    def copyRandomList(self, head: 'Optional[Node]') -\u003e 'Optional[Node]':\n        \n        copied = {None: None}\n\n        def copy_node(node: Node) -\u003e Node:\n            if node in copied:\n                return copied[node]\n            \n            new_node = Node(node.val)\n            copied[node] = new_node\n            new_node.next = copy_node(node.next)\n            new_node.random = copy_node(node.random)\n            return new_node\n        \n        return copy_node(head)\n",
      "title": "Copy List with Random Pointer",
      "url": "/submissions/detail/1057800291/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695548391,
      "status": 10,
      "runtime": "49 ms",
      "is_pending": "Not Pending",
      "memory": "17.8 MB",
      "compare_result": "1111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057800149,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 138,
      "title_slug": "copy-list-with-random-pointer",
      "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\n\nclass Solution:\n    def copyRandomList(self, head: 'Optional[Node]') -\u003e 'Optional[Node]':\n        ",
      "title": "Copy List with Random Pointer",
      "url": "/submissions/detail/1057800149/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695548375,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1057799547,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 82,
      "title_slug": "remove-duplicates-from-sorted-list-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        tail, before_tail = head, None\n        remove_tail = False\n        while tail:\n            if tail.next and tail.val == tail.next.val:\n                tail.next = tail.next.next\n                remove_tail = True\n                continue\n            if not remove_tail:\n                before_tail, tail = tail, tail.next\n                continue\n            remove_tail = False\n            if before_tail is None:\n                tail = head.next\n                head.next, head = None, head.next\n            else:\n                before_tail.next = tail.next\n                tail = tail.next\n        return head",
      "title": "Remove Duplicates from Sorted List II",
      "url": "/submissions/detail/1057799547/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695548310,
      "status": 10,
      "runtime": "49 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057797901,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 82,
      "title_slug": "remove-duplicates-from-sorted-list-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        tail, before_tail = head, None\n        remove_tail = False\n        while tail:\n            if tail.next and tail.val == tail.next.val:\n                tail.next = tail.next.next\n                remove_tail = True\n                continue\n            if not remove_tail:\n                before_tail, tail = tail, tail.next\n                continue\n            remove_tail = False\n            if before_tail is None:\n                head.next, head = None, head.next\n            else:\n                before_tail.next = tail.next\n                tail = before_tail \n        return head",
      "title": "Remove Duplicates from Sorted List II",
      "url": "/submissions/detail/1057797901/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695548122,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111101100001111111111010000001100010101001101100100010000111100001100000000001110001000111011010001001000100001000000000011000000000011000101000100111101",
      "flag_type": 1
    },
    {
      "id": 1057795118,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 82,
      "title_slug": "remove-duplicates-from-sorted-list-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        tail, before_tail = head, None\n        remove_tail = False\n        while tail:\n            if tail.next and tail.val == tail.next.val:\n                tail.next = tail.next.next\n                remove_tail = True\n                continue\n            if not remove_tail:\n                before_tail, tail = tail, tail.next\n                continue\n            remove_tail = False\n            if before_tail is None:\n                head.next, head = None, head.next\n            else:\n                before_tail.next = tail.next\n            tail = tail.next\n        return head",
      "title": "Remove Duplicates from Sorted List II",
      "url": "/submissions/detail/1057795118/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695547801,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111101100001111111111010000001100010101001101100100010000111100001100000000001110001000111011010001001000100001000000000011000000000011000101000100111101",
      "flag_type": 1
    },
    {
      "id": 1057794909,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 82,
      "title_slug": "remove-duplicates-from-sorted-list-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        tail, before_tail = head, None\n        remove_tail = False\n        while tail and tail.next:\n            if tail.val == tail.next.val:\n                tail.next = tail.next.next\n                remove_tail = True\n                continue\n            if not remove_tail:\n                before_tail, tail = tail, tail.next\n                continue\n            remove_tail = False\n            if before_tail is None:\n                head.next, head = None, head.next\n            else:\n                before_tail.next = tail.next\n            tail = tail.next\n        return head",
      "title": "Remove Duplicates from Sorted List II",
      "url": "/submissions/detail/1057794909/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695547778,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111101010101101001000000100011000010000001100000000001101100100000000011000001000000000000100001000001011000000001000000001000000000000000000000011000101000100101101",
      "flag_type": 1
    },
    {
      "id": 1057793801,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 82,
      "title_slug": "remove-duplicates-from-sorted-list-ii",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -\u003e Optional[ListNode]:\n        tail, before_tail = head, None\n        remove_tail = False\n        while tail and tail.next:\n            if tail.val == tail.next.val:\n                tail.next = tail.next.next\n                remove_tail = True\n                continue\n            if not remove_tail:\n                before_tail, tail = tail, tail.next\n                continue\n            if before_tail is None:\n                head.next, head = None, head.next\n            else:\n                before_tail.next = tail.next\n            tail = tail.next\n        return head",
      "title": "Remove Duplicates from Sorted List II",
      "url": "/submissions/detail/1057793801/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695547659,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111101010101101001000000100011000010000001000000000000101100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1057784011,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 815,
      "title_slug": "champagne-tower",
      "code": "class Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -\u003e float:\n        if query_row == 0:\n            return min(1, poured)\n        if query_glass in (0, query_row):\n            while query_row and poured:\n                poured = (poured - 1) / 2 if poured \u003e 1 else 0\n                query_row -= 1\n            return min(1, poured)\n\n        cur_row, next_row = [0] * (query_row + 2), [0] * (query_row + 2)\n        cur_row[0] = poured\n        for row in range(query_row + 1):\n            next_row[0] = 0\n            for col in range(row + 1):\n                overflow = (cur_row[col] - 1) / 2\n                if overflow \u003e 0:\n                    next_row[col] += overflow\n                    next_row[col + 1] = overflow\n                else:\n                    next_row[col + 1] = 0\n            cur_row, next_row = next_row, cur_row\n        return min(1, next_row[query_glass])",
      "title": "Champagne Tower",
      "url": "/submissions/detail/1057784011/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695546558,
      "status": 10,
      "runtime": "69 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057783643,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 815,
      "title_slug": "champagne-tower",
      "code": "class Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -\u003e float:\n        if query_row == 0:\n            return min(1, poured)\n        if query_glass in (0, query_row):\n            while query_row and poured:\n                poured = (poured - 1) / 2\n                query_row -= 1\n            return min(1, poured)\n\n        cur_row, next_row = [0] * (query_row + 2), [0] * (query_row + 2)\n        cur_row[0] = poured\n        for row in range(query_row + 1):\n            next_row[0] = 0\n            for col in range(row + 1):\n                overflow = (cur_row[col] - 1) / 2\n                if overflow \u003e 0:\n                    next_row[col] += overflow\n                    next_row[col + 1] = overflow\n                else:\n                    next_row[col + 1] = 0\n            cur_row, next_row = next_row, cur_row\n        return min(1, next_row[query_glass])",
      "title": "Champagne Tower",
      "url": "/submissions/detail/1057783643/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695546519,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111101001101111111111111111011011111101101111110110111111111111111111111111111111011111111111111111111111111111111111111111111111111101111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057783439,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 815,
      "title_slug": "champagne-tower",
      "code": "class Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -\u003e float:\n        if query_row == 0:\n            return poured\n        if query_glass in (0, query_row):\n            while query_row and poured:\n                poured = (poured - 1) / 2\n                query_row -= 1\n            return poured\n\n        cur_row, next_row = [0] * (query_row + 2), [0] * (query_row + 2)\n        cur_row[0] = poured\n        for row in range(query_row + 1):\n            next_row[0] = 0\n            for col in range(row + 1):\n                overflow = (cur_row[col] - 1) / 2\n                if overflow \u003e 0:\n                    next_row[col] += overflow\n                    next_row[col + 1] = overflow\n                else:\n                    next_row[col + 1] = 0\n            cur_row, next_row = next_row, cur_row\n        return min(1, next_row[query_glass])",
      "title": "Champagne Tower",
      "url": "/submissions/detail/1057783439/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695546498,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111101101001100111111111000111011000011101100001110110000111111100001011110000101111011111111111111111111111111111111111111111111111111101111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057313158,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 19,
      "title_slug": "remove-nth-node-from-end-of-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -\u003e Optional[ListNode]:\n        cur_length, target_length, before_removed = 0, n + 1, head\n        tail = head\n        while tail and cur_length != target_length:\n            tail = tail.next\n            cur_length += 1\n        if not tail and cur_length != target_length:\n            return head.next\n        while tail:\n            before_removed = before_removed.next\n            tail = tail.next\n        before_removed.next = before_removed.next.next\n        return head",
      "title": "Remove Nth Node From End of List",
      "url": "/submissions/detail/1057313158/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695495298,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057312463,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 19,
      "title_slug": "remove-nth-node-from-end-of-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -\u003e Optional[ListNode]:\n        cur_length, target_length, before_removed = 0, n + 1, head\n        tail = head\n        while tail and cur_length != target_length:\n            tail = tail.next\n            cur_length += 1\n        if not tail and cur_length == 1:\n            return None\n        while tail:\n            before_removed = before_removed.next\n            tail = tail.next\n        before_removed.next = before_removed.next.next\n        return head",
      "title": "Remove Nth Node From End of List",
      "url": "/submissions/detail/1057312463/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695495238,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110110111111111011111111111111111111111011110111111111111111111011111011111111111111110111101111111111111111111111111011111110111110111111111111111111111111111011011101111111101101101111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057148257,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 61,
      "title_slug": "rotate-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -\u003e Optional[ListNode]:\n        if k == 0 or not head:\n            return head\n        temp_head, tail, length = head, head, 0\n        while temp_head:\n            length += 1\n            tail, temp_head = temp_head, temp_head.next\n        rotation = k % length\n        if rotation == 0:\n            return head\n        new_head_idx = length - rotation\n        new_tail_idx = new_head_idx - 1 \n        i, new_head, new_tail = 0, None, None\n        temp_head = head\n        while temp_head:\n            if i == new_head_idx:\n                new_head = temp_head\n                break\n            if i == new_tail_idx:\n                new_tail = temp_head\n            i += 1\n            temp_head = temp_head.next\n        tail.next = head\n        new_tail.next = None\n        return new_head\n\n            \n",
      "title": "Rotate List",
      "url": "/submissions/detail/1057148257/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695481563,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057147928,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 61,
      "title_slug": "rotate-list",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -\u003e Optional[ListNode]:\n        if k == 0:\n            return\n        temp_head, tail, length = head, head, 0\n        while temp_head:\n            length += 1\n            tail, temp_head = temp_head, temp_head.next\n        rotation = k % length\n        if rotation == 0:\n            return head\n        new_head_idx = length - rotation\n        new_tail_idx = new_head_idx - 1 \n        i, new_head, new_tail = 0, None, None\n        temp_head = head\n        while temp_head:\n            if i == new_head_idx:\n                new_head = temp_head\n                break\n            if i == new_tail_idx:\n                new_tail = temp_head\n            i += 1\n            temp_head = temp_head.next\n        tail.next = head\n        new_tail.next = None\n        return new_head\n\n            \n",
      "title": "Rotate List",
      "url": "/submissions/detail/1057147928/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695481532,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1056984947,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1129,
      "title_slug": "longest-string-chain",
      "code": "class Solution:\n    def longestStrChain(self, words: List[str]) -\u003e int:\n        words.sort(key=len)\n        dp = {}\n        max_chain = 0\n        for word in words:\n            dp[word] = 1\n            for i in range(len(word)):\n                prev_word = word[:i] + word[i+1:]\n                if prev_word in dp:\n                    dp[word] = max(dp[word], dp[prev_word] + 1)\n            max_chain = max(max_chain, dp[word])\n        return max_chain",
      "title": "Longest String Chain",
      "url": "/submissions/detail/1056984947/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695464340,
      "status": 10,
      "runtime": "119 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1056974709,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 1129,
      "title_slug": "longest-string-chain",
      "code": "class Solution:\n    def longestStrChain(self, words: List[str]) -\u003e int:\n        length = len(words)\n    \n        def is_pred(pred: str, word: str) -\u003e bool:\n            length_pred, length_word = len(pred), len(word)\n            if length_pred == length_word:\n                return pred == word\n            if length_word - length_pred != 1:\n                return False\n            for i in range(length_pred):\n                if word[i] == pred[i]:\n                    continue\n                return word[i+1:] == pred[i:]\n            return True\n\n        cur_words = set()\n        \n        def backtrack(prev_word: str) -\u003e int:\n            chain_length = 0\n            for word in words:\n                if word in cur_words:\n                    continue\n                if prev_word is None or is_pred(prev_word, word):\n                    cur_words.add(word)   \n                    chain_length = max(chain_length, 1 + backtrack(word))\n                    cur_words.remove(word)\n            return chain_length\n\n        return backtrack(None)",
      "title": "Longest String Chain",
      "url": "/submissions/detail/1056974709/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695463185,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111000000",
      "flag_type": 1
    },
    {
      "id": 1056974394,
      "status_display": "Memory Limit Exceeded",
      "lang": "python3",
      "question_id": 1129,
      "title_slug": "longest-string-chain",
      "code": "class Solution:\n    def longestStrChain(self, words: List[str]) -\u003e int:\n        length = len(words)\n        \n        @cache\n        def is_pred(pred: str, word: str) -\u003e bool:\n            length_pred, length_word = len(pred), len(word)\n            if length_pred == length_word:\n                return pred == word\n            if length_word - length_pred != 1:\n                return False\n                \n            for i in range(length_pred):\n                if word[i] == pred[i]:\n                    continue\n                return word[i+1:] == pred[i:]\n            return True\n\n        cur_words = set()\n\n        def backtrack(prev_word: str) -\u003e int:\n            chain_length = 0\n            for word in words:\n                if word in cur_words:\n                    continue\n                if prev_word is None or is_pred(prev_word, word):\n                    cur_words.add(word)   \n                    chain_length = max(chain_length, 1 + backtrack(word))\n                    cur_words.remove(word)\n            return chain_length\n\n        return backtrack(None)",
      "title": "Longest String Chain",
      "url": "/submissions/detail/1056974394/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695463151,
      "status": 12,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111110000000000000",
      "flag_type": 1
    },
    {
      "id": 1056972172,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1129,
      "title_slug": "longest-string-chain",
      "code": "class Solution:\n    def longestStrChain(self, words: List[str]) -\u003e int:\n        length = len(words)\n        \n        @cache\n        def is_pred(pred: str, word: str) -\u003e bool:\n            length_pred, length_word = len(pred), len(word)\n            if not 0 \u003c= length_word - length_pred \u003c= 1:\n                return False\n            if pred == word:\n                return True\n            if length_pred == length_word:\n                return False\n            for i in range(length_pred):\n                if word[i] == pred[i]:\n                    continue\n                return word[i+1] == pred[i]\n            return True\n\n        cur_words = set()\n\n        def backtrack(prev_word: str) -\u003e int:\n            chain_length = 0\n            for word in words:\n                if word in cur_words:\n                    continue\n                if prev_word is None or is_pred(prev_word, word):\n                    cur_words.add(word)   \n                    chain_length = max(chain_length, 1 + backtrack(word))\n                    cur_words.remove(word)\n            return chain_length\n\n        return backtrack(None)",
      "title": "Longest String Chain",
      "url": "/submissions/detail/1056972172/",
      "lang_name": "Python3",
      "time": "4 months, 2 weeks",
      "timestamp": 1695462898,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111011011111111111111111111110111111100000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1057811172,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 135,
      "title_slug": "candy",
      "code": "class Solution:\n    def candy(self, ratings: List[int]) -\u003e int:\n        child_count = len(ratings)\n        candies = [1] * child_count \n\n        for i in range(1, child_count):\n            if ratings[i] \u003e ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n\n        for i in reversed(range(child_count - 1)):\n            if ratings[i] \u003e ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        \n        return sum(candies)",
      "title": "Candy",
      "url": "/submissions/detail/1057811172/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549610,
      "status": 10,
      "runtime": "136 ms",
      "is_pending": "Not Pending",
      "memory": "19.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057811004,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 3,
      "title_slug": "longest-substring-without-repeating-characters",
      "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -\u003e int:\n        length = len(s)\n        if length \u003c 2:\n            return length\n        \n        max_length, left, charset = 1, 0, set([s[0]])\n        for right in range(1, length):\n            letter = s[right]\n            if letter not in charset:\n                charset.add(letter)\n                continue\n\n            this_length = right - left\n            if this_length \u003e max_length:\n                max_length = this_length\n            \n            while letter in charset:\n                charset.remove(s[left])\n                left += 1\n            \n            charset.add(letter)\n\n        return max(max_length, length - left)",
      "title": "Longest Substring Without Repeating Characters",
      "url": "/submissions/detail/1057811004/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549590,
      "status": 10,
      "runtime": "50 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057810766,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 117,
      "title_slug": "populating-next-right-pointers-in-each-node-ii",
      "code": "from collections import deque\n\nclass Solution:\n  def connect(self, root: 'Node') -\u003e 'Node':\n    # Edge case - If the root is None, then return None\n    if root is None:\n        return None\n    \n    # Create a queue and enqueue the root node\n    q = deque([root])\n    \n    # Traverse the tree level by level\n    while q:\n        \n        # Get the number of nodes of the current level\n        level_size = len(q)\n        \n        # Process the nodes of the current level\n        for i in range(level_size):\n            \n            # Dequeue a node from the front of the queue\n            node = q.popleft()\n            \n            # Assign the next pointer of the node\n            if i \u003c level_size - 1:\n                node.next = q[0]\n            \n            # Enqueue the children of the node (if any)\n            if node.left is not None:\n                q.append(node.left)\n            if node.right is not None:\n                q.append(node.right)\n    \n    # Return the root node\n    return root\n",
      "title": "Populating Next Right Pointers in Each Node II",
      "url": "/submissions/detail/1057810766/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549563,
      "status": 10,
      "runtime": "51 ms",
      "is_pending": "Not Pending",
      "memory": "17.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057809299,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 173,
      "title_slug": "binary-search-tree-iterator",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        def generate(node: TreeNode) -\u003e int:\n            if not node:\n                return\n            yield from generate(node.left)\n            yield node\n            yield from generate(node.right)\n\n        self._generate = generate(root)\n        self._next = next(self._generate)\n\n    def next(self) -\u003e int:\n        next_val = self._next.val\n        self._next = next(self._generate, None)\n        return next_val \n\n    def hasNext(self) -\u003e bool:\n        return self._next is not None\n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()",
      "title": "Binary Search Tree Iterator",
      "url": "/submissions/detail/1057809299/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549403,
      "status": 10,
      "runtime": "76 ms",
      "is_pending": "Not Pending",
      "memory": "22.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057809092,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 208,
      "title_slug": "implement-trie-prefix-tree",
      "code": "class Trie:\n\n    def __init__(self):\n        self.root = {}\n\n    def insert(self, word: str) -\u003e None:\n        cur = self.root\n        for char in word:\n            if char not in cur:\n                cur[char] = {}\n            cur = cur[char]\n        \n        cur[\"_is_word\"] = None\n\n    def search(self, word: str) -\u003e bool:\n        cur = self.root\n        for char in word:\n            if char not in cur:\n                return False\n            cur = cur[char]\n        \n        return \"_is_word\" in cur\n\n    def startsWith(self, prefix: str) -\u003e bool:\n        cur = self.root\n        for char in prefix:\n            if char not in cur:\n                return False\n            cur = cur[char]\n            \n        return True\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)",
      "title": "Implement Trie (Prefix Tree)",
      "url": "/submissions/detail/1057809092/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549381,
      "status": 10,
      "runtime": "105 ms",
      "is_pending": "Not Pending",
      "memory": "29.8 MB",
      "compare_result": "1111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057808867,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 77,
      "title_slug": "combinations",
      "code": "class Solution:\n    def combine(self, n: int, k: int) -\u003e List[List[int]]:\n        current = []\n        \n        def backtrack(first: int) -\u003e Generator[None, None, List[int]]:\n            if len(current) == k:\n                yield tuple(current[:])\n                return\n\n            for i in range(first, n + 1):\n                current.append(i)\n                yield from backtrack(i + 1)\n                current.pop()\n            \n            return\n\n        return tuple(combination for combination in backtrack(1)) ",
      "title": "Combinations",
      "url": "/submissions/detail/1057808867/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549356,
      "status": 10,
      "runtime": "964 ms",
      "is_pending": "Not Pending",
      "memory": "61.7 MB",
      "compare_result": "111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057808743,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 46,
      "title_slug": "permutations",
      "code": "class Solution:\n    def permute(self, nums: List[int]) -\u003e List[List[int]]:\n\n        length = len(nums)\n        current = []\n        current_contains = [False] * length\n\n        def backtrack() -\u003e Generator[None, None, List[int]]:\n            if len(current) == length:\n                yield tuple(current[:])\n                return\n\n            for i in range(length):\n                if current_contains[i]:\n                    continue\n\n                current_contains[i] = True\n                current.append(nums[i])\n\n                yield from backtrack()\n\n                current_contains[i] = False\n                current.pop()\n            \n            return\n\n        return tuple(combination for combination in backtrack()) ",
      "title": "Permutations",
      "url": "/submissions/detail/1057808743/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549340,
      "status": 10,
      "runtime": "48 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057808554,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 22,
      "title_slug": "generate-parentheses",
      "code": "class Solution:\n    def generateParenthesis(self, n: int) -\u003e List[str]:\n\n        current = []\n        current_max = n * 2\n        chars = \"()\"\n\n\n        def backtrack(open: int, closed: int) -\u003e Generator[None, None, List[str]]:\n            if len(current) == current_max:\n                yield \"\".join(current)\n            \n            if open:\n                current.append(chars[0])\n                yield from backtrack(open - 1, closed)\n                current.pop()\n            \n            if closed and closed \u003e open:\n                current.append(chars[1])\n                yield from backtrack(open, closed - 1)\n                current.pop()\n        \n        return tuple(combination for combination in backtrack(n, n))",
      "title": "Generate Parentheses",
      "url": "/submissions/detail/1057808554/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549319,
      "status": 10,
      "runtime": "38 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "11111111",
      "flag_type": 1
    },
    {
      "id": 1057808298,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 53,
      "title_slug": "maximum-subarray",
      "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        if length == 0:\n            return 0\n        if length == 1:\n            return nums[0]\n        max_cur, max_overall = 0, float(\"-inf\")\n        for num in nums:\n            max_cur += num\n            if max_cur \u003e max_overall:\n                max_overall = max_cur\n            if max_cur \u003c 0:\n                max_cur = 0\n        return max_overall\n        ",
      "title": "Maximum Subarray",
      "url": "/submissions/detail/1057808298/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549290,
      "status": 10,
      "runtime": "551 ms",
      "is_pending": "Not Pending",
      "memory": "30.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057807413,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 4,
      "title_slug": "median-of-two-sorted-arrays",
      "code": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -\u003e float:\n        m, n = len(nums1), len(nums2)\n        p1, p2 = 0, 0\n        \n        # Get the smaller value between nums1[p1] and nums2[p2].\n        def get_min():\n            nonlocal p1, p2\n            if p1 \u003c m and p2 \u003c n:\n                if nums1[p1] \u003c nums2[p2]:\n                    ans = nums1[p1]\n                    p1 += 1\n                else:\n                    ans = nums2[p2]\n                    p2 += 1\n            elif p2 == n:\n                ans = nums1[p1]\n                p1 += 1\n            else:\n                ans = nums2[p2]\n                p2 += 1\n            return ans\n        \n        if (m + n) % 2 == 0:\n            for _ in range((m + n) // 2 - 1):\n                _ = get_min()\n            return (get_min() + get_min()) / 2\n        else:\n            for _ in range((m + n) // 2):\n                _ = get_min()\n            return get_min()",
      "title": "Median of Two Sorted Arrays",
      "url": "/submissions/detail/1057807413/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549192,
      "status": 10,
      "runtime": "90 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1057807270,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 33,
      "title_slug": "search-in-rotated-sorted-array",
      "code": "class Solution:\n    def search(self, nums: List[int], target: int) -\u003e int:\n        nums_count = len(nums)\n        left, right = 0, len(nums) - 1\n\n        first_num, last_num = nums[0], nums[-1]\n        if first_num == target:\n            return 0\n        if last_num == target:\n            return nums_count - 1\n        \n        # Find the index of the pivot element (the smallest element)\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            if nums[mid] \u003e last_num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        pivot_num = nums[left]\n        if pivot_num == target:\n            return left\n        \n        if pivot_num \u003c target \u003c last_num:\n            right = nums_count - 1\n        else:\n            left = 0\n        \n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            mid_num = nums[mid]\n            if mid_num == target:\n                return mid\n            elif mid_num \u003e target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return -1",
      "title": "Search in Rotated Sorted Array",
      "url": "/submissions/detail/1057807270/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549176,
      "status": 10,
      "runtime": "34 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057807079,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 137,
      "title_slug": "single-number-ii",
      "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -\u003e int:\n        nums.sort()\n        length = len(nums)\n        for i in range(0, length, 3):\n            if i == length - 1:\n                return nums[i]\n    \n            num_1, num_2, num_3 = nums[i], nums[i+1], nums[i+2]\n\n            if num_1 == num_2 == num_3:\n                continue\n            \n            if num_2 == num_3:\n                return num_1\n            \n            if num_1 == num_3:\n                return num_2\n            \n            return num_3\n            ",
      "title": "Single Number II",
      "url": "/submissions/detail/1057807079/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549154,
      "status": 10,
      "runtime": "61 ms",
      "is_pending": "Not Pending",
      "memory": "17.9 MB",
      "compare_result": "11111111111111",
      "flag_type": 1
    },
    {
      "id": 1057806889,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 136,
      "title_slug": "single-number",
      "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -\u003e int:\n        return reduce(xor, nums)",
      "title": "Single Number",
      "url": "/submissions/detail/1057806889/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549133,
      "status": 10,
      "runtime": "115 ms",
      "is_pending": "Not Pending",
      "memory": "18.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057806680,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 191,
      "title_slug": "number-of-1-bits",
      "code": "class Solution:\n    def hammingWeight(self, n: int) -\u003e int:\n        count = 0\n        while n \u003e 0:\n            if n \u0026 1 != 0:\n                count += 1\n            n \u003e\u003e= 1\n        return count",
      "title": "Number of 1 Bits",
      "url": "/submissions/detail/1057806680/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549107,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1057806200,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 190,
      "title_slug": "reverse-bits",
      "code": "class Solution:\n    def reverseBits(self, n: int) -\u003e int:\n        # Initialize the reversed number to 0\n        reversed_num = 0\n        \n        # Iterate over all 32 bits of the given number\n        for i in range(32):\n            # Left shift the reversed number by 1 and add the last bit of the given number to it\n            reversed_num = (reversed_num \u003c\u003c 1) | (n \u0026 1)\n            # remove the last bit from the original number\n            n \u003e\u003e= 1\n        \n        # Return the reversed number\n        return reversed_num\n",
      "title": "Reverse Bits",
      "url": "/submissions/detail/1057806200/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549052,
      "status": 10,
      "runtime": "44 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057805990,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 67,
      "title_slug": "add-binary",
      "code": "class Solution:\n    def addBinary(self, a: str, b: str) -\u003e str:\n        answer = []\n        carry = 0\n        for char1, char2 in zip_longest(reversed(a), reversed(b)):\n            num1, num2 = int(char1) if char1 else 0, int(char2) if char2 else 0\n            cur_sum = num1 + num2 + carry\n            carry = 0\n            if cur_sum \u003e 1:\n                cur_sum -= 2\n                carry = 1\n            \n            answer.append(str(cur_sum))\n        \n        if carry:\n            answer.append(\"1\")\n\n        return \"\".join(reversed(answer))",
      "title": "Add Binary",
      "url": "/submissions/detail/1057805990/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695549032,
      "status": 10,
      "runtime": "53 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057804154,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 172,
      "title_slug": "factorial-trailing-zeroes",
      "code": "class Solution:\n    def trailingZeroes(self, n: int) -\u003e int:\n        zeros = 0\n        while n != 0:\n            new_n = n // 5\n            zeros += new_n\n            n = new_n\n        return zeros\n        \n",
      "title": "Factorial Trailing Zeroes",
      "url": "/submissions/detail/1057804154/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695548826,
      "status": 10,
      "runtime": "34 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057802784,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 172,
      "title_slug": "factorial-trailing-zeroes",
      "code": "class Solution:\n    def trailingZeroes(self, n: int) -\u003e int:\n        a, b, zeros = 1, 5, 0\n        while (5**a) \u003c= n:\n            zeros += n // b\n            a += 1\n            b *= 5\n        return zeros\n",
      "title": "Factorial Trailing Zeroes",
      "url": "/submissions/detail/1057802784/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695548672,
      "status": 10,
      "runtime": "38 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057801419,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 50,
      "title_slug": "powx-n",
      "code": "class Solution:\n    def myPow(self, x: float, n: int) -\u003e float:\n        if n == 0:\n            return 1\n\n        if n \u003c 0:\n            n *= -1\n            x = 1 / x\n\n        result = 1\n        while n:\n            if n % 2:\n                result *= x\n                n -= 1\n            x *= x\n            n //= 2\n        \n        return result",
      "title": "Pow(x, n)",
      "url": "/submissions/detail/1057801419/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695548515,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057801238,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 66,
      "title_slug": "plus-one",
      "code": "class Solution:\n    def plusOne(self, digits: List[int]) -\u003e List[int]:\n        carry = 1\n        for i in reversed(range(len(digits))):\n            new_digit = digits[i] + carry\n            if new_digit \u003e 9:\n                carry = 1\n                new_digit %= 10\n            else:\n                carry = 0\n            digits[i] = new_digit\n        \n        if carry:\n            digits.insert(0, carry)\n        \n        return digits",
      "title": "Plus One",
      "url": "/submissions/detail/1057801238/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695548496,
      "status": 10,
      "runtime": "46 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1061998725,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 932,
      "title_slug": "monotonic-array",
      "code": "class Solution:\n    def isMonotonic(self, nums: List[int]) -\u003e bool:\n        length = len(nums)\n        if length \u003c 3:\n            return True\n        is_increasing = None\n        for i in range(1, length):\n            cur, prev = nums[i], nums[i-1]\n            if cur == prev:\n                continue\n            is_increasing_cur = cur \u003e prev\n            if is_increasing is None:\n                is_increasing = is_increasing_cur\n                continue\n            if is_increasing and not is_increasing_cur or (\n                not is_increasing and is_increasing_cur\n            ):\n                return False\n        return True",
      "title": "Monotonic Array",
      "url": "/submissions/detail/1061998725/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695965769,
      "status": 10,
      "runtime": "836 ms",
      "is_pending": "Not Pending",
      "memory": "30.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1061188297,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 941,
      "title_slug": "sort-array-by-parity",
      "code": "class Solution:\n    def sortArrayByParity(self, nums: List[int]) -\u003e List[int]:\n        left, right = 0, len(nums) - 1\n        while left \u003c right:\n            while left \u003c right and nums[left] % 2 == 0:\n                left += 1\n            while left \u003c right and nums[right] % 2 == 1:\n                right -= 1\n            nums[left], nums[right] = nums[right], nums[left]\n        return nums",
      "title": "Sort Array By Parity",
      "url": "/submissions/detail/1061188297/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695885453,
      "status": 10,
      "runtime": "79 ms",
      "is_pending": "Not Pending",
      "memory": "17 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1061187907,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 941,
      "title_slug": "sort-array-by-parity",
      "code": "class Solution:\n    def sortArrayByParity(self, nums: List[int]) -\u003e List[int]:\n        left, right = 0, len(nums) - 1\n        while left \u003c right:\n            while left \u003c right and nums[left] % 2 == 0:\n                left += 1\n            while left \u003c right and nums[left] % 2 == 1:\n                right -= 1\n            nums[left], nums[right] = nums[right], nums[left]\n        return nums",
      "title": "Sort Array By Parity",
      "url": "/submissions/detail/1061187907/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695885418,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "011110111010001110100010000000111010001000000010000000000000001110100010000000100000000000000010000000000000000000000000000000111010001000000010000000000000001000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1061185383,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 941,
      "title_slug": "sort-array-by-parity",
      "code": "class Solution:\n    def sortArrayByParity(self, nums: List[int]) -\u003e List[int]:\n        length = len(nums)\n        left, right = 0, length - 1\n        answer = [None] * length\n        for num in nums:\n            if num % 2 == 0:\n                answer[left] = num\n                left += 1\n            else:\n                answer[right] = num\n                right -= 1\n        return answer",
      "title": "Sort Array By Parity",
      "url": "/submissions/detail/1061185383/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695885196,
      "status": 10,
      "runtime": "79 ms",
      "is_pending": "Not Pending",
      "memory": "17 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1060597351,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 916,
      "title_slug": "decoded-string-at-index",
      "code": "class Solution:\n    def decodeAtIndex(self, s: str, k: int) -\u003e str:\n        length = 0\n        i = 0\n        \n        while length \u003c k:\n            if s[i].isdigit():\n                length *= int(s[i])\n            else:\n                length += 1\n            i += 1\n        \n        for j in range(i-1, -1, -1):\n            char = s[j]\n            if char.isdigit():\n                length //= int(char)\n                k %= length\n            else:\n                if k == 0 or k == length:\n                    return char\n                length -= 1",
      "title": "Decoded String at Index",
      "url": "/submissions/detail/1060597351/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695827480,
      "status": 10,
      "runtime": "36 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1059570814,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 316,
      "title_slug": "remove-duplicate-letters",
      "code": "class Solution:\n    def removeDuplicateLetters(self, s: str) -\u003e str:\n        stack = []\n        seen = set() \n        last_occ = {char: i for i, char in enumerate(s)}\n        \n        for i, char in enumerate(s):\n            if char in seen:\n                continue\n                \n            while stack and char \u003c stack[-1] and i \u003c last_occ[stack[-1]]:\n                seen.discard(stack.pop())\n            seen.add(char)\n            stack.append(char)\n        \n        return ''.join(stack)",
      "title": "Remove Duplicate Letters",
      "url": "/submissions/detail/1059570814/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695724989,
      "status": 10,
      "runtime": "41 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1058493656,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 153,
      "title_slug": "find-minimum-in-rotated-sorted-array",
      "code": "class Solution:\n    def findMin(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        if length == 1:\n            return nums[0]\n        first, last = nums[0], nums[-1]\n        if first \u003c last:\n            return first\n        left, right = 0, length - 1\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            left_num = nums[mid - 1] if mid \u003e 0 else first\n            mid_num = nums[mid] \n            right_num = nums[mid + 1] if mid + 1 \u003c length else last\n            if left_num \u003e mid_num \u003c= right_num:\n                return mid_num\n            if left_num \u003e mid_num or (left_num \u003c= mid_num and mid_num \u003e= first):\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]\n\n",
      "title": "Find Minimum in Rotated Sorted Array",
      "url": "/submissions/detail/1058493656/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695622619,
      "status": 10,
      "runtime": "51 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1058492353,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 153,
      "title_slug": "find-minimum-in-rotated-sorted-array",
      "code": "class Solution:\n    def findMin(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        if length == 1:\n            return nums[0]\n        first, last = nums[0], nums[-1]\n        if first \u003c last:\n            return first\n        left, right = 0, length - 1\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            left_num, mid_num, right_num = nums[mid - 1], nums[mid], nums[mid + 1]\n            if left_num \u003e mid_num \u003c= right_num:\n                return mid_num\n            if left_num \u003e mid_num or (left_num \u003c= mid_num and mid_num \u003e= first):\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]\n\n",
      "title": "Find Minimum in Rotated Sorted Array",
      "url": "/submissions/detail/1058492353/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695622500,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1058492103,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 153,
      "title_slug": "find-minimum-in-rotated-sorted-array",
      "code": "class Solution:\n    def findMin(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        if length == 1:\n            return nums[0]\n        first, last = nums[0], nums[-1]\n        if first \u003c last:\n            return first\n        while left \u003c= right:\n            mid = left + (right - left) // 2\n            left_num, mid_num, right_num = nums[mid - 1], nums[mid], nums[mid + 1]\n            if left_num \u003e mid_num \u003c= right_num:\n                return mid_num\n            if left_num \u003e mid_num or (left_num \u003c= mid_num and mid_num \u003e= first):\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]\n\n",
      "title": "Find Minimum in Rotated Sorted Array",
      "url": "/submissions/detail/1058492103/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695622481,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1058461369,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 389,
      "title_slug": "find-the-difference",
      "code": "class Solution:\n    def findTheDifference(self, s: str, t: str) -\u003e str:\n        return chr(reduce(operator.xor, (ord(char) for char in chain(s, t))))",
      "title": "Find the Difference",
      "url": "/submissions/detail/1058461369/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695619717,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1058460034,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 389,
      "title_slug": "find-the-difference",
      "code": "class Solution:\n    def findTheDifference(self, s: str, t: str) -\u003e str:\n        count = Counter(s)\n        for char in t:\n            count[char] -= 1\n            if count[char] == -1:\n                return char",
      "title": "Find the Difference",
      "url": "/submissions/detail/1058460034/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695619598,
      "status": 10,
      "runtime": "33 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057879315,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 295,
      "title_slug": "find-median-from-data-stream",
      "code": "class MedianFinder:\n\n    def __init__(self):\n        self.nums = []\n        self.med = -1\n        self.even = True\n\n    def addNum(self, num: int) -\u003e None:\n        self.nums.append(num)\n        self.even = not self.even\n        half = len(self.nums) // 2\n        if self.even:\n            self.med = (self.nums[half] + self.nums[half - 1]) / 2\n        else:\n            self.med = self.nums[half]\n\n\n    def findMedian(self) -\u003e float:\n        return self.med\n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()",
      "title": "Find Median from Data Stream",
      "url": "/submissions/detail/1057879315/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695557399,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111000000000000111",
      "flag_type": 1
    },
    {
      "id": 1057863045,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 201,
      "title_slug": "bitwise-and-of-numbers-range",
      "code": "class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -\u003e int:\n        shift = 0        \n        while left \u003c right:\n            left \u003e\u003e= 1\n            right \u003e\u003e= 1\n            shift += 1\n        return left \u003c\u003c shift\n",
      "title": "Bitwise AND of Numbers Range",
      "url": "/submissions/detail/1057863045/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695555473,
      "status": 10,
      "runtime": "57 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1057828350,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 201,
      "title_slug": "bitwise-and-of-numbers-range",
      "code": "class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -\u003e int:\n        return reduce(operator.and_, range(left, right + 1))",
      "title": "Bitwise AND of Numbers Range",
      "url": "/submissions/detail/1057828350/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695551569,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1057826154,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 11,
      "title_slug": "container-with-most-water",
      "code": "class Solution:\n    def maxArea(self, height: List[int]) -\u003e int:\n        left = 0\n        right = len(height) - 1\n        maxArea = 0\n\n        while left \u003c right:\n            currentArea = min(height[left], height[right]) * (right - left)\n            if currentArea \u003e maxArea:\n                maxArea = currentArea\n\n            if height[left] \u003c height[right]:\n                left += 1\n            else:\n                right -= 1\n\n        return maxArea",
      "title": "Container With Most Water",
      "url": "/submissions/detail/1057826154/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695551335,
      "status": 10,
      "runtime": "576 ms",
      "is_pending": "Not Pending",
      "memory": "29.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057824838,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 149,
      "title_slug": "max-points-on-a-line",
      "code": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -\u003e int:\n        lines = defaultdict(set)\n        length = len(points)\n        if length \u003c 3:\n            return length\n        for i in range(length):\n            x1, y1 = points[i]\n            for j in range(i + 1, length):\n                x2, y2 = points[j]\n                k1, k2 = None, None\n                if y1 == y2:\n                    k2 = y1\n                elif x1 == x2:\n                    k1 = x1\n                else: \n                    k1 = (y2 - y1) / (x2 - x1)\n                    k2 = y1 - k1 * x1\n                lines[(k1, k2)].update(((x1, y1), (x2, y2)))\n        return max((len(points) for points in lines.values()), default=0)\n",
      "title": "Max Points on a Line",
      "url": "/submissions/detail/1057824838/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695551188,
      "status": 10,
      "runtime": "103 ms",
      "is_pending": "Not Pending",
      "memory": "40.8 MB",
      "compare_result": "11111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1057823921,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 149,
      "title_slug": "max-points-on-a-line",
      "code": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -\u003e int:\n        lines = defaultdict(set)\n        length = len(points)\n        if length \u003c 3:\n            return length\n        for i in range(length):\n            x1, y1 = points[i]\n            for j in range(i + 1, length):\n                x2, y2 = points[j]\n                a, b = None, None\n                if y1 == y2:\n                    b = y1\n                elif x1 == x2:\n                    a = x1\n                else: \n                    a = (y2 - y1) // (x2 - x1)\n                    b = y1 - a * x1\n                lines[(a, b)].update(((x1, y1), (x2, y2)))\n        return max((len(points) for points in lines.values()), default=0)\n",
      "title": "Max Points on a Line",
      "url": "/submissions/detail/1057823921/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695551082,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111101010100110000010110111",
      "flag_type": 1
    },
    {
      "id": 1057823686,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 149,
      "title_slug": "max-points-on-a-line",
      "code": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -\u003e int:\n        lines = defaultdict(set)\n        length = len(points)\n        for i in range(length):\n            x1, y1 = points[i]\n            for j in range(i + 1, length):\n                x2, y2 = points[j]\n                a, b = None, None\n                if y1 == y2:\n                    b = y1\n                elif x1 == x2:\n                    a = x1\n                else: \n                    a = (y2 - y1) // (x2 - x1)\n                    b = y1 - a * x1\n                lines[(a, b)].update(((x1, y1), (x2, y2)))\n        return max((len(points) for points in lines.values()), default=0)\n",
      "title": "Max Points on a Line",
      "url": "/submissions/detail/1057823686/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695551055,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11011111110111111101010100110000010110111",
      "flag_type": 1
    },
    {
      "id": 1057823596,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 149,
      "title_slug": "max-points-on-a-line",
      "code": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -\u003e int:\n        lines = defaultdict(set)\n        length = len(points)\n        for i in range(length):\n            x1, y1 = points[i]\n            for j in range(i + 1, length):\n                x2, y2 = points[j]\n                a, b = None, None\n                if y1 == y2:\n                    b = y1\n                elif x1 == x2:\n                    a = x1\n                else: \n                    a = (y2 - y1) // (x2 - x1)\n                    b = y1 - a * x1\n                lines[(a, b)].update(((x1, y1), (x2, y2)))\n        return max(len(points) for points in lines.values(), default=0)\n",
      "title": "Max Points on a Line",
      "url": "/submissions/detail/1057823596/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695551044,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1057823475,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 149,
      "title_slug": "max-points-on-a-line",
      "code": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -\u003e int:\n        lines = defaultdict(set)\n        length = len(points)\n        for i in range(length):\n            x1, y1 = points[i]\n            for j in range(i + 1, length):\n                x2, y2 = points[j]\n                a, b = None, None\n                if y1 == y2:\n                    b = y1\n                elif x1 == x2:\n                    a = x1\n                else: \n                    a = (y2 - y1) // (x2 - x1)\n                    b = y1 - a * x1\n                lines[(a, b)].update(((x1, y1), (x2, y2)))\n        return max(len(points) for points in lines.values())\n",
      "title": "Max Points on a Line",
      "url": "/submissions/detail/1057823475/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1695551030,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1064906435,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2149,
      "title_slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
      "code": "class Solution:\n    def winnerOfGame(self, colors: str) -\u003e bool:\n        cur_char, cur_conseq = colors[0], 1\n        moves = {\"A\": 0, \"B\": 0}\n        for char in colors[1:]:\n            if char == cur_char:\n                cur_conseq += 1\n            else:\n                moves[cur_char] += max(0, cur_conseq - 2)\n                cur_char, cur_conseq = char, 1\n        if cur_conseq \u003e 2:\n            moves[cur_char] += cur_conseq - 2\n        return moves[\"A\"] \u003e moves[\"B\"]",
      "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
      "url": "/submissions/detail/1064906435/",
      "lang_name": "Python3",
      "time": "4 months",
      "timestamp": 1696249253,
      "status": 10,
      "runtime": "158 ms",
      "is_pending": "Not Pending",
      "memory": "17.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1064905162,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2149,
      "title_slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
      "code": "class Solution:\n    def winnerOfGame(self, colors: str) -\u003e bool:\n        cur_char, cur_conseq = colors[0], 1\n        moves = {\"A\": 0, \"B\": 0}\n        for char in colors:\n            if char == cur_char:\n                cur_conseq += 1\n            else:\n                moves[cur_char] += max(0, cur_conseq - 2)\n                cur_char, cur_conseq = char, 1\n        return moves[\"A\"] \u003e moves[\"B\"]",
      "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
      "url": "/submissions/detail/1064905162/",
      "lang_name": "Python3",
      "time": "4 months",
      "timestamp": 1696249128,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111010111010111110100110111110011111110100000111111111111111111111111110111111111",
      "flag_type": 1
    },
    {
      "id": 1064056302,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 557,
      "title_slug": "reverse-words-in-a-string-iii",
      "code": "class Solution:\n    def reverseWords(self, s: str) -\u003e str:\n        return ' '.join(map(lambda word: word[::-1], s.split()))\n",
      "title": "Reverse Words in a String III",
      "url": "/submissions/detail/1064056302/",
      "lang_name": "Python3",
      "time": "4 months",
      "timestamp": 1696166948,
      "status": 10,
      "runtime": "28 ms",
      "is_pending": "Not Pending",
      "memory": "17 MB",
      "compare_result": "11111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1062853417,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 56,
      "title_slug": "merge-intervals",
      "code": "class Solution:\n    def merge(self, intervals: List[List[int]]) -\u003e List[List[int]]:\n\n        intervals.sort(key=lambda item: item[0])\n\n        merged = []\n        for start, end in intervals:\n            # if the list of merged intervals is empty or if the current\n            # interval does not overlap with the previous, simply append it.\n            if not merged or merged[-1][1] \u003c start:\n                merged.append([start, end])\n            else:\n            # otherwise, there is overlap, so we merge the current and previous\n            # intervals.\n                merged[-1][1] = max(merged[-1][1], end)\n\n        return merged",
      "title": "Merge Intervals",
      "url": "/submissions/detail/1062853417/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696058246,
      "status": 10,
      "runtime": "140 ms",
      "is_pending": "Not Pending",
      "memory": "21.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1062851994,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 56,
      "title_slug": "merge-intervals",
      "code": "class Solution:\n    def overlap(self, a, b):\n        return a[0] \u003c= b[1] and b[0] \u003c= a[1]\n\n    # generate graph where there is an undirected edge between intervals u\n    # and v iff u and v overlap.\n    def buildGraph(self, intervals):\n        graph = collections.defaultdict(list)\n\n        for i, interval_i in enumerate(intervals):\n            for j in range(i+1, len(intervals)):\n                if self.overlap(interval_i, intervals[j]):\n                    graph[tuple(interval_i)].append(intervals[j])\n                    graph[tuple(intervals[j])].append(interval_i)\n\n        return graph\n\n    # merges all of the nodes in this connected component into one interval.\n    def mergeNodes(self, nodes):\n        min_start = min(node[0] for node in nodes)\n        max_end = max(node[1] for node in nodes)\n        return [min_start, max_end]\n\n    # gets the connected components of the interval overlap graph.\n    def getComponents(self, graph, intervals):\n        visited = set()\n        comp_number = 0\n        nodes_in_comp = collections.defaultdict(list)\n\n        def markComponentDFS(start):\n            stack = [start]\n            while stack:\n                node = tuple(stack.pop())\n                if node not in visited:\n                    visited.add(node)\n                    nodes_in_comp[comp_number].append(node)\n                    stack.extend(graph[node])\n\n        # mark all nodes in the same connected component with the same integer.\n        for interval in intervals:\n            if tuple(interval) not in visited:\n                markComponentDFS(interval)\n                comp_number += 1\n\n        return nodes_in_comp, comp_number\n\n\n    def merge(self, intervals: List[List[int]]) -\u003e List[List[int]]:\n        graph = self.buildGraph(intervals)\n        nodes_in_comp, number_of_comps = self.getComponents(graph, intervals)\n\n        # all intervals in each connected component must be merged.\n        return [self.mergeNodes(nodes_in_comp[comp]) for comp in range(number_of_comps)]\n",
      "title": "Merge Intervals",
      "url": "/submissions/detail/1062851994/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696058095,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100",
      "flag_type": 1
    },
    {
      "id": 1062848616,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        if len(nums) \u003c 3:\n            return False\n        min_array = [-1] * len(nums)\n        min_array[0] = nums[0]\n        for i in range(1, len(nums)):\n            min_array[i] = min(min_array[i - 1], nums[i])\n\n        k = len(nums)\n        for j in range(len(nums) - 1, -1, -1):\n            if nums[j] \u003c= min_array[j]:\n                continue\n            while k \u003c len(nums) and nums[k] \u003c= min_array[j]:\n                k += 1\n            if k \u003c len(nums) and nums[k] \u003c nums[j]:\n                return True\n            k -= 1\n            nums[k] = nums[j]\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062848616/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696057743,
      "status": 10,
      "runtime": "423 ms",
      "is_pending": "Not Pending",
      "memory": "36.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1062846682,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        if len(nums) \u003c 3:\n            return False\n        stack = []\n        min_array = [-1] * len(nums)\n        min_array[0] = nums[0]\n        for i in range(1, len(nums)):\n            min_array[i] = min(min_array[i - 1], nums[i])\n\n        for j in reversed(range(len(nums))):\n            if nums[j] \u003c= min_array[j]:\n                continue\n            while stack and stack[-1] \u003c= min_array[j]:\n                stack.pop()\n            if stack and stack[-1] \u003c nums[j]:\n                return True\n            stack.append(nums[j])\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062846682/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696057556,
      "status": 10,
      "runtime": "428 ms",
      "is_pending": "Not Pending",
      "memory": "36.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1062846359,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        if len(nums) \u003c 3:\n            return False\n        stack = []\n        min_array = [-1] * len(nums)\n        min_array[0] = nums[0]\n        for i in range(1, len(nums)):\n            min_array[i] = min(min_array[i - 1], nums[i])\n\n        for j in reversed(range(len(nums)):\n            if nums[j] \u003c= min_array[j]:\n                continue\n            while stack and stack[-1] \u003c= min_array[j]:\n                stack.pop()\n            if stack and stack[-1] \u003c nums[j]:\n                return True\n            stack.append(nums[j])\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062846359/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696057524,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1062846145,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        if len(nums) \u003c 3:\n            return False\n        stack = []\n        min_array = [-1] * len(nums)\n        min_array[0] = nums[0]\n        for i in range(1, len(nums)):\n            min_array[i] = min(min_array[i - 1], nums[i])\n\n        for j in reversed(range(len(nums) - 1)):\n            if nums[j] \u003c= min_array[j]:\n                continue\n            while stack and stack[-1] \u003c= min_array[j]:\n                stack.pop()\n            if stack and stack[-1] \u003c nums[j]:\n                return True\n            stack.append(nums[j])\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062846145/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696057502,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1010111110111111000110111110101110110110111110111110101110111110111111111111000000101011111111111111111",
      "flag_type": 1
    },
    {
      "id": 1062843573,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        min_i = inf\n        for j in range(len(nums) - 1):\n            min_i = min(min_i, nums[j])\n            for k in range(j + 1, len(nums)):\n                if min_i \u003c nums[k] \u003c nums[j]:\n                    return True\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062843573/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696057260,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100",
      "flag_type": 1
    },
    {
      "id": 1062842653,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        for i in range(len(nums) - 2):\n            for j in range(i + 1, len(nums) - 1):\n                for k in range(j + 1, len(nums)):\n                    if nums[i] \u003c nums[k] \u003c nums[j]:\n                        return True\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062842653/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696057170,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000",
      "flag_type": 1
    },
    {
      "id": 1062837486,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        length = len(nums)\n        if length \u003c 3:\n            return False\n        nums_ids = {}\n        nums_ids[nums[0]] = [0, 0]\n        for k in range(1, length):\n            k_num = nums[k]\n            if k_num == nums[k-1]:\n                continue\n            for i_num in nums_ids:\n                if i_num \u003e= k_num:\n                    continue\n                earliest_i = nums_ids[i_num][0]\n                for j_num in nums_ids:\n                    if j_num \u003c= k_num:\n                        continue\n                    if earliest_i \u003c nums_ids[j_num][1]:\n                        return True \n            if k_num in nums_ids:\n                nums_ids[k_num][1] = k\n            else:\n                nums_ids[k_num] = [k, k]\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062837486/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696056684,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000",
      "flag_type": 1
    },
    {
      "id": 1062823378,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        length = len(nums)\n        for i in range(length):\n            i_num = nums[i]\n            j_min = i_num + 2\n            for j in range(i + 1, length):\n                j_num = nums[j]\n                if j_num \u003c j_min:\n                    continue\n                for k in range(j + 1, length):\n                    if i_num \u003c nums[k] \u003c j_num:\n                        return True\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062823378/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696055368,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000",
      "flag_type": 1
    },
    {
      "id": 1062819158,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        new_nums = [nums[0]]\n        for num in nums[1:]:\n            if num == new_nums[-1]:\n                continue\n            new_nums.append(num)\n        length = len(new_nums)\n        for k in range(2, length):\n            k_num = new_nums[k]\n            for j in reversed(range(1, k)):\n                j_num = new_nums[j]\n                if j_num \u003c= k_num:\n                    continue\n                for i in range(j):\n                    if new_nums[i] \u003c k_num:\n                        return True   \n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062819158/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696054964,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000",
      "flag_type": 1
    },
    {
      "id": 1062818780,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        new_nums = [nums[0]]\n        for num in nums[1:]:\n            if num == new_nums[-1]:\n                continue\n            new_nums.append(num)\n        length = len(new_nums)\n        for k in range(3, length):\n            k_num = new_nums[k]\n            for j in reversed(range(1, k)):\n                j_num = new_nums[j]\n                if j_num \u003c= k_num:\n                    continue\n                for i in range(j):\n                    if new_nums[i] \u003c k_num:\n                        return True   \n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062818780/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696054932,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111110111011111110111111011111111011111111111111110011111111111111111111111111111111111111110110000",
      "flag_type": 1
    },
    {
      "id": 1062812969,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        nums_ids = defaultdict(list)\n        for i, num in enumerate(nums):\n            nums_ids[num].append(i)\n        \n        for i_num, i_ids in nums_ids.items():\n            for k_num, k_ids in nums_ids.items():\n                for j_num, j_ids in nums_ids.items():\n                    if not i_num \u003c k_num \u003c j_num:\n                        continue\n                    for i_id in i_ids:\n                        for k_id in reversed(k_ids):\n                            if i_id \u003e k_id:\n                                break\n                            for j_id in j_ids:\n                                if i_id \u003c j_id \u003c k_id:\n                                    return True\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062812969/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696054395,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000",
      "flag_type": 1
    },
    {
      "id": 1062806300,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        visited = set()\n        unique_nums = []\n        for num in nums:\n            if num not in visited:\n                unique_nums.append(num)\n                visited.add(num)\n        length = len(unique_nums)\n        if length \u003c 3:\n            return False\n        for i in range(length - 2):\n            i_num = unique_nums[i]\n            for j in range(i + 1, length - 1):\n                j_num = unique_nums[j]\n                if j_num \u003c i_num + 2:\n                    continue\n                for k in range(j + 1, length):\n                    k_num = unique_nums[k]\n                    if i_num \u003c k_num \u003c j_num:\n                        return True\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062806300/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696053770,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111101011111111111111111111111111111111110101110111110111111111111100111111011110011111110000",
      "flag_type": 1
    },
    {
      "id": 1062803423,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        length = len(nums)\n        if length \u003c 3:\n            return False\n        for i in range(length):\n            i_num = nums[i]\n            for j in range(i + 1, length):\n                j_num = nums[j]\n                if j_num \u003c i_num + 2:\n                    continue\n                for k in range(j + 1, length):\n                    k_num = nums[k]\n                    if i_num \u003c k_num \u003c j_num:\n                        return True\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062803423/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696053496,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000",
      "flag_type": 1
    },
    {
      "id": 1062794513,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        for i in range(3, len(nums)):\n            if nums[i-2] \u003c nums[i] \u003c nums[i-1]:\n                return True\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062794513/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696052628,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1100111110111001110010111111000011110011111111111110100011111111111111111111100010100111111011110001111",
      "flag_type": 1
    },
    {
      "id": 1062793627,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 456,
      "title_slug": "132-pattern",
      "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -\u003e bool:\n        for i in range(3, len(nums)):\n            if nums[i] \u003e nums[i-1] \u003e nums[i-2]:\n                return True\n        return False",
      "title": "132 Pattern",
      "url": "/submissions/detail/1062793627/",
      "lang_name": "Python3",
      "time": "4 months, 1 week",
      "timestamp": 1696052544,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0001011110110110001110111100000000110000111100111110100000111100111111111100010100001011111111100111111",
      "flag_type": 1
    },
    {
      "id": 1077612295,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1275,
      "title_slug": "validate-binary-tree-nodes",
      "code": "class Solution:\n    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -\u003e bool:\n        reversed_graph = {}\n\n        for i in range(n):\n            left, right = leftChild[i], rightChild[i] \n            left_valid, right_valid = left != -1, right != -1\n            if (left_valid and left in reversed_graph) or (right_valid and right in reversed_graph):\n                return False\n            if left_valid:\n                reversed_graph[left] = i\n            if right_valid:\n                reversed_graph[right] = i\n         \n        if len(reversed_graph) != n - 1:\n            return False\n        \n        return sum(1 for i in range(n) if i not in reversed_graph) == 1\n\n",
      "title": "Validate Binary Tree Nodes",
      "url": "/submissions/detail/1077612295/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697555693,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111011111111010111111111111111111110111",
      "flag_type": 1
    },
    {
      "id": 1077527342,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1275,
      "title_slug": "validate-binary-tree-nodes",
      "code": "class Solution:\n    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -\u003e bool:\n\n        visited = set()\n\n        to_visit = [0]\n        while to_visit:\n            node = to_visit.pop()\n            if node == -1:\n                continue\n            if node in visited:\n                return False\n            visited.add(node)\n            to_visit.extend((leftChild[node], rightChild[node]))\n        \n        return len(visited) == n\n\n",
      "title": "Validate Binary Tree Nodes",
      "url": "/submissions/detail/1077527342/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697548574,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111101111111111111010011111101111111111111",
      "flag_type": 1
    },
    {
      "id": 1076860937,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 119,
      "title_slug": "pascals-triangle-ii",
      "code": "class Solution:\n    def getRow(self, rowIndex: int) -\u003e List[int]:\n        cur, prev = [], [1]\n        row = 0\n\n        while row \u003c rowIndex:\n            cur.append(1)\n            for i in range(1, len(prev)):\n                cur.append(prev[i] + prev[i-1])\n            cur.append(1)\n            prev.clear()\n            cur, prev = prev, cur\n            row += 1\n        \n        return prev ",
      "title": "Pascal's Triangle II",
      "url": "/submissions/detail/1076860937/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697477527,
      "status": 10,
      "runtime": "46 ms",
      "is_pending": "Not Pending",
      "memory": "16.2 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1075767391,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1398,
      "title_slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
      "code": "class Solution:\n    def numWays(self, steps: int, arrLen: int) -\u003e int:\n        @cache\n        def dp(curr, remain):\n            if remain == 0:\n                if curr == 0:\n                    return 1\n                \n                return 0\n            \n            ans = dp(curr, remain - 1)\n            if curr \u003e 0:\n                ans = (ans + dp(curr - 1, remain - 1)) % MOD\n            \n            if curr \u003c arrLen - 1:\n                ans = (ans + dp(curr + 1, remain - 1)) % MOD\n                \n            return ans\n        \n        MOD = 10 ** 9 + 7\n        return dp(0, steps)",
      "title": "Number of Ways to Stay in the Same Place After Some Steps",
      "url": "/submissions/detail/1075767391/",
      "lang_name": "Python3",
      "time": "3 months, 3 weeks",
      "timestamp": 1697364328,
      "status": 10,
      "runtime": "396 ms",
      "is_pending": "Not Pending",
      "memory": "108.6 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1075145043,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2808,
      "title_slug": "painting-the-walls",
      "code": "class Solution:\n    def paintWalls(self, cost: List[int], time: List[int]) -\u003e int:\n        @cache\n        def dp(i, remain):\n            if remain \u003c= 0:\n                return 0\n            if i == n:\n                return inf\n            \n            paint = cost[i] + dp(i + 1, remain - 1 - time[i])\n            dont_paint = dp(i + 1, remain)\n            return min(paint, dont_paint)\n    \n        n = len(cost)\n        return dp(0, n)",
      "title": "Painting the Walls",
      "url": "/submissions/detail/1075145043/",
      "lang_name": "Python3",
      "time": "3 months, 3 weeks",
      "timestamp": 1697302406,
      "status": 10,
      "runtime": "2174 ms",
      "is_pending": "Not Pending",
      "memory": "445.6 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1074796136,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 747,
      "title_slug": "min-cost-climbing-stairs",
      "code": "class Solution:\n    def minCostClimbingStairs(self, cost):\n        n = len(cost)\n        dp = [0] * n\n        dp[0] = cost[0]\n        dp[1] = cost[1]\n        \n        for i in range(2, n):\n            dp[i] = cost[i] + min(dp[i-1], dp[i-2])\n        \n        return min(dp[n-1], dp[n-2])",
      "title": "Min Cost Climbing Stairs",
      "url": "/submissions/detail/1074796136/",
      "lang_name": "Python3",
      "time": "3 months, 3 weeks",
      "timestamp": 1697267680,
      "status": 10,
      "runtime": "58 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1073327223,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1185,
      "title_slug": "find-in-mountain-array",
      "code": "class Solution:\n    def findInMountainArray(self, target: int, mountain_arr: 'MountainArray') -\u003e int:\n        # Save the length of the mountain array\n        length = mountain_arr.length()\n\n        # 1. Find the index of the peak element\n        low = 1\n        high = length - 2\n        while low != high:\n            test_index = (low + high) // 2\n            if mountain_arr.get(test_index) \u003c mountain_arr.get(test_index + 1):\n                low = test_index + 1\n            else:\n                high = test_index\n        peak_index = low\n\n        # 2. Search in the strictly increasing part of the array\n        low = 0\n        high = peak_index\n        while low != high:\n            test_index = (low + high) // 2\n            if mountain_arr.get(test_index) \u003c target:\n                low = test_index + 1\n            else:\n                high = test_index    \n        # Check if the target is present in the strictly increasing part\n        if mountain_arr.get(low) == target:\n            return low\n        \n        # 3. Otherwise, search in the strictly decreasing part\n        low = peak_index + 1\n        high = length - 1\n        while low != high:\n            test_index = (low + high) // 2\n            if mountain_arr.get(test_index) \u003e target:\n                low = test_index + 1\n            else:\n                high = test_index\n        # Check if the target is present in the strictly decreasing part\n        if mountain_arr.get(low) == target:\n            return low\n        \n        # Target is not present in the mountain array\n        return -1",
      "title": "Find in Mountain Array",
      "url": "/submissions/detail/1073327223/",
      "lang_name": "Python3",
      "time": "3 months, 3 weeks",
      "timestamp": 1697101785,
      "status": 10,
      "runtime": "34 ms",
      "is_pending": "Not Pending",
      "memory": "17 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1072633767,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2334,
      "title_slug": "number-of-flowers-in-full-bloom",
      "code": "class Solution:\n    def fullBloomFlowers(self, flowers: List[List[int]], people: List[int]) -\u003e List[int]:\n        flowers.sort()\n        sorted_people = sorted(people)\n        dic = {}\n        heap = []\n        \n        i = 0\n        for person in sorted_people:\n            while i \u003c len(flowers) and flowers[i][0] \u003c= person:\n                heapq.heappush(heap, flowers[i][1])\n                i += 1\n            \n            while heap and heap[0] \u003c person:\n                heapq.heappop(heap)\n            \n            dic[person] = len(heap)\n\n        return [dic[x] for x in people]",
      "title": "Number of Flowers in Full Bloom",
      "url": "/submissions/detail/1072633767/",
      "lang_name": "Python3",
      "time": "3 months, 3 weeks",
      "timestamp": 1697029595,
      "status": 10,
      "runtime": "918 ms",
      "is_pending": "Not Pending",
      "memory": "44.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1071538174,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2119,
      "title_slug": "minimum-number-of-operations-to-make-array-continuous",
      "code": "class Solution:\n    def minOperations(self, nums: List[int]) -\u003e int:\n        n = len(nums)\n        ans = n\n        new_nums = sorted(set(nums))\n        \n        for i in range(len(new_nums)):\n            left = new_nums[i]\n            right = left + n - 1\n            j = bisect_right(new_nums, right)\n            count = j - i\n            ans = min(ans, n - count)\n\n        return ans",
      "title": "Minimum Number of Operations to Make Array Continuous",
      "url": "/submissions/detail/1071538174/",
      "lang_name": "Python3",
      "time": "3 months, 3 weeks",
      "timestamp": 1696915408,
      "status": 10,
      "runtime": "687 ms",
      "is_pending": "Not Pending",
      "memory": "35.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1070864668,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 34,
      "title_slug": "find-first-and-last-position-of-element-in-sorted-array",
      "code": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -\u003e List[int]:\n        def binary_search(nums, target, left):\n            low, high = 0, len(nums) - 1\n            index = -1\n            while low \u003c= high:\n                mid = (low + high) // 2\n                if nums[mid] == target:\n                    index = mid\n                    if left:\n                        high = mid - 1\n                    else:\n                        low = mid + 1\n                elif nums[mid] \u003c target:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n            return index\n\n        left_index = binary_search(nums, target, left=True)\n        right_index = binary_search(nums, target, left=False)\n\n        return [left_index, right_index]",
      "title": "Find First and Last Position of Element in Sorted Array",
      "url": "/submissions/detail/1070864668/",
      "lang_name": "Python3",
      "time": "3 months, 4 weeks",
      "timestamp": 1696850124,
      "status": 10,
      "runtime": "84 ms",
      "is_pending": "Not Pending",
      "memory": "17.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1069975520,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1569,
      "title_slug": "max-dot-product-of-two-subsequences",
      "code": "class Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -\u003e int:\n        @cache\n        def dp(i, j):\n            if i == len(nums1) or j == len(nums2):\n                return 0\n            \n            use = nums1[i] * nums2[j] + dp(i + 1, j + 1)\n            return max(use, dp(i + 1, j), dp(i, j + 1))\n            \n        if max(nums1) \u003c 0 and min(nums2) \u003e 0:\n            return max(nums1) * min(nums2)\n        \n        if min(nums1) \u003e 0 and max(nums2) \u003c 0:\n            return min(nums1) * max(nums2)\n        \n        return dp(0, 0)",
      "title": "Max Dot Product of Two Subsequences",
      "url": "/submissions/detail/1069975520/",
      "lang_name": "Python3",
      "time": "3 months, 4 weeks",
      "timestamp": 1696750784,
      "status": 10,
      "runtime": "482 ms",
      "is_pending": "Not Pending",
      "memory": "98.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1069463764,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1535,
      "title_slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
      "code": "class Solution:\n    def numOfArrays(self, n: int, m: int, k: int) -\u003e int:\n        @cache\n        def dp(i, max_so_far, remain):\n            if i == n:\n                if remain == 0:\n                    return 1\n                \n                return 0\n            \n            ans = (max_so_far * dp(i + 1, max_so_far, remain)) % MOD\n            for num in range(max_so_far + 1, m + 1):\n                ans = (ans + dp(i + 1, num, remain - 1)) % MOD\n                \n            return ans\n        \n        MOD = 10 ** 9 + 7\n        return dp(0, 0, k)",
      "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
      "url": "/submissions/detail/1069463764/",
      "lang_name": "Python3",
      "time": "3 months, 4 weeks",
      "timestamp": 1696697290,
      "status": 10,
      "runtime": "867 ms",
      "is_pending": "Not Pending",
      "memory": "43.5 MB",
      "compare_result": "1111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1068473154,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 343,
      "title_slug": "integer-break",
      "code": "class Solution:\n    def integerBreak(self, n: int) -\u003e int:\n        if n \u003c 4:\n            return n - 1\n        \n        @cache\n        def dp(num: int) -\u003e int:\n            if num \u003c= 3:\n                return num\n            ans = num\n            for i in range(2, num):\n                ans = max(ans, i * dp(num - i))\n            return ans\n\n        return dp(n)",
      "title": "Integer Break",
      "url": "/submissions/detail/1068473154/",
      "lang_name": "Python3",
      "time": "4 months",
      "timestamp": 1696584279,
      "status": 10,
      "runtime": "42 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1068472872,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 343,
      "title_slug": "integer-break",
      "code": "class Solution:\n    def integerBreak(self, n: int) -\u003e int:\n        @cache\n        def dp(num: int) -\u003e int:\n            if num \u003c= 3:\n                return num\n            ans = num\n            for i in range(2, num):\n                ans = max(ans, i * dp(num - i))\n            return ans\n\n        return dp(n) if n \u003e 3 else n - 1",
      "title": "Integer Break",
      "url": "/submissions/detail/1068472872/",
      "lang_name": "Python3",
      "time": "4 months",
      "timestamp": 1696584249,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1067493121,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 229,
      "title_slug": "majority-element-ii",
      "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -\u003e List[int]:\n        nums.sort()\n        threshold = len(nums) // 3\n        cur_num, cur_count = nums[0], 1\n        answer = []\n        for num in nums[1:]:\n            if num == cur_num:\n                cur_count += 1\n                continue\n            if cur_count \u003e threshold:\n                answer.append(cur_num)\n            cur_num, cur_count = num, 1\n        if cur_count \u003e threshold:\n            answer.append(cur_num)\n        return answer",
      "title": "Majority Element II",
      "url": "/submissions/detail/1067493121/",
      "lang_name": "Python3",
      "time": "4 months",
      "timestamp": 1696488396,
      "status": 10,
      "runtime": "105 ms",
      "is_pending": "Not Pending",
      "memory": "17.8 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1066540135,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 817,
      "title_slug": "design-hashmap",
      "code": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n\nclass MyHashMap:\n\n    def __init__(self):\n        self.size = 1000\n        self.table = [None] * self.size\n\n    def _index(self, key: int) -\u003e int:\n        return key % self.size\n\n    def put(self, key: int, value: int) -\u003e None:\n        idx = self._index(key)\n        if not self.table[idx]:\n            self.table[idx] = ListNode(key, value)\n            return\n        current = self.table[idx]\n        while current:\n            if current.key == key:\n                current.value = value\n                return\n            if not current.next:\n                current.next = ListNode(key, value)\n                return\n            current = current.next\n\n    def get(self, key: int) -\u003e int:\n        idx = self._index(key)\n        current = self.table[idx]\n        while current:\n            if current.key == key:\n                return current.value\n            current = current.next\n        return -1\n\n    def remove(self, key: int) -\u003e None:\n        idx = self._index(key)\n        current = self.table[idx]\n        if not current:\n            return\n        if current.key == key:\n            self.table[idx] = current.next\n            return\n        while current.next:\n            if current.next.key == key:\n                current.next = current.next.next\n                return\n            current = current.next\n\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)",
      "title": "Design HashMap",
      "url": "/submissions/detail/1066540135/",
      "lang_name": "Python3",
      "time": "4 months",
      "timestamp": 1696399200,
      "status": 10,
      "runtime": "210 ms",
      "is_pending": "Not Pending",
      "memory": "20.1 MB",
      "compare_result": "111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1066538268,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 817,
      "title_slug": "design-hashmap",
      "code": "class MyHashMap:\n    def __init__(self):\n        self.data = [None] * 1000001\n\n    def put(self, key: int, val: int) -\u003e None:\n        self.data[key] = val\n        \n    def get(self, key: int) -\u003e int:\n        val = self.data[key]\n        return -1 if val is None else val\n\n    def remove(self, key: int) -\u003e None:\n        self.data[key] = None\n        \n\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)",
      "title": "Design HashMap",
      "url": "/submissions/detail/1066538268/",
      "lang_name": "Python3",
      "time": "4 months",
      "timestamp": 1696399045,
      "status": 10,
      "runtime": "286 ms",
      "is_pending": "Not Pending",
      "memory": "41.9 MB",
      "compare_result": "111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1065621000,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1635,
      "title_slug": "number-of-good-pairs",
      "code": "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -\u003e int:\n        counter = Counter(nums)\n        return sum((count ** 2 - count) // 2 for count in counter.values() if count \u003e 1)",
      "title": "Number of Good Pairs",
      "url": "/submissions/detail/1065621000/",
      "lang_name": "Python3",
      "time": "4 months",
      "timestamp": 1696313642,
      "status": 10,
      "runtime": "47 ms",
      "is_pending": "Not Pending",
      "memory": "16 MB",
      "compare_result": "111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1065620746,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1635,
      "title_slug": "number-of-good-pairs",
      "code": "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -\u003e int:        \n        return sum((count ** 2 - count) // 2 for count in Counter(nums).values() if count \u003e 1)",
      "title": "Number of Good Pairs",
      "url": "/submissions/detail/1065620746/",
      "lang_name": "Python3",
      "time": "4 months",
      "timestamp": 1696313620,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1065620395,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1635,
      "title_slug": "number-of-good-pairs",
      "code": "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -\u003e int:\n        counter = Counter(nums)\n        \n        return sum((count ** 2 - count) // 2 for count in counter.values() if count \u003e 1)",
      "title": "Number of Good Pairs",
      "url": "/submissions/detail/1065620395/",
      "lang_name": "Python3",
      "time": "4 months",
      "timestamp": 1696313590,
      "status": 10,
      "runtime": "28 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1080534787,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1286,
      "title_slug": "constrained-subsequence-sum",
      "code": "import heapq\n\nclass Solution:\n    def constrainedSubsetSum(self, nums: List[int], k: int) -\u003e int:\n        heap = [(-nums[0], 0)]\n        ans = nums[0]\n        \n        for i in range(1, len(nums)):\n            while i - heap[0][1] \u003e k:\n                heapq.heappop(heap)\n\n            curr = max(0, -heap[0][0]) + nums[i]\n            ans = max(ans, curr)\n            heapq.heappush(heap, (-curr, i))\n\n        return ans",
      "title": "Constrained Subsequence Sum",
      "url": "/submissions/detail/1080534787/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697887253,
      "status": 10,
      "runtime": "1729 ms",
      "is_pending": "Not Pending",
      "memory": "36.4 MB",
      "compare_result": "111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1080534523,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1286,
      "title_slug": "constrained-subsequence-sum",
      "code": "class Solution:\n    def constrainedSubsetSum(self, nums: List[int], k: int) -\u003e int:\n        answer, negatives = [None], deque(maxlen = len(nums))\n        max_val = float(\"-inf\")\n        for i, num in enumerate(nums):\n            max_val = max(max_val, num)\n            \n            if num \u003e= 0 and answer[-1] is None:\n                answer[-1] = num\n                continue\n            elif num \u003e= 0 and answer[-1] \u003e= 0:\n                answer[-1] += num\n                continue\n            elif num \u003e= 0 and answer[-1] \u003c 0:\n                answer.append(num)\n                negatives.clear()\n                continue\n            \n            if answer is None:\n                continue\n\n            if len(negatives) \u003c k - 1:\n                negatives.append(num)\n                continue\n            \n            negatives.append(num)\n            max_negative, max_negative_idx = negatives[0], 0\n            for j in range(1, k):\n                negative = negatives[j]\n                if negative \u003e= max_negative:\n                    max_negative, max_negative_idx = negative, j\n            \n            answer.append(max_negative)\n            cur = 0\n            while cur \u003c= max_negative_idx:\n                negatives.popleft()\n                cur += 1\n\n        if answer[0] is None:\n            return max_val\n        \n        last_num = None\n        for i in reversed(range(len(answer))):\n            num = answer[i]\n            if num \u003e 0:\n                last_num = i\n                break\n\n        return sum(answer[0:last_num + 1])",
      "title": "Constrained Subsequence Sum",
      "url": "/submissions/detail/1080534523/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697887219,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111101111100000001111111010011011",
      "flag_type": 1
    },
    {
      "id": 1080533312,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1286,
      "title_slug": "constrained-subsequence-sum",
      "code": "class Solution:\n    def constrainedSubsetSum(self, nums: List[int], k: int) -\u003e int:\n        answer, negatives = [None], deque(maxlen = len(nums))\n        max_val = float(\"-inf\")\n        for i, num in enumerate(nums):\n            max_val = max(max_val, num)\n            \n            if num \u003e= 0 and answer[0] is None:\n                answer[0] = num\n                continue\n            elif num \u003e= 0:\n                answer[0] += num\n                negatives.clear()\n                continue\n            \n            if answer is None:\n                continue\n\n            if len(negatives) \u003c k - 1:\n                negatives.append(num)\n                continue\n            \n            negatives.append(num)\n            max_negative, max_negative_idx = negatives[0], 0\n            for j in range(1, k):\n                negative = negatives[j]\n                if negative \u003e= max_negative:\n                    max_negative, max_negative_idx = negative, j\n            \n            answer.append(max_negative)\n            cur = 0\n            while cur \u003c= max_negative_idx:\n                negatives.popleft()\n                cur += 1\n\n        if answer[0] is None:\n            return max_val\n        \n        last_num = None\n        for i in reversed(range(len(answer))):\n            num = answer[i]\n            if num \u003e 0:\n                last_num = i\n                break\n\n        return sum(answer[0:last_num + 1])",
      "title": "Constrained Subsequence Sum",
      "url": "/submissions/detail/1080533312/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697887074,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110111101110100001111111011111100100",
      "flag_type": 1
    },
    {
      "id": 1080532781,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1286,
      "title_slug": "constrained-subsequence-sum",
      "code": "class Solution:\n    def constrainedSubsetSum(self, nums: List[int], k: int) -\u003e int:\n        answer, negatives = [None], deque(maxlen = len(nums))\n        max_val = float(\"-inf\")\n        for i, num in enumerate(nums):\n            max_val = max(max_val, num)\n            \n            if num \u003e= 0 and answer[0] is None:\n                answer[0] = num\n                continue\n            elif num \u003e= 0:\n                answer[0] += num\n                negatives.clear()\n                continue\n            \n            if answer is None:\n                continue\n\n            if len(negatives) \u003c k - 1:\n                negatives.append(num)\n                continue\n            \n            negatives.append(num)\n            max_negative, max_negative_idx = negatives[0], 0\n            for j in range(1, k):\n                negative = negatives[j]\n                if negative \u003e= max_negative:\n                    max_negative, max_negative_idx = negative, j\n            \n            answer.append(max_negative)\n            cur = 0\n            while cur \u003c= max_negative_idx:\n                negatives.popleft()\n                cur += 1\n\n        if answer[0] is None:\n            return max_val\n        \n        last_num = None\n        for i in reversed(range(len(answer))):\n            num = answer[i]\n            if num \u003e 0:\n                last_num = num\n                break\n\n        return sum(answer[0:last_num + 1])",
      "title": "Constrained Subsequence Sum",
      "url": "/submissions/detail/1080532781/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697887008,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111101101011100001111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1080528854,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1286,
      "title_slug": "constrained-subsequence-sum",
      "code": "class Solution:\n    def constrainedSubsetSum(self, nums: List[int], k: int) -\u003e int:\n        answer, negatives = None, deque(maxlen = len(nums))\n        max_val = float(\"-inf\")\n        for i, num in enumerate(nums):\n            max_val = max(max_val, num)\n            \n            if num \u003e= 0 and answer is None:\n                answer = num\n                continue\n            elif num \u003e= 0:\n                answer += num\n                negatives.clear()\n                continue\n            \n            if answer is None:\n                continue\n\n            if len(negatives) \u003c k - 1:\n                negatives.append(num)\n                continue\n            \n            negatives.append(num)\n            max_negative, max_negative_idx = negatives[0], 0\n            for j in range(1, k):\n                negative = negatives[j]\n                if negative \u003e= max_negative:\n                    max_negative, max_negative_idx = negative, j\n            \n            answer += max_negative\n            cur = 0\n            while cur \u003c= max_negative_idx:\n                negatives.popleft()\n                cur += 1\n        \n        return max_val if answer is None else answer\n",
      "title": "Constrained Subsequence Sum",
      "url": "/submissions/detail/1080528854/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697886519,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111101101011100001111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1079920783,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 341,
      "title_slug": "flatten-nested-list-iterator",
      "code": "# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def isInteger(self) -\u003e bool:\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        \"\"\"\n#\n#    def getInteger(self) -\u003e int:\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        \"\"\"\n#\n#    def getList(self) -\u003e [NestedInteger]:\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        \"\"\"\n\nclass NestedIterator:\n    def __init__(self, nestedList: [NestedInteger]):\n        self.get_next = self.get_next_gen(nestedList)\n        self.next_val = next(self.get_next, None)\n\n    def get_next_gen(self, nestedList: List[NestedInteger]) -\u003e Generator[None, None, int]:\n        for ni in nestedList:\n            if ni.isInteger():\n                yield ni.getInteger()\n            else:\n                yield from self.get_next_gen(ni.getList())\n\n    def next(self) -\u003e int: \n        answer, self.next_val = self.next_val, next(self.get_next, None)\n        return answer\n    \n    def hasNext(self) -\u003e bool:\n        return self.next_val is not None\n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())",
      "title": "Flatten Nested List Iterator",
      "url": "/submissions/detail/1079920783/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697807498,
      "status": 10,
      "runtime": "59 ms",
      "is_pending": "Not Pending",
      "memory": "19.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1079918385,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 341,
      "title_slug": "flatten-nested-list-iterator",
      "code": "# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def isInteger(self) -\u003e bool:\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        \"\"\"\n#\n#    def getInteger(self) -\u003e int:\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        \"\"\"\n#\n#    def getList(self) -\u003e [NestedInteger]:\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        \"\"\"\n\nclass NestedIterator:\n    def __init__(self, nestedList: [NestedInteger]):\n        self.list = []\n        self.flatten(self.list, nestedList)\n        self.cur = 0\n        self.length = len(self.list)\n\n    def flatten(self, flatList: List[int], nestedList: List[NestedInteger]):\n        for ni in nestedList:\n            if ni.isInteger():\n                flatList.append(ni.getInteger())\n            else:\n                self.flatten(flatList, ni.getList())\n\n    def next(self) -\u003e int: \n        answer = self.list[self.cur]\n        self.cur += 1\n        return answer\n    \n    def hasNext(self) -\u003e bool:\n        return self.cur \u003c self.length\n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())",
      "title": "Flatten Nested List Iterator",
      "url": "/submissions/detail/1079918385/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697807196,
      "status": 10,
      "runtime": "51 ms",
      "is_pending": "Not Pending",
      "memory": "19.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1079211036,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 874,
      "title_slug": "backspace-string-compare",
      "code": "class Solution:\n    def backspaceCompare(self, s: str, t: str) -\u003e bool:\n        i1, i2 = len(s) - 1, len(t) - 1\n        skip1, skip2 = 0, 0\n\n        while i1 \u003e= 0 or i2 \u003e= 0:\n            char1, char2 = s[i1] if i1 \u003e= 0 else \"\", t[i2] if i2 \u003e= 0 else \"\"\n            if char1 == \"#\":\n                i1 -= 1\n                skip1 += 1\n            elif char2 == \"#\":\n                i2 -= 1\n                skip2 += 1\n            elif skip1 \u003e 0:\n                i1 -= 1\n                skip1 -= 1\n            elif skip2 \u003e 0:\n                i2 -= 1\n                skip2 -= 1\n            elif char1 != char2:\n                return False\n            else:\n                i1 -= 1\n                i2 -= 1\n        \n        return True ",
      "title": "Backspace String Compare",
      "url": "/submissions/detail/1079211036/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697724586,
      "status": 10,
      "runtime": "41 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1079210290,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 874,
      "title_slug": "backspace-string-compare",
      "code": "class Solution:\n    def backspaceCompare(self, s: str, t: str) -\u003e bool:\n        i1, i2 = len(s) - 1, len(t) - 1\n        skip1, skip2 = 0, 0\n\n        while i1 \u003e= 0 or i2 \u003e= 0:\n            char1, char2 = s[i1] if i1 \u003e= 0 else \"\", t[i2] if i2 \u003e= 0 else \"\"\n            if char1 == \"#\":\n                i1 -= 1\n                skip1 += 1\n            elif char2 == \"#\":\n                i2 -= 1\n                skip2 += 1\n            elif skip1 \u003e 0:\n                i1 -= skip1\n                skip1 = 0\n            elif skip2 \u003e 0:\n                i2 -= skip2\n                skip2 = 0\n            elif char1 != char2:\n                return False\n            else:\n                i1 -= 1\n                i2 -= 1\n        \n        return True ",
      "title": "Backspace String Compare",
      "url": "/submissions/detail/1079210290/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697724512,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111010011111111111111001001100101011101111111110001010101010101011100010101010101010101010101000101010001011011",
      "flag_type": 1
    },
    {
      "id": 1079206898,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 874,
      "title_slug": "backspace-string-compare",
      "code": "class Solution:\n    def backspaceCompare(self, s: str, t: str) -\u003e bool:\n        i1, i2 = len(s) - 1, len(t) - 1\n        skip1, skip2 = 0, 0\n\n        while i1 \u003e= 0 or i2 \u003e= 0:\n            char1, char2 = s[i1] if i1 \u003e= 0 else \"\", t[i2] if i2 \u003e= 0 else \"\"\n            if char1 == \"#\":\n                i1 -= 1\n                skip1 += 1\n            elif char2 == \"#\":\n                i2 -= 1\n                skip2 += 1\n            elif skip1:\n                i1 -= skip1\n                skip1 = 0\n            elif skip2:\n                i2 -= skip2\n                skip2 = 0\n            elif char1 != char2:\n                return False\n            i1 -= 1\n            i2 -= 1\n        \n        return True ",
      "title": "Backspace String Compare",
      "url": "/submissions/detail/1079206898/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697724182,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "011111101100011111110011011110011100000111111110110001010101110101010100010101010101010101010101000101010001001011",
      "flag_type": 1
    },
    {
      "id": 1079204348,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 874,
      "title_slug": "backspace-string-compare",
      "code": "class Solution:\n    def backspaceCompare(self, s: str, t: str) -\u003e bool:\n        i1, i2 = len(s) - 1, len(t) - 1\n        skip1, skip2 = 0, 0\n\n        while i1 \u003e= 0 and i2 \u003e= 0:\n            char1, char2 = s[i1] if i1 \u003e= 0 else \"\", t[i2] if i2 \u003e= 0 else \"\"\n            if char1 == \"#\":\n                i1 -= 1\n                skip1 += 1\n            elif char2 == \"#\":\n                i2 -= 1\n                skip2 += 1\n            elif skip1:\n                i1 -= skip1\n                skip1 = 0\n            elif skip2:\n                i2 -= skip2\n                skip2 = 0\n            elif char1 != char2:\n                return False\n            i1 -= 1\n            i2 -= 1\n        \n        return True ",
      "title": "Backspace String Compare",
      "url": "/submissions/detail/1079204348/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697723928,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111101110011011110010111110111111100111110100111110011101110101010100010101010101010101010101110101010001001111",
      "flag_type": 1
    },
    {
      "id": 1079202281,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 874,
      "title_slug": "backspace-string-compare",
      "code": "class Solution:\n    def backspaceCompare(self, s: str, t: str) -\u003e bool:\n        i1, i2 = len(s) - 1, len(t) - 1\n\n        while i1 \u003e= 0 and i2 \u003e= 0:\n            char1, char2 = s[i1] if i1 \u003e= 0 else \"\", t[i2] if i2 \u003e= 0 else \"\"\n            if char1 == \"#\":\n                i1 -= 2\n                continue\n            if char2 == \"#\":\n                i2 -= 2\n                continue\n            if char1 != char2:\n                return False\n            i1 -= 1\n            i2 -= 1\n        \n        return True ",
      "title": "Backspace String Compare",
      "url": "/submissions/detail/1079202281/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697723720,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111110110011001011110111111110110110001011101000101110100010101010101010101010101000101010001001010",
      "flag_type": 1
    },
    {
      "id": 1079202117,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 874,
      "title_slug": "backspace-string-compare",
      "code": "class Solution:\n    def backspaceCompare(self, s: str, t: str) -\u003e bool:\n        i1, i2 = len(s) - 1, len(t) - 1\n\n        while i1 \u003e= 0 and i2 \u003e= 0:\n            char1, char2 = s[i1] if i1 \u003e= 0 else \"\", s[i2] if i2 \u003e= 0 else \"\"\n            if char1 == \"#\":\n                i1 -= 2\n                continue\n            if char2 == \"#\":\n                i2 -= 2\n                continue\n            if char1 != char2:\n                return False\n            i1 -= 1\n            i2 -= 1\n        \n        return True ",
      "title": "Backspace String Compare",
      "url": "/submissions/detail/1079202117/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697723704,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1078498046,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2176,
      "title_slug": "parallel-courses-iii",
      "code": "class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -\u003e int:\n        graph = defaultdict(list)\n        indegree = [0] * n\n        \n        for (x, y) in relations:\n            graph[x - 1].append(y - 1)\n            indegree[y - 1] += 1\n        \n        queue = deque()\n        max_time = [0] * n\n        for node in range(n):\n            if indegree[node] == 0:\n                queue.append(node)\n                max_time[node] = time[node]\n\n        while queue:\n            node = queue.popleft()\n            for neighbor in graph[node]:\n                max_time[neighbor] = max(max_time[neighbor], max_time[node] + time[neighbor])\n                indegree[neighbor] -= 1\n                if indegree[neighbor] == 0:\n                    queue.append(neighbor)\n\n        return max(max_time)",
      "title": "Parallel Courses III",
      "url": "/submissions/detail/1078498046/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697647133,
      "status": 10,
      "runtime": "1416 ms",
      "is_pending": "Not Pending",
      "memory": "45.1 MB",
      "compare_result": "111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1078495950,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2176,
      "title_slug": "parallel-courses-iii",
      "code": "class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -\u003e int:\n        required = {i: [time[i], set()] for i in range(n)}\n\n        for prev, nxt in relations:\n            required[nxt-1][1].add(prev-1)\n\n        max_time = 0\n\n        while required:\n            taken = set(course for course in required if len(required[course][1]) == 0)\n            for course in taken:\n                max_time = max(max_time, required[course][0])\n                required.pop(course)\n\n            for course, (_, reqs) in required.items():\n                needed = reqs.intersection(taken)\n                if needed:\n                    required[course][0] += max(time[item] for item in needed)\n                    reqs.difference_update(needed)\n\n        return max_time",
      "title": "Parallel Courses III",
      "url": "/submissions/detail/1078495950/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697646962,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111000010000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1078494881,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2176,
      "title_slug": "parallel-courses-iii",
      "code": "class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -\u003e int:\n        required = {i: [time[i], set()] for i in range(n)}\n\n        for prev, nxt in relations:\n            required[nxt-1][1].add(prev-1)\n\n        max_time = 0\n\n        while required:\n            taken = set(course for course in required if len(required[course][1]) == 0)\n            for course in taken:\n                max_time = max(max_time, required[course][0])\n                required.pop(course)\n\n            for course, (_, reqs) in required.items():\n                needed = reqs \u0026 taken\n                if needed:\n                    required[course][0] += max(time[item] for item in needed)\n                    reqs.difference_update(needed)\n\n        return max_time",
      "title": "Parallel Courses III",
      "url": "/submissions/detail/1078494881/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697646868,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111000010000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1078494550,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 2176,
      "title_slug": "parallel-courses-iii",
      "code": "class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -\u003e int:\n        required = {i: [time[i], set()] for i in range(n)}\n\n        for prev, nxt in relations:\n            required[nxt-1][1].add(prev-1)\n\n        max_time = 0\n\n        while required:\n            taken = set(course for course in required if len(required[course][1]) == 0)\n            for course in taken:\n                required.pop(course)\n                max_time = max(max_time, required[course][0])\n\n            for course, (_, reqs) in required.items():\n                needed = reqs \u0026 taken\n                if needed:\n                    required[course][0] += max(time[item] for item in needed)\n                    reqs.difference_update(needed)\n\n        return max_time",
      "title": "Parallel Courses III",
      "url": "/submissions/detail/1078494550/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697646840,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1078491522,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 2176,
      "title_slug": "parallel-courses-iii",
      "code": "class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -\u003e int:\n        required = {i: [0, set()] for i in range(n)}\n\n        for prev, nxt in relations:\n            required[nxt-1][1].add(prev-1)\n\n        max_time = 0\n\n        while required:\n            taken = set()\n            for course, (time_count, reqs) in required.items():\n                if len(reqs) == 0:\n                    taken.add(course)\n                    max_time = max(max_time, time_count + time[course])\n\n            for course in taken:\n                required.pop(course)\n\n            for course, (_, reqs) in required.items():\n                union = reqs \u0026 taken\n                if union:\n                    required[course][0] += max(time[item] for item in union)\n                    reqs.difference_update(taken)\n        \n        return max_time",
      "title": "Parallel Courses III",
      "url": "/submissions/detail/1078491522/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697646589,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111000010000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1077634667,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1275,
      "title_slug": "validate-binary-tree-nodes",
      "code": "class Solution:\n    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -\u003e bool:\n        parents = [-1] * n\n\n        for i in range(n):\n            left, right = leftChild[i], rightChild[i] \n            left_valid, right_valid = left != -1, right != -1\n            if (left_valid and parents[left] != -1) or (\n                right_valid and parents[right] != -1\n            ):\n                return False\n            if left_valid:\n                parents[left] = i\n            if right_valid:\n                parents[right] = i\n\n            parent = parents[i]\n            if parent != -1 and (parent == left or parent == right):\n                return False\n\n        root = None\n        for i, node in enumerate(parents):\n            if node == -1 and root is not None:\n                return False\n            if node == -1:\n                root = i\n\n        if root is None:\n            return False\n\n        to_visit = [root]\n        visited = set()\n\n        while to_visit:\n            node = to_visit.pop()\n            if node in visited:\n                return False\n            visited.add(node)\n            left, right = leftChild[node], rightChild[node]\n            if left != -1:\n                to_visit.append(left)\n            if right != -1:\n                to_visit.append(right)\n\n        return len(visited) == n \n        \n",
      "title": "Validate Binary Tree Nodes",
      "url": "/submissions/detail/1077634667/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697557521,
      "status": 10,
      "runtime": "265 ms",
      "is_pending": "Not Pending",
      "memory": "18.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1077617254,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1275,
      "title_slug": "validate-binary-tree-nodes",
      "code": "class Solution:\n    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -\u003e bool:\n        reversed_graph = {}\n\n        for i in range(n):\n            left, right = leftChild[i], rightChild[i] \n            left_valid, right_valid = left != -1, right != -1\n            if (left_valid and left in reversed_graph) or (right_valid and right in reversed_graph):\n                return False\n            if left_valid:\n                reversed_graph[left] = i\n            if right_valid:\n                reversed_graph[right] = i\n            if i in reversed_graph and reversed_graph[i] in (left, right):\n                return False\n         \n        return len(reversed_graph) == n - 1\n        \n",
      "title": "Validate Binary Tree Nodes",
      "url": "/submissions/detail/1077617254/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697556090,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111110111111111111111111110111",
      "flag_type": 1
    },
    {
      "id": 1086092477,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1332,
      "title_slug": "count-vowels-permutation",
      "code": "class Solution:\n    def countVowelPermutation(self, n: int) -\u003e int:\n        MOD = 10**9 + 7\n        \n        a, e, i, o, u = 1, 1, 1, 1, 1\n        \n        for _ in range(1, n):\n            a_next = e\n            e_next = (a + i) % MOD\n            i_next = (a + e + o + u) % MOD\n            o_next = (i + u) % MOD\n            u_next = a\n            \n            a, e, i, o, u = a_next, e_next, i_next, o_next, u_next\n        \n        return (a + e + i + o + u) % MOD",
      "title": "Count Vowels Permutation",
      "url": "/submissions/detail/1086092477/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698504664,
      "status": 10,
      "runtime": "84 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1086092100,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1332,
      "title_slug": "count-vowels-permutation",
      "code": "class Solution:\n    def countVowelPermutation(self, n: int) -\u003e int:\n        # a -\u003e e\n        # e -\u003e a, i\n        # i -\u003e a, e, o, u\n        # o -\u003e i, u\n        # u -\u003e a\n        mod = 10**9 + 7\n\n        a, e, i, o, u = 1, 1, 1, 1, 1\n        \n        for _ in range(1, n):\n            a_next = e\n            e_next = (a + i) % MOD\n            i_next = (a + e + o + u) % MOD\n            o_next = (i + u) % MOD\n            u_next = a\n            \n            a, e, i, o, u = a_next, e_next, i_next, o_next, u_next\n        \n        return (a + e + i + o + u) % MOD",
      "title": "Count Vowels Permutation",
      "url": "/submissions/detail/1086092100/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698504647,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1085421868,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 5,
      "title_slug": "longest-palindromic-substring",
      "code": "class Solution:\n    def longestPalindrome(self, s: str) -\u003e str:\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        ans = [0, 0]\n        \n        for i in range(n):\n            dp[i][i] = True\n        \n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                dp[i][i + 1] = True\n                ans = [i, i + 1]\n\n        for diff in range(2, n):\n            for i in range(n - diff):\n                j = i + diff\n                if s[i] == s[j] and dp[i + 1][j - 1]:\n                    dp[i][j] = True\n                    ans = [i, j]\n\n        i, j = ans\n        return s[i:j + 1]",
      "title": "Longest Palindromic Substring",
      "url": "/submissions/detail/1085421868/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698418070,
      "status": 10,
      "runtime": "2113 ms",
      "is_pending": "Not Pending",
      "memory": "24.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1085421084,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 5,
      "title_slug": "longest-palindromic-substring",
      "code": "class Solution:\n    def longestPalindrome(self, s: str) -\u003e str:\n        def is_palindrome(string: str) -\u003e bool:\n            return all(string[i] == string[-(i + 1)] \n                       for i in range(len(string) // 2))\n        \n        length = len(s)\n\n        for i in range(length):\n            for j in reversed(range(i, length)):\n                sub = s[i:j+1]\n                if is_palindrome(sub):\n                    return sub\n        ",
      "title": "Longest Palindromic Substring",
      "url": "/submissions/detail/1085421084/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698417991,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1011110111101100011100100001101111100111100101000000000000000000000000000000011111111111111111110000101010101010101010101010110101010101011100",
      "flag_type": 1
    },
    {
      "id": 1085420697,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 5,
      "title_slug": "longest-palindromic-substring",
      "code": "class Solution:\n    def longestPalindrome(self, s: str) -\u003e str:\n        def is_palindrome(string: str) -\u003e bool:\n            return all(string[i] == string[-(i + 1)] \n                       for i in range(len(string) // 2))\n        \n        length = len(s)\n\n        if length == 1:\n            return s\n            \n        for i in range(length):\n            for j in reversed(range(i + 1, length)):\n                sub = s[i:j+1]\n                if is_palindrome(sub):\n                    return sub\n        ",
      "title": "Longest Palindromic Substring",
      "url": "/submissions/detail/1085420697/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698417952,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110111111111111011111001101101111110111001101000000000001001000000000000000011111111111111111110000101011101010101010101010110101010101011101",
      "flag_type": 1
    },
    {
      "id": 1085420219,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 5,
      "title_slug": "longest-palindromic-substring",
      "code": "class Solution:\n    def longestPalindrome(self, s: str) -\u003e str:\n        def is_palindrome(string: str) -\u003e bool:\n            return all(string[i] == string[-(i + 1)] \n                       for i in range(len(string) // 2))\n        \n        length = len(s)\n        for i in range(length):\n            for j in reversed(range(i + 1, length)):\n                sub = s[i:j+1]\n                if is_palindrome(sub):\n                    return sub\n        ",
      "title": "Longest Palindromic Substring",
      "url": "/submissions/detail/1085420219/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698417906,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1100111111111111011111001101101111110111001101000000000001001000000000000000011111111111111111110000101011101010101010101010110101010101000001",
      "flag_type": 1
    },
    {
      "id": 1084880212,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 843,
      "title_slug": "binary-trees-with-factors",
      "code": "MOD = 10**9 + 7\n\nclass Solution:\n    def numFactoredBinaryTrees(self, arr: List[int]) -\u003e int:\n        arr.sort()\n        s = set(arr)\n        dp = {x: 1 for x in arr}\n        \n        for i in arr:\n            for j in arr:\n                if j \u003e i**0.5:\n                    break\n                if i % j == 0 and i // j in s:\n                    if i // j == j:\n                        dp[i] += dp[j] * dp[j]\n                    else:\n                        dp[i] += dp[j] * dp[i // j] * 2\n                    dp[i] %= MOD\n        \n        return sum(dp.values()) % MOD\n",
      "title": "Binary Trees With Factors",
      "url": "/submissions/detail/1084880212/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698350842,
      "status": 10,
      "runtime": "135 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1083730897,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 211,
      "title_slug": "design-add-and-search-words-data-structure",
      "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_word = False\n\nclass WordDictionary:\n\n    def __init__(self):\n        self.root = TrieNode()\n\n    def addWord(self, word: str) -\u003e None:\n        cur = self.root\n        for char in word:\n            cur = cur.children.setdefault(char, TrieNode())\n        cur.is_word = True\n\n    def search(self, word: str) -\u003e bool:\n        cur, nxt = [self.root], []\n        \n        for char in word:\n            if not cur:\n                return False\n\n            if char == \".\":\n                for node in cur:\n                    nxt.extend(node.children.values())\n            else:\n                for node in cur:\n                    if char in node.children:\n                        nxt.append(node.children[char]) \n                \n            cur.clear()\n            cur, nxt = nxt, cur\n\n        return any(node.is_word for node in cur)\n            \n\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)",
      "title": "Design Add and Search Words Data Structure",
      "url": "/submissions/detail/1083730897/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698230259,
      "status": 10,
      "runtime": "2418 ms",
      "is_pending": "Not Pending",
      "memory": "80.1 MB",
      "compare_result": "11111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1083728225,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 211,
      "title_slug": "design-add-and-search-words-data-structure",
      "code": "class WordDictionary:\n\n    def __init__(self):\n        self.words = {}\n\n    def addWord(self, word: str) -\u003e None:\n        cur = self.words\n        for char in word:\n            cur[char] = {}\n            cur = cur[char]\n        cur[\"_is_word\"] = True\n\n    def search(self, word: str) -\u003e bool:\n        cur, nxt = [self.words], []\n        \n        for char in word:\n            if not cur:\n                return False\n\n            if char == \".\":\n                for chars in cur:\n                    nxt.extend(chars.values())\n            else:\n                for chars in cur:\n                    if char in chars:\n                        nxt.append(chars[char]) \n                \n            cur.clear()\n            cur, nxt = nxt, cur\n\n        for chars in cur:\n            if chars.get(\"_is_word\"):\n                return True\n        return False\n            \n\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)",
      "title": "Design Add and Search Words Data Structure",
      "url": "/submissions/detail/1083728225/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698229945,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111100000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1083727999,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 211,
      "title_slug": "design-add-and-search-words-data-structure",
      "code": "class WordDictionary:\n\n    def __init__(self):\n        self.words = {}\n\n    def addWord(self, word: str) -\u003e None:\n        cur = self.words\n        for char in word:\n            cur[char] = {}\n            cur = cur[char]\n        cur[\"_is_word\"] = True\n\n    def search(self, word: str) -\u003e bool:\n        cur, nxt = [self.words], []\n        \n        for char in word:\n            if not cur:\n                return False\n\n            if char == \".\":\n                for chars in cur:\n                    nxt.extend(chars.values())\n            else:\n                for chars in cur:\n                    if char in chars:\n                        nxt.append(chars[char]) \n                \n            cur.clear()\n            cur, nxt = nxt, cur\n\n        for chars in cur:\n            if \"_is_word\" in chars:\n                return True\n        return False\n            \n\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)",
      "title": "Design Add and Search Words Data Structure",
      "url": "/submissions/detail/1083727999/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698229917,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111100000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1083724907,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 211,
      "title_slug": "design-add-and-search-words-data-structure",
      "code": "class WordDictionary:\n\n    def __init__(self):\n        self.words = {}\n\n    def addWord(self, word: str) -\u003e None:\n        cur = self.words\n        for char in word:\n            cur[char] = {}\n            cur = cur[char]\n\n    def search(self, word: str) -\u003e bool:\n        cur, nxt = [self.words], []\n        \n        for char in word:\n            if char == \".\":\n                for chars in cur:\n                    nxt.extend(chars.values())\n            else:\n                for chars in cur:\n                    if char in chars:\n                        nxt.append(chars[char]) \n                \n            cur.clear()\n            cur, nxt = nxt, cur\n            \n            if not cur:\n                return False\n\n        return True\n            \n\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)",
      "title": "Design Add and Search Words Data Structure",
      "url": "/submissions/detail/1083724907/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698229549,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111000000110001100001110",
      "flag_type": 1
    },
    {
      "id": 1083724296,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 211,
      "title_slug": "design-add-and-search-words-data-structure",
      "code": "class WordDictionary:\n\n    def __init__(self):\n        self.words = {}\n\n    def addWord(self, word: str) -\u003e None:\n        cur = self.words\n        for char in word:\n            cur[char] = {}\n            cur = cur[char]\n\n    def search(self, word: str) -\u003e bool:\n        cur, nxt = [self.words], []\n        \n        for char in word:\n            if not cur:\n                return False\n                \n            if char == \".\":\n                for chars in cur:\n                    nxt.extend(chars.values())\n            else:\n                for chars in cur:\n                    if char in chars:\n                        nxt.append(chars[char]) \n                \n            cur.clear()\n            cur, nxt = nxt, cur\n        \n        return True\n            \n\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)",
      "title": "Design Add and Search Words Data Structure",
      "url": "/submissions/detail/1083724296/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698229479,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11011100000000010001100001110",
      "flag_type": 1
    },
    {
      "id": 1083664565,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 795,
      "title_slug": "k-th-symbol-in-grammar",
      "code": "class Solution:\n    def kthGrammar(self, n: int, k: int) -\u003e int:\n\n        def get(row: int, column: int) -\u003e int:\n            if column == 0 or column == 1:\n                return column\n            \n            prev_row_length = 2 ** (row - 1)\n            if column \u003e= prev_row_length:\n                return 1 ^ get(row - 1, column - prev_row_length)\n            return get(row - 1, column)\n\n        return get(n - 1, k - 1)\n\n        # 0\n        # 0 1\n        # 0 1 1 0\n        # 0 1 1 0 1 0 0 1\n        # 0 1 1 0 1 0 0 1\n",
      "title": "K-th Symbol in Grammar",
      "url": "/submissions/detail/1083664565/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698222665,
      "status": 10,
      "runtime": "41 ms",
      "is_pending": "Not Pending",
      "memory": "16.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1083660229,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 795,
      "title_slug": "k-th-symbol-in-grammar",
      "code": "class Solution:\n    def kthGrammar(self, n: int, k: int) -\u003e int:\n        def reverse(num: int) -\u003e int:\n            return 0 if num == 1 else 1\n\n        def get(row: int, column: int) -\u003e int:\n            if column == 0 or column == 1:\n                return column\n            \n            half = 2 ** (row - 1)\n            if column \u003e half:\n                return reverse(get(row - 1, column - half))\n            return get(row - 1, column)\n\n        return get(n - 1, k - 1)\n\n        # 0\n        # 0 1\n        # 0 1 1 0\n        # 0 1 1 0 1 0 0 1\n        # 0 1 1 0 1 0 0 1\n",
      "title": "K-th Symbol in Grammar",
      "url": "/submissions/detail/1083660229/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698222159,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111101110111011110111111111111101011101110101110011001",
      "flag_type": 1
    },
    {
      "id": 1083659601,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 795,
      "title_slug": "k-th-symbol-in-grammar",
      "code": "class Solution:\n    def kthGrammar(self, n: int, k: int) -\u003e int:\n        def get(row: int, column: int) -\u003e int:\n            if column == 0 or column == 1:\n                return column\n            \n            half = 2 ** (row - 1)\n            if column \u003e half:\n                return get(row - 1, column - half)\n            return get(row - 1, column)\n\n        return get(n - 1, k - 1)\n\n        # 0\n        # 0 1\n        # 0 1 1 0\n        # 0 1 1 0 1 0 0 1\n        # 0 1 1 0 1 0 0 1\n",
      "title": "K-th Symbol in Grammar",
      "url": "/submissions/detail/1083659601/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698222087,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111110111010010101100010001111101110011100011111111110",
      "flag_type": 1
    },
    {
      "id": 1083641285,
      "status_display": "Memory Limit Exceeded",
      "lang": "python3",
      "question_id": 795,
      "title_slug": "k-th-symbol-in-grammar",
      "code": "class Solution:\n    def kthGrammar(self, n: int, k: int) -\u003e int:\n        cur, nxt = [0], []\n        cur_row = 1\n\n        while cur_row \u003c= n:\n            for num in cur:\n                if num == 0:\n                    nxt.extend((0, 1))\n                else:\n                    nxt.extend((1, 0))\n            cur.clear()\n            cur_row += 1\n            cur, nxt = nxt, cur\n        \n        return cur[k-1]",
      "title": "K-th Symbol in Grammar",
      "url": "/submissions/detail/1083641285/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698219982,
      "status": 12,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111110000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1082953508,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 515,
      "title_slug": "find-largest-value-in-each-tree-row",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def largestValues(self, root: Optional[TreeNode]) -\u003e List[int]:\n        if not root:\n            return []\n\n        largest = []\n        cur, nxt = [root], []\n        cur_val = None\n        while cur or nxt:\n            while cur:\n                node = cur.pop()\n                if cur_val is None or node.val \u003e cur_val:\n                    cur_val = node.val\n                if node.left:\n                    nxt.append(node.left)\n                if node.right:\n                    nxt.append(node.right)\n            largest.append(cur_val)\n            cur.clear()\n            cur_val = None\n            cur, nxt = nxt, cur\n        return largest",
      "title": "Find Largest Value in Each Tree Row",
      "url": "/submissions/detail/1082953508/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698148515,
      "status": 10,
      "runtime": "45 ms",
      "is_pending": "Not Pending",
      "memory": "18.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1082953259,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 515,
      "title_slug": "find-largest-value-in-each-tree-row",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def largestValues(self, root: Optional[TreeNode]) -\u003e List[int]:\n        if not root:\n            return []\n\n        largest = []\n        cur, nxt = [root], []\n        cur_val = None\n        while cur or nxt:\n            while cur:\n                node = cur.pop()\n                if cur_val is None or node.val \u003e cur_val:\n                    cur_val = node.val\n                if node.left:\n                    nxt.append(node.left)\n                if node.right:\n                    nxt.append(node.right)\n            largest.append(cur_val)\n            cur.clear()\n            cur, nxt = nxt, cur\n        return largest",
      "title": "Find Largest Value in Each Tree Row",
      "url": "/submissions/detail/1082953259/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698148487,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111100110110001001000001000010010000000000100100000000111111100110101000",
      "flag_type": 1
    },
    {
      "id": 1082006949,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 342,
      "title_slug": "power-of-four",
      "code": "class Solution:\n    def isPowerOfFour(self, n: int) -\u003e bool:\n        # Check if the number is greater than zero and is a power of two\n        if n \u003e 0 and (n \u0026 (n - 1)) == 0:\n            # Check if the number is of the form 4^x\n            return n \u0026 0x55555555 == n\n        else:\n            return False\n",
      "title": "Power of Four",
      "url": "/submissions/detail/1082006949/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1698053166,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1081281295,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1918,
      "title_slug": "maximum-score-of-a-good-subarray",
      "code": "class Solution:\n    def maximumScore(self, nums: List[int], k: int) -\u003e int:\n        n = len(nums)\n        left = k\n        right = k\n        ans = nums[k]\n        curr_min = nums[k]\n        \n        while left \u003e 0 or right \u003c n - 1:\n            if (nums[left - 1] if left else 0) \u003c (nums[right + 1] if right \u003c n - 1 else 0):\n                right += 1\n                curr_min = min(curr_min, nums[right])\n            else:\n                left -= 1\n                curr_min = min(curr_min, nums[left])\n\n            ans = max(ans, curr_min * (right - left + 1))\n        \n        return ans",
      "title": "Maximum Score of a Good Subarray",
      "url": "/submissions/detail/1081281295/",
      "lang_name": "Python3",
      "time": "3 months, 2 weeks",
      "timestamp": 1697972267,
      "status": 10,
      "runtime": "1024 ms",
      "is_pending": "Not Pending",
      "memory": "27.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087492211,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 103,
      "title_slug": "binary-tree-zigzag-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\n    if root == nil {\n        return [][]int{}\n    }\n\n    queue, answer := []*TreeNode{}, [][]int{}\n    leftToRight := true\n\n    for length := len(queue); length != 0; length = len(queue) {\n        answerRow := []int{}\n\n        for i := 0; i \u003c length; i++ {\n            node := queue[0]\n            queue = queue[1:]\n\n            answerRow = append(answerRow, node.Val)\n            if left := node.Left; left != nil {\n                queue = append(queue, left)\n            }\n            if right := node.Right; right != nil {\n                queue = append(queue, right)\n            }\n        }\n        if !leftToRight {\n            slices.Reverse(answerRow)\n        }\n        leftToRight = !leftToRight\n        answer = append(answer, answerRow)\n    }\n\n    return answer\n}",
      "title": "Binary Tree Zigzag Level Order Traversal",
      "url": "/submissions/detail/1087492211/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698664441,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "001000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1087491854,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 103,
      "title_slug": "binary-tree-zigzag-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\n    if root == nil {\n        return [][]int{}\n    }\n\n    queue, answer := []*TreeNode{}, [][]int{}\n    leftToRight := true\n\n    for length := len(queue); length != 0; length = len(queue) {\n        answerRow := []int{}\n\n        for i := 0; i \u003c length; i++ {\n            node := queue[0]\n            queue = queue[1:]\n\n            if left := node.Left; left != nil {\n                queue = append(queue, left)\n            }\n            if right := node.Right; right != nil {\n                queue = append(queue, right)\n            }\n        }\n        if !leftToRight {\n            slices.Reverse(answerRow)\n        }\n        leftToRight = !leftToRight\n        answer = append(answer, answerRow)\n    }\n\n    return answer\n}",
      "title": "Binary Tree Zigzag Level Order Traversal",
      "url": "/submissions/detail/1087491854/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698664396,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "001000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1087485265,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 102,
      "title_slug": "binary-tree-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc levelOrder(root *TreeNode) [][]int {\n    queue, answer := []*TreeNode{root}, [][]int{}\n\n    for length := len(queue); length != 0; length = len(queue) {\n        answerRow := []int{}\n        for i := 0; i \u003c length; i++ {\n            node := queue[0]\n            queue = queue[1:]\n            if node == nil {\n                continue\n            }\n            answerRow = append(answerRow, node.Val)\n            queue = append(queue, node.Left, node.Right)\n        }\n        if len(answerRow) != 0 {\n            answer = append(answer, answerRow)\n        }\n    }\n\n    return answer\n}",
      "title": "Binary Tree Level Order Traversal",
      "url": "/submissions/detail/1087485265/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698663563,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "3.6 MB",
      "compare_result": "11111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087485195,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 102,
      "title_slug": "binary-tree-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc levelOrder(root *TreeNode) [][]int {\n    queue, answer := []*TreeNode{root}, [][]int{}\n\n    for length := len(queue); length != 0; length = len(queue) {\n        answerRow := []int{}\n        for i := 0; i \u003c length; i++ {\n            node := queue[0]\n            stack = queue[1:]\n            if node == nil {\n                continue\n            }\n            answerRow = append(answerRow, node.Val)\n            queue = append(queue, node.Left, node.Right)\n        }\n        if len(answerRow) != 0 {\n            answer = append(answer, answerRow)\n        }\n    }\n\n    return answer\n}",
      "title": "Binary Tree Level Order Traversal",
      "url": "/submissions/detail/1087485195/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698663552,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1087481177,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 102,
      "title_slug": "binary-tree-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc levelOrder(root *TreeNode) [][]int {\n    if root == nil {\n        return [][]int{}\n    }\n\n    stack, answer := []*TreeNode{root}, [][]int{}\n\n    for length := len(stack); length != 0; length = len(stack) {\n        answerRow := []int{}\n        for i := 0; i \u003c length; i++ {\n            node := stack[0]\n            answerRow = append(answerRow, node.Val)\n            stack = stack[1:]\n            if left := node.Left; left != nil {\n                stack = append(stack, node.Left)\n            }\n            if right := node.Right; right != nil {\n                stack = append(stack, node.Right)\n            }\n        }\n        answer = append(answer, answerRow)\n    }\n\n    return answer\n}",
      "title": "Binary Tree Level Order Traversal",
      "url": "/submissions/detail/1087481177/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698663075,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "3.6 MB",
      "compare_result": "11111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087479642,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 102,
      "title_slug": "binary-tree-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc levelOrder(root *TreeNode) [][]int {\n    if root == nil {\n        return [][]int{}\n    }\n\n    stack, answer := []*TreeNode{root}, [][]int{}\n\n    for length := len(stack); length != 0; length = len(stack) {\n        for i := 0; i \u003c length; i++ {\n            node, answerRow := stack[0], []int{}\n            stack = stack[1:]\n            if left := node.Left; left != nil {\n                stack = append(stack, node.Left)\n                answerRow = append(answerRow, left.Val)\n            }\n            if right := node.Right; right != nil {\n                stack = append(stack, node.Right)\n                answerRow = append(answerRow, right.Val)\n            }\n            answer = append(answer, answerRow)\n        }\n    }\n\n    return answer\n}",
      "title": "Binary Tree Level Order Traversal",
      "url": "/submissions/detail/1087479642/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698662884,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00100000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1087479319,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 102,
      "title_slug": "binary-tree-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc levelOrder(root *TreeNode) [][]int {\n    if root == nil {\n        return [][]int{}\n    }\n\n    stack, answer := []*TreeNode{}, [][]int{}\n\n    for length := len(stack); length != 0; length = len(stack) {\n        for i := 0; i \u003c length; i++ {\n            node, answerRow := stack[0], []int{}\n            stack = stack[1:]\n            if left := node.Left; left != nil {\n                stack = append(stack, node.Left)\n                answerRow = append(answerRow, left.Val)\n            }\n            if right := node.Right; right != nil {\n                stack = append(stack, node.Right)\n                answerRow = append(answerRow, right.Val)\n            }\n            answer = append(answer, answerRow)\n        }\n    }\n\n    return answer\n}",
      "title": "Binary Tree Level Order Traversal",
      "url": "/submissions/detail/1087479319/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698662843,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00100000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1087475497,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 199,
      "title_slug": "binary-tree-right-side-view",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc rightSideView(root *TreeNode) []int {\n    if root == nil {\n        return []int{}\n    }\n\n    queue, answer := []*TreeNode{root}, []int{}\n\n    for length := len(queue); length != 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[0]\n            queue = queue[1:]\n            if i == length - 1 {\n                answer = append(answer, node.Val)\n            }\n            if left := node.Left; left != nil {\n                queue = append(queue, left)\n            }\n            if right := node.Right; right != nil {\n                queue = append(queue, right)\n            }\n        }\n    }\n\n    return answer\n} ",
      "title": "Binary Tree Right Side View",
      "url": "/submissions/detail/1087475497/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698662375,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "2.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087472492,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 637,
      "title_slug": "average-of-levels-in-binary-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc averageOfLevels(root *TreeNode) []float64 {\n    if root == nil {\n        return []float64{}\n    }\n    queue, answer := []*TreeNode{root}, []float64{}\n\n    for length := len(queue); length != 0; length = len(queue) {\n        av := 0\n        for i := 0; i \u003c length; i++ {\n            node := queue[0]\n            queue = queue[1:]\n            av += node.Val\n            if left := node.Left; left != nil {\n                queue = append(queue, left)\n            }\n            if right := node.Right; right != nil {\n                queue = append(queue, right)\n            }\n        }\n        answer = append(answer, float64(av) / float64(length))\n    }\n\n    return answer\n}",
      "title": "Average of Levels in Binary Tree",
      "url": "/submissions/detail/1087472492/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698661998,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "6.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087469134,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 637,
      "title_slug": "average-of-levels-in-binary-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc averageOfLevels(root *TreeNode) []float64 {\n    if root == nil {\n        return []float64{}\n    }\n    qCur, qNext, answer := []*TreeNode{root}, []*TreeNode{}, []float64{}\n\n    for len(qCur) != 0 {\n        av := 0\n        for _, node := range qCur {\n            av += node.Val\n            if left := node.Left; left != nil {\n                qNext = append(qNext, left)\n            }\n            if right := node.Right; right != nil {\n                qNext = append(qNext, right)\n            }\n        }\n        answer = append(answer, float64(av) / float64(len(qCur)))\n        qCur = qCur[:0]\n        qCur, qNext = qNext, qCur\n    }\n\n    return answer\n}",
      "title": "Average of Levels in Binary Tree",
      "url": "/submissions/detail/1087469134/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698661597,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "6.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087464010,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 199,
      "title_slug": "binary-tree-right-side-view",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc rightSideView(root *TreeNode) []int {\n    if root == nil {\n        return []int{}\n    }\n\n    q_cur, q_next, answer := []*TreeNode{root}, []*TreeNode{}, []int{}\n\n    for len(q_cur) != 0 {\n        for _, node := range q_cur {\n            if left := node.Left; left != nil {\n                q_next = append(q_next, left)\n            }\n            if right := node.Right; right != nil {\n                q_next = append(q_next, right)\n            }\n        }\n\n        answer = append(answer, q_cur[len(q_cur) - 1].Val)\n        q_cur = q_cur[:0]\n        q_cur, q_next = q_next, q_cur\n    }\n\n    return answer\n} ",
      "title": "Binary Tree Right Side View",
      "url": "/submissions/detail/1087464010/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698661028,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "2.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087463822,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 199,
      "title_slug": "binary-tree-right-side-view",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc rightSideView(root *TreeNode) []int {\n    if root == nil {\n        return []int{}\n    }\n\n    q_cur, q_next, answer := []*TreeNode{root}, []*TreeNode{}, []int{}\n\n    for len(q_cur) != 0 {\n        var last int\n        for _, node := range q_cur {\n            if left := node.Left; left != nil {\n                q_next = append(q_next, left)\n            }\n            if right := node.Right; right != nil {\n                q_next = append(q_next, right)\n            }\n            last = node.Val\n        }\n\n        answer = append(answer, last)\n        q_cur = q_cur[:0]\n        q_cur, q_next = q_next, q_cur\n    }\n\n    return answer\n} ",
      "title": "Binary Tree Right Side View",
      "url": "/submissions/detail/1087463822/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698661006,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "2.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087463750,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 199,
      "title_slug": "binary-tree-right-side-view",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc rightSideView(root *TreeNode) []int {\n    if root == nil {\n        return []int{}\n    }\n\n    q_cur, q_next, answer := []*TreeNode{root}, []*TreeNode{}, []int{}\n\n    for len(q_cur) != 0 {\n        var last int\n        for _, node := range q_cur {\n            if left := node.Left; left != nil {\n                q_next = append(q_next, left)\n            }\n            if right := node.Right; right != nil {\n                q_next = append(q_next, right)\n            }\n            last = node.Val\n        }\n\n        answer = append(answer, last)\n        q_cur = q_cur[:0]\n        q_cur, q_next = q_next, q_cur\n    }\n\n    return answer\n} ",
      "title": "Binary Tree Right Side View",
      "url": "/submissions/detail/1087463750/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698660998,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "2.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087461734,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 199,
      "title_slug": "binary-tree-right-side-view",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc rightSideView(root *TreeNode) []int {\n    if root == nil {\n        return []int{}\n    }\n\n    q_cur, q_next, answer := []*TreeNode{root}, []*TreeNode{}, []int{}\n\n    for length := len(q_cur); length \u003e 0; length = len(q_cur) {\n        for _, node := range q_cur {\n            if left := node.Left; left != nil {\n                q_next = append(q_next, left)\n            }\n            if right := node.Right; right != nil {\n                q_next = append(q_next, right)\n            }\n        }\n\n        answer = append(answer, q_cur[length - 1].Val)\n        q_cur = q_cur[:0]\n        q_cur, q_next = q_next, q_cur\n    }\n\n    return answer\n} ",
      "title": "Binary Tree Right Side View",
      "url": "/submissions/detail/1087461734/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698660780,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "2.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087430539,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 199,
      "title_slug": "binary-tree-right-side-view",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -\u003e List[int]:\n        if not root:\n            return []\n        \n        q_cur, q_next, answer = deque(), deque(), []\n        q_cur.append(root)\n\n        while q_cur:\n            last_val = None\n            \n            while q_cur:\n                node = q_cur.popleft()\n                last_val = node.val\n                if node.left:\n                    q_next.append(node.left)\n                if node.right:\n                    q_next.append(node.right)\n            \n            q_cur, q_next = q_next, q_cur\n            answer.append(last_val)\n    \n        return answer",
      "title": "Binary Tree Right Side View",
      "url": "/submissions/detail/1087430539/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698657424,
      "status": 10,
      "runtime": "32 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087429671,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 199,
      "title_slug": "binary-tree-right-side-view",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -\u003e List[int]:\n        if not root:\n            return []\n        \n        q_cur, q_next, answer = deque(), deque(), []\n        q_cur.append(root)\n\n        while q_cur:\n            last_val = None\n            \n            while q_cur:\n                node = q_cur.popleft()\n                last_val = node.val\n                if node.left:\n                    q_next.appendleft(node.left)\n                if node.right:\n                    q_next.appendleft(node.right)\n            \n            q_cur.clear()\n            q_cur, q_next = q_next, q_cur\n            answer.append(last_val)\n    \n        return answer",
      "title": "Binary Tree Right Side View",
      "url": "/submissions/detail/1087429671/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698657332,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "011110000000000001000100100110100100111010100100000011100000000110100000010000010011001110000111000101101010101000111000100000100000110010000100000010001000010001000000100000010000010110111000101011101000100100100000",
      "flag_type": 1
    },
    {
      "id": 1087427052,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 199,
      "title_slug": "binary-tree-right-side-view",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -\u003e List[int]:\n        if not root:\n            return []\n        cur, nxt = [root], []\n        answer = []\n        \n        while cur:\n            last_node = cur.pop()\n            if last_node.right:\n                nxt.append(last_node.right)\n            if last_node.left:\n                nxt.append(last_node.left)\n            answer.append(last_node.val)\n            \n            while cur:\n                node = cur.pop()\n                if node.right:\n                    nxt.append(node.right)\n                if node.left:\n                    nxt.append(node.left)\n            \n            cur.clear()\n            nxt.reverse()\n            cur, nxt = nxt, cur\n\n        return answer",
      "title": "Binary Tree Right Side View",
      "url": "/submissions/detail/1087427052/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698657034,
      "status": 10,
      "runtime": "48 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087422856,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 199,
      "title_slug": "binary-tree-right-side-view",
      "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -\u003e List[int]:\n        answer = []\n        while root:\n            answer.append(root.val)\n            root = root.right\n        return answer",
      "title": "Binary Tree Right Side View",
      "url": "/submissions/detail/1087422856/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698656526,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111101000100100010000000000011001100000100000000000010000000010000001100000001000000010000000000000000000100000010000000000000000000000000001000000110010110100001001000000011000100010000010000010000000000000000000001",
      "flag_type": 1
    },
    {
      "id": 1087389621,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1458,
      "title_slug": "sort-integers-by-the-number-of-1-bits",
      "code": "class Solution:\n    def sortByBits(self, arr: List[int]) -\u003e List[int]:\n        return tuple(num for num in sorted(arr, key=lambda num: (num.bit_count(), num)))",
      "title": "Sort Integers by The Number of 1 Bits",
      "url": "/submissions/detail/1087389621/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698652271,
      "status": 10,
      "runtime": "65 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1086938416,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 458,
      "title_slug": "poor-pigs",
      "code": "class Solution:\n    def poorPigs(self, buckets: int, a: int, b: int) -\u003e int:\n        pigs = 0\n        while (b / a + 1) ** pigs \u003c buckets:\n            pigs += 1\n\n        return pigs ",
      "title": "Poor Pigs",
      "url": "/submissions/detail/1086938416/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698597392,
      "status": 10,
      "runtime": "30 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1088437588,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 98,
      "title_slug": "validate-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isValidBST(root *TreeNode) bool {\n    if root == nil {\n        return false\n    }\n    queue := []*TreeNode{root}\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            left, right, val := node.Left, node.Right, node.Val\n            if left == nil \u0026\u0026 right == nil {\n                continue\n            }\n            if left == nil || right == nil || left.Val \u003e= val || right.Val \u003c= val {\n                return false\n            }\n            queue = append(queue, left, right)\n        }\n        queue = queue[length:]\n    }\n    return true\n}",
      "title": "Validate Binary Search Tree",
      "url": "/submissions/detail/1088437588/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698766226,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111110111001100111010000000000000000001101101111110011011101111110101110110111101",
      "flag_type": 1
    },
    {
      "id": 1088435295,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 98,
      "title_slug": "validate-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isValidBST(root *TreeNode) bool {\n    if root == nil {\n        return false\n    }\n    queue := []*TreeNode{root}\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            left, right, val := node.Left, node.Right, node.Val\n            if left != nil \u0026\u0026 left.Val \u003e= val {\n                return false\n            } else if left != nil {\n                queue = append(queue, left)\n            }\n            if right != nil \u0026\u0026 right.Val \u003c= val {\n                return false\n            } else if right != nil {\n                queue = append(queue, right)\n            }\n        }\n        queue = queue[length:]\n    }\n    return true\n}",
      "title": "Validate Binary Search Tree",
      "url": "/submissions/detail/1088435295/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698766019,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111100100100111111111111111111111111111111111111111111111111111110111110111",
      "flag_type": 1
    },
    {
      "id": 1088429621,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 954,
      "title_slug": "maximum-sum-circular-subarray",
      "code": "func max(a, b int) int {\n    if a \u003e b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a \u003c b {\n        return a\n    }\n    return b\n}\n\nfunc maxSubarraySumCircular(nums []int) int {\n    var (\n        max_sum_ending_here = 0\n        min_sum_ending_here = 0\n        max_sum_so_far = math.MinInt\n        min_sum_so_far = math.MaxInt\n        total = 0\n    )\n    for i := 0; i \u003c len(nums); i++ {\n        num := nums[i]\n        total += num\n        max_sum_ending_here += num\n        min_sum_ending_here += num\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n        min_sum_so_far = min(min_sum_so_far, min_sum_ending_here)\n        max_sum_ending_here = max(max_sum_ending_here, 0)\n        min_sum_ending_here = min(min_sum_ending_here, 0)\n    }\n    if max_sum_so_far \u003c 0 {\n        return max_sum_so_far\n    }\n    return max(max_sum_so_far, total - min_sum_so_far)\n}",
      "title": "Maximum Sum Circular Subarray",
      "url": "/submissions/detail/1088429621/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698765514,
      "status": 10,
      "runtime": "55 ms",
      "is_pending": "Not Pending",
      "memory": "7.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1088429101,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 954,
      "title_slug": "maximum-sum-circular-subarray",
      "code": "func max(a, b int) int {\n    if a \u003e b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a \u003c b {\n        return a\n    }\n    return b\n}\n\nfunc maxSubarraySumCircular(nums []int) int {\n    var (\n        max_sum_ending_here = 0\n        min_sum_ending_here = 0\n        max_sum_so_far = math.MinInt\n        min_sum_so_far = math.MaxInt\n        total = 0\n    )\n    for i := 0; i \u003c len(nums); i++ {\n        num := nums[i]\n        total += num\n        max_sum_ending_here = max(max_sum_ending_here + num, 0)\n        min_sum_ending_here = min(min_sum_ending_here + num, 0)\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n        min_sum_so_far = min(min_sum_so_far, min_sum_ending_here)\n        \n    }\n    if max_sum_so_far \u003c 0 {\n        return max_sum_so_far\n    }\n    return max(max_sum_so_far, total - min_sum_so_far)\n}",
      "title": "Maximum Sum Circular Subarray",
      "url": "/submissions/detail/1088429101/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698765468,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110110111110111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011",
      "flag_type": 1
    },
    {
      "id": 1088427588,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 954,
      "title_slug": "maximum-sum-circular-subarray",
      "code": "func max(a, b int) int {\n    if a \u003e b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a \u003c b {\n        return a\n    }\n    return b\n}\n\nfunc maxSubarraySumCircular(nums []int) int {\n    var (\n        max_sum_ending_here = 0\n        min_sum_ending_here = 0\n        max_sum_so_far = math.MinInt\n        min_sum_so_far = math.MaxInt\n        total = 0\n    )\n    for i := 0; i \u003c len(nums); i++ {\n        total += nums[i]\n        max_sum_ending_here += nums[i]\n        min_sum_ending_here += nums[i]\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n        min_sum_so_far = min(min_sum_so_far, min_sum_ending_here)\n        max_sum_ending_here = max(max_sum_ending_here, 0)\n        min_sum_ending_here = min(min_sum_ending_here, 0)\n    }\n    if max_sum_so_far \u003c 0 {\n        return max_sum_so_far\n    }\n    return max(max_sum_so_far, total - min_sum_so_far)\n}",
      "title": "Maximum Sum Circular Subarray",
      "url": "/submissions/detail/1088427588/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698765327,
      "status": 10,
      "runtime": "49 ms",
      "is_pending": "Not Pending",
      "memory": "7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1088426545,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 954,
      "title_slug": "maximum-sum-circular-subarray",
      "code": "func max(a, b int) int {\n    if a \u003e b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a \u003c b {\n        return a\n    }\n    return b\n}\n\nfunc maxSubarraySumCircular(nums []int) int {\n    var max_sum_ending_here int = 0\n    var min_sum_ending_here int = 0\n    var max_sum_so_far int = math.MinInt\n    var min_sum_so_far int = math.MaxInt\n    var total = 0\n    for i := 0; i \u003c len(nums); i++ {\n        total += nums[i]\n        max_sum_ending_here += nums[i]\n        min_sum_ending_here += nums[i]\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n        min_sum_so_far = min(min_sum_so_far, min_sum_ending_here)\n        max_sum_ending_here = max(max_sum_ending_here, 0)\n        min_sum_ending_here = min(min_sum_ending_here, 0)\n    }\n    if max_sum_so_far \u003c 0 {\n        return max_sum_so_far\n    }\n    return max(max_sum_so_far, total - min_sum_so_far)\n}",
      "title": "Maximum Sum Circular Subarray",
      "url": "/submissions/detail/1088426545/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698765236,
      "status": 10,
      "runtime": "47 ms",
      "is_pending": "Not Pending",
      "memory": "6.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1088426195,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 954,
      "title_slug": "maximum-sum-circular-subarray",
      "code": "func maxSubarraySumCircular(nums []int) int {\n    ans := nums[0]\n    n := len(nums)\n    for i := 0; i \u003c len(nums); i++ {\n        currMax := nums[i]\n        j := i + 1\n        for j % n != i {\n            currMax = max(currMax+nums[j % n], nums[j % n])\n            ans = max(ans, currMax)\n            j++\n        }\n    }\n    return ans\n}\n\nfunc max(a, b int) int {\n    if a \u003e b {\n        return a\n    }\n    return b\n}",
      "title": "Maximum Sum Circular Subarray",
      "url": "/submissions/detail/1088426195/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698765204,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000",
      "flag_type": 1
    },
    {
      "id": 1088415053,
      "status_display": "Time Limit Exceeded",
      "lang": "golang",
      "question_id": 954,
      "title_slug": "maximum-sum-circular-subarray",
      "code": "func maxSubarraySumCircular(nums []int) int {\n    length := len(nums)\n    var maxSumOverall *int\n\n    for i := 0; i \u003c length; i++ {\n        sum, maxSum := nums[i], nums[i]\n        for j := 1; j \u003c length; j++ {\n            sum += nums[(i + j) % length]\n            if sum \u003e maxSum {\n                maxSum = sum\n            }\n        }\n        if maxSumOverall == nil {\n            maxSumOverall = \u0026maxSum\n        } else if maxSum \u003e *maxSumOverall {\n            *maxSumOverall = maxSum\n        }\n    } \n    return *maxSumOverall\n}",
      "title": "Maximum Sum Circular Subarray",
      "url": "/submissions/detail/1088415053/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698764203,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000",
      "flag_type": 1
    },
    {
      "id": 1088205506,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 2519,
      "title_slug": "find-the-original-array-of-prefix-xor",
      "code": "func findArray(pref []int) []int {\n    prev := pref[0]\n    for i := 1; i \u003c len(pref); i++ {\n        cur := pref[i]\n        prev, pref[i] = cur, prev ^ cur \n    }\n    return pref\n}",
      "title": "Find The Original Array of Prefix Xor",
      "url": "/submissions/detail/1088205506/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698741218,
      "status": 10,
      "runtime": "98 ms",
      "is_pending": "Not Pending",
      "memory": "8.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1088205030,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 2519,
      "title_slug": "find-the-original-array-of-prefix-xor",
      "code": "func findArray(pref []int) []int {\n    prev := pref[0]\n    for i := 1; i \u003c len(pref); i++ {\n        prev, pref[i] = pref[i], prev ^ pref[i] \n    }\n    return pref\n}",
      "title": "Find The Original Array of Prefix Xor",
      "url": "/submissions/detail/1088205030/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698741160,
      "status": 10,
      "runtime": "104 ms",
      "is_pending": "Not Pending",
      "memory": "8.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087560136,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 42,
      "title_slug": "trapping-rain-water",
      "code": "func trap(height []int) int {\n    left, right := 0, len(height) - 1\n    res := 0\n    leftMax, rightMax := 0, 0\n\n    for left \u003c right {\n        if height[left] \u003c height[right] {\n            if height[left] \u003e= leftMax {\n                leftMax = height[left]\n            } else {\n                res += (leftMax-height[left])\n            }\n            left++\n        } else {\n            if height[right] \u003e= rightMax {\n                rightMax = height[right]\n            } else {\n                res += (rightMax-height[right])\n            }\n            right--\n        }\n    }\n\n    return res\n}",
      "title": "Trapping Rain Water",
      "url": "/submissions/detail/1087560136/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698672510,
      "status": 10,
      "runtime": "6 ms",
      "is_pending": "Not Pending",
      "memory": "5.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087553185,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 34,
      "title_slug": "find-first-and-last-position-of-element-in-sorted-array",
      "code": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -\u003e List[int]:\n        def binary_search(nums, target, left):\n            low, high = 0, len(nums) - 1\n            index = -1\n            while low \u003c= high:\n                mid = (low + high) // 2\n                if nums[mid] == target:\n                    index = mid\n                    if left:\n                        high = mid - 1\n                    else:\n                        low = mid + 1\n                elif nums[mid] \u003c target:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n            return index\n\n        left_index = binary_search(nums, target, left=True)\n        right_index = binary_search(nums, target, left=False)\n\n        return [left_index, right_index]",
      "title": "Find First and Last Position of Element in Sorted Array",
      "url": "/submissions/detail/1087553185/",
      "lang_name": "Python3",
      "time": "3 months, 1 week",
      "timestamp": 1698671798,
      "status": 10,
      "runtime": "82 ms",
      "is_pending": "Not Pending",
      "memory": "17.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087553067,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 34,
      "title_slug": "find-first-and-last-position-of-element-in-sorted-array",
      "code": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -\u003e List[int]:\n        def binary_search(nums, target, left):\n            low, high = 0, len(nums) - 1\n            index = -1\n            while low \u003c= high:\n                mid = (low + high) // 2\n                if nums[mid] == target:\n                    index = mid\n                    if left:\n                        high = mid - 1\n                    else:\n                        low = mid + 1\n                elif nums[mid] \u003c target:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n            return index\n\n        left_index = binary_search(nums, target, left=True)\n        right_index = binary_search(nums, target, left=False)\n\n        return [left_index, right_index]",
      "title": "Find First and Last Position of Element in Sorted Array",
      "url": "/submissions/detail/1087553067/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698671785,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1087545728,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 433,
      "title_slug": "minimum-genetic-mutation",
      "code": "func minMutation(startGene string, endGene string, bank []string) int {\n    if startGene == endGene {\n        return 0\n    }\n\n    bank = append(bank, startGene)\n\n    isMut := func (gene1 string, gene2 string) bool {\n        foundDiff := false\n        for i := 0; i \u003c len(gene1); i++ {\n            if gene1[i] == gene2[i] {\n                continue\n            }\n            if foundDiff {\n                return false\n            }\n            foundDiff = true\n        } \n        return foundDiff\n    }\n\n    graph := map[string][]string{}\n\n    for i, gene1 := range bank {\n        for _, gene2 := range bank[i+1:] {\n            if !isMut(gene1, gene2) {\n                continue\n            }\n            if _, ok := graph[gene1]; !ok {\n                graph[gene1] = []string{}\n            }\n            if _, ok := graph[gene2]; !ok {\n                graph[gene2] = []string{}\n            }\n            graph[gene1] = append(graph[gene1], gene2)\n            graph[gene2] = append(graph[gene2], gene1)\n        }\n    }\n\n    queue, ok := graph[endGene]\n    if !ok {\n        return -1\n    }\n    delete(graph, endGene)\n    num := 1\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            gene := queue[i]\n            muts, ok := graph[gene]\n            if !ok {\n                continue\n            }\n            if gene == startGene {\n                return num \n            }\n            delete(graph, gene)\n            queue = append(queue, muts...)\n        }\n        num += 1\n        queue = queue[length:]\n    }\n\n    return -1\n}",
      "title": "Minimum Genetic Mutation",
      "url": "/submissions/detail/1087545728/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698670998,
      "status": 10,
      "runtime": "1 ms",
      "is_pending": "Not Pending",
      "memory": "2 MB",
      "compare_result": "111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087543163,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 433,
      "title_slug": "minimum-genetic-mutation",
      "code": "func minMutation(startGene string, endGene string, bank []string) int {\n    if startGene == endGene {\n        return 0\n    }\n\n    bank = append(bank, startGene)\n\n    isMut := func (gene1 string, gene2 string) bool {\n        foundDiff := false\n        for i := 0; i \u003c len(gene1); i++ {\n            if gene1[i] == gene2[i] {\n                continue\n            }\n            if foundDiff {\n                return false\n            }\n            foundDiff = true\n        } \n        return foundDiff\n    }\n\n    graph := map[string][]string{}\n\n    for i, gene1 := range bank {\n        for _, gene2 := range bank[i+1:] {\n            if !isMut(gene1, gene2) {\n                continue\n            }\n            if _, ok := graph[gene1]; !ok {\n                graph[gene1] = []string{}\n            }\n            if _, ok := graph[gene2]; !ok {\n                graph[gene2] = []string{}\n            }\n            graph[gene1] = append(graph[gene1], gene2)\n            graph[gene2] = append(graph[gene2], gene1)\n        }\n    }\n\n    queue, ok := graph[endGene]\n    if !ok {\n        return -1\n    }\n    visited := map[string]struct{}{endGene: struct{}{}}\n    num := 1\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            gene := queue[i]\n            if _, ok := visited[gene]; ok {\n                continue\n            }\n            if gene == startGene {\n                return num \n            }\n            visited[gene] = struct{}{}\n            queue = append(queue, graph[gene]...)\n        }\n        num += 1\n        queue = queue[length:]\n    }\n\n    return -1\n}",
      "title": "Minimum Genetic Mutation",
      "url": "/submissions/detail/1087543163/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698670720,
      "status": 10,
      "runtime": "1 ms",
      "is_pending": "Not Pending",
      "memory": "2 MB",
      "compare_result": "111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087501208,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 103,
      "title_slug": "binary-tree-zigzag-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\n    if root == nil {\n        return [][]int{}\n    }\n\n    queue, answer := []*TreeNode{root}, [][]int{}\n    ltr := true\n\n    for length := len(queue); length != 0; length = len(queue) {\n        answerRow := []int{}\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if node.Left != nil {\n                queue = append(queue, node.Left)\n            }\n            if node.Right != nil {\n                queue = append(queue, node.Right)\n            }\n            answerRow = append(answerRow, node.Val)\n        }\n        if !ltr {\n            slices.Reverse(answerRow)\n        }\n        queue = queue[length:]\n        ltr = !ltr\n        answer = append(answer, answerRow)\n    }\n\n    return answer\n}",
      "title": "Binary Tree Zigzag Level Order Traversal",
      "url": "/submissions/detail/1087501208/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698665566,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "2.6 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087500671,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 103,
      "title_slug": "binary-tree-zigzag-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\n    if root == nil {\n        return [][]int{}\n    }\n\n    queue, answer := []*TreeNode{root}, [][]int{}\n    ltr := true\n\n    for length := len(queue); length != 0; length = len(queue) {\n        answerRow := []int{}\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if node.Left != nil {\n                queue = append(queue, node.Left)\n            }\n            if node.Right != nil {\n                queue = append(queue, node.Right)\n            }\n            if ltr {\n                answerRow = append(answerRow, node.Val)\n            } else {\n                answerRow = append([]int{node.Val}, answerRow...)\n            }\n        }\n        queue = queue[length:]\n        ltr = !ltr\n        answer = append(answer, answerRow)\n    }\n\n    return answer\n}",
      "title": "Binary Tree Zigzag Level Order Traversal",
      "url": "/submissions/detail/1087500671/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698665495,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "2.9 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1087500308,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 103,
      "title_slug": "binary-tree-zigzag-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\n    if root == nil {\n        return [][]int{}\n    }\n\n    queue, answer := []*TreeNode{root}, [][]int{}\n    ltr := true\n\n    for length := len(queue); length != 0; length = len(queue) {\n        answerRow := []int{}\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if node.Left != nil {\n                queue = append(queue, node.Left)\n            }\n            if node.Right != nil {\n                queue = append(queue, node.Right)\n            }\n            if ltr {\n                answerRow = append(answerRow, node.Val)\n            } else {\n                answerRow = append([]int{node.Val}, answerRow...)\n            }\n        }\n        queue = queue[length:]\n        leftToRight = !leftToRight\n        answer = append(answer, answerRow)\n    }\n\n    return answer\n}",
      "title": "Binary Tree Zigzag Level Order Traversal",
      "url": "/submissions/detail/1087500308/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698665446,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1087499962,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 103,
      "title_slug": "binary-tree-zigzag-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\n    if root == nil {\n        return [][]int{}\n    }\n\n    queue, answer := []*TreeNode{root}, [][]int{}\n    ltr := true\n\n    for length := len(queue); length != 0; length = len(queue) {\n        answerRow := []int{}\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if node.Left != nil {\n                queue = append(queue, node.Left)\n            }\n            if node.Right != nil {\n                queue = append(queue, node.Right)\n            }\n            if ltr {\n                queue = append(queue, node.Val)\n            } else {\n                queue = append([]int{node.Val}, queue)\n            }\n        }\n        queue = queue[length:]\n        leftToRight = !leftToRight\n        answer = append(answer, answerRow)\n    }\n\n    return answer\n}",
      "title": "Binary Tree Zigzag Level Order Traversal",
      "url": "/submissions/detail/1087499962/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698665405,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1087492568,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 103,
      "title_slug": "binary-tree-zigzag-level-order-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\n    if root == nil {\n        return [][]int{}\n    }\n\n    queue, answer := []*TreeNode{root}, [][]int{}\n    leftToRight := true\n\n    for length := len(queue); length != 0; length = len(queue) {\n        answerRow := []int{}\n\n        for i := 0; i \u003c length; i++ {\n            node := queue[0]\n            queue = queue[1:]\n\n            answerRow = append(answerRow, node.Val)\n            if left := node.Left; left != nil {\n                queue = append(queue, left)\n            }\n            if right := node.Right; right != nil {\n                queue = append(queue, right)\n            }\n        }\n        if !leftToRight {\n            slices.Reverse(answerRow)\n        }\n        leftToRight = !leftToRight\n        answer = append(answer, answerRow)\n    }\n\n    return answer\n}",
      "title": "Binary Tree Zigzag Level Order Traversal",
      "url": "/submissions/detail/1087492568/",
      "lang_name": "Go",
      "time": "3 months, 1 week",
      "timestamp": 1698664487,
      "status": 10,
      "runtime": "1 ms",
      "is_pending": "Not Pending",
      "memory": "2.5 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1090491847,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 1552,
      "title_slug": "build-an-array-with-stack-operations",
      "code": "func buildArray(target []int, n int) []string {\n    ops := []string{}\n    length := len(target)\n    matchNext := 0\n    for i := 1; i \u003c= n; i++ {\n        if matchNext == length {\n            break\n        }\n        ops = append(ops, \"Push\")\n        if i == target[matchNext] {\n            targetIdx += 1\n        } else {\n            ops = append(ops, \"Pop\")\n        }\n    }\n    return ops\n}",
      "title": "Build an Array With Stack Operations",
      "url": "/submissions/detail/1090491847/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699002762,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1089829638,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 148,
      "title_slug": "sort-list",
      "code": "\nfunc sortList(head *ListNode) *ListNode {\n\tif head == nil || head.Next == nil {\n\t\treturn head\n\t}\n\tif head.Next.Next == nil {\n\t\ta := head\n\t\tb := head.Next\n\t\tif a.Val \u003c= b.Val {\n\t\t\ta.Next = b\n\t\t\tb.Next = nil\n\t\t\treturn a\n\t\t} else {\n\t\t\tb.Next = a\n\t\t\ta.Next = nil\n\t\t\treturn b\n\t\t}\n\t}\n\tslow := head\n\tfast := head\n\tfor fast != nil \u0026\u0026 fast.Next != nil {\n\t\tslow = slow.Next\n\t\tfast = fast.Next.Next\n\t}\n\tnextList := slow.Next\n\tslow.Next = nil\n\tlist1 := sortList(head)\n\tlist2 := sortList(nextList)\n\tdummy := \u0026ListNode{Val: -1, Next: nil}\n\tit := dummy\n\tfor list1 != nil \u0026\u0026 list2 != nil {\n\t\tif list1.Val \u003c= list2.Val {\n\t\t\tit.Next = list1\n\t\t\tlist1 = list1.Next\n\t\t} else {\n\t\t\tit.Next = list2\n\t\t\tlist2 = list2.Next\n\t\t}\n\t\tit = it.Next\n\t}\n\tif list1 != nil {\n\t\tit.Next = list1\n\t} else {\n\t\tit.Next = list2\n\t}\n\treturn dummy.Next\n}\n",
      "title": "Sort List",
      "url": "/submissions/detail/1089829638/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698924814,
      "status": 10,
      "runtime": "53 ms",
      "is_pending": "Not Pending",
      "memory": "7.4 MB",
      "compare_result": "111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1089803621,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 2347,
      "title_slug": "count-nodes-equal-to-average-of-subtree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc averageOfSubtree(root *TreeNode) int {\n    _, _, answer := getAverage(root)\n    return answer\n}\n\nfunc getAverage(root *TreeNode) (int, int, int) {\n    if root == nil {\n        return 0, 0, 0\n    }\n    sum, count, validNodes := root.Val, 1, 0\n    leftSum, leftCount, leftValidNodes := getAverage(root.Left)\n    rightSum, rightCount, rightValidNodes := getAverage(root.Right)\n    validNodes += leftValidNodes + rightValidNodes\n    sum += leftSum + rightSum\n    count += leftCount + rightCount\n    if sum / count == root.Val {\n        validNodes += 1\n    }\n    return sum, count, validNodes\n}",
      "title": "Count Nodes Equal to Average of Subtree",
      "url": "/submissions/detail/1089803621/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698921165,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "4.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1089792920,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 2347,
      "title_slug": "count-nodes-equal-to-average-of-subtree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc averageOfSubtree(root *TreeNode) int {\n    _, answer := getAverage(root)\n    return answer\n}\n\nfunc getAverage(root *TreeNode) (int, int) {\n    if root == nil {\n        return 0, 0\n    }\n    average, validNodes := root.Val, 0\n    if root.Left != nil {\n        leftAverage, leftValidNodes := getAverage(root.Left)\n        validNodes += leftValidNodes\n        average = (average + leftAverage) / 2\n    }\n    if root.Right != nil {\n        rightAverage, rightValidNodes := getAverage(root.Right)\n        validNodes += rightValidNodes\n        average = (average + rightAverage) / 2\n    }\n    if average == root.Val {\n        validNodes += 1\n    }\n    return average, validNodes\n}",
      "title": "Count Nodes Equal to Average of Subtree",
      "url": "/submissions/detail/1089792920/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698919828,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111011111111101111111111101111111111001111110111101111010101101101011100111010101011110001101010001011101000010010000000000000111100000",
      "flag_type": 1
    },
    {
      "id": 1089106155,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 129,
      "title_slug": "sum-root-to-leaf-numbers",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\ntype queueItem struct {\n    node *TreeNode\n    sum int\n}\nfunc sumNumbers(root *TreeNode) int {\n    if root == nil {\n        return 0\n    }\n    queue := []queueItem{queueItem{root, 0}}\n    sum := 0\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            item := queue[i]\n            if item.node == nil {\n                continue\n            }\n            left, right, newVal := item.node.Left, item.node.Right, item.node.Val + item.sum * 10\n            if left == nil \u0026\u0026 right == nil {\n                sum += newVal\n            } else {\n                queue = append(queue, queueItem{left, newVal}, queueItem{right, newVal})\n            }\n        }\n        queue = queue[length:]\n    }\n    return sum\n}",
      "title": "Sum Root to Leaf Numbers",
      "url": "/submissions/detail/1089106155/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698843559,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "2.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1089101627,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 129,
      "title_slug": "sum-root-to-leaf-numbers",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc sumNumbers(root *TreeNode) int {\n    return getSum(root, 0)\n}\n\nfunc getSum(root *TreeNode, parentVal int) int {\n    if root == nil {\n        return 0\n    }\n    newVal := root.Val + parentVal * 10\n    if root.Left == nil \u0026\u0026 root.Right == nil {\n        return newVal\n    }\n    return getSum(root.Left, newVal) + getSum(root.Right, newVal)\n}",
      "title": "Sum Root to Leaf Numbers",
      "url": "/submissions/detail/1089101627/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698843078,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "2.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1089076574,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 236,
      "title_slug": "lowest-common-ancestor-of-a-binary-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n    if root == nil {\n\t\treturn nil\n\t}\n    if root == p || root == q {\n\t\treturn root\n\t}\n    left, right := lowestCommonAncestor(root.Left, p, q), lowestCommonAncestor(root.Right, p, q)\n    if left != nil \u0026\u0026 right != nil {\n\t\treturn root\n\t}\n\tif left != nil {\n\t\treturn left\n\t}\n\treturn right\n}",
      "title": "Lowest Common Ancestor of a Binary Tree",
      "url": "/submissions/detail/1089076574/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698840113,
      "status": 10,
      "runtime": "6 ms",
      "is_pending": "Not Pending",
      "memory": "7 MB",
      "compare_result": "1111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1089075769,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 236,
      "title_slug": "lowest-common-ancestor-of-a-binary-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n    isAncestorMap := map[int][2]bool{}\n    dfs(root, p, q, isAncestorMap)\n    isAncestor := func (node *TreeNode) bool {\n        if node == nil {\n            return false\n        }\n        hasNodes := isAncestorMap[node.Val]\n        return hasNodes[0] \u0026\u0026 hasNodes[1]\n    }\n\n    for {\n        left, right := root.Left, root.Right\n        if isAncestor(left) {\n            root = left\n        } else if isAncestor(right) {\n            root = right\n        } else {\n            break\n        }\n    }\n    return root\n}\n\nfunc dfs(root, p, q *TreeNode, isAncestorMap map[int][2]bool) (bool, bool)  {\n    if root == nil {\n        return false, false\n    }\n    hasPLeft, hasQLeft := dfs(root.Left, p, q, isAncestorMap)\n    hasPRight, hasQRight := dfs(root.Right, p, q, isAncestorMap)\n    hasP, hasQ := hasPLeft || hasPRight, hasQLeft || hasQRight\n    if root == p {\n        hasP = true\n    }\n    if root == q {\n        hasQ = true\n    }\n    isAncestorMap[root.Val] = [2]bool{hasP, hasQ}\n    return hasP, hasQ\n}",
      "title": "Lowest Common Ancestor of a Binary Tree",
      "url": "/submissions/detail/1089075769/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698840005,
      "status": 10,
      "runtime": "15 ms",
      "is_pending": "Not Pending",
      "memory": "8.1 MB",
      "compare_result": "1111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1089066017,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 236,
      "title_slug": "lowest-common-ancestor-of-a-binary-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n    isAncestorMap := map[int][2]bool{}\n    dfs(root, p, q, isAncestorMap)\n\n    for {\n        left, right := root.Left, root.Right\n        if left != nil {\n            isAncestor := isAncestorMap[left.Val]\n            if isAncestor[0] \u0026\u0026 isAncestor[1] {\n                root = left\n                continue\n            }\n        }\n        if right != nil {\n            isAncestor := isAncestorMap[right.Val]\n            if isAncestor[0] \u0026\u0026 isAncestor[1] {\n                root = right\n                continue\n            }\n        }\n        break\n    }\n    return root\n}\n\nfunc dfs(root, p, q *TreeNode, isAncestorMap map[int][2]bool) (bool, bool)  {\n    if root == p {\n        return true, false\n    }\n    if root == q {\n        return false, true\n    }\n    hasLeft, _ := dfs(root.Left, p, q, isAncestorMap)\n    _, hasRight := dfs(root.Right, p, q, isAncestorMap)\n    isAncestorMap[root.Val] = [2]bool{hasLeft, hasRight}\n    return hasLeft, hasRight\n}",
      "title": "Lowest Common Ancestor of a Binary Tree",
      "url": "/submissions/detail/1089066017/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698838806,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1089004448,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 501,
      "title_slug": "find-mode-in-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findMode(root *TreeNode) []int {\n    if root == nil {\n        return []int{}\n    }\n    counter := map[int]int{}\n    queue := []*TreeNode{root}\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if node == nil {\n                continue\n            }\n            left, right, val := node.Left, node.Right, node.Val\n            if _, ok := counter[val]; ok {\n                counter[val] +=  1\n            } else {\n                counter[val] = 1\n            }\n            queue = append(queue, left, right)\n        }\n        queue = queue[length:]\n    }\n    maxCount, answer := 0, []int{}\n    for key, count := range counter {\n        if count \u003c maxCount {\n            continue\n        }\n        if count \u003e maxCount {\n            answer = answer[:0]\n            maxCount = count\n        }\n        answer = append(answer, key)\n    }\n    return answer\n}",
      "title": "Find Mode in Binary Search Tree",
      "url": "/submissions/detail/1089004448/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698831245,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "6.8 MB",
      "compare_result": "11111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1089003627,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 501,
      "title_slug": "find-mode-in-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findMode(root *TreeNode) []int {\n    if root == nil {\n        return []int{}\n    }\n    counter := map[int]int{}\n    queue := []*TreeNode{root}\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if node == nil {\n                continue\n            }\n            if val, ok := counter[node.Val]; ok {\n                counter[node.Val] = val + 1\n            } else {\n                counter[node.Val] = 1\n            }\n            queue = append(queue, node.Left, node.Right)\n        }\n        queue = queue[length:]\n    }\n    maxCount, answer := 0, []int{}\n    for key, count := range counter {\n        if count \u003c maxCount {\n            continue\n        }\n        if count \u003e maxCount {\n            answer = answer[:0]\n            maxCount = count\n        }\n        answer = append(answer, key)\n    }\n    return answer\n}",
      "title": "Find Mode in Binary Search Tree",
      "url": "/submissions/detail/1089003627/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698831146,
      "status": 10,
      "runtime": "9 ms",
      "is_pending": "Not Pending",
      "memory": "6.6 MB",
      "compare_result": "11111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1089001471,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 501,
      "title_slug": "find-mode-in-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findMode(root *TreeNode) []int {\n    if root == nil {\n        return []int{}\n    }\n    counter := map[int]int{}\n    dfs(root, counter)\n    maxCount, answer := 0, []int{}\n    for key, count := range counter {\n        if count \u003c maxCount {\n            continue\n        }\n        if count \u003e maxCount {\n            answer = answer[:0]\n            maxCount = count\n        }\n        answer = append(answer, key)\n    }\n    return answer\n}\n\nfunc dfs(root *TreeNode, counter map[int]int) {\n    if root == nil {\n        return\n    }\n    if _, ok := counter[root.Val]; ok {\n        counter[root.Val] += 1\n    } else {\n        counter[root.Val] = 1\n    }\n    dfs(root.Left, counter)\n    dfs(root.Right, counter)\n}",
      "title": "Find Mode in Binary Search Tree",
      "url": "/submissions/detail/1089001471/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698830896,
      "status": 10,
      "runtime": "12 ms",
      "is_pending": "Not Pending",
      "memory": "6.6 MB",
      "compare_result": "11111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1088997757,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 501,
      "title_slug": "find-mode-in-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findMode(root *TreeNode) []int {\n    if root == nil {\n        return []int{}\n    }\n    counter := map[int]int{}\n    queue := []*TreeNode{root}\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if _, ok := counter[node.Val]; ok {\n                counter[node.Val] += 1\n            } else {\n                counter[node.Val] = 1\n            }\n            if node.Left != nil {\n                queue = append(queue, node.Left)\n            }\n            if node.Right != nil {\n                queue = append(queue, node.Right)\n            }\n        }\n        queue = queue[length:]\n    }\n    maxCount, answer := 0, []int{}\n    for key, count := range counter {\n        if count \u003c maxCount {\n            continue\n        }\n        if count \u003e maxCount {\n            answer = answer[:0]\n            maxCount = count\n        }\n        answer = append(answer, key)\n    }\n    return answer\n}",
      "title": "Find Mode in Binary Search Tree",
      "url": "/submissions/detail/1088997757/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698830457,
      "status": 10,
      "runtime": "14 ms",
      "is_pending": "Not Pending",
      "memory": "7.1 MB",
      "compare_result": "11111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1088996433,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 501,
      "title_slug": "find-mode-in-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findMode(root *TreeNode) []int {\n    if root == nil {\n        return []int{}\n    }\n    counter := map[int]int{}\n    queue := []*TreeNode{root}\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if _, ok := counter[node.Val]; ok {\n                counter[node.Val] = 1\n            } else {\n                counter[node.Val] += 1\n            }\n            if node.Left != nil {\n                queue = append(queue, node.Left)\n            }\n            if node.Right != nil {\n                queue = append(queue, node.Right)\n            }\n        }\n        queue = queue[length:]\n    }\n    maxCount, modes := 0, []int{}\n    for key, count := range counter {\n        if count \u003c maxCount {\n            continue\n        }\n        if count \u003e maxCount {\n            answer = answer[:0] \n            maxCount = count\n        }\n        answer = append(answer, key)\n    }\n    return answer\n}",
      "title": "Find Mode in Binary Search Tree",
      "url": "/submissions/detail/1088996433/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698830297,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1088466442,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 98,
      "title_slug": "validate-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\ntype queueItem struct  {\n    node *TreeNode\n    max *int\n    min *int\n}\n\nfunc isValidBST(root *TreeNode) bool {\n    queue := []queueItem{queueItem{root, nil, nil}}\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            item := queue[i]\n            if item.node == nil {\n                continue\n            }\n            node := item.node\n            if (item.max != nil \u0026\u0026 node.Val \u003e= *item.max) || (item.min != nil \u0026\u0026 node.Val \u003c= *item.min) {\n                return false\n            }\n            queue = append(\n                queue, \n                queueItem{node.Left, \u0026node.Val, item.min}, \n                queueItem{node.Right, item.max, \u0026node.Val},\n            )\n        }\n        queue = queue[length:]\n    }\n    return true\n}",
      "title": "Validate Binary Search Tree",
      "url": "/submissions/detail/1088466442/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698768725,
      "status": 10,
      "runtime": "9 ms",
      "is_pending": "Not Pending",
      "memory": "6.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1088466156,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 98,
      "title_slug": "validate-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\ntype queueItem struct  {\n    node *TreeNode\n    max *int\n    min *int\n}\n\nfunc isValidBST(root *TreeNode) bool {\n    queue := []queueItem{queueItem{root, nil, nil}}\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            item := queue[i]\n            if item.node == nil {\n                continue\n            }\n            node := item.node\n            if (item.max != nil \u0026\u0026 node.Val \u003e= *item.max) || (item.min != nil \u0026\u0026 node.Val \u003c= *item.min) {\n                return false\n            }\n            queue = append(\n                queue, \n                queueItem{node.Left, \u0026node.Val, item.min}, \n                queueItem{node.Right, item.max, \u0026node.Val},\n            )\n        }\n        queue = queue[length:]\n    }\n    return true\n}",
      "title": "Validate Binary Search Tree",
      "url": "/submissions/detail/1088466156/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698768701,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "6.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1088457217,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 98,
      "title_slug": "validate-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isValidBST(root *TreeNode) bool {\n    if root == nil {\n        return false\n    }\n    return dfs(root.Left, \u0026root.Val, nil) \u0026\u0026 dfs(root.Right, nil, \u0026root.Val)\n}\n\nfunc dfs(root *TreeNode, max *int, min *int) bool {\n    if root == nil {\n        return true\n    }\n    if (max != nil \u0026\u0026 root.Val \u003e= *max) || (min != nil \u0026\u0026 root.Val \u003c= *min) {\n        return false\n    }\n    return dfs(root.Left, \u0026root.Val, min) \u0026\u0026 dfs(root.Right, max, \u0026root.Val)\n}",
      "title": "Validate Binary Search Tree",
      "url": "/submissions/detail/1088457217/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698767957,
      "status": 10,
      "runtime": "6 ms",
      "is_pending": "Not Pending",
      "memory": "5.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1088455149,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 98,
      "title_slug": "validate-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isValidBST(root *TreeNode) bool {\n    if root == nil {\n        return false\n    }\n    return dfs(root.Left, root.Val, math.MinInt32) \u0026\u0026 dfs(root.Right, math.MaxInt32, root.Val)\n}\n\nfunc dfs(root *TreeNode, max int, min int) bool {\n    if root == nil {\n        return true\n    }\n    if root.Val \u003c max \u0026\u0026 root.Val \u003e min {\n        return dfs(root.Left, root.Val, min) \u0026\u0026 dfs(root.Right, max, root.Val)\n    }\n    return false\n}",
      "title": "Validate Binary Search Tree",
      "url": "/submissions/detail/1088455149/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698767790,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111110101011100111101",
      "flag_type": 1
    },
    {
      "id": 1088451991,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 98,
      "title_slug": "validate-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isValidBST(root *TreeNode) bool {\n    if root == nil {\n        return false\n    }\n    return dfs(root.Left, root.Val, math.MinInt32) \u0026\u0026 dfs(root.Right, math.MaxInt32, root.Val)\n}\n\nfunc dfs(root *TreeNode, max int, min int) bool {\n    if root == nil {\n        return true\n    }\n    if root.Val \u003e= max || root.Val \u003c= min {\n        return false\n    }\n    return dfs(root.Left, root.Val, min) \u0026\u0026 dfs(root.Right, max, root.Val) \n\n}",
      "title": "Validate Binary Search Tree",
      "url": "/submissions/detail/1088451991/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698767508,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111110101011100111101",
      "flag_type": 1
    },
    {
      "id": 1088438483,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 98,
      "title_slug": "validate-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isValidBST(root *TreeNode) bool {\n    queue := []*TreeNode{root}\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if node == nil {\n                continue\n            }\n            left, right, val := node.Left, node.Right, node.Val\n            if (left != nil \u0026\u0026 left.Val \u003e= val) || (right != nil \u0026\u0026 right.Val \u003c= val) {\n                return false\n            }\n            queue = append(queue, left, right)\n        }\n        queue = queue[length:]\n    }\n    return true\n}",
      "title": "Validate Binary Search Tree",
      "url": "/submissions/detail/1088438483/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1698766310,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111100100100111111111111111111111111111111111111111111111111111110111110111",
      "flag_type": 1
    },
    {
      "id": 1091200227,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 105,
      "title_slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
      "code": "func buildTree(preorder []int, inorder []int) *TreeNode {\n\tn := len(inorder)\n\n\tif n == 0 {\n\t\treturn nil\n\t}\n\n\tpv := preorder[0]\n\tpi := 0\n\tfor pi \u003c n \u0026\u0026 inorder[pi] != pv {\n\t\tpi++\n\t}\n\n\tans := new(TreeNode)\n\tans.Val = pv\n\tans.Left = buildTree(preorder[1:], inorder[:pi])\n\tans.Right = buildTree(preorder[1+pi:], inorder[pi+1:])\n\n\treturn ans\n}\n",
      "title": "Construct Binary Tree from Preorder and Inorder Traversal",
      "url": "/submissions/detail/1091200227/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093631,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091200011,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 25,
      "title_slug": "reverse-nodes-in-k-group",
      "code": "func reverseKGroup(head *ListNode, k int) *ListNode {\n\tnode, cnt := head, 0\n\tfor cnt \u003c k {\n\t\tif node == nil {\n\t\t\treturn head\n\t\t}\n\t\tnode = node.Next\n\t\tcnt++\n\t}\n\n\tprev := reverseKGroup(node, k)\n\tfor cnt \u003e 0 {\n\t\tnext := head.Next\n\t\thead.Next = prev\n\t\tprev = head\n\t\thead = next\n\t\tcnt--\n\t}\n\n\treturn prev\n}",
      "title": "Reverse Nodes in k-Group",
      "url": "/submissions/detail/1091200011/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093602,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "3.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091199814,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 25,
      "title_slug": "reverse-nodes-in-k-group",
      "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n\n/* Recursive Solution */\n\nfunc reverseKGroup(head *ListNode, k int) *ListNode {\n    l := length(head)\n    return reverse(head, l, k)\n}\n\nfunc reverse(node *ListNode, l, k int) *ListNode {\n    if l \u003c k {\n        return node\n    }\n\n    var prev, next *ListNode\n    curr := node\n    for i := 0; i \u003c k; i++ {\n        next = curr.Next\n        curr.Next = prev\n        prev = curr\n        curr = next\n    }\n\n    node.Next = reverse(next, l-k, k)\n    return prev\n}\n\nfunc length(head *ListNode) int {\n    count := 0\n\n    for head != nil {\n        head = head.Next\n        count++\n    }\n    return count\n}\n\n/* Iterative Solution */\n\nfunc reverseKGroup(head *ListNode, k int) *ListNode {\n    if head == nil || k == 1 {\n        return head\n    }\n\n    l := length(head)\n    preHead := \u0026ListNode{Next: head}\n\n    prev := preHead\n    for l \u003e= k {\n        curr := prev.Next\n        for i := 1; i \u003c k; i++ {\n            next := curr.Next\n            curr.Next = next.Next\n            next.Next = prev.Next\n            prev.Next = next\n        }\n        prev = curr\n        l -= k\n    }\n\n    return preHead.Next\n}\n\nfunc length(head *ListNode) int {\n    count := 0\n\n    for head != nil {\n        head = head.Next\n        count++\n    }\n    return count\n}",
      "title": "Reverse Nodes in k-Group",
      "url": "/submissions/detail/1091199814/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093575,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1091199707,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 25,
      "title_slug": "reverse-nodes-in-k-group",
      "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n\n/* Recursive Solution */\n\nfunc reverseKGroup(head *ListNode, k int) *ListNode {\n    l := length(head)\n    return reverse(head, l, k)\n}\n\nfunc reverse(node *ListNode, l, k int) *ListNode {\n    if l \u003c k {\n        return node\n    }\n\n    var prev, next *ListNode\n    curr := node\n    for i := 0; i \u003c k; i++ {\n        next = curr.Next\n        curr.Next = prev\n        prev = curr\n        curr = next\n    }\n\n    node.Next = reverse(next, l-k, k)\n    return prev\n}\n\nfunc length(head *ListNode) int {\n    count := 0\n\n    for head != nil {\n        head = head.Next\n        count++\n    }\n    return count\n}\n\n/* Iterative Solution */\n\nfunc reverseKGroup(head *ListNode, k int) *ListNode {\n    if head == nil || k == 1 {\n        return head\n    }\n\n    l := length(head)\n    preHead := \u0026ListNode{Next: head}\n\n    prev := preHead\n    for l \u003e= k {\n        curr := prev.Next\n        for i := 1; i \u003c k; i++ {\n            next := curr.Next\n            curr.Next = next.Next\n            next.Next = prev.Next\n            prev.Next = next\n        }\n        prev = curr\n        l -= k\n    }\n\n    return preHead.Next\n}\n\nfunc length(head *ListNode) int {\n    count := 0\n\n    for head != nil {\n        head = head.Next\n        count++\n    }\n    return count\n}",
      "title": "Reverse Nodes in k-Group",
      "url": "/submissions/detail/1091199707/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093562,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1091199566,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 452,
      "title_slug": "minimum-number-of-arrows-to-burst-balloons",
      "code": "func findMinArrowShots(points [][]int) int {\n\t// greedy solution\n\tsort.Slice(points, func(i, j int) bool {\n\t\treturn points[i][1] \u003c points[j][1]\n\t})\n\tcount := 1\n\tend := points[0][1]\n\tfor i := 1; i \u003c len(points); i++ {\n\t\tif points[i][0] \u003e end {\n\t\t\tcount++\n\t\t\tend = points[i][1]\n\t\t}\n\t}\n\treturn count\n}",
      "title": "Minimum Number of Arrows to Burst Balloons",
      "url": "/submissions/detail/1091199566/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093541,
      "status": 10,
      "runtime": "204 ms",
      "is_pending": "Not Pending",
      "memory": "17.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091199453,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 452,
      "title_slug": "minimum-number-of-arrows-to-burst-balloons",
      "code": "func minWindow(s string, t string) string {\n    m := len(s)\n    n := len(t)\n    \n    if m == 0 || n == 0 || m \u003c n {\n        return \"\"\n    }\n\n    dict := make(map[byte]int)\n    for i := 0; i \u003c n; i++ {\n        dict[t[i]]++\n    }\n    \n    // required unique chars\n    required := len(dict)\n    actual := 0\n    window := make(map[byte]int)\n    minSize := math.MaxInt64\n    start := 0\n    left, right := 0, 0\n    \n    for end := 0; end \u003c m; end++ {\n        c := s[end]\n        window[c]++\n        \n        if value, ok := dict[c]; ok {\n            if value == window[c] {\n                actual++\n            }\n        }\n        \n        for start \u003c= end \u0026\u0026 actual == required {\n            size := end-start+1\n            if size \u003c minSize {\n                minSize = size\n                left = start\n                right = end\n            }\n            \n            rc := s[start]\n            window[rc]--\n            if value, ok := dict[rc]; ok {\n                if value \u003e window[rc] {\n                    actual--\n                }\n            }\n            start++\n        }\n    }\n    \n    if minSize == math.MaxInt64 {\n        return \"\"\n    }\n    return s[left:right+1]\n}",
      "title": "Minimum Number of Arrows to Burst Balloons",
      "url": "/submissions/detail/1091199453/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093528,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1091199352,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 76,
      "title_slug": "minimum-window-substring",
      "code": "func minWindow(s string, t string) string {\n    m := len(s)\n    n := len(t)\n    \n    if m == 0 || n == 0 || m \u003c n {\n        return \"\"\n    }\n\n    dict := make(map[byte]int)\n    for i := 0; i \u003c n; i++ {\n        dict[t[i]]++\n    }\n    \n    // required unique chars\n    required := len(dict)\n    actual := 0\n    window := make(map[byte]int)\n    minSize := math.MaxInt64\n    start := 0\n    left, right := 0, 0\n    \n    for end := 0; end \u003c m; end++ {\n        c := s[end]\n        window[c]++\n        \n        if value, ok := dict[c]; ok {\n            if value == window[c] {\n                actual++\n            }\n        }\n        \n        for start \u003c= end \u0026\u0026 actual == required {\n            size := end-start+1\n            if size \u003c minSize {\n                minSize = size\n                left = start\n                right = end\n            }\n            \n            rc := s[start]\n            window[rc]--\n            if value, ok := dict[rc]; ok {\n                if value \u003e window[rc] {\n                    actual--\n                }\n            }\n            start++\n        }\n    }\n    \n    if minSize == math.MaxInt64 {\n        return \"\"\n    }\n    return s[left:right+1]\n}",
      "title": "Minimum Window Substring",
      "url": "/submissions/detail/1091199352/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093514,
      "status": 10,
      "runtime": "19 ms",
      "is_pending": "Not Pending",
      "memory": "3.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091199226,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 30,
      "title_slug": "substring-with-concatenation-of-all-words",
      "code": "func findSubstring(s string, words []string) []int {\n    \n    wordLen := len(words[0])\n    totalWords := len(words)\n    mem := make(map[string]int, totalWords)\n    \n    \n    for _, str := range words {\n        mem[str] += 1\n    }\n    \n    temp := make(map[string]int, totalWords)\n    var found bool\n    result := make([]int, 0)\n    \n    for i:=0; i + wordLen*totalWords \u003c= len(s);  {\n            \n        found = true\n        temp = make(map[string]int, totalWords)\n\n        for j := i; j \u003c i + wordLen*totalWords; j += wordLen {\n            if _, ok := mem[ s[j:j+wordLen] ]; ok {\n                temp[ s[j:j+wordLen] ] += 1\n            } else {\n                found = false\n                break\n            }\n        }\n\n        if found {\n            for key, _ := range mem {\n                if val, ok := temp[key]; !ok || val != mem[key]{\n                    i++\n                    found = false\n                    break\n                }\n            }\n\n            if found {\n                result = append(result, i)\n                i += 1    \n            }\n\n        } else {\n            i++\n        }\n    }\n    \n    return result\n    \n}",
      "title": "Substring with Concatenation of All Words",
      "url": "/submissions/detail/1091199226/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093498,
      "status": 10,
      "runtime": "846 ms",
      "is_pending": "Not Pending",
      "memory": "13.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091198577,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 57,
      "title_slug": "insert-interval",
      "code": "func insert(intervals [][]int, new []int) [][]int {\n    n := len(intervals)\n    i := sort.Search(n, func(i int) bool { return intervals[i][0] \u003e new[0] })\n    j := sort.Search(n, func(j int) bool { return intervals[j][1] \u003e new[1] })\n    if i \u003e= 1 \u0026\u0026 new[0] \u003c= intervals[i-1][1] {\n        new[0] = intervals[i-1][0]\n        i--\n    }\n    if j \u003c n \u0026\u0026 new[1] \u003e= intervals[j][0] {\n        new[1] = intervals[j][1]\n        j++\n    }\n    return append(intervals[:i], append([][]int{new}, intervals[j:]...)...)\n}",
      "title": "Insert Interval",
      "url": "/submissions/detail/1091198577/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093410,
      "status": 10,
      "runtime": "7 ms",
      "is_pending": "Not Pending",
      "memory": "4.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091198199,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 224,
      "title_slug": "basic-calculator",
      "code": "func calculate(s string) int {\n\tresult, _ := calculateFrom(s, 0)\n\treturn result\n}\n\nfunc calculateFrom(s string, idFrom int) (result, idEnd int) {\n\tresult, currNum, sign := 0, 0, 1\n\n\tfor idEnd = idFrom; idEnd \u003c len(s) \u0026\u0026 s[idEnd] != ')'; idEnd++ {\n\t\tswitch {\n\t\tcase s[idEnd] \u003e= '0':\n\t\t\tcurrNum = currNum*10 + int(s[idEnd]-'0')\n\t\tcase s[idEnd] == '(':\n\t\t\tcurrNum, idEnd = calculateFrom(s, idEnd+1)\n\t\tcase s[idEnd] == '-' || s[idEnd] == '+':\n\t\t\tresult, currNum = result+currNum*sign, 0\n\t\t\tsign = 44 - int(s[idEnd]) // '-'=45; '+'=43\n\t\t}\n\t}\n\n\treturn result + currNum*sign, idEnd\n}",
      "title": "Basic Calculator",
      "url": "/submissions/detail/1091198199/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093360,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "2.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091127510,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1627,
      "title_slug": "last-moment-before-all-ants-fall-out-of-a-plank",
      "code": "\nfunc getLastMoment(n int, left []int, right []int) int {\n    return max(slices.Max(append(left, 0)), n - slices.Min(append(right, n)))\n}",
      "title": "Last Moment Before All Ants Fall Out of a Plank",
      "url": "/submissions/detail/1091127510/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699083377,
      "status": 10,
      "runtime": "19 ms",
      "is_pending": "Not Pending",
      "memory": "6.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091126622,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 1627,
      "title_slug": "last-moment-before-all-ants-fall-out-of-a-plank",
      "code": "func getLastMoment(n int, left []int, right []int) int {\n    return max(slices.Left(append(left, 0)), n - slices.Min(append(right, n)))\n}",
      "title": "Last Moment Before All Ants Fall Out of a Plank",
      "url": "/submissions/detail/1091126622/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699083260,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1091125843,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 1627,
      "title_slug": "last-moment-before-all-ants-fall-out-of-a-plank",
      "code": "func getLastMoment(n int, left []int, right []int) int {\n    return max(slices.Max(left), n - slices.Min(right))\n}",
      "title": "Last Moment Before All Ants Fall Out of a Plank",
      "url": "/submissions/detail/1091125843/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699083159,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1091125391,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 1627,
      "title_slug": "last-moment-before-all-ants-fall-out-of-a-plank",
      "code": "func getLastMoment(n int, left []int, right []int) int {\n    return max(max(left), n - min(right))\n}",
      "title": "Last Moment Before All Ants Fall Out of a Plank",
      "url": "/submissions/detail/1091125391/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699083094,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1091124701,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1627,
      "title_slug": "last-moment-before-all-ants-fall-out-of-a-plank",
      "code": "func getLastMoment(n int, left []int, right []int) int {\n    maxLeft := 0\n    for _, val := range left {\n        if val \u003e maxLeft {\n            maxLeft = val\n        }\n    }\n    minRight := n\n    for _, val := range right {\n        if val \u003c minRight {\n            minRight = val\n        }\n    }\n    return max(maxLeft, n - minRight)\n}",
      "title": "Last Moment Before All Ants Fall Out of a Plank",
      "url": "/submissions/detail/1091124701/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699083011,
      "status": 10,
      "runtime": "16 ms",
      "is_pending": "Not Pending",
      "memory": "6.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091124362,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1627,
      "title_slug": "last-moment-before-all-ants-fall-out-of-a-plank",
      "code": "func getLastMoment(n int, left []int, right []int) int {\n    maxLeft := 0\n    for _, val := range left {\n        if val \u003e maxLeft {\n            maxLeft = val\n        }\n    }\n    \n    minRight := n\n    for _, val := range right {\n        if val \u003c minRight {\n            minRight = val\n        }\n    }\n    return max(maxLeft, n - minRight)\n}",
      "title": "Last Moment Before All Ants Fall Out of a Plank",
      "url": "/submissions/detail/1091124362/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699082965,
      "status": 10,
      "runtime": "19 ms",
      "is_pending": "Not Pending",
      "memory": "6.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1090575563,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 230,
      "title_slug": "kth-smallest-element-in-a-bst",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc kthSmallest(root *TreeNode, k int) int {\n    heap := binaryheap.NewWithIntComparator()\n    queue := []*TreeNode{root}\n\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if node == nil {\n                continue\n            }\n            heap.Push(node.Val)\n            queue = append(queue, node.Left, node.Right)\n        }\n        queue = queue[length:]\n    }\n    var answer any\n    for i := 0; i \u003c k; i++ {\n        answer, _ = heap.Pop()\n    }\n    return answer.(int)\n}\n",
      "title": "Kth Smallest Element in a BST",
      "url": "/submissions/detail/1090575563/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699014026,
      "status": 10,
      "runtime": "12 ms",
      "is_pending": "Not Pending",
      "memory": "6.8 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1090504012,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 114,
      "title_slug": "flatten-binary-tree-to-linked-list",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc flatten(root *TreeNode)  {\n    if root == nil {\n        return\n    }\n    right := root.Right\n    root.Right = nil\n    list := \u0026TreeNode{0, nil, nil}\n    listTail := flattenNode(root, list)\n    if right != nil {\n        flattenNode(right, listTail)\n    }\n}\n\nfunc flattenNode(node, listTail *TreeNode) *TreeNode {\n    left, right := node.Left, node.Right\n    node.Left, node.Right = nil, nil\n    listTail.Right = node\n    listTail = listTail.Right\n    if left != nil {\n        listTail = flattenNode(left, listTail)\n    }\n    if right != nil {\n        listTail = flattenNode(right, listTail)\n    }\n    return listTail\n}",
      "title": "Flatten Binary Tree to Linked List",
      "url": "/submissions/detail/1090504012/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699004405,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "2.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1090492801,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1552,
      "title_slug": "build-an-array-with-stack-operations",
      "code": "func buildArray(target []int, n int) []string {\n    ops := []string{}\n    length := len(target)\n    matchNext, matchNextVal := 0, target[0]\n    for i := 1; i \u003c= n; i++ {\n        if i == matchNextVal {\n            ops = append(ops, \"Push\")\n            matchNext += 1\n            if matchNext == length {\n                break\n            }\n            matchNextVal = target[matchNext]\n        } else {\n            ops = append(ops, \"Push\", \"Pop\")\n        }\n    }\n    return ops\n}",
      "title": "Build an Array With Stack Operations",
      "url": "/submissions/detail/1090492801/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699002885,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "2.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1090492007,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1552,
      "title_slug": "build-an-array-with-stack-operations",
      "code": "func buildArray(target []int, n int) []string {\n    ops := []string{}\n    length := len(target)\n    matchNext := 0\n    for i := 1; i \u003c= n; i++ {\n        if matchNext == length {\n            break\n        }\n        ops = append(ops, \"Push\")\n        if i == target[matchNext] {\n            matchNext += 1\n        } else {\n            ops = append(ops, \"Pop\")\n        }\n    }\n    return ops\n}",
      "title": "Build an Array With Stack Operations",
      "url": "/submissions/detail/1090492007/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699002784,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "2.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1093719534,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 2049,
      "title_slug": "eliminate-maximum-number-of-monsters",
      "code": "func eliminateMaximum(dist []int, speed []int) int {\n    arrival := []int{}\n    length := len(dist)\n    for i := 0; i \u003c length; i++ {\n        arrival = append(arrival, dist[i] / speed[i])\n    }\n    slices.Sort(arrival)\n    ans := 0\n    for i := 0; i \u003c length; i++ {\n        if arrival[i] \u003c= i {\n            break\n        }\n        ans += 1\n    }\n    return ans\n}",
      "title": "Eliminate Maximum Number of Monsters",
      "url": "/submissions/detail/1093719534/",
      "lang_name": "Go",
      "time": "2 months, 4 weeks",
      "timestamp": 1699373144,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11011011101001111111011010111100100001010101111110101111110111111111010010101010000110101011111111111111111011110111111111111111100",
      "flag_type": 1
    },
    {
      "id": 1092890108,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 859,
      "title_slug": "design-circular-deque",
      "code": "type MyCircularDeque struct {\n    list []int\n    size int\n}\n\n\nfunc Constructor(k int) MyCircularDeque {\n    return MyCircularDeque{[]int{}, k}\n}\n\n\nfunc (this *MyCircularDeque) InsertFront(value int) bool {\n    if this.IsFull() {\n        return false\n    }\n    this.list = append([]int{value}, this.list...)\n    return true\n}\n\n\nfunc (this *MyCircularDeque) InsertLast(value int) bool {\n    if this.IsFull() {\n        return false\n    }\n    this.list = append(this.list, value)\n    return true\n}\n\n\nfunc (this *MyCircularDeque) DeleteFront() bool {\n    if this.IsEmpty() {\n        return false\n    }\n    this.list = this.list[1:]\n    return true\n}\n\n\nfunc (this *MyCircularDeque) DeleteLast() bool {\n    if this.IsEmpty() {\n        return false\n    }\n    this.list = this.list[:len(this.list) - 1]\n    return true\n}\n\n\nfunc (this *MyCircularDeque) GetFront() int {\n    if this.IsEmpty() {\n        return -1\n    }\n    return this.list[0]   \n}\n\n\nfunc (this *MyCircularDeque) GetRear() int {\n    if this.IsEmpty() {\n        return -1\n    }\n    return this.list[len(this.list) - 1]\n}\n\n\nfunc (this *MyCircularDeque) IsEmpty() bool {\n    return len(this.list) == 0\n}\n\n\nfunc (this *MyCircularDeque) IsFull() bool {\n    return len(this.list) == this.size\n}\n\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * obj := Constructor(k);\n * param_1 := obj.InsertFront(value);\n * param_2 := obj.InsertLast(value);\n * param_3 := obj.DeleteFront();\n * param_4 := obj.DeleteLast();\n * param_5 := obj.GetFront();\n * param_6 := obj.GetRear();\n * param_7 := obj.IsEmpty();\n * param_8 := obj.IsFull();\n */",
      "title": "Design Circular Deque",
      "url": "/submissions/detail/1092890108/",
      "lang_name": "Go",
      "time": "2 months, 4 weeks",
      "timestamp": 1699285294,
      "status": 10,
      "runtime": "8 ms",
      "is_pending": "Not Pending",
      "memory": "7.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1092889557,
      "status_display": "Runtime Error",
      "lang": "golang",
      "question_id": 859,
      "title_slug": "design-circular-deque",
      "code": "type MyCircularDeque struct {\n    list []int\n    size int\n}\n\n\nfunc Constructor(k int) MyCircularDeque {\n    return MyCircularDeque{[]int{}, k}\n}\n\n\nfunc (this *MyCircularDeque) InsertFront(value int) bool {\n    if this.IsFull() {\n        return false\n    }\n    this.list = append([]int{value}, this.list...)\n    return true\n}\n\n\nfunc (this *MyCircularDeque) InsertLast(value int) bool {\n    if this.IsFull() {\n        return false\n    }\n    this.list = append(this.list, value)\n    return true\n}\n\n\nfunc (this *MyCircularDeque) DeleteFront() bool {\n    if this.IsEmpty() {\n        return false\n    }\n    this.list = this.list[1:]\n    return true\n}\n\n\nfunc (this *MyCircularDeque) DeleteLast() bool {\n    if this.IsEmpty() {\n        return false\n    }\n    this.list = this.list[:len(this.list) - 1]\n    return true\n}\n\n\nfunc (this *MyCircularDeque) GetFront() int {\n    return this.list[0]   \n}\n\n\nfunc (this *MyCircularDeque) GetRear() int {\n    return this.list[len(this.list) - 1]\n}\n\n\nfunc (this *MyCircularDeque) IsEmpty() bool {\n    return len(this.list) == 0\n}\n\n\nfunc (this *MyCircularDeque) IsFull() bool {\n    return len(this.list) == this.size\n}\n\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * obj := Constructor(k);\n * param_1 := obj.InsertFront(value);\n * param_2 := obj.InsertLast(value);\n * param_3 := obj.DeleteFront();\n * param_4 := obj.DeleteLast();\n * param_5 := obj.GetFront();\n * param_6 := obj.GetRear();\n * param_7 := obj.IsEmpty();\n * param_8 := obj.IsFull();\n */",
      "title": "Design Circular Deque",
      "url": "/submissions/detail/1092889557/",
      "lang_name": "Go",
      "time": "2 months, 4 weeks",
      "timestamp": 1699285244,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111100000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1092754707,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1955,
      "title_slug": "seat-reservation-manager",
      "code": "type SeatManager struct {\n    heap *binaryheap.Heap\n}\n\n\nfunc Constructor(n int) SeatManager {\n    heap := binaryheap.NewWithIntComparator()\n    for i := 1; i \u003c= n; i++ {\n        heap.Push(i)\n    }\n    return SeatManager{heap}\n}\n\n\nfunc (this *SeatManager) Reserve() int {\n    val, _ := this.heap.Pop()\n    return val.(int)\n}\n\n\nfunc (this *SeatManager) Unreserve(seatNumber int)  {\n    this.heap.Push(seatNumber)\n}\n\n\n/**\n * Your SeatManager object will be instantiated and called as such:\n * obj := Constructor(n);\n * param_1 := obj.Reserve();\n * obj.Unreserve(seatNumber);\n */",
      "title": "Seat Reservation Manager",
      "url": "/submissions/detail/1092754707/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699271853,
      "status": 10,
      "runtime": "379 ms",
      "is_pending": "Not Pending",
      "memory": "29.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1092750852,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1955,
      "title_slug": "seat-reservation-manager",
      "code": "type SeatManager struct {\n    seats []bool\n}\n\n\nfunc Constructor(n int) SeatManager {\n    return SeatManager{make([]bool, n)}\n}\n\n\nfunc (this *SeatManager) Reserve() int {\n    for i, num := range this.seats {\n        if !num {\n            this.seats[i] = true\n            return i + 1\n        }\n    }\n    return -1\n}\n\n\nfunc (this *SeatManager) Unreserve(seatNumber int)  {\n    this.seats[seatNumber-1] = false\n}\n\n\n/**\n * Your SeatManager object will be instantiated and called as such:\n * obj := Constructor(n);\n * param_1 := obj.Reserve();\n * obj.Unreserve(seatNumber);\n */",
      "title": "Seat Reservation Manager",
      "url": "/submissions/detail/1092750852/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699271367,
      "status": 10,
      "runtime": "2383 ms",
      "is_pending": "Not Pending",
      "memory": "29 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1092217408,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 297,
      "title_slug": "serialize-and-deserialize-binary-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\ntype Codec struct {\n    \n}\n\nfunc Constructor() Codec {\n    return Codec{}\n}\n\n// Serializes a tree to a single string.\nfunc (this *Codec) serialize(root *TreeNode) string {\n    if root == nil {\n        return \"\"\n    }\n    var buffer bytes.Buffer\n    queue := []*TreeNode{root}\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if node != nil {\n                buffer.WriteString(strconv.Itoa(node.Val))\n                queue = append(queue, node.Left, node.Right)\n            }\n            buffer.WriteString(\",\")\n        }\n        queue = queue[length:]\n    }\n    ans := buffer.String()\n    return ans[:len(ans)-1]\n}\n\n// Deserializes your encoded data to tree.\nfunc (this *Codec) deserialize(data string) *TreeNode {    \n    nodes := []*TreeNode{}\n    for _, str := range strings.Split(data, \",\") {\n        if str == \"\" {\n            nodes = append(nodes, nil)\n        } else {\n            num, _ := strconv.Atoi(str)\n            nodes = append(nodes, \u0026TreeNode{num, nil, nil})\n        }\n    }\n    start := 0\n    length := len(nodes)\n    for _, node := range nodes {\n        if node == nil {\n            continue\n        }\n        left, right := 2 * start + 1, 2 * start + 2\n        if left \u003c length {\n            node.Left = nodes[left]\n        }\n        if right \u003c length {\n            node.Right = nodes[right]\n        }\n        start++\n    }\n    return nodes[0]\n}\n\n\n/**\n * Your Codec object will be instantiated and called as such:\n * ser := Constructor();\n * deser := Constructor();\n * data := ser.serialize(root);\n * ans := deser.deserialize(data);\n */",
      "title": "Serialize and Deserialize Binary Tree",
      "url": "/submissions/detail/1092217408/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699207360,
      "status": 10,
      "runtime": "11 ms",
      "is_pending": "Not Pending",
      "memory": "7.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1092214618,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 297,
      "title_slug": "serialize-and-deserialize-binary-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\ntype Codec struct {\n    \n}\n\nfunc Constructor() Codec {\n    return Codec{}\n}\n\n// Serializes a tree to a single string.\nfunc (this *Codec) serialize(root *TreeNode) string {\n    if root == nil {\n        return \"\"\n    }\n    var buffer bytes.Buffer\n    queue := []*TreeNode{root}\n    for length := len(queue); length \u003e 0; length = len(queue) {\n        for i := 0; i \u003c length; i++ {\n            node := queue[i]\n            if node != nil {\n                buffer.WriteString(strconv.Itoa(node.Val))\n                queue = append(queue, node.Left, node.Right)\n            }\n            buffer.WriteString(\",\")\n        }\n        queue = queue[length:]\n    }\n    ans := buffer.String()\n    return ans[:len(ans)-1]\n}\n\n// Deserializes your encoded data to tree.\nfunc (this *Codec) deserialize(data string) *TreeNode {    \n    nodes := []*TreeNode{}\n    for _, str := range strings.Split(data, \",\") {\n        if str == nil {\n            nodes = append(nodes, nil)\n        } else {\n            num, _ := strconv.Atoi(s)\n            nodes = append(nodes, \u0026TreeNode{*num, nil, nil})\n        }\n                \n    }\n    start := 0\n    length := len(nodes)\n    for _, node := range nodes {\n        if node == nil {\n            continue\n        }\n        left, right := 2 * start + 1, 2 * start + 1\n        if left \u003c length {\n            node.Left = nodes[left]\n        }\n        if right \u003c length {\n            node.Right = nodes[right]\n        }\n        start++\n    }\n    return nodes[0]\n}\n\n\n/**\n * Your Codec object will be instantiated and called as such:\n * ser := Constructor();\n * deser := Constructor();\n * data := ser.serialize(root);\n * ans := deser.deserialize(data);\n */",
      "title": "Serialize and Deserialize Binary Tree",
      "url": "/submissions/detail/1092214618/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699207123,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1091924184,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1657,
      "title_slug": "find-the-winner-of-an-array-game",
      "code": "func getWinner(arr []int, k int) int {\n    if k == 1 {\n        return max(arr[0], arr[1])\n    }\n    length := len(arr)\n    if k \u003e= length {\n        return slices.Max(arr)\n    }\n    curWinner, winCount := arr[0], 0\n    for _, num := range arr[1:] {\n        if curWinner \u003e num {\n            winCount++\n        } else {\n            curWinner = num\n            winCount = 1\n        }\n        if winCount == k {\n            return curWinner\n        }\n    }\n    return curWinner\n}",
      "title": "Find the Winner of an Array Game",
      "url": "/submissions/detail/1091924184/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699175163,
      "status": 10,
      "runtime": "79 ms",
      "is_pending": "Not Pending",
      "memory": "8.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091922545,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1657,
      "title_slug": "find-the-winner-of-an-array-game",
      "code": "func getWinner(arr []int, k int) int {\n    curMax, winCount := arr[0], 0\n    i, length := 1, len(arr)\n    for {\n        num := arr[i]\n        if num \u003e curMax {\n            curMax = num\n            winCount = 1\n        } else {\n            winCount++\n        }\n        if winCount == k {\n            return curMax\n        }\n        i = (i + 1) % length\n    }\n    return -1\n}",
      "title": "Find the Winner of an Array Game",
      "url": "/submissions/detail/1091922545/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699174919,
      "status": 10,
      "runtime": "3261 ms",
      "is_pending": "Not Pending",
      "memory": "11.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091202059,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 295,
      "title_slug": "find-median-from-data-stream",
      "code": "type MaxHeap []int\nfunc (m MaxHeap) Len() int { return len(m) }\nfunc (m MaxHeap) Less(i, j int) bool { return m[i] \u003e m[j] }\nfunc (m MaxHeap) Swap(i, j int) { m[i], m[j] = m[j], m[i] }\nfunc (m *MaxHeap) Pop() interface{} {\n    v := (*m)[len(*m)-1]\n    *m = (*m)[:len(*m)-1]\n    return v\n}\nfunc (m *MaxHeap) Push(v interface{}) { *m = append(*m, v.(int)) }\nfunc (m MaxHeap) Top() int { return m[0] }\n\ntype MinHeap []int\nfunc (m MinHeap) Len() int { return len(m) }\nfunc (m MinHeap) Less(i, j int) bool { return m[i] \u003c m[j] }\nfunc (m MinHeap) Swap(i, j int) { m[i], m[j] = m[j], m[i] }\nfunc (m *MinHeap) Pop() interface{} {\n    v := (*m)[len(*m)-1]\n    *m = (*m)[:len(*m)-1]\n    return v\n}\nfunc (m *MinHeap) Push(v interface{}) { *m = append(*m, v.(int)) }\nfunc (m MinHeap) Top() int { return m[0] }\n\ntype MedianFinder struct {\n    left MaxHeap\n    right MinHeap    \n}\n\nfunc Constructor() MedianFinder {\n    return MedianFinder{}    \n}\n\nfunc (mf *MedianFinder) AddNum(num int)  {\n    if len(mf.left) + len(mf.right) == 0 {\n        heap.Push(\u0026(mf.left), num)\n        return\n    }\n    for {\n        if len(mf.left) \u003c len(mf.right) {\n            if num \u003c= mf.right.Top() {\n                heap.Push(\u0026(mf.left), num)\n                return\n            } else {\n                v := heap.Pop(\u0026(mf.right))\n                heap.Push(\u0026(mf.left), v)\n            }\n        } else {\n            if num \u003e= mf.left.Top() {\n                heap.Push(\u0026(mf.right), num)\n                return\n            } else {\n                v := heap.Pop(\u0026(mf.left))\n                heap.Push(\u0026(mf.right), v)\n            }\n        }\n    }\n}\n\nfunc (mf *MedianFinder) FindMedian() float64 {\n    if len(mf.left) == len(mf.right) {\n        return float64(mf.left.Top() + mf.right.Top()) / 2.0\n    } else if len(mf.left) \u003e len(mf.right) {\n        return float64(mf.left.Top())\n    } else {\n        return float64(mf.right.Top())\n    }   \n}",
      "title": "Find Median from Data Stream",
      "url": "/submissions/detail/1091202059/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093864,
      "status": 10,
      "runtime": "299 ms",
      "is_pending": "Not Pending",
      "memory": "20.2 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091201914,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 502,
      "title_slug": "ipo",
      "code": "type Project struct {\n    profit, capital int\n}\n\ntype IntHeap []int\nfunc (h IntHeap) Len() int           { return len(h) }\nfunc (h IntHeap) Less(i, j int) bool { return h[i] \u003e h[j] }\nfunc (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\nfunc (h *IntHeap) Push(x interface{}) { *h = append(*h, x.(int)) }\nfunc (h *IntHeap) Pop() interface{} {\n\told := *h\n\tn := len(old)\n\tx := old[n-1]\n\t*h = old[0 : n-1]\n\treturn x\n}\n\nfunc findMaximizedCapital(k int, w int, profits []int, capital []int) int {\n    n := len(profits)\n    projects := make([]Project, n)\n    for i := range profits {\n        projects[i] = Project{profits[i], capital[i]}\n    }\n    sort.Slice(projects, func (i, j int) bool {\n        return projects[i].capital \u003c projects[j].capital\n    })\n    \n    q := \u0026IntHeap{}\n    heap.Init(q)\n\n    ptr := 0\n    for i := 0; i \u003c k; i++ {\n        for ptr \u003c n \u0026\u0026 projects[ptr].capital \u003c= w {\n            heap.Push(q, projects[ptr].profit)\n            ptr++\n        }\n        if q.Len() == 0 {\n            break\n        }\n        w += heap.Pop(q).(int)\n    }\n    return w\n}",
      "title": "IPO",
      "url": "/submissions/detail/1091201914/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093845,
      "status": 10,
      "runtime": "155 ms",
      "is_pending": "Not Pending",
      "memory": "10.8 MB",
      "compare_result": "11111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091201779,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 162,
      "title_slug": "find-peak-element",
      "code": "func findPeakElement(nums []int) int {\n    left := 0\n    right := len(nums) - 1\n    \n    for left \u003c right {\n        mid := left + (right - left) / 2\n        \n        if nums[mid] \u003e nums[mid+1] {\n            // The peak is in the left half\n            right = mid\n        } else {\n            // The peak is in the right half\n            left = mid + 1\n        }\n    }\n    \n    return left\n}",
      "title": "Find Peak Element",
      "url": "/submissions/detail/1091201779/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093827,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "2.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091201621,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 23,
      "title_slug": "merge-k-sorted-lists",
      "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeKLists(lists []*ListNode) *ListNode {\n    n:=len(lists)\n    if n==0{\n        return nil\n    }\n    curr:=lists[0]\n    if n==1{\n        return curr\n    }\n    for i:=1;i\u003cn;i++{\n        curr=mergeList(curr,lists[i])\n    }\n    return curr\n}\n\nfunc mergeList(l1,l2 *ListNode) *ListNode {\n    head:=\u0026ListNode{}\n    curr:=head\n    for l1!=nil \u0026\u0026 l2!=nil{\n        if l1.Val\u003cl2.Val{\n            curr.Next=l1\n            l1=l1.Next\n            curr=curr.Next\n        }else{\n            curr.Next=l2\n            l2=l2.Next\n            curr=curr.Next\n        }\n    }\n    if l1 != nil {\n        curr.Next = l1\n    } else if l2 != nil {\n        curr.Next = l2\n    }\n    return head.Next\n}",
      "title": "Merge k Sorted Lists",
      "url": "/submissions/detail/1091201621/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093807,
      "status": 10,
      "runtime": "81 ms",
      "is_pending": "Not Pending",
      "memory": "5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091201489,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 772,
      "title_slug": "construct-quad-tree",
      "code": "/**\n * Definition for a QuadTree node.\n * type Node struct {\n *     Val bool\n *     IsLeaf bool\n *     TopLeft *Node\n *     TopRight *Node\n *     BottomLeft *Node\n *     BottomRight *Node\n * }\n */\n\nfunc construct(grid [][]int) *Node {\n\tvar dfs func(y0, x0, width int) *Node\n\tdfs = func(y0, x0, width int) *Node {\n\t\tif width == 1 {\n\t\t\treturn \u0026Node{\n\t\t\t\tVal:    grid[y0][x0] == 1,\n\t\t\t\tIsLeaf: true,\n\t\t\t}\n\t\t}\n\n\t\tw := width / 2\n\t\ttopLeft := dfs(y0, x0, w)\n\t\ttopRight := dfs(y0, x0+w, w)\n\t\tbottomLeft := dfs(y0+w, x0, w)\n\t\tbottomRight := dfs(y0+w, x0+w, w)\n\t\tvar node *Node\n\n\t\tif topLeft.Val == topRight.Val \u0026\u0026 bottomLeft.Val == bottomRight.Val \u0026\u0026 topLeft.Val == bottomLeft.Val \u0026\u0026\n\t\t\ttopLeft.IsLeaf \u0026\u0026 topRight.IsLeaf \u0026\u0026 bottomLeft.IsLeaf \u0026\u0026 bottomRight.IsLeaf {\n\t\t\tnode = \u0026Node{\n\t\t\t\tVal:    topLeft.Val,\n\t\t\t\tIsLeaf: true,\n\t\t\t}\n\t\t} else {\n\t\t\tnode = \u0026Node{\n\t\t\t\tVal:         true,\n\t\t\t\tIsLeaf:      false,\n\t\t\t\tTopLeft:     topLeft,\n\t\t\t\tTopRight:    topRight,\n\t\t\t\tBottomLeft:  bottomLeft,\n\t\t\t\tBottomRight: bottomRight,\n\t\t\t}\n\t\t}\n\t\treturn node\n\t}\n\treturn dfs(0, 0, len(grid))\n}\n",
      "title": "Construct Quad Tree",
      "url": "/submissions/detail/1091201489/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093791,
      "status": 10,
      "runtime": "10 ms",
      "is_pending": "Not Pending",
      "memory": "6.6 MB",
      "compare_result": "1111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091201363,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 52,
      "title_slug": "n-queens-ii",
      "code": "func totalNQueens(n int) int {\n    sCol:=make([]bool,n)\n    sD1:=make([]bool,2*n)\n    sD2:=make([]bool,2*n)\n    return helper(0,n,sCol,sD1,sD2)\n}\nfunc helper(r,n int,sCol,sD1,sD2 []bool) int{\n    if r==n{\n        return 1\n    }\n    res:=0\n    for i:=0; i \u003c n; i++ {\n        if !sCol[i] \u0026\u0026 !sD1[i+r] \u0026\u0026 !sD2[(r-i)+n]{\n          // board[r][i]=true\n            sCol[i]=true\n            sD1[i+r]=true\n            sD2[(r-i)+n]=true\n            res=res+helper(r+1,n,sCol,sD1,sD2)\n          //  board[r][i]=false\n            sCol[i]=false\n            sD1[i+r]=false\n            sD2[(r-i)+n]=false\n        }\n    }\n    return res\n}",
      "title": "N-Queens II",
      "url": "/submissions/detail/1091201363/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093774,
      "status": 10,
      "runtime": "1 ms",
      "is_pending": "Not Pending",
      "memory": "2 MB",
      "compare_result": "111111111",
      "flag_type": 1
    },
    {
      "id": 1091201217,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 212,
      "title_slug": "word-search-ii",
      "code": "type Node struct {\n\tchildren [26]*Node\n\tword     string\n}\n\nfunc (n *Node) Insert(word string) {\n\tcur := n\n\tfor _, c := range word {\n\t\tidx := c - 'a'\n\t\tif cur.children[idx] == nil {\n\t\t\tcur.children[idx] = \u0026Node{}\n\t\t}\n\t\tcur = cur.children[idx]\n\t}\n\tcur.word = word\n}\n\nfunc (n *Node) IsEmpty() bool {\n\tfor _, child := range n.children {\n\t\tif child != nil {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc (n *Node) Remove(word string) bool {\n\tif len(word) == 0 {\n\t\tn.word = \"\"\n\t\treturn n.IsEmpty()\n\t}\n\tchild := n.children[word[0]-'a']\n\tif child.Remove(word[1:]) {\n\t\tn.children[word[0]-'a'] = nil\n\t\treturn n.IsEmpty()\n\t}\n\treturn false\n}\n\nfunc dfs(board [][]byte, r, c int, root, cur *Node, res *[]string) {\n\trc := board[r][c]\n\tboard[r][c] = 0\n    \n\tif cur.word != \"\" {\n\t\t*res = append(*res, cur.word)\n\t\troot.Remove(cur.word)\n\t}\n\tds := [5]int{0, 1, 0, -1, 0}\n\tfor i := 0; i \u003c len(ds)-1; i++ {\n\t\tdr, dc := r+ds[i], c+ds[i+1]\n\t\tif dr \u003c 0 || dr \u003e= len(board) || dc \u003c 0 || dc \u003e= len(board[0]) {\n\t\t\tcontinue\n\t\t}\n\t\tb := board[dr][dc]\n\t\tif b == 0 || cur.children[b-'a'] == nil {\n\t\t\tcontinue\n\t\t}\n\t\tdfs(board, dr, dc, root, cur.children[b-'a'], res)\n\t}\n\tboard[r][c] = rc\n}\n\nfunc findWords(board [][]byte, words []string) []string {\n\tm, n := len(board), len(board[0])\n\tres, trie, has := []string{}, \u0026Node{}, map[string]bool{}\n\n\tfor r := 0; r \u003c m; r++ {\n\t\tfor c := 0; c \u003c n-1; c++ {\n\t\t\tp := string(board[r][c]) + string(board[r][c+1])\n\t\t\thas[p] = true\n\t\t}\n\t}\n\tfor r := 0; r \u003c m-1; r++ {\n\t\tfor c := 0; c \u003c n; c++ {\n\t\t\tp := string(board[r][c]) + string(board[r+1][c])\n\t\t\thas[p] = true\n\t\t}\n\t}\n\tfor _, word := range words {\n\t\tvalid := true\n\t\tfor i := 0; i \u003c len(word)-1; i++ {\n\t\t\ta, b := string(word[i]), string(word[i+1])\n\t\t\tif !has[a+b] \u0026\u0026 !has[b+a] {\n\t\t\t\tvalid = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif valid {\n\t\t\ttrie.Insert(word)\n\t\t}\n\t}\n\tfor r := 0; r \u003c m; r++ {\n\t\tfor c := 0; c \u003c n; c++ {\n\t\t\tb := board[r][c]\n\t\t\tif trie.children[b-'a'] != nil {\n\t\t\t\tdfs(board, r, c, trie, trie.children[b-'a'], \u0026res)\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}",
      "title": "Word Search II",
      "url": "/submissions/detail/1091201217/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093756,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "2.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091201004,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 127,
      "title_slug": "word-ladder",
      "code": "func ladderLength(beginWord string, endWord string, wordList []string) int {\n    \n    set := make(map[string]struct{}, len(wordList))\n    \n    present := false\n    \n    for _, v := range wordList {\n        if endWord == v {\n            present = true\n        } \n        \n        set[v] = struct{}{} \n    }\n    \n    if !present {\n        return 0\n    }\n    \n    set[beginWord] = struct{}{}\n    q := []string{beginWord}\n    \n    depth := 1\n    breadth := 0\n    \n    breadth = len(q)\n    \n    for ;breadth \u003e 0; {\n        s := q[0]\n        \n        if s == endWord {\n            return depth\n        }\n        \n        for i:='a'; i \u003c= 'z'; i += 1 {\n                        \n            for j := 0; j\u003clen(s); j++ {\n \n                if rune(s[j]) != i {\n                    \n                    temp := s[:j] + string(i) + s[j+1:]\n                    if _, ok := set[temp]; !ok {\n                        continue\n                    }\n                    \n                    q = append(q, temp)\n                    delete(set, s)\n                }\n            }\n        }\n        \n        q = q[1:]\n        \n        breadth -= 1\n        if breadth == 0 {\n            breadth = len(q)\n            depth += 1\n        }\n    }\n    \n    return 0 \n}",
      "title": "Word Ladder",
      "url": "/submissions/detail/1091201004/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093730,
      "status": 10,
      "runtime": "2746 ms",
      "is_pending": "Not Pending",
      "memory": "8 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091200613,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 210,
      "title_slug": "course-schedule-ii",
      "code": "func findOrder(numCourses int, prerequisites [][]int) []int {\n    //build the graph\n    graph := make([][]int,numCourses)\n    in_degree := make([]int,numCourses)\n    for _,v := range prerequisites{\n        graph[v[1]] = append(graph[v[1]], v[0])\n        in_degree[v[0]]++\n    }\n\n    frontier := []int{}\n    for i,v := range in_degree{\n        if v==0{\n            frontier = append(frontier,i)\n        }\n    }\n\n    result := []int{}\n    for len(frontier)!=0{\n        cur := frontier[0]\n        frontier = frontier[1:]\n        result = append(result,cur)\n        for _,v := range graph[cur]{\n            in_degree[v]--\n            if in_degree[v]==0{\n                frontier = append(frontier,v)\n            }\n        }\n    }\n\n    if len(result)==numCourses{\n        return result\n    }\n    return []int{}\n}",
      "title": "Course Schedule II",
      "url": "/submissions/detail/1091200613/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093684,
      "status": 10,
      "runtime": "9 ms",
      "is_pending": "Not Pending",
      "memory": "5.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091200483,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 124,
      "title_slug": "binary-tree-maximum-path-sum",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxPathSum(root *TreeNode) int {\n    ans := -1 \u003c\u003c 63\n    maxPath(root, \u0026ans)\n    return ans\n}\n\nfunc maxPath(root *TreeNode, ans *int) int {\n    if root == nil {\n        return 0\n    }\n    leftPathSum := maxPath(root.Left, ans)\n    rightPathSum := maxPath(root.Right, ans)\n    *ans = max(*ans, leftPathSum + rightPathSum + root.Val)\n    return max(max(leftPathSum+root.Val, rightPathSum+root.Val), 0)\n}\n\nfunc max(a int, b int) int {\n    if (a \u003e= b) {\n        return a\n    }\n    return b\n}\n",
      "title": "Binary Tree Maximum Path Sum",
      "url": "/submissions/detail/1091200483/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093667,
      "status": 10,
      "runtime": "11 ms",
      "is_pending": "Not Pending",
      "memory": "8.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1091200359,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 106,
      "title_slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
      "code": "func buildTree(inorder []int, postorder []int) *TreeNode {\n\tn := len(postorder)\n\tif n == 0 {\n\t\treturn nil\n\t}\n\n\tpivotId := 0\n\tfor pivotId \u003c n \u0026\u0026 inorder[pivotId] != postorder[n-1] {\n\t\tpivotId++\n\t}\n\n\troot := new(TreeNode)\n\troot.Val = postorder[n-1]\n\troot.Left = buildTree(inorder[:pivotId], postorder[:pivotId])\n\troot.Right = buildTree(inorder[pivotId+1:], postorder[pivotId:n-1])\n\treturn root\n}\n",
      "title": "Construct Binary Tree from Inorder and Postorder Traversal",
      "url": "/submissions/detail/1091200359/",
      "lang_name": "Go",
      "time": "3 months",
      "timestamp": 1699093649,
      "status": 10,
      "runtime": "7 ms",
      "is_pending": "Not Pending",
      "memory": "3.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096031957,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1894,
      "title_slug": "merge-strings-alternately",
      "code": "class Solution {\npublic:\n    string mergeAlternately(string word1, string word2) {\n        int l1 = word1.size(), l2 = word2.size();\n        string result = \"\";\n        int i = 0, j = 0;\n\n        while (i \u003c m || j \u003c n) {\n            if (i \u003c m) {\n                result.push_back(word1[i++]);\n            }\n            if (j \u003c n) {\n                result.push_back(word2[j++]);\n            }\n        }\n\n        return result;\n    }\n};",
      "title": "Merge Strings Alternately",
      "url": "/submissions/detail/1096031957/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699634952,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1096031254,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1894,
      "title_slug": "merge-strings-alternately",
      "code": "class Solution {\npublic:\n    string mergeAlternately(string word1, string word2) {\n        std::stringstream ans;\n        int l1 = word1.size(), l2 = word2.size();\n        int lMax = max(l1, l2);\n        for (int i = 0; i \u003c lMax; ++i) {\n            if (i \u003c l1) {\n                ans \u003c\u003c word1[i];\n            } else {\n                ans \u003c\u003c word2.substr(i);\n                break;\n            }\n            if (i \u003c l2) {\n                ans \u003c\u003c word2[i];\n            } else {\n                ans \u003c\u003c word1.substr(i + 1);\n                break;\n            }\n        }\n        return ans.str();\n    }\n};",
      "title": "Merge Strings Alternately",
      "url": "/submissions/detail/1096031254/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699634878,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096023462,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1572,
      "title_slug": "subrectangle-queries",
      "code": "class SubrectangleQueries {\n    vector\u003cvector\u003cint\u003e\u003e res;\npublic:\n    SubrectangleQueries(vector\u003cvector\u003cint\u003e\u003e\u0026 rectangle) {\n        res=rectangle;\n    }\n    \n    void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {\n        for(int i = row1; i \u003c= row2; ++i) {\n            for(int j= col1; j \u003c= col2; ++j) {\n                res[i][j] = newValue;\n            }\n        }\n    }\n    \n    int getValue(int row, int col) {\n        return res[row][col];\n    }\n};\n\n/**\n * Your SubrectangleQueries object will be instantiated and called as such:\n * SubrectangleQueries* obj = new SubrectangleQueries(rectangle);\n * obj-\u003eupdateSubrectangle(row1,col1,row2,col2,newValue);\n * int param_2 = obj-\u003egetValue(row,col);\n */",
      "title": "Subrectangle Queries",
      "url": "/submissions/detail/1096023462/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699634090,
      "status": 10,
      "runtime": "35 ms",
      "is_pending": "Not Pending",
      "memory": "18.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1096014225,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1572,
      "title_slug": "subrectangle-queries",
      "code": "class SubrectangleQueries {\npublic:\n    std::vector\u003cstd::vector\u003cint\u003e\u003e rectangle;\n    std::vector\u003cstd::array\u003cint, 5\u003e\u003e updates;\n    SubrectangleQueries(vector\u003cvector\u003cint\u003e\u003e\u0026 rectangle) {\n        this-\u003erectangle = rectangle;\n    }\n    \n    void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {\n        this-\u003eupdates.push_back({row1, col1, row2, col2, newValue});\n    }\n    \n    int getValue(int row, int col) {\n        int length = this-\u003eupdates.size();\n        for (int i = length - 1; i \u003e= 0; --i) {\n            auto const [row1, col1, row2, col2, newValue] = this-\u003eupdates[i];\n            if (row \u003c row1 || row \u003e row2 || col \u003c col1 || col \u003e col2) {\n                continue;\n            }\n            return newValue;\n        }\n        return this-\u003erectangle[row][col];\n    }\n};\n\n/**\n * Your SubrectangleQueries object will be instantiated and called as such:\n * SubrectangleQueries* obj = new SubrectangleQueries(rectangle);\n * obj-\u003eupdateSubrectangle(row1,col1,row2,col2,newValue);\n * int param_2 = obj-\u003egetValue(row,col);\n */",
      "title": "Subrectangle Queries",
      "url": "/submissions/detail/1096014225/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699633107,
      "status": 10,
      "runtime": "35 ms",
      "is_pending": "Not Pending",
      "memory": "19.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111",
      "has_notes": true,
      "flag_type": 1
    },
    {
      "id": 1095991971,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2104,
      "title_slug": "operations-on-tree",
      "code": "class LockingTree {\npublic:\n    std::vector\u003cint\u003e parents, locked;\n    std::vector\u003cstd::vector\u003cint\u003e\u003e children;\n    LockingTree(vector\u003cint\u003e\u0026 parent) {\n        int length = parent.size();\n        this-\u003echildren.resize(length);\n        this-\u003elocked.resize(length, -1);\n        this-\u003eparents = parent;\n        for (int i = 1; i \u003c length; ++i) {\n            this-\u003echildren[this-\u003eparents[i]].push_back(i);\n        }\n    }\n    \n    bool lock(int num, int user) {\n        if (this-\u003elocked[num] != -1) {\n            return false;\n        }\n        this-\u003elocked[num] = user;\n        return true;\n    }\n    \n    bool unlock(int num, int user) {\n        if (this-\u003elocked[num] != user) {\n            return false;\n        }\n        this-\u003elocked[num] = -1;\n        return true;\n    }\n\n    bool upgrade(int num, int user) {\n        if (this-\u003elocked[num] != -1) {\n            return false;\n        }\n        int parent = this-\u003eparents[num];\n        while (parent != -1) {\n            if (this-\u003elocked[parent] != -1) {\n                return false;\n            }\n            parent = this-\u003eparents[parent];\n        }\n        if (!this-\u003eunlockDesc(num)) {\n            return false;\n        }\n        this-\u003elocked[num] = user;\n        return true;\n    }\n\n    bool unlockDesc(int parent) {\n        bool hasLocked = false;\n        for (auto const\u0026 child : this-\u003echildren[parent]) {\n            if (this-\u003elocked[child] != -1) {\n                this-\u003elocked[child] = -1;\n                hasLocked = true;\n            }\n            bool descHasLocked = unlockDesc(child);\n            if (descHasLocked) {\n                hasLocked = true;\n            }\n        }\n        return hasLocked;\n    }\n};\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * LockingTree* obj = new LockingTree(parent);\n * bool param_1 = obj-\u003elock(num,user);\n * bool param_2 = obj-\u003eunlock(num,user);\n * bool param_3 = obj-\u003eupgrade(num,user);\n */",
      "title": "Operations on Tree",
      "url": "/submissions/detail/1095991971/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699630679,
      "status": 10,
      "runtime": "291 ms",
      "is_pending": "Not Pending",
      "memory": "123.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1095987911,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 2104,
      "title_slug": "operations-on-tree",
      "code": "class LockingTree {\npublic:\n    std::vector\u003cint\u003e parents, locked;\n    std::vector\u003cstd::vector\u003cint\u003e\u003e children;\n    LockingTree(vector\u003cint\u003e\u0026 parent) {\n        int length = parent.size();\n        this-\u003echildren.resize(length);\n        this-\u003elocked.resize(length, -1);\n        this-\u003eparents = parent;\n        for (int i = 1; i \u003c length; ++i) {\n            this-\u003echildren[this-\u003eparents[i]].push_back(i);\n        }\n    }\n    \n    bool lock(int num, int user) {\n        if (this-\u003elocked[num] != -1) {\n            return false;\n        }\n        this-\u003elocked[num] = user;\n        return true;\n    }\n    \n    bool unlock(int num, int user) {\n        if (this-\u003elocked[num] != user) {\n            return false;\n        }\n        this-\u003elocked[num] = -1;\n        return true;\n    }\n\n    bool upgrade(int num, int user) {\n        if (this-\u003elocked[num] != -1) {\n            return false;\n        }\n        int parent = this-\u003eparents[num];\n        while (parent != -1) {\n            if (this-\u003elocked[parent]) {\n                return false;\n            }\n            parent = this-\u003eparents[parent];\n        }\n        if (!this-\u003eunlockDesc(num)) {\n            return false;\n        }\n        this-\u003elocked[num] = user;\n        return true;\n    }\n\n    bool unlockDesc(int parent) {\n        bool hasLocked = false;\n        for (auto const\u0026 child : this-\u003echildren[parent]) {\n            if (this-\u003elocked[child]) {\n                this-\u003elocked[child] = false;\n                hasLocked = true;\n                bool descHasLocked = unlockDesc(child);\n                if (descHasLocked) {\n                    hasLocked = true;\n                }\n            }\n        }\n        return hasLocked;\n    }\n};\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * LockingTree* obj = new LockingTree(parent);\n * bool param_1 = obj-\u003elock(num,user);\n * bool param_2 = obj-\u003eunlock(num,user);\n * bool param_3 = obj-\u003eupgrade(num,user);\n */",
      "title": "Operations on Tree",
      "url": "/submissions/detail/1095987911/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699630242,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110111000001000001000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000100000000000000000000000000011",
      "flag_type": 1
    },
    {
      "id": 1095927384,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 225,
      "title_slug": "implement-stack-using-queues",
      "code": "class MyStack {\npublic:\n    std::vector\u003cint\u003e v;\n\n    MyStack() {\n        this-\u003ev = {};\n    }\n    \n    void push(int x) {\n        this-\u003ev.push_back(x);\n    }\n    \n    int pop() {\n        int last = this-\u003ev.back();\n        this-\u003ev.pop_back();\n        return last;\n    }\n    \n    int top() {\n        return this-\u003ev.back();\n    }\n    \n    bool empty() {\n        return this-\u003ev.empty();\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj-\u003epush(x);\n * int param_2 = obj-\u003epop();\n * int param_3 = obj-\u003etop();\n * bool param_4 = obj-\u003eempty();\n */",
      "title": "Implement Stack using Queues",
      "url": "/submissions/detail/1095927384/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699623033,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "7.1 MB",
      "compare_result": "111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1095854733,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1866,
      "title_slug": "restore-the-array-from-adjacent-pairs",
      "code": "func restoreArray(adjacentPairs [][]int) []int {\n    // [[2,1],[3,4],[3,2]]\n    // 1: [2]\n    // 2: [1, 3]\n    // 3: [2, 4]\n    // 4: [3]\n    // Output: [1,2,3,4]\n    graph := map[int][]int{}\n    length := len(adjacentPairs) + 1\n    ans := make([]int, length)\n    for _, pair := range adjacentPairs {\n        num1, num2 := pair[0], pair[1]\n        graph[num1] = append(graph[num1], num2)\n        graph[num2] = append(graph[num2], num1)\n    }\n    for node, edges := range graph {\n        if len(edges) == 1 {\n            ans[0], ans[1] = node, edges[0]\n            break\n        }\n    }\n    cur, prev := ans[1], ans[0]\n    for i := 2; i \u003c length; i++ {\n        for _, target := range graph[cur] {\n            if target != prev {\n                ans[i] = target\n                cur, prev = target, cur\n                break\n            }\n        }\n    }\n    return ans\n}",
      "title": "Restore the Array From Adjacent Pairs",
      "url": "/submissions/detail/1095854733/",
      "lang_name": "Go",
      "time": "2 months, 3 weeks",
      "timestamp": 1699612237,
      "status": 10,
      "runtime": "158 ms",
      "is_pending": "Not Pending",
      "memory": "31.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1095852311,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1866,
      "title_slug": "restore-the-array-from-adjacent-pairs",
      "code": "func restoreArray(adjacentPairs [][]int) []int {\n    // [[2,1],[3,4],[3,2]]\n    // 1: [2]\n    // 2: [1, 3]\n    // 3: [2, 4]\n    // 4: [3]\n    // Output: [1,2,3,4]\n    graph := map[int][]int{}\n    for _, pair := range adjacentPairs {\n        num1, num2 := pair[0], pair[1]\n        graph[num1] = append(graph[num1], num2)\n        graph[num2] = append(graph[num2], num1)\n    }\n    length := len(adjacentPairs) + 1\n    ans := make([]int, length)\n    for node, edges := range graph {\n        if len(edges) == 1 {\n            ans[0], ans[1] = node, edges[0]\n            break\n        }\n    }\n    for i := 2; i \u003c length; i++ {\n        cur, prev := ans[i-1], ans[i-2]\n        for _, target := range graph[cur] {\n            if target != prev {\n                ans[i] = target\n            }\n        }\n    }\n    return ans\n}",
      "title": "Restore the Array From Adjacent Pairs",
      "url": "/submissions/detail/1095852311/",
      "lang_name": "Go",
      "time": "2 months, 3 weeks",
      "timestamp": 1699611896,
      "status": 10,
      "runtime": "184 ms",
      "is_pending": "Not Pending",
      "memory": "34.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1095850051,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1866,
      "title_slug": "restore-the-array-from-adjacent-pairs",
      "code": "func restoreArray(adjacentPairs [][]int) []int {\n    graph := map[int][]int{}\n    for _, pair := range adjacentPairs {\n        num1, num2 := pair[0], pair[1]\n        graph[num1] = append(graph[num1], num2)\n        graph[num2] = append(graph[num2], num1)\n    }\n    var start *int\n    for node, edges := range graph {\n        if len(edges) == 1 {\n            start = \u0026node\n        }\n    }\n    // [[2,1],[3,4],[3,2]]\n    // 1: [2]\n    // 2: [1, 3]\n    // 3: [2, 4]\n    // 4: [3]\n    // Output: [1,2,3,4]\n    length := len(adjacentPairs) + 1\n    ans := make([]int, length)\n    ans[0] = *start\n    ans[1] = graph[*start][0]\n    for i := 2; i \u003c length; i++ {\n        cur, prev := ans[i-1], ans[i-2]\n        for _, target := range graph[cur] {\n            if target != prev {\n                ans[i] = target\n            }\n        }\n    }\n    return ans\n}",
      "title": "Restore the Array From Adjacent Pairs",
      "url": "/submissions/detail/1095850051/",
      "lang_name": "Go",
      "time": "2 months, 3 weeks",
      "timestamp": 1699611560,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111101000000011000000000000000100000000010000",
      "flag_type": 1
    },
    {
      "id": 1095849989,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 1866,
      "title_slug": "restore-the-array-from-adjacent-pairs",
      "code": "func restoreArray(adjacentPairs [][]int) []int {\n    graph := map[int][]int{}\n    for _, pair := range adjacentPairs {\n        num1, num2 := pair[0], pair[1]\n        graph[num1] = append(graph[num1], num2)\n        graph[num2] = append(graph[num2], num1)\n    }\n    var start *int\n    for node, edges := range graph {\n        if len(edges) == 1 {\n            start = \u0026node\n        }\n    }\n    fmt.Fprintln(\"%s\", graph)\n    // [[2,1],[3,4],[3,2]]\n    // 1: [2]\n    // 2: [1, 3]\n    // 3: [2, 4]\n    // 4: [3]\n    // Output: [1,2,3,4]\n    length := len(adjacentPairs) + 1\n    ans := make([]int, length)\n    ans[0] = *start\n    ans[1] = graph[*start][0]\n    for i := 2; i \u003c length; i++ {\n        cur, prev := ans[i-1], ans[i-2]\n        for _, target := range graph[cur] {\n            if target != prev {\n                ans[i] = target\n            }\n        }\n    }\n    return ans\n}",
      "title": "Restore the Array From Adjacent Pairs",
      "url": "/submissions/detail/1095849989/",
      "lang_name": "Go",
      "time": "2 months, 3 weeks",
      "timestamp": 1699611552,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1095849897,
      "status_display": "Compile Error",
      "lang": "golang",
      "question_id": 1866,
      "title_slug": "restore-the-array-from-adjacent-pairs",
      "code": "func restoreArray(adjacentPairs [][]int) []int {\n    graph := map[int][]int{}\n    for _, pair := range adjacentPairs {\n        num1, num2 := pair[0], pair[1]\n        graph[num1] = append(graph[num1], num2)\n        graph[num2] = append(graph[num2], num1)\n    }\n    var start *int\n    for node, edges := range graph {\n        if len(edges) == 1 {\n            start = \u0026node\n        }\n    }\n    fmt.Fprintln(\"%v\", graph)\n    // [[2,1],[3,4],[3,2]]\n    // 1: [2]\n    // 2: [1, 3]\n    // 3: [2, 4]\n    // 4: [3]\n    // Output: [1,2,3,4]\n    length := len(adjacentPairs) + 1\n    ans := make([]int, length)\n    ans[0] = *start\n    ans[1] = graph[*start][0]\n    for i := 2; i \u003c length; i++ {\n        cur, prev := ans[i-1], ans[i-2]\n        for _, target := range graph[cur] {\n            if target != prev {\n                ans[i] = target\n            }\n        }\n    }\n    return ans\n}",
      "title": "Restore the Array From Adjacent Pairs",
      "url": "/submissions/detail/1095849897/",
      "lang_name": "Go",
      "time": "2 months, 3 weeks",
      "timestamp": 1699611538,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1095849375,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1866,
      "title_slug": "restore-the-array-from-adjacent-pairs",
      "code": "func restoreArray(adjacentPairs [][]int) []int {\n    graph := map[int][]int{}\n    for _, pair := range adjacentPairs {\n        num1, num2 := pair[0], pair[1]\n        graph[num1] = append(graph[num1], num2)\n        graph[num2] = append(graph[num2], num1)\n    }\n    var start *int\n    for node, edges := range graph {\n        if len(edges) == 1 {\n            start = \u0026node\n        }\n    }\n    fmt.Println(\"\")\n    // [[2,1],[3,4],[3,2]]\n    // 1: [2]\n    // 2: [1, 3]\n    // 3: [2, 4]\n    // 4: [3]\n    // Output: [1,2,3,4]\n    length := len(adjacentPairs) + 1\n    ans := make([]int, length)\n    ans[0] = *start\n    ans[1] = graph[*start][0]\n    for i := 2; i \u003c length; i++ {\n        cur, prev := ans[i-1], ans[i-2]\n        for _, target := range graph[cur] {\n            if target != prev {\n                ans[i] = target\n            }\n        }\n    }\n    return ans\n}",
      "title": "Restore the Array From Adjacent Pairs",
      "url": "/submissions/detail/1095849375/",
      "lang_name": "Go",
      "time": "2 months, 3 weeks",
      "timestamp": 1699611457,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111110010010000000000000001000000000000011000",
      "flag_type": 1
    },
    {
      "id": 1095848642,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1866,
      "title_slug": "restore-the-array-from-adjacent-pairs",
      "code": "func restoreArray(adjacentPairs [][]int) []int {\n    graph := map[int][]int{}\n    for _, pair := range adjacentPairs {\n        num1, num2 := pair[0], pair[1]\n        graph[num1] = append(graph[num1], num2)\n        graph[num2] = append(graph[num2], num1)\n    }\n    var start *int\n    for node, edges := range graph {\n        if len(edges) == 1 {\n            start = \u0026node\n        }\n    }\n    // [[2,1],[3,4],[3,2]]\n    // 1: [2]\n    // 2: [1, 3]\n    // 3: [2, 4]\n    // 4: [3]\n    // Output: [1,2,3,4]\n    length := len(adjacentPairs) + 1\n    ans := make([]int, length)\n    ans[0] = *start\n    ans[1] = graph[*start][0]\n    for i := 2; i \u003c length; i++ {\n        cur, prev := ans[i-1], ans[i-2]\n        for _, target := range graph[cur] {\n            if target != prev {\n                ans[i] = target\n            }\n        }\n    }\n    return ans\n}",
      "title": "Restore the Array From Adjacent Pairs",
      "url": "/submissions/detail/1095848642/",
      "lang_name": "Go",
      "time": "2 months, 3 weeks",
      "timestamp": 1699611355,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0111100000010000000000000000100000000000000000",
      "flag_type": 1
    },
    {
      "id": 1095037372,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1885,
      "title_slug": "count-number-of-homogenous-substrings",
      "code": "func countHomogenous(s string) int {\n    var (\n        mod int64 = 1000000007 \n        total int64 = 0\n        count int64 = 0\n        cur = s[0]\n    )\n    \n    for i := 0; i \u003c len(s); i++ {\n        char := s[i]\n        if char == cur {\n            count++\n        } else {\n            count = 1\n            cur = char\n        }\n        total += count\n    }\n    \n    return int(total % mod)\n}",
      "title": "Count Number of Homogenous Substrings",
      "url": "/submissions/detail/1095037372/",
      "lang_name": "Go",
      "time": "2 months, 3 weeks",
      "timestamp": 1699513420,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "6.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1094276079,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 3056,
      "title_slug": "determine-if-a-cell-is-reachable-at-a-given-time",
      "code": "func isReachableAtTime(sx int, sy int, fx int, fy int, t int) bool {\n    vert := abs(sy, fy)\n    dist := vert + max(0, abs(sx, fx) - vert)\n    if dist == 0 \u0026\u0026 t == 1 {\n        return false\n    }\n    return dist \u003c= t\n}\n\nfunc abs(x, y int) int {\n    if x \u003e y {\n        return x - y\n    }\n    return y - x\n}",
      "title": "Determine if a Cell Is Reachable at a Given Time",
      "url": "/submissions/detail/1094276079/",
      "lang_name": "Go",
      "time": "2 months, 4 weeks",
      "timestamp": 1699430941,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "2.6 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1094275272,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 3056,
      "title_slug": "determine-if-a-cell-is-reachable-at-a-given-time",
      "code": "func isReachableAtTime(sx int, sy int, fx int, fy int, t int) bool {\n    vert := abs(sy, fy)\n    return vert + max(0, abs(sx, fx) - vert)  \u003c= t\n}\n\nfunc abs(x, y int) int {\n    if x \u003e y {\n        return x - y\n    }\n    return y - x\n}",
      "title": "Determine if a Cell Is Reachable at a Given Time",
      "url": "/submissions/detail/1094275272/",
      "lang_name": "Go",
      "time": "2 months, 4 weeks",
      "timestamp": 1699430856,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1093848808,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 816,
      "title_slug": "design-hashset",
      "code": "type MyHashSet struct {\n    m map[int]struct{}\n}\n\n\nfunc Constructor() MyHashSet {\n    return MyHashSet{map[int]struct{}{}}\n}\n\n\nfunc (this *MyHashSet) Add(key int)  {\n    this.m[key] = struct{}{}\n}\n\n\nfunc (this *MyHashSet) Remove(key int)  {\n    delete(this.m, key)\n}\n\n\nfunc (this *MyHashSet) Contains(key int) bool {\n    _, ok := this.m[key]\n    return ok\n}\n\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Add(key);\n * obj.Remove(key);\n * param_3 := obj.Contains(key);\n */",
      "title": "Design HashSet",
      "url": "/submissions/detail/1093848808/",
      "lang_name": "Go",
      "time": "2 months, 4 weeks",
      "timestamp": 1699383404,
      "status": 10,
      "runtime": "68 ms",
      "is_pending": "Not Pending",
      "memory": "8.1 MB",
      "compare_result": "111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1093844607,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1894,
      "title_slug": "merge-strings-alternately",
      "code": "func mergeAlternately(word1 string, word2 string) string {\n    var sb strings.Builder\n    length1, length2 := len(word1), len(word2)\n    for i := 0; i \u003c max(length1, length2); i++ {\n        if i == length1 {\n            sb.WriteString(word2[i:length2])\n            break\n        }\n        if i == length2 {\n            sb.WriteString(word1[i:length1])\n            break\n        }\n        sb.WriteByte(word1[i])\n        sb.WriteByte(word2[i])\n    }\n    return sb.String()\n}",
      "title": "Merge Strings Alternately",
      "url": "/submissions/detail/1093844607/",
      "lang_name": "Go",
      "time": "2 months, 4 weeks",
      "timestamp": 1699383048,
      "status": 10,
      "runtime": "1 ms",
      "is_pending": "Not Pending",
      "memory": "2.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1093720985,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 2049,
      "title_slug": "eliminate-maximum-number-of-monsters",
      "code": "func eliminateMaximum(dist []int, speed []int) int {\n    arrival := []float32{}\n    length := len(dist)\n    for i := 0; i \u003c length; i++ {\n        arrival = append(arrival, float32(dist[i]) / float32(speed[i]))\n    }\n    slices.Sort(arrival)\n    ans := 0\n    for i := 0; i \u003c length; i++ {\n        if arrival[i] \u003c= float32(i) {\n            break\n        }\n        ans += 1\n    }\n    return ans\n}",
      "title": "Eliminate Maximum Number of Monsters",
      "url": "/submissions/detail/1093720985/",
      "lang_name": "Go",
      "time": "2 months, 4 weeks",
      "timestamp": 1699373268,
      "status": 10,
      "runtime": "103 ms",
      "is_pending": "Not Pending",
      "memory": "8.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096536118,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 203,
      "title_slug": "remove-linked-list-elements",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        auto newHead = new ListNode(-1, head);\n        auto ans = newHead;\n        while (newHead) {\n            auto next = head.next;\n            if (next \u0026\u0026 next.val == val) {\n                next = head.next.next;\n                head.next = next;\n            }\n            head = next;\n        }\n        return ans.next;\n    }\n};",
      "title": "Remove Linked List Elements",
      "url": "/submissions/detail/1096536118/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699707598,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1096533219,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "class Solution {\npublic:\n    bool isValid(string s) {\n        std::vector\u003cchar\u003e stack;\n        for (const auto\u0026 ch : s) {\n            switch (ch){\n                case '[':\n                case '{':\n                case '(':\n                    stack.push_back(ch);\n                    break;\n                case ')':\n                    if (stack.empty() || stack.back() != '(') {\n                        return false;\n                    }\n                    stack.pop_back();\n                    break;\n                case '}':\n                    if (stack.empty() || stack.back() != '{') {\n                        return false;\n                    }\n                    stack.pop_back();\n                    break;\n                case ']':\n                    if (stack.empty() || stack.back() != '[') {\n                        return false;\n                    }\n                    stack.pop_back();\n                    break;\n            }\n        }\n        return stack.size() == 0;\n    }\n};",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/1096533219/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699707178,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "6.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096532929,
      "status_display": "Runtime Error",
      "lang": "cpp",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "class Solution {\npublic:\n    bool isValid(string s) {\n        std::vector\u003cchar\u003e stack;\n        for (const auto\u0026 ch : s) {\n            switch (ch){\n                case '[':\n                case '{':\n                case '(':\n                    stack.push_back(ch);\n                    break;\n                case ')':\n                    if (stack.back() != '(') {\n                        return false;\n                    }\n                    stack.pop_back();\n                    break;\n                case '}':\n                    if (stack.back() != '{') {\n                        return false;\n                    }\n                    stack.pop_back();\n                    break;\n                case ']':\n                    if (stack.back() != '[') {\n                        return false;\n                    }\n                    stack.pop_back();\n                    break;\n            }\n        }\n        return stack.size() == 0;\n    }\n};",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/1096532929/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699707134,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1096532762,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 20,
      "title_slug": "valid-parentheses",
      "code": "class Solution {\npublic:\n    bool isValid(string s) {\n        std::vector\u003cchar\u003e stack;\n        for (const auto\u0026 ch : s) {\n            switch (ch){\n                case '[':\n                case '{':\n                case '(':\n                    stack.push_back(ch);\n                    break;\n                case ')':\n                    if (stack.back() != '(') {\n                        return false;\n                    }\n                    stack.pop_back();\n                    break;\n                case '}':\n                    if (stack.back() != '{') {\n                        return false;\n                    }\n                    stack.pop_back();\n                    break;\n                case ']':\n                    if (stack.back() != '[') {\n                        return false;\n                    }\n                    stack.pop_back();\n                    break;\n            }\n        }\n        return true;\n    }\n};",
      "title": "Valid Parentheses",
      "url": "/submissions/detail/1096532762/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699707114,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1096529439,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "class Solution {\npublic:\n    vector\u003cint\u003e twoSum(vector\u003cint\u003e\u0026 nums, int target) {\n        std::map\u003cint, int\u003e numToIndex;\n        int length = nums.size();\n        std::vector\u003cint\u003e ans;\n        for (int i = 0; i \u003c length; ++i) {\n            int num = nums[i];\n            int diff = target - num;\n            if (numToIndex.contains(diff)) {\n                ans = {numToIndex[diff], i};\n                break;\n            }\n            numToIndex[num] = i;\n        }\n        return ans;\n    }\n};",
      "title": "Two Sum",
      "url": "/submissions/detail/1096529439/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699706616,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "11.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096529401,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "class Solution {\npublic:\n    vector\u003cint\u003e twoSum(vector\u003cint\u003e\u0026 nums, int target) {\n        std::map\u003cint, int\u003e numToIndex;\n        int length = nums.size();\n        std::vector\u003cint\u003e ans;\n        for (int i = 0; i \u003c length; ++i) {\n            int num = nums[i];\n            int diff = target - num;\n            if (numToIndex.contains(diff)) {\n                ans = {numToIndex[diff], i};\n                break\n            }\n            numToIndex[num] = i;\n        }\n        return ans;\n    }\n};",
      "title": "Two Sum",
      "url": "/submissions/detail/1096529401/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699706608,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1096529361,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "class Solution {\npublic:\n    vector\u003cint\u003e twoSum(vector\u003cint\u003e\u0026 nums, int target) {\n        std::map\u003cint, int\u003e numToIndex;\n        int length = nums.size();\n        std::vector\u003cint\u003e ans;\n        for (int i = 0; i \u003c length; ++i) {\n            int num = nums[i];\n            int diff = target - num;\n            if (numToIndex.contains(diff)) {\n                ans = {numToIndex[diff], i};\n                break\n            }\n            numToIndex[num] = i;\n        }\n        return ans\n    }\n};",
      "title": "Two Sum",
      "url": "/submissions/detail/1096529361/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699706601,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1096529114,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "class Solution {\npublic:\n    vector\u003cint\u003e twoSum(vector\u003cint\u003e\u0026 nums, int target) {\n        std::map\u003cint, int\u003e numToIndex;\n        int length = nums.size();\n        for (int i = 0; i \u003c length; ++i) {\n            int num = nums[i];\n            int diff = target - num;\n            if (numToIndex.contains(diff)) {\n                return std::vector\u003cint\u003e{numToIndex[diff], i};\n            }\n            numToIndex[num] = i;\n        }\n    }\n};",
      "title": "Two Sum",
      "url": "/submissions/detail/1096529114/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699706560,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1096529076,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1,
      "title_slug": "two-sum",
      "code": "class Solution {\npublic:\n    vector\u003cint\u003e twoSum(vector\u003cint\u003e\u0026 nums, int target) {\n        std::map\u003cint, int\u003e numToIndex;\n        int length = nums.size();\n        for (int i = 0; i \u003c length; ++i) {\n            int num = nums[i];\n            int diff = target - num;\n            if (numToIndex.contains(diff)) {\n                return std::vector\u003cint\u003e{numToIndex[diff], i}\n            }\n            numToIndex[num] = i;\n        }\n    }\n};",
      "title": "Two Sum",
      "url": "/submissions/detail/1096529076/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699706553,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1096525336,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 151,
      "title_slug": "reverse-words-in-a-string",
      "code": "class Solution {\npublic:\n    string reverseWords(string s) {\n        string ans = \"\";\n        string temp = \"\";\n        int length = s.length();\n        int j = 0;\n        for (j = 0; s[j] == ' ' \u0026\u0026 j \u003c length; ++j) { }\n        for (int i = length - 1; i \u003e= j; --i) {\n            if(s[i] == ' '){\n                if(temp != \"\"){                  \n                    ans = ans + temp + ' ';\n                    temp = \"\";\n                }\n                continue;\n            }\n            else{\n                temp = s[i] + temp;\n            }\n        }\n        return ans + temp;\n    }\n};",
      "title": "Reverse Words in a String",
      "url": "/submissions/detail/1096525336/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699705954,
      "status": 10,
      "runtime": "8 ms",
      "is_pending": "Not Pending",
      "memory": "46.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096520085,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 206,
      "title_slug": "reverse-linked-list",
      "code": "\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = NULL;\n        ListNode* curr = head;\n        while(curr != NULL){\n            ListNode* next = curr-\u003enext;\n            curr-\u003enext = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};",
      "title": "Reverse Linked List",
      "url": "/submissions/detail/1096520085/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699705119,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "8.8 MB",
      "compare_result": "1111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096516392,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "class Solution {\npublic:\n    void moveZeroes(vector\u003cint\u003e\u0026 nums) {\n        int length = nums.size();\n        int lastNonZeroFoundAt = 0;\n        for (int i = 0; i \u003c length; ++i) {\n            if (nums[i] != 0) {\n                swap(nums[lastNonZeroFoundAt], nums[i]);\n                lastNonZeroFoundAt += 1;\n            }\n        }\n    }\n};",
      "title": "Move Zeroes",
      "url": "/submissions/detail/1096516392/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699704535,
      "status": 10,
      "runtime": "16 ms",
      "is_pending": "Not Pending",
      "memory": "19.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096516231,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "class Solution {\npublic:\n    void moveZeroes(vector\u003cint\u003e\u0026 nums) {\n        int length = nums.size();\n        int lastNonZeroFoundAt = 0;\n        for (int i = 0; cur \u003c length; ++cur) {\n            if (nums[cur] != 0) {\n                swap(nums[i], nums[cur]);\n                lastNonZeroFoundAt += 1;\n            }\n        }\n    }\n};",
      "title": "Move Zeroes",
      "url": "/submissions/detail/1096516231/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699704511,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1096515278,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "class Solution {\npublic:\n    void moveZeroes(vector\u003cint\u003e\u0026 nums) {\n    int lastNonZeroFoundAt = 0;\n    int length = nums.size();\n    for (int i = 0; i \u003c length; ++i) {\n        int num = nums[i];\n        if (num == 0) {\n            continue;\n        }\n        if (i != lastNonZeroFoundAt) {\n            nums[lastNonZeroFoundAt] = num;\n        }\n        lastNonZeroFoundAt += 1;\n    }\n \tfor (int i = lastNonZeroFoundAt; i \u003c length; i++) {\n        nums[i] = 0;\n    }\n}\n};",
      "title": "Move Zeroes",
      "url": "/submissions/detail/1096515278/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699704365,
      "status": 10,
      "runtime": "16 ms",
      "is_pending": "Not Pending",
      "memory": "19.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096515228,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "class Solution {\npublic:\n    void moveZeroes(vector\u003cint\u003e\u0026 nums) {\n    int lastNonZeroFoundAt = 0;\n    int length = nums.size();\n    for (int i = 0; i \u003c length; ++i) {\n        int num = nums[i];\n        if (num == 0) {\n            continue\n        }\n        if (i != lastNonZeroFoundAt) {\n            nums[lastNonZeroFoundAt] = num;\n        }\n        lastNonZeroFoundAt += 1;\n    }\n \tfor (int i = lastNonZeroFoundAt; i \u003c length; i++) {\n        nums[i] = 0;\n    }\n}\n};",
      "title": "Move Zeroes",
      "url": "/submissions/detail/1096515228/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699704358,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1096514861,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "class Solution {\npublic:\n    void moveZeroes(vector\u003cint\u003e\u0026 nums) {\n    int lastNonZeroFoundAt = 0;\n    int length = nums.size();\n    for (int i = 0; i \u003c length; ++i) {\n        int num = nums[i];\n        if (num != 0 \u0026\u0026 i != lastNonZeroFoundAt) {\n            nums[lastNonZeroFoundAt] = num;\n            lastNonZeroFoundAt += 1;\n        }\n    }\n \tfor (int i = lastNonZeroFoundAt; i \u003c length; i++) {\n        nums[i] = 0;\n    }\n}\n};",
      "title": "Move Zeroes",
      "url": "/submissions/detail/1096514861/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699704306,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11011001011011000010000110001000101001000000100000100000000000000000010110",
      "flag_type": 1
    },
    {
      "id": 1096514714,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 283,
      "title_slug": "move-zeroes",
      "code": "class Solution {\npublic:\n    void moveZeroes(vector\u003cint\u003e\u0026 nums) {\n    int lastNonZeroFoundAt = 0;\n    int length = nums.size();\n    for (int i = 0; i \u003c length; ++i) {\n        int num = nums[i];\n        if (num != 0 \u0026\u0026 i 1= lastNonZeroFoundAt) {\n            nums[lastNonZeroFoundAt] = num;\n            lastNonZeroFoundAt += 1;\n        }\n    }\n \tfor (int i = lastNonZeroFoundAt; i \u003c length; i++) {\n        nums[i] = 0;\n    }\n}\n};",
      "title": "Move Zeroes",
      "url": "/submissions/detail/1096514714/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699704284,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1096509677,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2678,
      "title_slug": "design-graph-with-shortest-path-calculator",
      "code": "class Graph {\npublic:\n    vector\u003cvector\u003cpair\u003cint, int\u003e\u003e\u003e adjList;\n    Graph(int n, vector\u003cvector\u003cint\u003e\u003e\u0026 edges) {\n        adjList.resize(n);\n        for (auto\u0026 e: edges)\n            adjList[e[0]].push_back(make_pair(e[1], e[2]));\n    }\n\n    void addEdge(vector\u003cint\u003e edge) {\n        adjList[edge[0]].push_back(make_pair(edge[1], edge[2]));\n    }\n\n    int shortestPath(int node1, int node2) {\n        int n = adjList.size();\n        priority_queue\u003cvector\u003cint\u003e, vector\u003cvector\u003cint\u003e\u003e, greater\u003cvector\u003cint\u003e\u003e\u003e pq;\n        vector\u003cint\u003e costForNode(n, INT_MAX);\n        costForNode[node1] = 0;\n        pq.push({0, node1});\n\n        while (!pq.empty()) {\n            int currCost = pq.top()[0];\n            int currNode = pq.top()[1];\n            pq.pop();\n\n            if (currCost \u003e costForNode[currNode]) {\n                continue;\n            }\n            if (currNode == node2) {\n                return currCost;\n            }\n            for (auto\u0026 neighbor : adjList[currNode]) {\n                int neighborNode = neighbor.first;\n                int cost = neighbor.second;\n                int newCost = currCost + cost;\n\n                if (newCost \u003c costForNode[neighborNode]) {\n                    costForNode[neighborNode] = newCost;\n                    pq.push({newCost, neighborNode});\n                }\n            }\n        }\n        return -1;\n    }\n};",
      "title": "Design Graph With Shortest Path Calculator",
      "url": "/submissions/detail/1096509677/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699703469,
      "status": 10,
      "runtime": "344 ms",
      "is_pending": "Not Pending",
      "memory": "113 MB",
      "compare_result": "111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096032485,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1894,
      "title_slug": "merge-strings-alternately",
      "code": "class Solution {\npublic:\n    string mergeAlternately(string word1, string word2) {\n        int m = word1.size();\n        int n = word2.size();\n        string result = \"\";\n\n        for (int i = 0; i \u003c max(m, n); i++) {\n            if (i \u003c m) {\n                result.push_back(word1[i]);\n            }\n            if (i \u003c n) {\n                result.push_back(word2[i]);\n            }\n        }\n\n        return result;\n    }\n};",
      "title": "Merge Strings Alternately",
      "url": "/submissions/detail/1096032485/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699635003,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "6.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096032104,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1894,
      "title_slug": "merge-strings-alternately",
      "code": "class Solution {\npublic:\n    string mergeAlternately(string word1, string word2) {\n        int l1 = word1.size(), l2 = word2.size();\n        string result = \"\";\n        int i = 0, j = 0;\n        while (i \u003c l1 || j \u003c l2) {\n            if (i \u003c l1) {\n                result.push_back(word1[i++]);\n            }\n            if (j \u003c l2) {\n                result.push_back(word2[j++]);\n            }\n        }\n        return result;\n    }\n};",
      "title": "Merge Strings Alternately",
      "url": "/submissions/detail/1096032104/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699634967,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "6.6 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1098055331,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 345,
      "title_slug": "reverse-vowels-of-a-string",
      "code": "class Solution {\npublic:\n    bool isVowel(char ch) {\n        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||\n               ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U';\n    }\n\n    string reverseVowels(string s) {\n        unsigned long length{s.size()};\n        unsigned long left{0}, right{length-1};\n        while (left \u003c right) {\n            char chLeft{s[left]};\n            char chRight{s[right]};\n            if (!isVowel(chLeft)) {\n                ++left;\n            } else if (!isVowel(chRight)) {\n                --right;\n            } else {\n                s[left] = chRight;\n                s[right] = chLeft;\n                ++left;\n                --right;\n            }\n        }\n        return s;\n    }\n};",
      "title": "Reverse Vowels of a String",
      "url": "/submissions/detail/1098055331/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699896295,
      "status": 10,
      "runtime": "6 ms",
      "is_pending": "Not Pending",
      "memory": "7.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1098054796,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 345,
      "title_slug": "reverse-vowels-of-a-string",
      "code": "class Solution {\npublic:\n    bool isVowel(char ch) {\n        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';\n    }\n\n    string reverseVowels(string s) {\n        unsigned long length{s.size()};\n        unsigned long left{0}, right{length-1};\n        while (left \u003c right) {\n            char chLeft{s[left]};\n            char chRight{s[right]};\n            if (!isVowel(chLeft)) {\n                ++left;\n            } else if (!isVowel(chRight)) {\n                --right;\n            } else {\n                s[left] = chRight;\n                s[right] = chLeft;\n                ++left;\n                --right;\n            }\n        }\n        return s;\n    }\n};",
      "title": "Reverse Vowels of a String",
      "url": "/submissions/detail/1098054796/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699896247,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111100011101111111111111110110010011001100111000001101011000111001101111010110100001001110010010001110010010100110000000101000111001000100101111111110000101011010001101101100100000111111010110000101000010101110111000111100001011001011011000011001000110011000011000100111110011000001110101100111110011010000001101011000110011010010111000011001111001100111110011101000111001111111111111111111111111111111111101111111110111111111111111111111011111111111001111111111111100111111110",
      "flag_type": 1
    },
    {
      "id": 1097741825,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 2887,
      "title_slug": "sort-vowels-in-a-string",
      "code": "class Solution {\npublic:\n    string sortVowels(string s) {\n        std::map\u003cchar, int\u003e vowels{\n            {'A', 0}, {'E', 0}, {'I', 0}, {'O', 0}, {'U', 0},\n            {'a', 0}, {'e', 0}, {'i', 0}, {'o', 0}, {'u', 0}\n        };\n        unsigned long length{ s.size() };\n        for (char ch : s) {\n            if (vowels.contains(ch)) {\n                ++vowels[ch];\n            }\n        }\n        for (int i = 0; i \u003c length; ++i) {\n            const char ch = s[i];\n            if (!vowels.contains(ch)) {\n                continue;\n            }\n            for (const auto\u0026 [orderChar, count] : vowels) {\n                if (count \u003e 0) {\n                    s[i] = orderChar;\n                    --vowels[orderChar];\n                    break;\n                } else {\n                    vowels.erase(orderChar);\n                }\n            }\n        }\n        return s;\n    }\n};",
      "title": "Sort Vowels in a String",
      "url": "/submissions/detail/1097741825/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699861493,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1097741565,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 2887,
      "title_slug": "sort-vowels-in-a-string",
      "code": "class Solution {\npublic:\n    string sortVowels(string s) {\n        std::map\u003cchar, int\u003e vowels{\n            {'A', 0}, {'E', 0}, {'I', 0}, {'O', 0}, {'U', 0},\n            {'a', 0}, {'e', 0}, {'i', 0}, {'o', 0}, {'u', 0}\n        };\n        unsigned long length{ s.size() };\n        for (char ch : s) {\n            if (vowels.contains(ch)) {\n                ++vowels[ch];\n            }\n        }\n        for (int i = 0; i \u003c length; ++i) {\n            const char ch = s[i];\n            if (!vowels.contains(ch)) {\n                continue;\n            }\n            for (const auto\u0026 [orderChar, count] : vowels) {\n                if (count \u003e 0) {\n                    s[i] = orderChar;\n                    --vowels[orderChar];\n                    break;\n                } else {\n                    vowels.erase(orderChar);\n                }\n            }\n        }\n        return s;\n    }\n};",
      "title": "Sort Vowels in a String",
      "url": "/submissions/detail/1097741565/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699861464,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1097740468,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2887,
      "title_slug": "sort-vowels-in-a-string",
      "code": "class Solution {\npublic:\n    // Returns true if the character is a vowel.\n    bool isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'o'|| c == 'u'|| c == 'i' \n            || c == 'A' || c == 'E' || c == 'O'|| c == 'U'|| c == 'I';\n    }\n    \n    string sortVowels(string s) {\n        unordered_map\u003cchar, int\u003e count;\n\n        // Store the frequencies for each character.\n        for (char c : s) {\n            if (isVowel(c)) {\n                count[c]++;\n            }\n        }\n\n        // Sorted string having all the vowels.\n        string sortedVowel = \"AEIOUaeiou\";\n        string ans;\n        int j = 0;\n        for (int i = 0; i \u003c s.size(); i++) {\n            if (!isVowel(s[i])) {\n                ans += s[i];\n            } else {\n                // Skip to the character which is having remaining count.\n                while (count[sortedVowel[j]] == 0) {\n                    j++;\n                }\n\n                ans += sortedVowel[j];\n                count[sortedVowel[j]]--;\n            }\n        }\n        return ans;\n    }\n};",
      "title": "Sort Vowels in a String",
      "url": "/submissions/detail/1097740468/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699861333,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "13.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1097739524,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2887,
      "title_slug": "sort-vowels-in-a-string",
      "code": "class Solution {\npublic:\n    string sortVowels(string s) {\n        std::map\u003cchar, int\u003e vowels{\n            {'A', 0}, {'E', 0}, {'I', 0}, {'O', 0}, {'U', 0},\n            {'a', 0}, {'e', 0}, {'i', 0}, {'o', 0}, {'u', 0}\n        };\n        unsigned long length{ s.size() };\n        for (char ch : s) {\n            if (vowels.contains(ch)) {\n                ++vowels[ch];\n            }\n        }\n        for (int i = 0; i \u003c length; ++i) {\n            const char ch = s[i];\n            if (!vowels.contains(ch)) {\n                continue;\n            }\n            for (const auto\u0026 [orderChar, count] : vowels) {\n                if (count \u003e 0) {\n                    s[i] = orderChar;\n                    --vowels[orderChar];\n                    break;\n                }\n            }\n        }\n        return s;\n    }\n};",
      "title": "Sort Vowels in a String",
      "url": "/submissions/detail/1097739524/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699861223,
      "status": 10,
      "runtime": "80 ms",
      "is_pending": "Not Pending",
      "memory": "12.8 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1097738650,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2887,
      "title_slug": "sort-vowels-in-a-string",
      "code": "class Solution {\npublic:\n    string sortVowels(string s) {\n        std::map\u003cchar, int\u003e vowels{\n            {'A', 0}, {'E', 0}, {'I', 0}, {'O', 0}, {'U', 0},\n            {'a', 0}, {'e', 0}, {'i', 0}, {'o', 0}, {'u', 0}\n        };\n        const char order[10]{ 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u' };\n        unsigned long length{ s.size() };\n        for (char ch : s) {\n            if (vowels.contains(ch)) {\n                ++vowels[ch];\n            }\n        }\n        for (int i = 0; i \u003c length; ++i) {\n            const char ch = s[i];\n            if (!vowels.contains(ch)) {\n                continue;\n            }\n            for (char orderChar : order) {\n                if (vowels[orderChar] \u003e 0) {\n                    s[i] = orderChar;\n                    --vowels[orderChar];\n                    break;\n                }\n            }\n        }\n        return s;\n    }\n};",
      "title": "Sort Vowels in a String",
      "url": "/submissions/detail/1097738650/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699861126,
      "status": 10,
      "runtime": "94 ms",
      "is_pending": "Not Pending",
      "memory": "12.7 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1097265019,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 643,
      "title_slug": "maximum-average-subarray-i",
      "code": "class Solution {\npublic:\n    double findMaxAverage(vector\u003cint\u003e\u0026 nums, int k) {\n        int length = nums.size();\n        double sum = std::accumulate(nums.begin(), nums.begin() + k , 0);\n        double maxSum = sum;\n        for (int i = k; i \u003c length; ++i) {\n            sum += nums[i] - nums[i-k];\n            maxSum = max(sum, maxSum);\n        }\n        return maxSum / k;\n    }\n};",
      "title": "Maximum Average Subarray I",
      "url": "/submissions/detail/1097265019/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699797622,
      "status": 10,
      "runtime": "144 ms",
      "is_pending": "Not Pending",
      "memory": "109.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1097263432,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 643,
      "title_slug": "maximum-average-subarray-i",
      "code": "class Solution {\npublic:\n    double findMaxAverage(vector\u003cint\u003e\u0026 nums, int k) {\n        int length = nums.size();\n        double sum = std::accumulate(nums.begin(), nums.begin() + k , 0);\n        double maxSum = sum;\n        for (int i = k; i \u003c length; ++i) {\n            sum += nums[i] - nums[i-k];\n            maxSum = max(sum, maxSum);\n        }\n        return sum / k;\n    }\n};",
      "title": "Maximum Average Subarray I",
      "url": "/submissions/detail/1097263432/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699797381,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0111011111011111000110100000100000000100000000000000000000000000000000000010001000100010000100000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1097262144,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 643,
      "title_slug": "maximum-average-subarray-i",
      "code": "class Solution {\npublic:\n    double findMaxAverage(vector\u003cint\u003e\u0026 nums, int k) {\n        int length = nums.size();\n        double sum = std::accumulate(nums.begin(), nums.begin() + k, 0);\n        for (int i = k; i \u003c length; ++i) {\n            double newSum = sum - nums[i-k] + nums[i];\n            if (newSum \u003e sum) {\n                sum = newSum;\n            }\n        }\n        return sum / k;\n    }\n};",
      "title": "Maximum Average Subarray I",
      "url": "/submissions/detail/1097262144/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699797184,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111010111011010100000000000000000000000000000000000000000000000000000101000000010000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1097244070,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 443,
      "title_slug": "string-compression",
      "code": "class Solution {\npublic:\n    int compress(vector\u003cchar\u003e\u0026 chars) {\n        int i = 0, res = 0;\n        int length = chars.size();\n        while (i \u003c length) {\n            int groupLength = 1;\n            while (i + groupLength \u003c length \u0026\u0026 chars[i + groupLength] == chars[i]) {\n                groupLength++;\n            }\n            chars[res++] = chars[i];\n            if (groupLength \u003e 1) {\n                for (char c : to_string(groupLength)) {\n                    chars[res++] = c;\n                }\n            }\n            i += groupLength;\n        }\n        return res;\n    }\n};",
      "title": "String Compression",
      "url": "/submissions/detail/1097244070/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699794483,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "9.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1097234773,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 605,
      "title_slug": "can-place-flowers",
      "code": "class Solution {\npublic:\n    bool canPlaceFlowers(vector\u003cint\u003e\u0026 flowerbed, int n) {\n        int curZeros = flowerbed[0] == 0 ? 2 : 0;\n        int length = flowerbed.size();\n        int ans = 0;\n        for (int i = 1; i \u003c length; ++i) { \n            if (flowerbed[i] == 0) {\n                curZeros += 1;\n                continue;\n            }\n            ans += (curZeros - 1) / 2;\n            curZeros = 0;\n            if (ans \u003e= n) {\n                return true;\n            }\n        }\n        ans += curZeros / 2;\n        return ans \u003e= n;\n    }\n};",
      "title": "Can Place Flowers",
      "url": "/submissions/detail/1097234773/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699793035,
      "status": 10,
      "runtime": "9 ms",
      "is_pending": "Not Pending",
      "memory": "20.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1097233786,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 605,
      "title_slug": "can-place-flowers",
      "code": "class Solution {\npublic:\n    bool canPlaceFlowers(vector\u003cint\u003e\u0026 flowerbed, int n) {\n        int curZeros = 0, length = flowerbed.size();\n        if (flowerbed[0] == 0) {\n            curZeros = 2;\n        }\n        int ans = 0;\n        for (int i = 1; i \u003c length; ++i) {\n            bool isFlower = flowerbed[i] == 1; \n            if (!isFlower) {\n                curZeros += 1;\n                continue;\n            }\n            ans += (curZeros - 1) / 2;\n            curZeros = 0;\n            if (ans \u003e= n) {\n                return true;\n            }\n        }\n        ans += curZeros / 2;\n        return ans \u003e= n;\n    }\n};",
      "title": "Can Place Flowers",
      "url": "/submissions/detail/1097233786/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699792885,
      "status": 10,
      "runtime": "6 ms",
      "is_pending": "Not Pending",
      "memory": "20.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1097233600,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 605,
      "title_slug": "can-place-flowers",
      "code": "class Solution {\npublic:\n    bool canPlaceFlowers(vector\u003cint\u003e\u0026 flowerbed, int n) {\n        int curZeros = 0, length = flowerbed.size();\n        if (flowerbed[0] == 0) {\n            curZeros = 2;\n        }\n        int ans = 0;\n        for (int i = 1; i \u003c length; ++i) {\n            bool isFlower = flowerbed[i] == 1; \n            if (!isFlower) {\n                curZeros += 1;\n                continue;\n            }\n            ans += (curZeros - 1) / 2;\n            curZeros = 0;\n            if (ans \u003e= n) {\n                return true;\n            }\n        }\n        ans += (curZeros - 1) / 2;\n        return ans \u003e= n;\n    }\n};",
      "title": "Can Place Flowers",
      "url": "/submissions/detail/1097233600/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699792855,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111100111010111101011111101111101111101111101111111111111111111011111111111111111111111111111111111111111111111111111111110",
      "flag_type": 1
    },
    {
      "id": 1097144778,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 833,
      "title_slug": "bus-routes",
      "code": "class Solution {\npublic:\n    int numBusesToDestination(vector\u003cvector\u003cint\u003e\u003e\u0026 routes, int source, int target) {\n        if (source == target) {\n            return 0;\n        }\n\n        unordered_map\u003cint, vector\u003cint\u003e\u003e adjList;\n        // Create a map from the bus stop to all the routes that include this stop.\n        for (int route = 0; route \u003c routes.size(); route++) {\n            for (auto stop : routes[route]) {\n                // Add all the routes that have this stop.\n                adjList[stop].push_back(route);\n            }\n        }\n\n        queue\u003cint\u003e q;\n        unordered_set\u003cint\u003e vis;\n        // Insert all the routes in the queue that have the source stop.\n        for (auto route : adjList[source]){\n            q.push(route);\n            vis.insert(route);\n        }\n\n        int busCount = 1;\n        while (q.size()) {\n            int size = q.size();\n\n            for (int i = 0; i \u003c size; i++) {\n                int route = q.front(); q.pop();\n\n                // Iterate over the stops in the current route.\n                for (auto stop: routes[route]) {\n                    // Return the current count if the target is found.\n                    if (stop == target) {\n                        return busCount;\n                    }\n\n                    // Iterate over the next possible routes from the current stop.\n                    for (auto nextRoute : adjList[stop]) {\n                        if (!vis.count(nextRoute)) {\n                            vis.insert(nextRoute);\n                            q.push(nextRoute);\n                        }\n                    }\n                }\n            }\n            busCount++;\n        }\n        return -1;\n    }\n};",
      "title": "Bus Routes",
      "url": "/submissions/detail/1097144778/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699778425,
      "status": 10,
      "runtime": "687 ms",
      "is_pending": "Not Pending",
      "memory": "55.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096540286,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1013,
      "title_slug": "fibonacci-number",
      "code": "class Solution {\npublic:\n    int fib(int n) {\n        if (n \u003c 2) {\n            return n;\n        }\n        int cur = 1, prev = 0;\n        for (int i = 2; i \u003c= n; ++i) {\n            int newVal = cur + prev;\n            prev = cur;\n            cur = newVal;\n        }\n        return cur;\n    }\n};",
      "title": "Fibonacci Number",
      "url": "/submissions/detail/1096540286/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699708200,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "6.2 MB",
      "compare_result": "1111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096540061,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 1013,
      "title_slug": "fibonacci-number",
      "code": "class Solution {\npublic:\n    int fib(int n) {\n        int cur = 1, prev = 0;\n        for (int i = 2; i \u003c= n; ++i) {\n            int newVal = cur + prev;\n            prev = cur;\n            cur = newVal;\n        }\n        return cur;\n    }\n};",
      "title": "Fibonacci Number",
      "url": "/submissions/detail/1096540061/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699708164,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096539877,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 1013,
      "title_slug": "fibonacci-number",
      "code": "class Solution {\npublic:\n    int fib(int n) {\n        int cur = 1, prev = 0;\n        for (int i = 2; i \u003c n; ++i) {\n            int newVal = cur + prev;\n            prev = cur;\n            cur = newVal;\n        }\n        return cur;\n    }\n};",
      "title": "Fibonacci Number",
      "url": "/submissions/detail/1096539877/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699708139,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1000100000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1096538815,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 203,
      "title_slug": "remove-linked-list-elements",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        head = new ListNode(-1, head);\n        auto ans = head;\n        while (head) {\n            auto next = head-\u003enext;\n            if (next \u0026\u0026 next-\u003eval == val) {\n                head-\u003enext = next-\u003enext;\n            } else {\n                head = next;\n            }\n        }\n        return ans-\u003enext;\n    }\n};",
      "title": "Remove Linked List Elements",
      "url": "/submissions/detail/1096538815/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699707983,
      "status": 10,
      "runtime": "20 ms",
      "is_pending": "Not Pending",
      "memory": "15.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1096538732,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 203,
      "title_slug": "remove-linked-list-elements",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        head = new ListNode(-1, head);\n        auto ans = head;\n        while (head) {\n            auto next = head-\u003enext;\n            if (next \u0026\u0026 next-\u003eval == val) {\n                head-\u003enext = next-\u003enext;\n            } else {\n                head = head-\u003enext;\n            }\n        }\n        return ans-\u003enext;\n    }\n};",
      "title": "Remove Linked List Elements",
      "url": "/submissions/detail/1096538732/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699707971,
      "status": 10,
      "runtime": "16 ms",
      "is_pending": "Not Pending",
      "memory": "15.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100708721,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2470,
      "title_slug": "removing-stars-from-a-string",
      "code": "class Solution {\npublic:\n    string removeStars(string s) {\n        std::string ans;\n        unsigned long length {s.size()};\n        int remove {0};\n        for (int i = length - 1; i \u003e= 0; --i) {\n            char c = s[i];\n            if (c == '*') {\n                ++remove;\n                continue;\n            }\n            if (remove == 0) {\n                ans += c;\n            } else {\n                --remove;\n            }\n        }\n        std::reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};",
      "title": "Removing Stars From a String",
      "url": "/submissions/detail/1100708721/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700215953,
      "status": 10,
      "runtime": "74 ms",
      "is_pending": "Not Pending",
      "memory": "25.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100704063,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1988,
      "title_slug": "minimize-maximum-pair-sum-in-array",
      "code": "class Solution {\npublic:\n    int minPairSum(vector\u003cint\u003e\u0026 nums) {\n        std::sort(nums.begin(), nums.end());\n        unsigned long length {nums.size()};\n        int maxSum {0};\n        for (int i = 0; i \u003c length / 2; ++i) {\n            maxSum = max(maxSum, nums[i] + nums[length - i - 1]);\n        }\n        return maxSum;\n    }\n};",
      "title": "Minimize Maximum Pair Sum in Array",
      "url": "/submissions/detail/1100704063/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700215345,
      "status": 10,
      "runtime": "190 ms",
      "is_pending": "Not Pending",
      "memory": "96.9 MB",
      "compare_result": "1111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100099074,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1319,
      "title_slug": "unique-number-of-occurrences",
      "code": "class Solution {\npublic:\n    bool uniqueOccurrences(vector\u003cint\u003e\u0026 arr) {\n        std::unordered_map\u003cint, int\u003e counts;\n        std::unordered_set\u003cint\u003e encountered;\n        for (int num : arr) {\n            counts[num] += 1;\n        }\n        for (const auto [num, count] : counts) {\n            if (encountered.find(count) == encountered.end()) {\n                encountered.insert(count);\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n};",
      "title": "Unique Number of Occurrences",
      "url": "/submissions/detail/1100099074/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700142179,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "8.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100088541,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1236,
      "title_slug": "n-th-tribonacci-number",
      "code": "class Solution {\npublic:\n    int tribonacci(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        int num1 {0}, num2 {1}, num3 {1};\n        for (int i = 3; i \u003c= n; ++i) {\n            int newNum3 = num1 + num2 + num3; \n            num1 = num2;\n            num2 = num3;\n            num3 = newNum3;\n        }\n        return num3;\n    }\n};",
      "title": "N-th Tribonacci Number",
      "url": "/submissions/detail/1100088541/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700140969,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "6.3 MB",
      "compare_result": "111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100039261,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 215,
      "title_slug": "kth-largest-element-in-an-array",
      "code": "class Solution {\npublic:\n    int findKthLargest(vector\u003cint\u003e\u0026 nums, int k) {\n        std::sort(nums.begin(), nums.end(), std::greater\u003cint\u003e());\n        return nums[k-1];\n    }\n};",
      "title": "Kth Largest Element in an Array",
      "url": "/submissions/detail/1100039261/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700134246,
      "status": 10,
      "runtime": "85 ms",
      "is_pending": "Not Pending",
      "memory": "55.5 MB",
      "compare_result": "11111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100038369,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 215,
      "title_slug": "kth-largest-element-in-an-array",
      "code": "class Solution {\npublic:\n    int findKthLargest(vector\u003cint\u003e\u0026 nums, int k) {\n        std::make_heap(nums.begin(), nums.end());\n        return nums[k-1];\n    }\n};",
      "title": "Kth Largest Element in an Array",
      "url": "/submissions/detail/1100038369/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700134123,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "10111111001111100111111111000111000000001",
      "flag_type": 1
    },
    {
      "id": 1100033907,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 783,
      "title_slug": "search-in-a-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n        while (root != nullptr) {\n            if (root-\u003eval == val) {\n                return root;\n            }\n            if (root-\u003eval \u003e val) {\n                root = root-\u003eleft;\n            } else {\n                root = root-\u003eright;\n            }\n        }\n        return root;\n    }\n};",
      "title": "Search in a Binary Search Tree",
      "url": "/submissions/detail/1100033907/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700133495,
      "status": 10,
      "runtime": "36 ms",
      "is_pending": "Not Pending",
      "memory": "35 MB",
      "compare_result": "111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100032935,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 783,
      "title_slug": "search-in-a-binary-search-tree",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n        if (root == nullptr || root-\u003eval == val) {\n            return root;\n        }\n        if (val \u003e root-\u003eval) {\n            return searchBST(root-\u003eright, val);\n        }\n        return searchBST(root-\u003eleft, val);\n    }\n};",
      "title": "Search in a Binary Search Tree",
      "url": "/submissions/detail/1100032935/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700133358,
      "status": 10,
      "runtime": "24 ms",
      "is_pending": "Not Pending",
      "memory": "35.2 MB",
      "compare_result": "111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100031754,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 724,
      "title_slug": "find-pivot-index",
      "code": "class Solution {\npublic:\n    int pivotIndex(vector\u003cint\u003e\u0026 nums) {\n        int left {0}, right {std::accumulate(nums.begin() + 1, nums.end(), 0)};\n        unsigned long length {nums.size()};\n        if (right == 0) {\n            return 0;\n        }\n        for (int i = 1; i \u003c length; ++i) {\n            left += nums[i-1];\n            right -= nums[i];\n            if (left == right) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};",
      "title": "Find Pivot Index",
      "url": "/submissions/detail/1100031754/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700133203,
      "status": 10,
      "runtime": "18 ms",
      "is_pending": "Not Pending",
      "memory": "31.4 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1100028827,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1833,
      "title_slug": "find-the-highest-altitude",
      "code": "class Solution {\npublic:\n    int largestAltitude(vector\u003cint\u003e\u0026 gain) {\n        int att {0}, maxAtt {0};\n        for (int num : gain) {\n            att += num;\n            maxAtt = max(maxAtt, att);\n        }\n        return maxAtt;\n    }\n};",
      "title": "Find the Highest Altitude",
      "url": "/submissions/detail/1100028827/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700132790,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "8.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1099952562,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2107,
      "title_slug": "find-unique-binary-string",
      "code": "class Solution {\npublic:\n    string findDifferentBinaryString(vector\u003cstring\u003e\u0026 nums) {\n        unordered_set\u003cint\u003e integers;\n        for (string num : nums) {\n            integers.insert(stoi(num, 0, 2));\n        }\n\n        int n = nums.size();\n        string ans;\n        for (int num = 0; num \u003c= n; num++) {\n            if (integers.find(num) == integers.end()) {\n                ans = bitset\u003c16\u003e(num).to_string();\n                break;\n            }\n        }\n        return ans.substr(16 - n);\n    }\n};",
      "title": "Find Unique Binary String",
      "url": "/submissions/detail/1099952562/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700122957,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "10.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1099943065,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 2107,
      "title_slug": "find-unique-binary-string",
      "code": "class Solution {\npublic:\n    string findDifferentBinaryString(vector\u003cstring\u003e\u0026 nums) {\n        string ans;\n        auto length{nums.size()};\n        auto stringLength{nums[0].size()};\n        for (int j = 0; j \u003c stringLength; ++j) {\n            bool gotZero{false}, gotOne{false};\n            for (int i = 0; i \u003c length; ++i) {\n                if (nums[i][j] == '0') {\n                    gotZero = true;\n                } else {\n                    gotOne = true;\n                }\n                if (gotZero \u0026\u0026 gotOne) {\n                    break;\n                }\n            }\n            if (gotZero \u0026\u0026 gotOne) {\n                ans += '0';\n            } else if (!gotZero) {\n                ans += '0';\n            } else {\n                ans += '1';\n            }\n        }\n        return ans;\n    }\n};",
      "title": "Find Unique Binary String",
      "url": "/submissions/detail/1099943065/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700121774,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111101001101011011101111110111111110111111101101111110111101111111111111111111111111111110111111111111111111111111111111111111111111111111111110000000001111110000000000000000011",
      "flag_type": 1
    },
    {
      "id": 1099942886,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 2107,
      "title_slug": "find-unique-binary-string",
      "code": "class Solution {\npublic:\n    string findDifferentBinaryString(vector\u003cstring\u003e\u0026 nums) {\n        string ans;\n        auto length{nums.size()};\n        auto stringLength{nums[0].size()};\n        for (int j = 0; j \u003c stringLength; ++j) {\n            bool gotZero{false}, gotOne{false};\n            for (int i = 0; i \u003c length; ++i) {\n                if (nums[i][j] == '0') {\n                    gotZero = true;\n                } else {\n                    gotOne = true;\n                }\n                if (gotZero \u0026\u0026 gotOne) {\n                    break;\n                }\n            }\n            if (gotZero \u0026\u0026 gotOne) {\n                ans += '1';\n            } else if (!gotZero) {\n                ans += '0';\n            } else {\n                ans += '1';\n            }\n        }\n        return ans;\n    }\n};",
      "title": "Find Unique Binary String",
      "url": "/submissions/detail/1099942886/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700121752,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111101111101111111111101111100111110111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000001111100000000000000000011",
      "flag_type": 1
    },
    {
      "id": 1099400651,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1392,
      "title_slug": "find-the-difference-of-two-arrays",
      "code": "class Solution {\npublic:\n    vector\u003cint\u003e getElementsOnlyInFirstList(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2) {\n        unordered_set\u003cint\u003e onlyInNums1;\n        for (int num : nums1) {\n            bool existInNums2 = false;\n            for (int x : nums2) {\n                if (x == num) {\n                    existInNums2 = true;\n                    break;\n                }\n            }\n            if (!existInNums2) {\n                onlyInNums1.insert(num);\n            }\n        }\n        return vector\u003cint\u003e (onlyInNums1.begin(), onlyInNums1.end());\n    }\n    \n    vector\u003cvector\u003cint\u003e\u003e findDifference(vector\u003cint\u003e\u0026 nums1, vector\u003cint\u003e\u0026 nums2) {\n        return {getElementsOnlyInFirstList(nums1, nums2), getElementsOnlyInFirstList(nums2, nums1)};\n    }\n};",
      "title": "Find the Difference of Two Arrays",
      "url": "/submissions/detail/1099400651/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1700056427,
      "status": 10,
      "runtime": "102 ms",
      "is_pending": "Not Pending",
      "memory": "30.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1099380129,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 334,
      "title_slug": "increasing-triplet-subsequence",
      "code": "class Solution {\npublic:\n    bool increasingTriplet(vector\u003cint\u003e\u0026 nums) {\n        auto length{nums.size()};\n        int num1{INT_MAX}, num2{INT_MAX}; \n        for (int num : nums) {\n            if (num \u003c= num1) {\n                num1 = num;\n            } else if (num \u003c= num2) {\n                num2 = num;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n};",
      "title": "Increasing Triplet Subsequence",
      "url": "/submissions/detail/1099380129/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1700053947,
      "status": 10,
      "runtime": "82 ms",
      "is_pending": "Not Pending",
      "memory": "112 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1099377583,
      "status_display": "Time Limit Exceeded",
      "lang": "cpp",
      "question_id": 334,
      "title_slug": "increasing-triplet-subsequence",
      "code": "class Solution {\npublic:\n    bool increasingTriplet(vector\u003cint\u003e\u0026 nums) {\n        auto length{nums.size()};\n        for (int i = 0; i \u003c length; ++i) {\n            int num1 = nums[i];\n            for (int j = i + 1; j \u003c length; ++j) {\n                int num2 = nums[j];\n                if (num2 \u003c= num1) {\n                    continue;\n                }\n                for (int k = j + 1; k \u003c length; ++k) {\n                    if (nums[k] \u003e num2) {\n                        return true;\n                    }\n                }\n            }    \n        }\n        return false;\n    }\n};",
      "title": "Increasing Triplet Subsequence",
      "url": "/submissions/detail/1099377583/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1700053609,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111110000000",
      "flag_type": 1
    },
    {
      "id": 1099357056,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1956,
      "title_slug": "maximum-element-after-decreasing-and-rearranging",
      "code": "class Solution {\npublic:\n    int maximumElementAfterDecrementingAndRearranging(vector\u003cint\u003e\u0026 arr) {\n        std::sort(arr.begin(), arr.end());\n        auto length{arr.size()};\n        int prev{1};\n        for (int i = 1; i \u003c length; ++i) {\n            if (arr[i] != prev) {\n                ++prev;\n            }\n        }\n        return prev;\n    }\n};",
      "title": "Maximum Element After Decreasing and Rearranging",
      "url": "/submissions/detail/1099357056/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1700050719,
      "status": 10,
      "runtime": "79 ms",
      "is_pending": "Not Pending",
      "memory": "51.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1099356606,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1956,
      "title_slug": "maximum-element-after-decreasing-and-rearranging",
      "code": "class Solution {\npublic:\n    int maximumElementAfterDecrementingAndRearranging(vector\u003cint\u003e\u0026 arr) {\n        std::sort(arr.begin(), arr.end());\n        auto length{arr.size()};\n        int prev{1};\n        for (int i = 1; i \u003c length; ++i) {\n            if (arr[i] == prev) {\n                continue;\n            }\n            ++prev;\n        }\n        return prev;\n    }\n};",
      "title": "Maximum Element After Decreasing and Rearranging",
      "url": "/submissions/detail/1099356606/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1700050650,
      "status": 10,
      "runtime": "76 ms",
      "is_pending": "Not Pending",
      "memory": "51.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1099355567,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 1956,
      "title_slug": "maximum-element-after-decreasing-and-rearranging",
      "code": "class Solution {\npublic:\n    int maximumElementAfterDecrementingAndRearranging(vector\u003cint\u003e\u0026 arr) {\n        std::sort(arr.begin(), arr.end());\n        auto length{arr.size()};\n        int prev{1};\n        for (int i = 1; i \u003c length; ++i) {\n            int num{arr[i]};\n            int diff{std::abs(num - prev)};\n            if (diff == 0) {\n                continue;\n            }\n            if (diff == 1) {\n                prev = num;\n                continue;\n            }\n            if (i + 1 == length || arr[i+1] != num) {\n                ++prev;\n            }\n        }\n        return prev;\n    }\n};",
      "title": "Maximum Element After Decreasing and Rearranging",
      "url": "/submissions/detail/1099355567/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1700050491,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111101111111111011111111",
      "flag_type": 1
    },
    {
      "id": 1098636058,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2059,
      "title_slug": "unique-length-3-palindromic-subsequences",
      "code": "class Solution {\npublic:\n    int countPalindromicSubsequence(string s) {\n        unordered_set\u003cchar\u003e letters;\n        for (char c : s) {\n            letters.insert(c);\n        }\n        int ans = 0;\n        for (char letter : letters) {\n            int i = -1;\n            int j = 0;\n            for (int k = 0; k \u003c s.size(); k++) {\n                if (s[k] == letter) {\n                    if (i == -1) {\n                        i = k;\n                    }\n                    \n                    j = k;\n                }\n            }\n            unordered_set\u003cchar\u003e between;\n            for (int k = i + 1; k \u003c j; k++) {\n                between.insert(s[k]);\n            }\n            \n            ans += between.size();\n        }\n        return ans;\n    }\n};\n\n",
      "title": "Unique Length-3 Palindromic Subsequences",
      "url": "/submissions/detail/1098636058/",
      "lang_name": "C++",
      "time": "2 months, 3 weeks",
      "timestamp": 1699965568,
      "status": 10,
      "runtime": "278 ms",
      "is_pending": "Not Pending",
      "memory": "13.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1102672939,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 145,
      "title_slug": "binary-tree-postorder-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector\u003cint\u003e postorderTraversal(TreeNode* root) {\n        if (root == nullptr) {\n            return {};\n        }\n        std::vector\u003cint\u003e ans{};\n        addNodes(root, ans);\n        return ans;\n    }\n\n    void addNodes(TreeNode* node, std::vector\u003cint\u003e\u0026 ans) {\n        auto left{node.left}, right{node.right};\n        if (left != nullptr) {\n            addNodes(left, ans);\n        }\n        if (right != nullptr) {\n            addNodes(right, ans);\n        }\n        ans.push_back(node-\u003eval);\n    }\n};",
      "title": "Binary Tree Postorder Traversal",
      "url": "/submissions/detail/1102672939/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700480311,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1102670067,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 144,
      "title_slug": "binary-tree-preorder-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector\u003cint\u003e preorderTraversal(TreeNode* root) {\n        if (root == nullptr) {\n            return {};\n        }\n        std::vector\u003cint\u003e ans{};\n        std::vector\u003cTreeNode*\u003e q{root};\n        while (q.size() != 0) {\n            auto node = q.back();\n            auto left{node-\u003eleft}, right{node-\u003eright};\n            q.pop_back();\n            ans.push_back(node-\u003eval);\n            if (right != nullptr) {\n                q.push_back(right);\n            }\n            if (left != nullptr) {\n                q.push_back(left);\n            }\n        }\n        return ans;\n    }\n};",
      "title": "Binary Tree Preorder Traversal",
      "url": "/submissions/detail/1102670067/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700479885,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "8.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1102669287,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 144,
      "title_slug": "binary-tree-preorder-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector\u003cint\u003e preorderTraversal(TreeNode* root) {\n        if (root == nullptr) {\n            return {};\n        }\n        std::vector\u003cint\u003e ans{};\n        std::deque\u003cTreeNode*\u003e q{root};\n        while (q.size() != 0) {\n            auto node = q.front();\n            auto left{node-\u003eleft}, right{node-\u003eright};\n            q.pop_front();\n            ans.push_back(node-\u003eval);\n            if (right != nullptr) {\n                q.push_front(right);\n            }\n            if (left != nullptr) {\n                q.push_front(left);\n            }\n        }\n        return ans;\n    }\n};",
      "title": "Binary Tree Preorder Traversal",
      "url": "/submissions/detail/1102669287/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700479779,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "8.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1102668286,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 144,
      "title_slug": "binary-tree-preorder-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector\u003cint\u003e preorderTraversal(TreeNode* root) {\n        std::vector\u003cint\u003e ans{};\n        std::deque\u003cTreeNode*\u003e q{root};\n        while (q.size() != 0) {\n            auto node = q.front();\n            q.pop_front();\n            if (node == nullptr) {\n                continue;\n            }\n            ans.push_back(node-\u003eval);\n            q.push_front(node-\u003eright);\n            q.push_front(node-\u003eleft);\n        }\n        return ans;\n    }\n};",
      "title": "Binary Tree Preorder Traversal",
      "url": "/submissions/detail/1102668286/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700479632,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "9.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1102667375,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 144,
      "title_slug": "binary-tree-preorder-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector\u003cint\u003e preorderTraversal(TreeNode* root) {\n        std::vector\u003cint\u003e ans{};\n        std::deque\u003cTreeNode*\u003e q{root};\n        while (q.size() != 0) {\n            auto node = q.front();\n            q.pop_front();\n            if (node == nullptr) {\n                continue;\n            }\n            ans.push_back(node-\u003eval);\n            q.push_front(node-\u003eleft);\n            q.push_front(node-\u003eright);\n        }\n        return ans;\n    }\n};",
      "title": "Binary Tree Preorder Traversal",
      "url": "/submissions/detail/1102667375/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700479503,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111110111100110010110111100010000010010000010010010110010010110111001",
      "flag_type": 1
    },
    {
      "id": 1102661782,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2471,
      "title_slug": "minimum-amount-of-time-to-collect-garbage",
      "code": "class Solution {\npublic:\n    int garbageCollection(vector\u003cstring\u003e\u0026 garbage, vector\u003cint\u003e\u0026 travel) {\n        vector\u003cint\u003e prefixSum(travel.size() + 1, 0);\n        prefixSum[1] = travel[0];\n        for (int i = 1; i \u003c travel.size(); i++) {\n            prefixSum[i + 1] = prefixSum[i] + travel[i];\n        }\n        unordered_map\u003cchar, int\u003e garbageLastPos;\n        unordered_map\u003cchar, int\u003e garbageCount;\n        for (int i = 0; i \u003c garbage.size(); i++) {\n            for (char c : garbage[i]) {\n                garbageLastPos[c] = i;\n                garbageCount[c]++;\n            }\n        }\n        char garbageTypes[3] = {'M', 'P', 'G'};\n        int ans = 0;\n        for (char c : garbageTypes) {\n            if (garbageCount[c]) {\n                ans += prefixSum[garbageLastPos[c]] + garbageCount[c];\n            }\n        }\n        return ans;\n    }\n};",
      "title": "Minimum Amount of Time to Collect Garbage",
      "url": "/submissions/detail/1102661782/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700478707,
      "status": 10,
      "runtime": "214 ms",
      "is_pending": "Not Pending",
      "memory": "104.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1101990098,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2016,
      "title_slug": "reduction-operations-to-make-the-array-elements-equal",
      "code": "class Solution {\npublic:\n    int reductionOperations(vector\u003cint\u003e\u0026 nums) {\n        sort(nums.begin(), nums.end());\n        int ans = 0;\n        int up = 0;\n        auto length {nums.size()};\n        for (int i = 1; i \u003c length; ++i) {\n            if (nums[i] != nums[i - 1]) {\n                ++up;\n            }\n            ans += up;\n        }\n        return ans;\n    }\n};",
      "title": "Reduction Operations to Make the Array Elements Equal",
      "url": "/submissions/detail/1101990098/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700382665,
      "status": 10,
      "runtime": "147 ms",
      "is_pending": "Not Pending",
      "memory": "83.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1101987670,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 2016,
      "title_slug": "reduction-operations-to-make-the-array-elements-equal",
      "code": "class Solution {\npublic:\n    int reductionOperations(vector\u003cint\u003e\u0026 nums) {\n        std::map\u003cint, int\u003e counts;\n        for (int num : nums) {\n            ++counts[num];\n        }\n        auto length {counts.size()};\n        if (length == 1) {\n            return 0;\n        }\n        int cur {0};\n        auto last = counts.rend();\n        --last;\n        for (auto it = counts.rbegin(); it != last ; ++it) {\n            cur += cur + it-\u003esecond;\n        }\n        return cur;\n    }\n};",
      "title": "Reduction Operations to Make the Array Elements Equal",
      "url": "/submissions/detail/1101987670/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700382270,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111100110011011001100000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1101503370,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1966,
      "title_slug": "frequency-of-the-most-frequent-element",
      "code": "class Solution {\npublic:\n    int maxFrequency(vector\u003cint\u003e\u0026 nums, int k) {\n        sort(nums.begin(), nums.end());\n        int left = 0;\n        int ans = 0;\n        long curr = 0;\n        \n        for (int right = 0; right \u003c nums.size(); right++) {\n            long target = nums[right];\n            curr += target;\n            \n            while ((right - left + 1) * target - curr \u003e k) {\n                curr -= nums[left];\n                left++;\n            }\n            \n            ans = max(ans, right - left + 1);\n        }\n        \n        return ans;\n    }\n};",
      "title": "Frequency of the Most Frequent Element",
      "url": "/submissions/detail/1101503370/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700324628,
      "status": 10,
      "runtime": "161 ms",
      "is_pending": "Not Pending",
      "memory": "99.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100824123,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 328,
      "title_slug": "odd-even-linked-list",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* oddEvenList(ListNode* head) {\n        if(!head || !head-\u003enext || !head-\u003enext-\u003enext) {\n            return head;\n        } \n        \n        ListNode* odd {head};\n        ListNode* even {head-\u003enext};\n        ListNode* even_start {head-\u003enext};\n        \n        while(odd-\u003enext \u0026\u0026 even-\u003enext) {\n            ListNode* next {even-\u003enext}; \n            odd-\u003enext = next;\n            even-\u003enext = next-\u003enext;\n            odd = odd-\u003enext;\n            even = even-\u003enext;\n        }\n        odd-\u003enext = even_start;\n        return head; \n    }\n};",
      "title": "Odd Even Linked List",
      "url": "/submissions/detail/1100824123/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700231121,
      "status": 10,
      "runtime": "8 ms",
      "is_pending": "Not Pending",
      "memory": "10.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100801416,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 649,
      "title_slug": "dota2-senate",
      "code": "class Solution {\npublic:\n    string predictPartyVictory(string senate) {\n        std::queue\u003cint\u003e rad, dir;\n        unsigned long length {senate.size()};\n        for (int i = 0; i \u003c length; ++i){\n            if (senate[i] == 'R'){\n                rad.push(i);\n            } else {\n                dir.push(i);\n            }\n        }\n        while (!rad.empty() \u0026\u0026 !dir.empty()) {\n            if (rad.front() \u003c dir.front()) {\n                rad.push(length);\n            } else {\n                dir.push(length);\n            }\n            ++length;\n            rad.pop();\n            dir.pop();\n        }\n        return rad.empty() ? \"Dire\" : \"Radiant\";\n    }\n};",
      "title": "Dota2 Senate",
      "url": "/submissions/detail/1100801416/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700228496,
      "status": 10,
      "runtime": "6 ms",
      "is_pending": "Not Pending",
      "memory": "8.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100797824,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 649,
      "title_slug": "dota2-senate",
      "code": "class Solution {\npublic:\n    string predictPartyVictory(string senate) {\n        unsigned long length {senate.size()};\n        int countR {0}, countD {0};\n        int banR {0}, banD {0};\n        for (char c : senate) {\n            if (c == 'R') {\n                ++countR;\n            } else {\n                ++countD;\n            }\n        }\n        for (char c : senate) {\n            bool isR {c == 'R'};\n            bool isD {!isR};\n            if (isR \u0026\u0026 banR == 0) {\n                ++banD;\n                --countD;\n            } else if (isR) {\n                --banR;\n            } else if (isD \u0026\u0026 banD == 0) {\n                ++banR;\n                --countR;\n            } else if (isD) {\n                --banD;\n            }\n            if (countR == 0 || countD == 0) {\n                break;\n            }\n        }\n        if (countR \u003e countD) {\n            return \"Radiant\";\n        }\n        return \"Dire\";\n    }\n};",
      "title": "Dota2 Senate",
      "url": "/submissions/detail/1100797824/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700228063,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111110111111111101111011111111111111111111111111111111111101111111111110111",
      "flag_type": 1
    },
    {
      "id": 1100796557,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 649,
      "title_slug": "dota2-senate",
      "code": "class Solution {\npublic:\n    string predictPartyVictory(string senate) {\n        unsigned long length {senate.size()};\n        int countR {0}, countD {0};\n        int banR {0}, banD {0};\n        for (char c : senate) {\n            if (c == 'R') {\n                ++countR;\n            } else {\n                ++countD;\n            }\n        }\n        for (char c : senate) {\n            bool isR {c == 'R'};\n            if (isR \u0026\u0026 banR == 0) {\n                ++banD;\n                --countD;\n            } else if (isR) {\n                --banR;\n            } else if (!isR \u0026\u0026 banD == 0) {\n                ++banR;\n                --countR;\n            } else if (!isR) {\n                --banD;\n            }\n            if (countR == 0 || countD == 0) {\n                break;\n            }\n        }\n        if (countR \u003e= 0) {\n            return \"Radiant\";\n        }\n        return \"Dire\";\n    }\n};",
      "title": "Dota2 Senate",
      "url": "/submissions/detail/1100796557/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700227917,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1001111100101101100110010001110100110000011000000111010011011100001101111101110001",
      "flag_type": 1
    },
    {
      "id": 1100796501,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 649,
      "title_slug": "dota2-senate",
      "code": "class Solution {\npublic:\n    string predictPartyVictory(string senate) {\n        unsigned long length {senate.size()};\n        int countR {0}, countD {0};\n        int banR {0}, banD {0};\n        for (char c : senate) {\n            if (c == 'R') {\n                ++countR;\n            } else {\n                ++countD;\n            }\n        }\n        for (char c : senate) {\n            bool isR {c == 'R'};\n            if (isR \u0026\u0026 banR == 0) {\n                ++banD;\n                --countD;\n            } else if (isR) {\n                --banR;\n            } else if (!isR \u0026\u0026 banD == 0) {\n                ++banR;\n                --countR;\n            } else if (!isR) {\n                --banD;\n            }\n            if (countR == 0 || countD == 0) {\n                break;\n            }\n        }\n        if (countR \u003e= 0) {\n            return \"Radiant\"\n        }\n        return \"Dire\";\n    }\n};",
      "title": "Dota2 Senate",
      "url": "/submissions/detail/1100796501/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700227910,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1100794798,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 649,
      "title_slug": "dota2-senate",
      "code": "class Solution {\npublic:\n    string predictPartyVictory(string senate) {\n        unsigned long length {senate.size()};\n        if (length == 1 \u0026\u0026 senate[0] == 'D') {\n            return \"Dire\";\n        } else if (length == 1) {\n            return \"Radiant\";\n        }\n        int countR {0}, countD {0};\n        int banR {0}, banD {0};\n        for (char c : senate) {\n            if (c == 'R') {\n                ++countR;\n            } else {\n                ++countD;\n            }\n        }\n        for (char c : senate) {\n            bool isR {c == 'R'};\n            if (isR \u0026\u0026 banR == 0) {\n                ++banD;\n                --countD;\n            } else if (isR) {\n                --banR;\n            } else if (!isR \u0026\u0026 banD == 0) {\n                ++banR;\n                --countR;\n            } else if (!isR) {\n                --banD;\n            }\n            if (countR == 0 || countD == 0) {\n                break;\n            }\n        }\n        if (countD == 0) {\n            return \"Dire\";\n        }\n        return \"Radiant\";\n    }\n};",
      "title": "Dota2 Senate",
      "url": "/submissions/detail/1100794798/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700227708,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0001110000001000000100010000110000000000001000000000000001000000000101111101010001",
      "flag_type": 1
    },
    {
      "id": 1100794252,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 649,
      "title_slug": "dota2-senate",
      "code": "class Solution {\npublic:\n    string predictPartyVictory(string senate) {\n        unsigned long length {senate.size()};\n        int countR {0}, countD {0};\n        int banR {0}, banD {0};\n        for (char c : senate) {\n            if (c == 'R') {\n                ++countR;\n            } else {\n                ++countD;\n            }\n        }\n        for (char c : senate) {\n            bool isR {c == 'R'};\n            if (isR \u0026\u0026 banR == 0) {\n                ++banD;\n                --countD;\n            } else if (isR) {\n                --banR;\n            } else if (!isR \u0026\u0026 banD == 0) {\n                ++banR;\n                --countR;\n            } else if (!isR) {\n                --banD;\n            }\n            if (countR == 0 || countD == 0) {\n                break;\n            }\n        }\n        if (countR == 0) {\n            return \"Dire\";\n        }\n        return \"Radiant\";\n    }\n};",
      "title": "Dota2 Senate",
      "url": "/submissions/detail/1100794252/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700227643,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110110111101101100111010001111100111111111110111111111111111110001101111101110011",
      "flag_type": 1
    },
    {
      "id": 1100791276,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 649,
      "title_slug": "dota2-senate",
      "code": "class Solution {\npublic:\n    string predictPartyVictory(string senate) {\n        unsigned long length {senate.size()};\n        int queue {0};\n        for (char c : senate) {\n            if (c == 'R') {\n                ++queue;\n            } else {\n                --queue;\n            }\n        }\n        if (queue \u003e= 0) {\n            return \"Radiant\";\n        }\n        return \"Dire\";\n    }\n};",
      "title": "Dota2 Senate",
      "url": "/submissions/detail/1100791276/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700227256,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1101111111100101100011011111011100111111111111111111111111111110101111111101110111",
      "flag_type": 1
    },
    {
      "id": 1100732284,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 394,
      "title_slug": "decode-string",
      "code": "class Solution {\npublic:\n    string decodeString(string s) {\n        return std::get\u003c1\u003e(decode(0, s));\n    }\n    \n    std::tuple\u003cint, string\u003e decode(int pos, string s) {\n        int num {0};\n        string word {\"\"};\n        unsigned long length {s.size()};\n        for(; pos \u003c length; ++pos) {\n            char c = s[pos];\n            if(c == '[') {\n                auto [newPos, repeat] {decode(++pos, s)};\n                for(; num \u003e 0; --num) {\n                    word += repeat;\n                }\n                pos = newPos;\n            } else if (c \u003e= '0' \u0026\u0026 c \u003c='9') {\n                num = num * 10 + (c - '0');\n            } else if (c == ']') {\n                return {pos, word};\n            } else {\n                word += c;\n            }\n        }\n        return {pos, word};\n    }\n};",
      "title": "Decode String",
      "url": "/submissions/detail/1100732284/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700219135,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "7.1 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100730767,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 394,
      "title_slug": "decode-string",
      "code": "class Solution {\npublic:\n    string decodeString(string s) {\n        int pos = 0;\n        return decode(pos, s);\n    }\n    \n    string decode(int\u0026 pos, string s) {\n        int num {0};\n        string word {\"\"};\n        unsigned long length {s.size()};\n        for(; pos \u003c length; ++pos) {\n            char c = s[pos];\n            if(c == '[') {\n                string repeat {decode(++pos, s)};\n                for(; num \u003e 0; --num) {\n                    word += repeat;\n                }\n            } else if (c \u003e= '0' \u0026\u0026 c \u003c='9') {\n                num = num * 10 + (c - '0');\n            } else if (c == ']') {\n                return word;\n            } else {\n                word += c;\n            }\n        }\n        return word;\n    }\n};",
      "title": "Decode String",
      "url": "/submissions/detail/1100730767/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700218925,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "6.8 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1100709128,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2470,
      "title_slug": "removing-stars-from-a-string",
      "code": "class Solution {\npublic:\n    string removeStars(string s) {\n        std::string ans;\n        int remove {0};\n        for (int i = s.size() - 1; i \u003e= 0; --i) {\n            char c = s[i];\n            if (c == '*') {\n                ++remove;\n            } else if (remove == 0) {\n                ans += c;\n            } else {\n                --remove;\n            }\n        }\n        std::reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};",
      "title": "Removing Stars From a String",
      "url": "/submissions/detail/1100709128/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700216011,
      "status": 10,
      "runtime": "79 ms",
      "is_pending": "Not Pending",
      "memory": "25.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1105480055,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 1528,
      "title_slug": "kids-with-the-greatest-number-of-candies",
      "code": "class Solution {\npublic:\n    std::vector\u003cbool\u003e kidsWithCandies(std::vector\u003cint\u003e\u0026 candies, int extraCandies) {\n        size_t length {candies.size()};        \n        std::vector\u003cbool\u003e ans {};\n        ans.resize(length);\n        const int maxCandy {*std::max_element(candies.begin(), candies.end())};\n        for (size_t i = 0; i \u003c length; ++i) {\n            ans[i] = candies[i] == maxCandy;\n        }\n        return ans;\n    }\n};",
      "title": "Kids With the Greatest Number of Candies",
      "url": "/submissions/detail/1105480055/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700833632,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0110000001001011001101000000000000000000100000000000000100000000000000100000000000010000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1105479589,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1528,
      "title_slug": "kids-with-the-greatest-number-of-candies",
      "code": "class Solution {\npublic:\n    std::vector\u003cbool\u003e kidsWithCandies(std::vector\u003cint\u003e\u0026 candies, int extraCandies) {\n        size_t length {candies.size()};        \n        std::vector\u003cbool\u003e ans {};\n        ans.resize(length);\n        const int maxCandy {std::max_element(candies)};\n        for (size_t i = 0; i \u003c length; ++i) {\n            ans[i] = candies[i] == maxCandy;\n        }\n        return ans;\n    }\n};",
      "title": "Kids With the Greatest Number of Candies",
      "url": "/submissions/detail/1105479589/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700833570,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1105479213,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1528,
      "title_slug": "kids-with-the-greatest-number-of-candies",
      "code": "class Solution {\npublic:\n    std::vector\u003cbool\u003e kidsWithCandies(std::vector\u003cint\u003e\u0026 candies, int extraCandies) {\n        size_t length {candies.size()};        \n        std::vector\u003cbool\u003e ans {};\n        ans.resize(length);\n        const int maxCandy {std::max(candies)};\n        for (size_t i = 0; i \u003c length; ++i) {\n            ans[i] = candies[i] == maxCandy;\n        }\n        return ans;\n    }\n};",
      "title": "Kids With the Greatest Number of Candies",
      "url": "/submissions/detail/1105479213/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700833523,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1105475590,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1146,
      "title_slug": "greatest-common-divisor-of-strings",
      "code": "class Solution {\npublic:\n    string gcdOfStrings(string str1, string str2) {\n        if (str1 + str2 == str2 + str1) {\n            return str1.substr(0, std::gcd(str1.size(), str2.size()));\n        }\n        return \"\";\n    }\n};",
      "title": "Greatest Common Divisor of Strings",
      "url": "/submissions/detail/1105475590/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700833060,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "7.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1105475123,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1146,
      "title_slug": "greatest-common-divisor-of-strings",
      "code": "class Solution {\npublic:\n    string gcdOfStrings(string str1, string str2) {\n        if (str1 + str2 != str2 + str1) {\n            return \"\";\n        }\n        unsigned long gcdLength {std::gcd(str1.size(), str2.size())};\n        return str1.substr(0, gcdLength);\n    }\n};",
      "title": "Greatest Common Divisor of Strings",
      "url": "/submissions/detail/1105475123/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700832998,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "7.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1105474995,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1146,
      "title_slug": "greatest-common-divisor-of-strings",
      "code": "class Solution {\npublic:\n    string gcdOfStrings(string str1, string str2) {\n        if (str1 + str2 != str2 + str1) {\n            return \"\";\n        }\n        int gcdLength {std::gcd(str1.size(), str2.size())};\n        return str1.substr(0, gcdLength);\n    }\n};",
      "title": "Greatest Common Divisor of Strings",
      "url": "/submissions/detail/1105474995/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700832981,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1105473269,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1146,
      "title_slug": "greatest-common-divisor-of-strings",
      "code": "class Solution {\npublic:\n    bool valid(string str1, string str2, size_t k) {\n        size_t len1 {str1.size()}, len2 {str2.size()};\n        if (len1 % k != 0 || len2 % k != 0) {\n            return false;\n        }\n        string base = str1.substr(0, k);\n        size_t n1 {len1 / k}, n2 {len2 / k};\n        if (n1 == n2) {\n            return str1 == str2 \u0026\u0026 joinWords(base, n1) == str1;\n        }\n        return str1 == joinWords(base, n1) \u0026\u0026 str2 == joinWords(base, n2);\n    }\n\n    string joinWords(string str, size_t k) {\n        string ans = \"\";\n        for (size_t i = 0; i \u003c k; ++i) {\n            ans += str;\n        }\n        return ans;\n    }\n    \n    \n    string gcdOfStrings(string str1, string str2) {\n        for (size_t i = min(str1.size(), str2.size()); i \u003e 0; --i) {\n            if (valid(str1, str2, i)) {\n                return str1.substr(0, i);\n            }\n        }\n        return \"\";\n    }\n};",
      "title": "Greatest Common Divisor of Strings",
      "url": "/submissions/detail/1105473269/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700832771,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "34 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1105338028,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1683,
      "title_slug": "maximum-number-of-coins-you-can-get",
      "code": "class Solution {\npublic:\n    int maxCoins(vector\u003cint\u003e\u0026 piles) {\n        std::sort(piles.begin(), piles.end());\n        size_t length {piles.size()};\n        size_t picks {length / 3};\n        int count {};\n        for (size_t i {length - 2}; picks \u003e 0; i -= 2, --picks) {\n            count += piles[i];\n        }\n        return count;\n    }\n};",
      "title": "Maximum Number of Coins You Can Get",
      "url": "/submissions/detail/1105338028/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700813257,
      "status": 10,
      "runtime": "92 ms",
      "is_pending": "Not Pending",
      "memory": "53.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1104778363,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1752,
      "title_slug": "arithmetic-subarrays",
      "code": "class Solution {\npublic:\n    bool check(vector\u003cint\u003e\u0026 arr) {\n        sort(arr.begin(), arr.end());\n        int diff = arr[1] - arr[0];\n        \n        for (int i = 2; i \u003c arr.size(); i++) {\n            if (arr[i] - arr[i - 1] != diff) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    vector\u003cbool\u003e checkArithmeticSubarrays(vector\u003cint\u003e\u0026 nums, vector\u003cint\u003e\u0026 l, vector\u003cint\u003e\u0026 r) {\n        vector\u003cbool\u003e ans;\n        for (int i = 0; i \u003c l.size(); i++) {\n            vector\u003cint\u003e arr(begin(nums) + l[i], begin(nums) + r[i] + 1);\n            ans.push_back(check(arr));\n        }\n        \n        return ans;\n    }\n};",
      "title": "Arithmetic Subarrays",
      "url": "/submissions/detail/1104778363/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700736084,
      "status": 10,
      "runtime": "41 ms",
      "is_pending": "Not Pending",
      "memory": "26.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1104261001,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1539,
      "title_slug": "diagonal-traverse-ii",
      "code": "class Solution {\npublic:\n    vector\u003cint\u003e findDiagonalOrder(vector\u003cvector\u003cint\u003e\u003e\u0026 nums) {\n        unordered_map\u003cint, vector\u003cint\u003e\u003e groups;\n        for (int row = nums.size() - 1; row \u003e= 0; row--) {\n            for (int col = 0; col \u003c nums[row].size(); col++) {\n                int diagonal = row + col;\n                groups[diagonal].push_back(nums[row][col]);\n            }\n        }\n        \n        vector\u003cint\u003e ans;\n        int curr = 0;\n        \n        while (groups.find(curr) != groups.end()) {\n            for (int num : groups[curr]) {\n                ans.push_back(num);\n            }\n            \n            curr++;\n        }\n        \n        return ans;\n    }\n};\n",
      "title": "Diagonal Traverse II",
      "url": "/submissions/detail/1104261001/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700668142,
      "status": 10,
      "runtime": "212 ms",
      "is_pending": "Not Pending",
      "memory": "97.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1103355276,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 257,
      "title_slug": "binary-tree-paths",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector\u003cstring\u003e binaryTreePaths(TreeNode* root) {\n        vector\u003cstring\u003e ans;\n        dfs(*root, ans, \"\");\n        return ans;\n    }\n\n    void dfs(TreeNode\u0026 root, vector\u003cstring\u003e \u0026ans, string path){\n        path += (path.size() ? \"-\u003e\" : \"\") + std::to_string(root.val);\n        if(!root.left \u0026\u0026 !root.right) {\n            ans.push_back(path);\n            return;\n        }\n        if(root.left) {\n            dfs(*root.left, ans, path);\n        }\n        if(root.right) {\n            dfs(*root.right, ans, path);\n        }\n    }\n};",
      "title": "Binary Tree Paths",
      "url": "/submissions/detail/1103355276/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700560280,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "13.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1103351460,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1925,
      "title_slug": "count-nice-pairs-in-an-array",
      "code": "class Solution {\npublic:\n    int countNicePairs(vector\u003cint\u003e\u0026 nums) {\n        std::unordered_map\u003cint, int\u003e diffs{};\n        int ans{};\n        double mod{1e9 + 7};\n        for (const int\u0026 num : nums) {\n            int revNum{};\n            int tempNum{num};\n            while(tempNum) {\n                revNum = (revNum * 10) + (tempNum % 10);\n                tempNum /= 10;\n            }\n            int diff{num-revNum};\n            if (diffs.contains(diff)) {\n                ans = std::fmod(ans + diffs[diff], mod);\n            }\n            ++diffs[diff];\n        }\n        return ans;\n    }\n\n};",
      "title": "Count Nice Pairs in an Array",
      "url": "/submissions/detail/1103351460/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700559844,
      "status": 10,
      "runtime": "100 ms",
      "is_pending": "Not Pending",
      "memory": "57.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1103345965,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1925,
      "title_slug": "count-nice-pairs-in-an-array",
      "code": "class Solution {\npublic:\n    int countNicePairs(vector\u003cint\u003e\u0026 nums) {\n        std::unordered_map\u003cint, int\u003e diffs{};\n        for (const int\u0026 num : nums) {\n            int revNum{};\n            int tempNum{num};\n            while(tempNum) {\n                revNum = (revNum * 10) + (tempNum % 10);\n                tempNum /= 10;\n            }\n            ++diffs[num - revNum];\n        }\n        int ans{};\n        double mod{std::pow(10, 9) + 7};\n        for (const auto\u0026 [num, count] : diffs) {\n            long pairs{(1L * count * count - count) / 2};\n            ans = std::fmod(ans + pairs, mod);\n        }\n        return ans;\n    }\n\n};",
      "title": "Count Nice Pairs in an Array",
      "url": "/submissions/detail/1103345965/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700559192,
      "status": 10,
      "runtime": "91 ms",
      "is_pending": "Not Pending",
      "memory": "57.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1103343064,
      "status_display": "Runtime Error",
      "lang": "cpp",
      "question_id": 1925,
      "title_slug": "count-nice-pairs-in-an-array",
      "code": "class Solution {\npublic:\n    int countNicePairs(vector\u003cint\u003e\u0026 nums) {\n        std::unordered_map\u003cint, int\u003e diffs{};\n        for (const int\u0026 num : nums) {\n            int revNum{};\n            int tempNum{num};\n            while(tempNum) {\n                revNum = (revNum * 10) + (tempNum % 10);\n                tempNum /= 10;\n            }\n            ++diffs[num - revNum];\n        }\n        int ans{};\n        double mod{std::pow(10, 9) + 7};\n        for (const auto\u0026 [num, count] : diffs) {\n            ans = std::fmod(ans + (count * count - count) / 2, mod);\n        }\n        return ans;\n    }\n\n};",
      "title": "Count Nice Pairs in an Array",
      "url": "/submissions/detail/1103343064/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700558856,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111110",
      "flag_type": 1
    },
    {
      "id": 1103341198,
      "status_display": "Runtime Error",
      "lang": "cpp",
      "question_id": 1925,
      "title_slug": "count-nice-pairs-in-an-array",
      "code": "class Solution {\npublic:\n    int countNicePairs(vector\u003cint\u003e\u0026 nums) {\n        std::unordered_map\u003cint, int\u003e diffs{};\n        for (const int\u0026 num : nums) {\n            int revNum{};\n            int tempNum{num};\n            while(tempNum) {\n                revNum = (revNum * 10) + (tempNum % 10);\n                tempNum /= 10;\n            }\n            ++diffs[num - revNum];\n        }\n        int ans{};\n        double mod{std::pow(10, 9) + 7};\n        for (const auto\u0026 [num, count] : diffs) {\n            auto pairs{(count * count - count) / 2};\n            ans = std::fmod(ans + pairs, mod);\n        }\n        return ans;\n    }\n\n};",
      "title": "Count Nice Pairs in an Array",
      "url": "/submissions/detail/1103341198/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700558647,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111110",
      "flag_type": 1
    },
    {
      "id": 1103340959,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1925,
      "title_slug": "count-nice-pairs-in-an-array",
      "code": "class Solution {\npublic:\n    int countNicePairs(vector\u003cint\u003e\u0026 nums) {\n        std::unordered_map\u003cint, int\u003e diffs{};\n        for (const int\u0026 num : nums) {\n            int revNum{};\n            int tempNum{num};\n            while(tempNum) {\n                revNum = (revNum * 10) + (tempNum % 10);\n                tempNum /= 10;\n            }\n            ++diffs[num - revNum];\n        }\n        int ans{};\n        double mod{std::pow(10, 9) + 7};\n        for (const auto\u0026 [num, count] : diffs) {\n            double pairs{(count * count - count) / 2};\n            ans = std::fmod(ans + pairs, mod);\n        }\n        return ans;\n    }\n\n};",
      "title": "Count Nice Pairs in an Array",
      "url": "/submissions/detail/1103340959/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700558619,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1103340677,
      "status_display": "Runtime Error",
      "lang": "cpp",
      "question_id": 1925,
      "title_slug": "count-nice-pairs-in-an-array",
      "code": "class Solution {\npublic:\n    int countNicePairs(vector\u003cint\u003e\u0026 nums) {\n        std::unordered_map\u003cint, int\u003e diffs{};\n        for (const int\u0026 num : nums) {\n            int revNum{};\n            int tempNum{num};\n            while(tempNum) {\n                revNum = (revNum * 10) + (tempNum % 10);\n                tempNum /= 10;\n            }\n            ++diffs[num - revNum];\n        }\n        int ans{};\n        double mod{std::pow(10, 9) + 7};\n        for (const auto\u0026 [num, count] : diffs) {\n            int pairs{(count * count - count) / 2};\n            ans = std::fmod(ans + pairs, mod);\n        }\n        return ans;\n    }\n\n};",
      "title": "Count Nice Pairs in an Array",
      "url": "/submissions/detail/1103340677/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700558590,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111110",
      "flag_type": 1
    },
    {
      "id": 1102790598,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 171,
      "title_slug": "excel-sheet-column-number",
      "code": "class Solution {\npublic:\n    int titleToNumber(string columnTitle) {\n        int ans{0};\n        for (const char\u0026 ch : columnTitle) {\n            ans = (ans * 26) + (ch - 'A') + 1;\n        }\n        return ans;\n    }\n};",
      "title": "Excel Sheet Column Number",
      "url": "/submissions/detail/1102790598/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700494257,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "6.5 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1102673844,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 145,
      "title_slug": "binary-tree-postorder-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector\u003cint\u003e postorderTraversal(TreeNode* root) {\n        if (root == nullptr) {\n            return {};\n        }\n        std::vector\u003cint\u003e ans{};\n        addNodes(*root, ans);\n        return ans;\n    }\n\n    void addNodes(TreeNode\u0026 node, std::vector\u003cint\u003e\u0026 ans) {\n        if (node.left != nullptr) {\n            addNodes(*node.left, ans);\n        }\n        if (node.right != nullptr) {\n            addNodes(*node.right, ans);\n        }\n        ans.push_back(node.val);\n    }\n};",
      "title": "Binary Tree Postorder Traversal",
      "url": "/submissions/detail/1102673844/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700480435,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1102672996,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 145,
      "title_slug": "binary-tree-postorder-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector\u003cint\u003e postorderTraversal(TreeNode* root) {\n        if (root == nullptr) {\n            return {};\n        }\n        std::vector\u003cint\u003e ans{};\n        addNodes(root, ans);\n        return ans;\n    }\n\n    void addNodes(TreeNode* node, std::vector\u003cint\u003e\u0026 ans) {\n        auto left{node-\u003eleft}, right{node-\u003eright};\n        if (left != nullptr) {\n            addNodes(left, ans);\n        }\n        if (right != nullptr) {\n            addNodes(right, ans);\n        }\n        ans.push_back(node-\u003eval);\n    }\n};",
      "title": "Binary Tree Postorder Traversal",
      "url": "/submissions/detail/1102672996/",
      "lang_name": "C++",
      "time": "2 months, 2 weeks",
      "timestamp": 1700480320,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "8.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1114478635,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2032,
      "title_slug": "largest-odd-number-in-string",
      "code": "class Solution {\npublic:\n    string largestOddNumber(string num) {\n        size_t length {num.size()};\n        for (int i = length - 1; i \u003e= 0; --i) {\n            if ((num[i] - '0') % 2 != 0) {\n                return num.substr(0, i + 1);\n            }\n        }\n        return \"\";\n    }\n};",
      "title": "Largest Odd Number in String",
      "url": "/submissions/detail/1114478635/",
      "lang_name": "C++",
      "time": "1 month, 4 weeks",
      "timestamp": 1701966048,
      "status": 10,
      "runtime": "31 ms",
      "is_pending": "Not Pending",
      "memory": "15.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1113522285,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 234,
      "title_slug": "palindrome-linked-list",
      "code": "class Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        ListNode* slow {head};\n        ListNode* fast {head};\n        ListNode* next;\n        ListNode* prev {new ListNode()};\n\n        while(fast \u0026\u0026 fast-\u003enext) {\n            slow = slow-\u003enext;\n            fast = fast-\u003enext-\u003enext; \n\n            next = head-\u003enext;\n            head-\u003enext = prev;\n            prev = head;\n            head = next;\n        }\n    \n        if (fast) {\n            slow = slow-\u003enext;\n        }\n        head = prev;\n\n        while (slow) {\n            if (head-\u003eval != slow-\u003eval) {\n                return false;\n            }\n            head = head-\u003enext;\n            slow = slow-\u003enext;\n        }\n        return true;\n    }\n};",
      "title": "Palindrome Linked List",
      "url": "/submissions/detail/1113522285/",
      "lang_name": "C++",
      "time": "2 months",
      "timestamp": 1701855940,
      "status": 10,
      "runtime": "137 ms",
      "is_pending": "Not Pending",
      "memory": "110.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1113516928,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 234,
      "title_slug": "palindrome-linked-list",
      "code": "class Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        if(head == nullptr || head-\u003enext == nullptr){\n            return false;\n        }\n        ListNode *r_head = nullptr;\n        ListNode *ptr = head;\n        while(ptr != nullptr){\n            ListNode *temp = new ListNode(ptr-\u003eval);\n            temp-\u003enext = r_head;\n            r_head = temp;\n            ptr = ptr-\u003enext;\n        }\n        while(head \u0026\u0026 r_head){\n            if(head-\u003eval != r_head-\u003eval){\n                return false;\n            }\n            head = head-\u003enext;\n            r_head = r_head-\u003enext;\n        }\n        return true;\n    }\n};",
      "title": "Palindrome Linked List",
      "url": "/submissions/detail/1113516928/",
      "lang_name": "C++",
      "time": "2 months",
      "timestamp": 1701855282,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1113427537,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1817,
      "title_slug": "calculate-money-in-leetcode-bank",
      "code": "class Solution {\npublic:\n    int totalMoney(int n) {\n        int ans {0};\n        int monday {1};\n        \n        while (n \u003e 0) {\n            for (int day {0}; day \u003c min(n, 7); ++day) {\n                ans += monday + day;\n            }\n            n -= 7;\n            ++monday;\n        }\n        \n        return ans;\n    }\n};",
      "title": "Calculate Money in Leetcode Bank",
      "url": "/submissions/detail/1113427537/",
      "lang_name": "C++",
      "time": "2 months",
      "timestamp": 1701844984,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "6.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1112898278,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1806,
      "title_slug": "count-of-matches-in-tournament",
      "code": "class Solution {\npublic:\n    int numberOfMatches(int n) {\n        int ans = 0;\n        while (n \u003e 1) {\n            if (n % 2 == 0) {\n                int matches {n / 2};\n                ans += matches;\n                n = matches;\n            } else {\n                int matches {(n - 1) / 2};\n                ans += matches;\n                n = matches + 1;\n            }\n        }\n        \n        return ans;\n    }\n};",
      "title": "Count of Matches in Tournament",
      "url": "/submissions/detail/1112898278/",
      "lang_name": "C++",
      "time": "2 months",
      "timestamp": 1701781944,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "6.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1112898185,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1806,
      "title_slug": "count-of-matches-in-tournament",
      "code": "class Solution {\npublic:\n    int numberOfMatches(int n) {\n        int ans = 0;\n        while (n \u003e 1) {\n            if (n % 2 == 0) {\n                int matches {n / 2} \n                ans += matches;\n                n = matches;\n            } else {\n                int matches {(n - 1) / 2};\n                ans += matches;\n                n = matches + 1;\n            }\n        }\n        \n        return ans;\n    }\n};",
      "title": "Count of Matches in Tournament",
      "url": "/submissions/detail/1112898185/",
      "lang_name": "C++",
      "time": "2 months",
      "timestamp": 1701781934,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1112895963,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 1806,
      "title_slug": "count-of-matches-in-tournament",
      "code": "class Solution {\npublic:\n    int numberOfMatches(int n) {\n        int ans {};\n        while (n \u003e 0) {\n            int matches {};\n            if (n % 2 == 0) {\n                matches = n / 2;\n            } else {\n                matches = (n - 1) / 2 + 1;\n            }\n            ans += matches;\n            n -= matches;\n        }\n        return ans;\n    }\n};",
      "title": "Count of Matches in Tournament",
      "url": "/submissions/detail/1112895963/",
      "lang_name": "C++",
      "time": "2 months",
      "timestamp": 1701781672,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1112022298,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2346,
      "title_slug": "largest-3-same-digit-number-in-string",
      "code": "class Solution {\npublic:\n    string largestGoodInteger(string num) {\n        int cur {-1};\n        int max {-1};\n        int count {0};\n        for (const char\u0026 ch : num) {\n            int i {ch - '0'};\n            if (i == cur) {\n                ++count;\n            } else {\n                cur = i;\n                count = 1; \n            }\n            if (count == 3) {\n                max = std::max(i, max);\n            }\n        }\n        if (max == -1) {\n            return \"\";\n        }\n        std::string ans {std::to_string(max)};\n        return ans + ans + ans;\n    }\n};",
      "title": "Largest 3-Same-Digit Number in String",
      "url": "/submissions/detail/1112022298/",
      "lang_name": "C++",
      "time": "2 months",
      "timestamp": 1701677339,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "6.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1111540482,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1395,
      "title_slug": "minimum-time-visiting-all-points",
      "code": "class Solution {\npublic:\n    int minTimeToVisitAllPoints(vector\u003cvector\u003cint\u003e\u003e\u0026 points) {\n        int ans = 0;\n        for (int i = 0; i \u003c points.size() - 1; i++) {\n            int currX = points[i][0];\n            int currY = points[i][1];\n            int targetX = points[i + 1][0];\n            int targetY = points[i + 1][1];\n            ans += max(abs(targetX - currX), abs(targetY - currY));\n        }\n        \n        return ans;\n    }\n};",
      "title": "Minimum Time Visiting All Points",
      "url": "/submissions/detail/1111540482/",
      "lang_name": "C++",
      "time": "2 months",
      "timestamp": 1701615193,
      "status": 10,
      "runtime": "3 ms",
      "is_pending": "Not Pending",
      "memory": "10.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1111055227,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1112,
      "title_slug": "find-words-that-can-be-formed-by-characters",
      "code": "class Solution {\npublic:\n    int countCharacters(vector\u003cstring\u003e\u0026 words, string chars) {\n        std::vector\u003cint\u003e count {};\n        int ans {};\n        count.resize(26);\n        for (const char\u0026 ch : chars) {\n            ++count[ch - 'a'];\n        }\n        for (const string\u0026 word : words) {\n            std::vector\u003cint\u003e wordCount {};\n            wordCount.resize(26);\n            bool failure {false};\n            for (const char\u0026 ch : word) {\n                int i {ch - 'a'};\n                int cur {++wordCount[i]};\n                if (cur \u003e count[i]) {\n                    failure = true;\n                    break;\n                }\n            }\n            if (!failure) {\n                ans += word.length();\n            }\n        }\n        return ans;\n    }\n};",
      "title": "Find Words That Can Be Formed by Characters",
      "url": "/submissions/detail/1111055227/",
      "lang_name": "C++",
      "time": "2 months",
      "timestamp": 1701549608,
      "status": 10,
      "runtime": "40 ms",
      "is_pending": "Not Pending",
      "memory": "20.7 MB",
      "compare_result": "111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1110086928,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1781,
      "title_slug": "check-if-two-string-arrays-are-equivalent",
      "code": "class Solution {\npublic:\n    bool arrayStringsAreEqual(vector\u003cstring\u003e\u0026 word1, vector\u003cstring\u003e\u0026 word2) {\n        string s1 = \"\";\n        string s2 = \"\";\n\n        for(const string\u0026 s : word1) {\n            s1 += s;\n        }\n        for(const string\u0026 s : word2) {\n            s2 += s;\n        }\n        return s1==s2;\n    }\n};",
      "title": "Check If Two String Arrays are Equivalent",
      "url": "/submissions/detail/1110086928/",
      "lang_name": "C++",
      "time": "2 months",
      "timestamp": 1701418889,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "12.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1109412407,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1732,
      "title_slug": "minimum-one-bit-operations-to-make-integers-zero",
      "code": "class Solution {\npublic:\n    int minimumOneBitOperations(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        \n        int k = 0;\n        int curr = 1;\n        while (curr * 2 \u003c= n) {\n            curr *= 2;\n            k++;\n        }\n        \n        return (1 \u003c\u003c (k + 1)) - 1 - minimumOneBitOperations(n ^ curr);\n    }\n};",
      "title": "Minimum One Bit Operations to Make Integers Zero",
      "url": "/submissions/detail/1109412407/",
      "lang_name": "C++",
      "time": "2 months",
      "timestamp": 1701330611,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "6.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1108769382,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 191,
      "title_slug": "number-of-1-bits",
      "code": "class Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        int ans {};\n        while (n) {\n            if (n \u0026 1) {\n                ++ans;\n            }\n            n \u003e\u003e= 1;\n        }\n        return ans;\n    }\n};",
      "title": "Number of 1 Bits",
      "url": "/submissions/detail/1108769382/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1701248504,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "6.4 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1108067184,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 2251,
      "title_slug": "number-of-ways-to-divide-a-long-corridor",
      "code": "class Solution {\npublic:\n    // Store 1000000007 in a variable for convenience\n    const int MOD = 1e9 + 7;\n    \n    // Count the number of ways to divide from \"index\" to the last index\n    // with \"seats\" number of \"S\" in the current section\n    int count(int index, int seats, string\u0026 corridor, int cache[][3]) {\n        // If we have reached the end of the corridor, then\n        // the current section is valid only if \"seats\" is 2\n        if (index == corridor.length()) {\n            return seats == 2 ? 1 : 0;\n        }\n\n        // If we have already computed the result of this sub-problem,\n        // then return the cached result\n        if (cache[index][seats] != -1) {\n            return cache[index][seats];\n        }\n\n        // Result of the sub-problem\n        int result = 0;\n\n        // If the current section has exactly 2 \"S\"\n        if (seats == 2) {\n            // If the current element is \"S\", then we have to close the\n            // section and start a new section from this index. Next index\n            // will have one \"S\" in the current section\n            if (corridor[index] == 'S') {\n                result = count(index + 1, 1, corridor, cache);\n            } else {\n                // If the current element is \"P\", then we have two options\n                // 1. Close the section and start a new section from this index\n                // 2. Keep growing the section\n                result = (count(index + 1, 0, corridor, cache) + count(index + 1, 2, corridor, cache)) % MOD;  \n            }\n        } else {\n            // Keep growing the section. Increment \"seats\" if present\n            // element is \"S\"\n            if (corridor[index] == 'S') {\n                result = count(index + 1, seats + 1, corridor, cache);\n            } else {\n                result = count(index + 1, seats, corridor, cache);\n            }\n        }\n\n        // Memoize the result, and return it\n        cache[index][seats] = result;\n        return cache[index][seats];\n    }\n\n    int numberOfWays(string corridor) {\n        // Cache the result of each sub-problem\n        int cache[corridor.length()][3];\n        memset(cache, -1, sizeof(cache));\n\n        // Call the count function\n        return count(0, 0, corridor, cache);\n    }\n};",
      "title": "Number of Ways to Divide a Long Corridor",
      "url": "/submissions/detail/1108067184/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1701165881,
      "status": 10,
      "runtime": "177 ms",
      "is_pending": "Not Pending",
      "memory": "40.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1107276717,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1845,
      "title_slug": "largest-submatrix-with-rearrangements",
      "code": "class Solution {\npublic:\n    int largestSubmatrix(vector\u003cvector\u003cint\u003e\u003e\u0026 matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        int ans = 0;\n        \n        for (int row = 0; row \u003c m; row++) {\n            for (int col = 0; col \u003c n; col++) {\n                if (matrix[row][col] != 0 \u0026\u0026 row \u003e 0) {\n                    matrix[row][col] += matrix[row - 1][col];\n                }\n            }\n            \n            vector\u003cint\u003e currRow = matrix[row];\n            sort(currRow.begin(), currRow.end(), greater());\n            for (int i = 0; i \u003c n; i++) {\n                ans = max(ans, currRow[i] * (i + 1));\n            }\n        }\n        \n        return ans;\n    }\n};",
      "title": "Largest Submatrix With Rearrangements",
      "url": "/submissions/detail/1107276717/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1701070363,
      "status": 10,
      "runtime": "172 ms",
      "is_pending": "Not Pending",
      "memory": "74.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1107276458,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 972,
      "title_slug": "knight-dialer",
      "code": "class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e memo;\n    int n;\n    int MOD = 1e9 + 7;\n    vector\u003cvector\u003cint\u003e\u003e jumps = {\n        {4, 6},\n        {6, 8},\n        {7, 9},\n        {4, 8},\n        {3, 9, 0},\n        {},\n        {1, 7, 0},\n        {2, 6},\n        {1, 3},\n        {2, 4}\n    };\n    \n    int dp(int remain, int square) {\n        if (remain == 0) {\n            return 1;\n        }\n        \n        if (memo[remain][square] != 0) {\n            return memo[remain][square];\n        }\n        \n        int ans = 0;\n        for (int nextSquare : jumps[square]) {\n            ans = (ans + dp(remain - 1, nextSquare)) % MOD;\n        }\n        \n        memo[remain][square] = ans;\n        return ans;\n    }\n    \n    int knightDialer(int n) {\n        this-\u003en = n;\n        memo = vector(n + 1, vector(10, 0));\n        int ans = 0;\n        for (int square = 0; square \u003c 10; square++) {\n            ans = (ans + dp(n - 1, square)) % MOD;\n        }\n        \n        return ans;\n    }\n};",
      "title": "Knight Dialer",
      "url": "/submissions/detail/1107276458/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1701070332,
      "status": 10,
      "runtime": "160 ms",
      "is_pending": "Not Pending",
      "memory": "39.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1106286504,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1787,
      "title_slug": "sum-of-absolute-differences-in-a-sorted-array",
      "code": "class Solution {\npublic:\n    vector\u003cint\u003e getSumAbsoluteDifferences(vector\u003cint\u003e\u0026 nums) {\n        int n = nums.size();\n        int totalSum = accumulate(nums.begin(), nums.end(), 0);\n        \n        int leftSum = 0;\n        vector\u003cint\u003e ans;\n        for (int i = 0; i \u003c n; i++) {\n            int rightSum = totalSum - leftSum - nums[i];\n            \n            int leftCount = i;\n            int rightCount = n - 1 - i;\n            \n            int leftTotal = leftCount * nums[i] - leftSum;\n            int rightTotal = rightSum - rightCount * nums[i];\n            \n            ans.push_back(leftTotal + rightTotal);\n            leftSum += nums[i];\n        }\n        \n        return ans;\n    }\n};",
      "title": "Sum of Absolute Differences in a Sorted Array",
      "url": "/submissions/detail/1106286504/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700938844,
      "status": 10,
      "runtime": "96 ms",
      "is_pending": "Not Pending",
      "memory": "87.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1106286305,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1787,
      "title_slug": "sum-of-absolute-differences-in-a-sorted-array",
      "code": "class Solution {\npublic:\n    vector\u003cint\u003e getSumAbsoluteDifferences(vector\u003cint\u003e\u0026 nums) {\n        int n = nums.size();\n        vector\u003cint\u003e prefix = {nums[0]};\n        for (int i = 1; i \u003c n; i++) {\n            prefix.push_back(prefix[i - 1] + nums[i]);\n        }\n        vector\u003cint\u003e ans;\n        for (int i = 0; i \u003c n; i++) {\n            int leftSum = prefix[i] - nums[i];\n            int rightSum = prefix[n - 1] - prefix[i];\n            \n            int leftCount = i;\n            int rightCount = n - 1 - i;\n            \n            int leftTotal = leftCount * nums[i] - leftSum;\n            int rightTotal = rightSum - rightCount * nums[i];\n            \n            ans.push_back(leftTotal + rightTotal);\n        }\n        return ans;\n    }\n};",
      "title": "Sum of Absolute Differences in a Sorted Array",
      "url": "/submissions/detail/1106286305/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700938821,
      "status": 10,
      "runtime": "104 ms",
      "is_pending": "Not Pending",
      "memory": "94.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1105481191,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 1528,
      "title_slug": "kids-with-the-greatest-number-of-candies",
      "code": "class Solution {\npublic:\n    std::vector\u003cbool\u003e kidsWithCandies(std::vector\u003cint\u003e\u0026 candies, int extraCandies) {\n        size_t length {candies.size()};        \n        std::vector\u003cbool\u003e ans {};\n        ans.resize(length);\n        const int maxCandy {*std::max_element(candies.begin(), candies.end())};\n        for (size_t i = 0; i \u003c length; ++i) {\n            ans[i] = (candies[i] + extraCandies) \u003e= maxCandy;\n        }\n        return ans;\n    }\n};",
      "title": "Kids With the Greatest Number of Candies",
      "url": "/submissions/detail/1105481191/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700833772,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "9.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1105480951,
      "status_display": "Wrong Answer",
      "lang": "cpp",
      "question_id": 1528,
      "title_slug": "kids-with-the-greatest-number-of-candies",
      "code": "class Solution {\npublic:\n    std::vector\u003cbool\u003e kidsWithCandies(std::vector\u003cint\u003e\u0026 candies, int extraCandies) {\n        size_t length {candies.size()};        \n        std::vector\u003cbool\u003e ans {};\n        ans.resize(length);\n        const int maxCandy {*std::max_element(candies.begin(), candies.end())};\n        for (size_t i = 0; i \u003c length; ++i) {\n            ans[i] = (candies[i] + extraCandies) == maxCandy;\n        }\n        return ans;\n    }\n};",
      "title": "Kids With the Greatest Number of Candies",
      "url": "/submissions/detail/1105480951/",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1700833743,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1124812187,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1742,
      "title_slug": "widest-vertical-area-between-two-points-containing-no-points",
      "code": "class Solution:\n    def maxWidthOfVerticalArea(self, points: List[List[int]]) -\u003e int:\n        points.sort(key=lambda x: x[0])\n\n        max_width = 0\n\n        for i in range(1, len(points)):\n            width = points[i][0] - points[i-1][0]\n            max_width = max(max_width, width)\n\n        return max_width",
      "title": "Widest Vertical Area Between Two Points Containing No Points",
      "url": "/submissions/detail/1124812187/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1703137353,
      "status": 10,
      "runtime": "741 ms",
      "is_pending": "Not Pending",
      "memory": "60.1 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1124175757,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2756,
      "title_slug": "buy-two-chocolates",
      "code": "class Solution:\n    def buyChoco(self, prices: List[int], money: int) -\u003e int:\n        # Assume the Minimum Cost to be Infinity\n        min_cost = float('inf')\n\n        # Number of Chocolates\n        n = len(prices)\n\n        # Check Every Pair of Chocolates\n        for first_choco in range(n):\n            for second_choco in range(first_choco + 1, n):\n                # Sum of Prices of the Two Chocolates\n                cost = prices[first_choco] + prices[second_choco]\n\n                # If the Sum of Prices is Less than the Minimum Cost\n                if cost \u003c min_cost:\n                    # Update the Minimum Cost\n                    min_cost = cost\n        \n        # We can buy chocolates only if we have enough money\n        if min_cost \u003c= money:\n            # Return the Amount of Money Left\n            return money - min_cost\n        else:\n            # We cannot buy chocolates. Return the initial amount of money\n            return money",
      "title": "Buy Two Chocolates",
      "url": "/submissions/detail/1124175757/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1703070316,
      "status": 10,
      "runtime": "53 ms",
      "is_pending": "Not Pending",
      "memory": "17.2 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1123253523,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 661,
      "title_slug": "image-smoother",
      "code": "class Solution:\n    def imageSmoother(self, img: List[List[int]]) -\u003e List[List[int]]:\n        # Save the dimensions of the image.\n        m = len(img)\n        n = len(img[0])\n\n        # Create a new image of the same dimension as the input image.\n        smooth_img = [[0] * n for _ in range(m)]\n\n        # Iterate over the cells of the image.\n        for i in range(m):\n            for j in range(n):\n                # Initialize the sum and count \n                sum = 0\n                count = 0\n\n                # Iterate over all plausible nine indices.\n                for x in (i - 1, i, i + 1):\n                    for y in (j - 1, j, j + 1):\n                        # If the indices form valid neighbor\n                        if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n:\n                            sum += img[x][y]\n                            count += 1\n\n                # Store the rounded down value in smooth_img[i][j].\n                smooth_img[i][j] = sum // count\n        \n        # Return the smooth image.\n        return smooth_img",
      "title": "Image Smoother",
      "url": "/submissions/detail/1123253523/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1702974287,
      "status": 10,
      "runtime": "463 ms",
      "is_pending": "Not Pending",
      "memory": "17.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1122499093,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2042,
      "title_slug": "maximum-product-difference-between-two-pairs",
      "code": "class Solution:\r\n    def maxProductDifference(self, nums: List[int]) -\u003e int:\r\n        nums.sort()\r\n        return nums[-1] * nums[-2] - nums[0] * nums[1]",
      "title": "Maximum Product Difference Between Two Pairs",
      "url": "/submissions/detail/1122499093/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1702895229,
      "status": 10,
      "runtime": "166 ms",
      "is_pending": "Not Pending",
      "memory": "17.7 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1121678346,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2429,
      "title_slug": "design-a-food-rating-system",
      "code": "class Food:\n    def __init__(self, food_rating, food_name):\n        # Store the food's rating.\n        self.food_rating = food_rating\n        # Store the food's name.\n        self.food_name = food_name\n\n    def __lt__(self, other):\n        # Overload the less than operator for comparison.\n        # If food ratings are the same, sort based on their name (lexicographically smaller name food will be on top).\n        if self.food_rating == other.food_rating:\n            return self.food_name \u003c other.food_name\n        # Sort based on food rating (bigger rating food will be on top).\n        return self.food_rating \u003e other.food_rating\n\nclass FoodRatings:\n    def __init__(self, foods: List[str], cuisines: List[str], ratings: List[int]):\n        # Map food with its rating.\n        self.food_rating_map = {}\n        # Map food with the cuisine it belongs to.\n        self.food_cuisine_map = {}\n        # Store all food of a cuisine in a priority queue (to sort them on ratings/name).\n        # Priority queue element -\u003e Food: (food_rating, food_name)\n        self.cuisine_food_map = defaultdict(list)\n\n        for i in range(len(foods)):\n            # Store 'rating' and 'cuisine' of the current 'food' in 'food_rating_map' and 'food_cuisine_map' maps.\n            self.food_rating_map[foods[i]] = ratings[i]\n            self.food_cuisine_map[foods[i]] = cuisines[i]\n            # Insert the '(rating, name)' element into the current cuisine's priority queue.\n            heapq.heappush(self.cuisine_food_map[cuisines[i]], Food(ratings[i], foods[i]))\n\n    def changeRating(self, food: str, newRating: int) -\u003e None:\n        # Update food's rating in 'food_rating' map.\n        self.food_rating_map[food] = newRating\n        # Insert the '(new rating, name)' element in the respective cuisine's priority queue.\n        cuisineName = self.food_cuisine_map[food]\n        heapq.heappush(self.cuisine_food_map[cuisineName], Food(newRating, food))\n\n    def highestRated(self, cuisine: str) -\u003e str:\n        # Get the highest rated 'food' of 'cuisine'.\n        highest_rated = self.cuisine_food_map[cuisine][0]\n\n        # If the latest rating of 'food' doesn't match with the 'rating' on which it was sorted in the priority queue,\n        # then we discard this element from the priority queue.\n        while self.food_rating_map[highest_rated.food_name] != highest_rated.food_rating:\n            heapq.heappop(self.cuisine_food_map[cuisine])\n            highest_rated = self.cuisine_food_map[cuisine][0]\n\n        # Return the name of the highest-rated 'food' of 'cuisine'.\n        return highest_rated.food_name",
      "title": "Design a Food Rating System",
      "url": "/submissions/detail/1121678346/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1702804177,
      "status": 10,
      "runtime": "801 ms",
      "is_pending": "Not Pending",
      "memory": "49.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1120948856,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 242,
      "title_slug": "valid-anagram",
      "code": "class Solution:\n    def isAnagram(self, s: str, t: str) -\u003e bool:\n        if (len(s) != len(t)):\n            return False\n            \n        letters = [0] * 26\n        for char in s:\n            letters[ord(char) - ord('a')] += 1\n        \n        for char in t:\n            i = ord(char) - ord('a')\n            letters[i] -= 1\n            if letters[i] \u003c 0:\n                return False\n\n        return True",
      "title": "Valid Anagram",
      "url": "/submissions/detail/1120948856/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1702720915,
      "status": 10,
      "runtime": "63 ms",
      "is_pending": "Not Pending",
      "memory": "16.8 MB",
      "compare_result": "111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1120948415,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 242,
      "title_slug": "valid-anagram",
      "code": "class Solution:\n    def isAnagram(self, s: str, t: str) -\u003e bool:\n        letters = [0] * 26\n        for char in s:\n            letters[ord(char) - ord('a')] += 1\n        \n        for char in t:\n            i = ord(char) - ord('a')\n            letters[i] -= 1\n            if letters[i] \u003c 0:\n                return False\n\n        return True",
      "title": "Valid Anagram",
      "url": "/submissions/detail/1120948415/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1702720866,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111010111101111111111111111101111111111",
      "flag_type": 1
    },
    {
      "id": 1120177201,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1547,
      "title_slug": "destination-city",
      "code": "class Solution:\n    def destCity(self, paths: List[List[str]]) -\u003e str:\n        paths_from = set()\n        for path_from, path_to in paths:\n            paths_from.add(path_from)\n        \n        ans = \"\"\n        for _, path_to in paths:\n            if path_to not in paths_from:\n                ans = path_to\n                break\n        \n        return ans",
      "title": "Destination City",
      "url": "/submissions/detail/1120177201/",
      "lang_name": "Python3",
      "time": "1 month, 3 weeks",
      "timestamp": 1702626978,
      "status": 10,
      "runtime": "71 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1120177126,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1547,
      "title_slug": "destination-city",
      "code": "class Solution:\n    def destCity(self, paths: List[List[str]]) -\u003e str:\n        paths_from = set(), set()\n        for path_from, path_to in paths:\n            paths_from.add(path_from)\n        \n        ans = \"\"\n        for _, path_to in paths:\n            if path_to not in paths_from:\n                ans = path_to\n                break\n        \n        return ans",
      "title": "Destination City",
      "url": "/submissions/detail/1120177126/",
      "lang_name": "Python3",
      "time": "1 month, 3 weeks",
      "timestamp": 1702626970,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1120176429,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1547,
      "title_slug": "destination-city",
      "code": "class Solution:\n    def destCity(self, paths: List[List[str]]) -\u003e str:\n        paths_from, paths_to = set(), set()\n        for path_from, path_to in paths:\n            paths_from.add(path_from)\n            paths_to.add(path_to)\n        \n        return (paths_to - paths_from).pop()",
      "title": "Destination City",
      "url": "/submissions/detail/1120176429/",
      "lang_name": "Python3",
      "time": "1 month, 3 weeks",
      "timestamp": 1702626891,
      "status": 10,
      "runtime": "67 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1119489878,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2606,
      "title_slug": "difference-between-ones-and-zeros-in-row-and-column",
      "code": "class Solution:\n    def onesMinusZeros(self, grid: List[List[int]]) -\u003e List[List[int]]:\n        m = len(grid)\n        n = len(grid[0])\n\n        rows = {}\n        for r in range(m):        \n            row_sum = 0\n            for c in range(n):\n                row_sum += grid[r][c]\n            \n            rows[r] = row_sum\n\n        cols = {}\n        for c in range(n):\n            col_sum = 0\n            for r in range(m):\n                col_sum += grid[r][c]\n            \n            cols[c] = col_sum\n\n        res = [[0] * n for _ in range(m)]\n\n        for r in range(m):\n            for c in range(n):\n                res[r][c] = rows[r] + cols[c] - (m - rows[r]) - (n - cols[c])\n        \n        return res",
      "title": "Difference Between Ones and Zeros in Row and Column",
      "url": "/submissions/detail/1119489878/",
      "lang_name": "Python3",
      "time": "1 month, 3 weeks",
      "timestamp": 1702546254,
      "status": 10,
      "runtime": "1407 ms",
      "is_pending": "Not Pending",
      "memory": "57.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1118673519,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1704,
      "title_slug": "special-positions-in-a-binary-matrix",
      "code": "class Solution:\n    def numSpecial(self, mat: List[List[int]]) -\u003e int:\n        def get_column_sum(col_idx):\n            return sum(row[col_idx] for row in mat)\n\n        special = 0\n        for row in mat:\n            if sum(row) == 1:\n                col_idx = row.index(1)\n                special += get_column_sum(col_idx) == 1\n\n        return special",
      "title": "Special Positions in a Binary Matrix",
      "url": "/submissions/detail/1118673519/",
      "lang_name": "Python3",
      "time": "1 month, 3 weeks",
      "timestamp": 1702455059,
      "status": 10,
      "runtime": "137 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1117865730,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1574,
      "title_slug": "maximum-product-of-two-elements-in-an-array",
      "code": "class Solution:\n    def maxProduct(self, nums: List[int]) -\u003e int:\n        biggest = 0\n        second_biggest = 0\n        for num in nums:\n            if num \u003e biggest:\n                second_biggest = biggest\n                biggest = num\n            else:\n                second_biggest = max(second_biggest, num)\n        \n        return (biggest - 1) * (second_biggest - 1)",
      "title": "Maximum Product of Two Elements in an Array",
      "url": "/submissions/detail/1117865730/",
      "lang_name": "Python3",
      "time": "1 month, 3 weeks",
      "timestamp": 1702366785,
      "status": 10,
      "runtime": "59 ms",
      "is_pending": "Not Pending",
      "memory": "16.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1117200785,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 500,
      "title_slug": "keyboard-row",
      "code": "class Solution:\n    def findWords(self, words: List[str]) -\u003e List[str]:\n        ans = []\n        rows = [\n            set(\"qwertyuiop\"),\n            set(\"asdfghjkl\"), \n            set(\"zxcvbnm\")\n        ]\n        for word in words:\n            for row in rows:\n                if len(row.union(word.lower())) == len(row):\n                    ans.append(word)\n                    break\n        return ans\n",
      "title": "Keyboard Row",
      "url": "/submissions/detail/1117200785/",
      "lang_name": "Python3",
      "time": "1 month, 3 weeks",
      "timestamp": 1702297835,
      "status": 10,
      "runtime": "39 ms",
      "is_pending": "Not Pending",
      "memory": "16.3 MB",
      "compare_result": "11111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1117030857,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1221,
      "title_slug": "element-appearing-more-than-25-in-sorted-array",
      "code": "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -\u003e int:\n        prev, count = arr[0], 1\n        quarter = len(arr) / 4\n        for num in arr[1:]:\n            if num == prev:\n                count += 1\n            else:\n                prev = num\n                count = 1\n            if count \u003e quarter:\n                break\n        return prev",
      "title": "Element Appearing More Than 25% In Sorted Array",
      "url": "/submissions/detail/1117030857/",
      "lang_name": "Python3",
      "time": "1 month, 3 weeks",
      "timestamp": 1702279615,
      "status": 10,
      "runtime": "87 ms",
      "is_pending": "Not Pending",
      "memory": "17.6 MB",
      "compare_result": "1111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1116406973,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 94,
      "title_slug": "binary-tree-inorder-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector\u003cint\u003e inorderTraversal(TreeNode* root) {\n        vector\u003cint\u003e result;\n        helper(root, result);\n        return result;\n    }\n\n    void helper(TreeNode* root, vector\u003cint\u003e\u0026 result) {\n        if (root != nullptr) {\n            helper(root-\u003eleft, result);\n            result.push_back(root-\u003eval);\n            helper(root-\u003eright, result);\n        }\n    }\n};",
      "title": "Binary Tree Inorder Traversal",
      "url": "/submissions/detail/1116406973/",
      "lang_name": "C++",
      "time": "1 month, 3 weeks",
      "timestamp": 1702205214,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "8.6 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1116406709,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 94,
      "title_slug": "binary-tree-inorder-traversal",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector\u003cint\u003e inorderTraversal(TreeNode* root) {\n        vector\u003cint\u003e result;\n        helper(root, result);\n        return result;\n    }\n\n    void helper(TreeNode* root, vector\u003cint\u003e\u0026 result) {\n        if (root != nullptr) {\n            helper(root-\u003eleft, result);\n            result.push_back(root-\u003eval);\n            helper(root-\u003eright, result);\n        }\n    }\n};",
      "title": "Binary Tree Inorder Traversal",
      "url": "/submissions/detail/1116406709/",
      "lang_name": "C++",
      "time": "1 month, 3 weeks",
      "timestamp": 1702205182,
      "status": 10,
      "runtime": "4 ms",
      "is_pending": "Not Pending",
      "memory": "8.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1116406430,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 898,
      "title_slug": "transpose-matrix",
      "code": "class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e transpose(vector\u003cvector\u003cint\u003e\u003e\u0026 matrix) {\n        int row = matrix.size();\n        int col = matrix[0].size();\n        vector\u003cvector\u003cint\u003e\u003e result(col, vector\u003cint\u003e(row, 0));\n        \n        for (int i = 0; i \u003c col; ++i) {\n            for (int j = 0; j \u003c row; ++j) {\n                result[i][j] = matrix[j][i];\n            }\n        }\n        \n        return result;\n    }\n};",
      "title": "Transpose Matrix",
      "url": "/submissions/detail/1116406430/",
      "lang_name": "C++",
      "time": "1 month, 3 weeks",
      "timestamp": 1702205145,
      "status": 10,
      "runtime": "7 ms",
      "is_pending": "Not Pending",
      "memory": "10.9 MB",
      "compare_result": "111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1116406244,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 898,
      "title_slug": "transpose-matrix",
      "code": "class Solution {\n    public int[][] transpose(int[][] A) {\n        int R = A.length, C = A[0].length;\n        int[][] ans = new int[C][R];\n        for (int r = 0; r \u003c R; ++r)\n            for (int c = 0; c \u003c C; ++c) {\n                ans[c][r] = A[r][c];\n            }\n        return ans;\n    }\n}",
      "title": "Transpose Matrix",
      "url": "/submissions/detail/1116406244/",
      "lang_name": "C++",
      "time": "1 month, 3 weeks",
      "timestamp": 1702205123,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1115239284,
      "status_display": "Accepted",
      "lang": "cpp",
      "question_id": 606,
      "title_slug": "construct-string-from-binary-tree",
      "code": "class Solution {\npublic:\n    string tree2str(TreeNode* root) {\n        string str = \"\";\n         check(root, str);\n         return str;\n    }\n    void check(TreeNode* root, string \u0026str) {\n        if (root == NULL) {\n            return;\n        }\n        str += to_string(root-\u003eval);\n        if (root-\u003eleft || root-\u003eright) {\n            str += '(';\n            check(root-\u003eleft, str);\n            str += ')';\n        }\n        if (root-\u003eright) {\n            str += '(';\n            check(root-\u003eright, str);\n            str += ')';\n        }\n        \n    }\n    \n};",
      "title": "Construct String from Binary Tree",
      "url": "/submissions/detail/1115239284/",
      "lang_name": "C++",
      "time": "1 month, 3 weeks",
      "timestamp": 1702058637,
      "status": 10,
      "runtime": "7 ms",
      "is_pending": "Not Pending",
      "memory": "23.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1135579756,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2244,
      "title_slug": "number-of-laser-beams-in-a-bank",
      "code": "class Solution:\n    def numberOfBeams(self, bank):\n        ans, temp = 0, 0\n        for s in bank:\n            n = s.count('1')\n            if n == 0:\n                continue\n            ans += temp * n\n            temp = n\n        return ans\n\n\n",
      "title": "Number of Laser Beams in a Bank",
      "url": "/submissions/detail/1135579756/",
      "lang_name": "Python3",
      "time": "1 month",
      "timestamp": 1704282409,
      "status": 10,
      "runtime": "91 ms",
      "is_pending": "Not Pending",
      "memory": "19.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1134598784,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2724,
      "title_slug": "convert-an-array-into-a-2d-array-with-conditions",
      "code": "class Solution:\n    def findMatrix(self, v: List[int]) -\u003e List[List[int]]:\n        um = {}\n        for i in v:\n            um[i] = um.get(i, 0) + 1\n        \n        ans = []\n        while um:\n            temp = []\n            to_erase = []\n            for f, s in um.items():\n                temp.append(f)\n                s -= 1\n                if s == 0:\n                    to_erase.append(f)\n                um[f] = s\n            ans.append(temp)\n            for i in to_erase:\n                del um[i]\n        return ans\n",
      "title": "Convert an Array Into a 2D Array With Conditions",
      "url": "/submissions/detail/1134598784/",
      "lang_name": "Python3",
      "time": "1 month",
      "timestamp": 1704198018,
      "status": 10,
      "runtime": "66 ms",
      "is_pending": "Not Pending",
      "memory": "17.4 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1133719850,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 455,
      "title_slug": "assign-cookies",
      "code": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -\u003e int:\n        g.sort()\n        s.sort()\n        content_children = 0\n        cookie_index = 0\n        while cookie_index \u003c len(s) and content_children \u003c len(g):\n            if s[cookie_index] \u003e= g[content_children]:\n                content_children += 1\n            cookie_index += 1\n        return content_children",
      "title": "Assign Cookies",
      "url": "/submissions/detail/1133719850/",
      "lang_name": "Python3",
      "time": "1 month",
      "timestamp": 1704114642,
      "status": 10,
      "runtime": "137 ms",
      "is_pending": "Not Pending",
      "memory": "19.2 MB",
      "compare_result": "111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1132948021,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1746,
      "title_slug": "largest-substring-between-two-equal-characters",
      "code": "class Solution:\n    def maxLengthBetweenEqualCharacters(self, s: str) -\u003e int:\n        ans = -1\n        \n        for left in range(len(s)):\n            for right in range(left + 1, len(s)):\n                if s[left] == s[right]:\n                    ans = max(ans, right - left - 1)\n        \n        return ans",
      "title": "Largest Substring Between Two Equal Characters",
      "url": "/submissions/detail/1132948021/",
      "lang_name": "Python3",
      "time": "1 month",
      "timestamp": 1704017974,
      "status": 10,
      "runtime": "67 ms",
      "is_pending": "Not Pending",
      "memory": "17.2 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1132146164,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2025,
      "title_slug": "redistribute-characters-to-make-all-strings-equal",
      "code": "class Solution:\n    def makeEqual(self, words: List[str]) -\u003e bool:\n        counts = defaultdict(int)\n        for word in words:\n            for c in word:\n                counts[c] += 1\n        \n        n = len(words)\n        for val in counts.values():\n            if val % n != 0:\n                return False\n        \n        return True",
      "title": "Redistribute Characters to Make All Strings Equal",
      "url": "/submissions/detail/1132146164/",
      "lang_name": "Python3",
      "time": "1 month",
      "timestamp": 1703935357,
      "status": 10,
      "runtime": "57 ms",
      "is_pending": "Not Pending",
      "memory": "17.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1132146076,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 2025,
      "title_slug": "redistribute-characters-to-make-all-strings-equal",
      "code": "class Solution:\n    def makeEqual(self, words: List[str]) -\u003e bool:\n        counts = defaultdict(int)\n        for word in words:\n            for c in word:\n                counts[c] += 1\n        \n        n = len(words)\n        for val in counts.values():\n            if val % n != 0:\n                return False\n        \n        return True",
      "title": "Redistribute Characters to Make All Strings Equal",
      "url": "/submissions/detail/1132146076/",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1703935346,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1131184930,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1457,
      "title_slug": "minimum-difficulty-of-a-job-schedule",
      "code": "class Solution:\n    def minDifficulty(self, jobDifficulty, days):\n        length = len(jobDifficulty)\n        if days \u003e length:\n            return -1\n\n        min_difficulties = [[float('inf')] * length for _ in range(days)]\n\n        max_diff = 0\n        i = 0\n        while i \u003c= length - days:\n            max_diff = max(max_diff, jobDifficulty[i])\n            min_difficulties[0][i] = max_diff\n            i += 1\n\n        current_day = 1\n        while current_day \u003c days:\n            to = current_day\n            while to \u003c= length - days + current_day:\n                current_job_difficulty = jobDifficulty[to]\n                result = float('inf')\n                j = to - 1\n                while j \u003e= current_day - 1:\n                    result = min(result, min_difficulties[current_day - 1][j] + current_job_difficulty)\n                    current_job_difficulty = max(current_job_difficulty, jobDifficulty[j])\n                    j -= 1\n                min_difficulties[current_day][to] = result\n                to += 1\n            current_day += 1\n\n        return min_difficulties[days - 1][length - 1]\n\n\n",
      "title": "Minimum Difficulty of a Job Schedule",
      "url": "/submissions/detail/1131184930/",
      "lang_name": "Python3",
      "time": "1 month, 1 week",
      "timestamp": 1703833766,
      "status": 10,
      "runtime": "805 ms",
      "is_pending": "Not Pending",
      "memory": "17.5 MB",
      "compare_result": "1111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1130330804,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1637,
      "title_slug": "string-compression-ii",
      "code": "class Solution:\n    def getLengthOfOptimalCompression(self, s: str, k: int) -\u003e int:\n        n = len(s)\n        dp = [[9999] * 110 for _ in range(110)]\n        dp[0][0] = 0\n\n        for i in range(1, n + 1):\n            for j in range(0, k + 1):\n                cnt, del_ = 0, 0\n                for l in range(i, 0, -1):\n                    if s[l - 1] == s[i - 1]:\n                        cnt += 1\n                    else:\n                        del_ += 1\n\n                    if j - del_ \u003e= 0:\n                        dp[i][j] = min(dp[i][j], dp[l - 1][j - del_] + 1 + (3 if cnt \u003e= 100 else 2 if cnt \u003e= 10 else 1 if cnt \u003e= 2 else 0))\n\n                if j \u003e 0:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])\n\n        return dp[n][k]\n\n\n",
      "title": "String Compression II",
      "url": "/submissions/detail/1130330804/",
      "lang_name": "Python3",
      "time": "1 month, 1 week",
      "timestamp": 1703747555,
      "status": 10,
      "runtime": "1916 ms",
      "is_pending": "Not Pending",
      "memory": "17.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1129545299,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1700,
      "title_slug": "minimum-time-to-make-rope-colorful",
      "code": "class Solution:\n    def minCost(self, colors: str, neededTime: List[int]) -\u003e int:\n        totalTime = 0\n        i = 0\n        j = 0\n\n        while i \u003c len(neededTime) and j \u003c len(neededTime):\n            currTotal = 0\n            currMax = 0\n\n            while j \u003c len(neededTime) and colors[i] == colors[j]:\n                currTotal += neededTime[j]\n                currMax = max(currMax, neededTime[j])\n                j += 1\n\n            totalTime += currTotal - currMax\n            i = j\n\n        return totalTime\n\n\n",
      "title": "Minimum Time to Make Rope Colorful",
      "url": "/submissions/detail/1129545299/",
      "lang_name": "Python3",
      "time": "1 month, 1 week",
      "timestamp": 1703667076,
      "status": 10,
      "runtime": "869 ms",
      "is_pending": "Not Pending",
      "memory": "28.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1129544902,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1700,
      "title_slug": "minimum-time-to-make-rope-colorful",
      "code": "class Solution:\n    def minCost(colorSequence, neededTime):\n        n = len(colorSequence)\n        memo = [-1] * n\n        return calculateMinCost(n - 1, colorSequence, neededTime, memo, 'A', neededTime[n - 1])\n\n    def calculateMinCost(i, colorSequence, timeRequired, memo, previousColor, previousTime):\n        if i \u003c 0:\n            return 0\n\n        if memo[i] != -1:\n            return memo[i]\n\n        if colorSequence[i] == previousColor:\n            return memo[i] = calculateMinCost(i - 1, colorSequence, timeRequired, memo, colorSequence[i], max(timeRequired[i], previousTime)) + min(timeRequired[i], previousTime)\n        else:\n            return memo[i] = calculateMinCost(i - 1, colorSequence, timeRequired, memo, colorSequence[i], timeRequired[i])\n\n        ",
      "title": "Minimum Time to Make Rope Colorful",
      "url": "/submissions/detail/1129544902/",
      "lang_name": "Python3",
      "time": "1 month, 1 week",
      "timestamp": 1703667040,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1128708587,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1263,
      "title_slug": "number-of-dice-rolls-with-target-sum",
      "code": "class Solution:\n    mod = 10 ** 9 + 7\n\n    def numRollsToTarget(self, n: int, k: int, target: int) -\u003e int:\n        dp = [[-1] * (target + 1) for _ in range(n + 1)]\n        return self.recursion(dp, n, k, target)\n\n    def recursion(self, dp: list, n: int, k: int, target: int) -\u003e int:\n        if target == 0 and n == 0:\n            return 1\n        if n == 0 or target \u003c= 0:\n            return 0\n\n        if dp[n][target] != -1:\n            return dp[n][target] % self.mod\n\n        ways = 0\n        for i in range(1, k + 1):\n            ways = (ways + self.recursion(dp, n - 1, k, target - i)) % self.mod\n\n        dp[n][target] = ways % self.mod\n        return dp[n][target]\n\n\n",
      "title": "Number of Dice Rolls With Target Sum",
      "url": "/submissions/detail/1128708587/",
      "lang_name": "Python3",
      "time": "1 month, 1 week",
      "timestamp": 1703578104,
      "status": 10,
      "runtime": "282 ms",
      "is_pending": "Not Pending",
      "memory": "17.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1127964808,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 91,
      "title_slug": "decode-ways",
      "code": "class Solution:\n    def numDecodings(self, s):\n        if s == \"0\":\n            return 0\n        \n        # dp_0 = dp[i]\n        # dp_1 = dp[i + 1]\n        # dp_2 = dp[i + 2]\n        dp_2 = 1\n        dp_1 = int(s[-1] != \"0\")\n\n        i = len(s) - 2\n        while i \u003e= 0:\n            if s[i] == \"0\":\n                dp_0 = 0\n            else:\n                dp_0 = dp_1\n                if (s[i] == \"1\") or (s[i] == \"2\" and eval(s[i + 1]) \u003c 7):\n                    dp_0 += dp_2\n            i -= 1\n            dp_0, dp_1, dp_2 = 0, dp_0, dp_1\n        \n        return dp_1",
      "title": "Decode Ways",
      "url": "/submissions/detail/1127964808/",
      "lang_name": "Python3",
      "time": "1 month, 1 week",
      "timestamp": 1703490835,
      "status": 10,
      "runtime": "32 ms",
      "is_pending": "Not Pending",
      "memory": "17.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1127327445,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1884,
      "title_slug": "minimum-changes-to-make-alternating-binary-string",
      "code": "class Solution:\n    def minOperations(self, s: str) -\u003e int:\n        start0 = 0\n        start1 = 0\n        \n        for i in range(len(s)):\n            if i % 2 == 0:\n                if s[i] == \"0\":\n                    start1 += 1\n                else:\n                    start0 += 1\n            else:\n                if s[i] == \"1\":\n                    start1 += 1\n                else:\n                    start0 += 1\n        \n        return min(start0, start1)",
      "title": "Minimum Changes To Make Alternating Binary String",
      "url": "/submissions/detail/1127327445/",
      "lang_name": "Python3",
      "time": "1 month, 1 week",
      "timestamp": 1703411654,
      "status": 10,
      "runtime": "42 ms",
      "is_pending": "Not Pending",
      "memory": "17.5 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1126931784,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1619,
      "title_slug": "path-crossing",
      "code": "class Solution:\n    def isPathCrossing(self, path: str) -\u003e bool:\n        moves = {\n            \"N\": (0, 1),\n            \"S\": (0, -1),\n            \"W\": (-1, 0),\n            \"E\": (1, 0)\n        }\n        \n        visited = {(0, 0)}\n        x = 0\n        y = 0\n\n        for c in path:\n            dx, dy = moves[c]\n            x += dx\n            y += dy\n            \n            if (x, y) in visited:\n                return True\n\n            visited.add((x, y))\n        \n        return False",
      "title": "Path Crossing",
      "url": "/submissions/detail/1126931784/",
      "lang_name": "Python3",
      "time": "1 month, 1 week",
      "timestamp": 1703367696,
      "status": 10,
      "runtime": "31 ms",
      "is_pending": "Not Pending",
      "memory": "17.3 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1126931720,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 1619,
      "title_slug": "path-crossing",
      "code": "class Solution:\n    def isPathCrossing(self, path: str) -\u003e bool:\n        moves = {\n            \"N\": (0, 1),\n            \"S\": (0, -1),\n            \"W\": (-1, 0),\n            \"E\": (1, 0)\n        }\n        \n        visited = {(0, 0)}\n        x = 0\n        y = 0\n\n        for c in path:\n            dx, dy = moves[c]\n            x += dx\n            y += dy\n            \n            if (x, y) in visited:\n                return True\n\n            visited.add((x, y))\n        \n        return False",
      "title": "Path Crossing",
      "url": "/submissions/detail/1126931720/",
      "lang_name": "C++",
      "time": "1 month, 1 week",
      "timestamp": 1703367684,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1125735771,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1537,
      "title_slug": "maximum-score-after-splitting-a-string",
      "code": "class Solution:\n    def maxScore(self, s: str) -\u003e int:\n        ones = s.count(\"1\")\n        zeros = 0\n        ans = 0 \n\n        for i in range(len(s) - 1):\n            if s[i] == \"1\":\n                ones -= 1\n            else:\n                zeros += 1\n        \n            ans = max(ans, zeros + ones)\n        \n        return ans",
      "title": "Maximum Score After Splitting a String",
      "url": "/submissions/detail/1125735771/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1703235133,
      "status": 10,
      "runtime": "37 ms",
      "is_pending": "Not Pending",
      "memory": "17.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1125713870,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1537,
      "title_slug": "maximum-score-after-splitting-a-string",
      "code": "class Solution:\n    def maxScore(self, s: str) -\u003e int:\n        score = 0 if s[0] == \"1\" else 1\n        for char in s[1:]:\n            if char == \"1\":\n                score += 1\n        max_score = score\n        for char in s[1:]:\n            if char == \"0\":\n                score += 1\n            else:\n                score -= 1\n            max_score = max(max_score, score)\n        return max_score",
      "title": "Maximum Score After Splitting a String",
      "url": "/submissions/detail/1125713870/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1703232745,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111110110111111111001111101111111111111111111111011111111111111111110111111111111111111111111111110111",
      "flag_type": 1
    },
    {
      "id": 1125713675,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1537,
      "title_slug": "maximum-score-after-splitting-a-string",
      "code": "class Solution:\n    def maxScore(self, s: str) -\u003e int:\n        score = 0 if s[0] == \"1\" else 1\n        for char in s[1:]:\n            if char == \"1\":\n                score += 1\n        max_score = score\n        for char in s:\n            if char == \"0\":\n                score += 1\n            else:\n                score -= 1\n            max_score = max(max_score, score)\n        return max_score",
      "title": "Maximum Score After Splitting a String",
      "url": "/submissions/detail/1125713675/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1703232725,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00101000000010010101110000010000000000000000000010000001000000000000011000000000000000000000000000001000",
      "flag_type": 1
    },
    {
      "id": 1125713270,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1537,
      "title_slug": "maximum-score-after-splitting-a-string",
      "code": "class Solution:\n    def maxScore(self, s: str) -\u003e int:\n        score = 0\n        for char in s:\n            if char == \"1\":\n                score += 1\n        max_score = score\n        for char in s:\n            if char == \"0\":\n                score += 1\n            else:\n                score -= 1\n            max_score = max(max_score, score)\n        return max_score",
      "title": "Maximum Score After Splitting a String",
      "url": "/submissions/detail/1125713270/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1703232683,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11010110110101101010001111101111111111111111111101011110111111111111100111111111111111111111111111110111",
      "flag_type": 1
    },
    {
      "id": 1125712789,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1537,
      "title_slug": "maximum-score-after-splitting-a-string",
      "code": "class Solution:\n    def maxScore(self, s: str) -\u003e int:\n        score = max(s)\n        max_score = score\n        for char in s:\n            if char == \"0\":\n                score += 1\n            else:\n                score -= 1\n            max_score = max(max_score, score)\n        return max_score",
      "title": "Maximum Score After Splitting a String",
      "url": "/submissions/detail/1125712789/",
      "lang_name": "Python3",
      "time": "1 month, 2 weeks",
      "timestamp": 1703232632,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1147633281,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 380,
      "title_slug": "insert-delete-getrandom-o1",
      "code": "import random\n\nclass RandomizedSet:\n\n    def __init__(self):\n        self._nums_map = {}\n        self._nums = []\n        \n\n    def insert(self, val: int) -\u003e bool:\n        if val in self._nums_map:\n            return False\n        self._nums_map[val] = len(self._nums)\n        self._nums.append(val)\n        return True\n\n    def remove(self, val: int) -\u003e bool:\n        if val not in self._nums_map:\n            return False\n        last = self._nums.pop()\n        idx = self._nums_map.pop(val)\n        self._nums_map[last] = idx\n        self._nums[idx] = last\n        return True\n        \n    def getRandom(self) -\u003e int:\n        return random.choice(self._nums) \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()",
      "title": "Insert Delete GetRandom O(1)",
      "url": "/submissions/detail/1147633281/",
      "lang_name": "Python3",
      "time": "2 weeks, 5 days",
      "timestamp": 1705392120,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1147631735,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 380,
      "title_slug": "insert-delete-getrandom-o1",
      "code": "import random\n\nclass RandomizedSet:\n\n    def __init__(self):\n        self._nums_map = {}\n        self._nums = []\n        \n\n    def insert(self, val: int) -\u003e bool:\n        if val in self._nums_map:\n            return False\n        self._nums_map[val] = len(self._nums)\n        self._nums.append(val)\n        return True\n\n    def remove(self, val: int) -\u003e bool:\n        if val not in self._nums_map:\n            return False\n        idx = self._nums_map[val]\n        last_val = self._nums[-1]\n        self._nums_map.pop(val)\n        self._nums[idx] = last_val\n        self._nums.pop()\n        return True\n        \n    def getRandom(self) -\u003e int:\n        return random.choice(self._nums) \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()",
      "title": "Insert Delete GetRandom O(1)",
      "url": "/submissions/detail/1147631735/",
      "lang_name": "Python3",
      "time": "2 weeks, 5 days",
      "timestamp": 1705391971,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110111111110000000",
      "flag_type": 1
    },
    {
      "id": 1147630768,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 380,
      "title_slug": "insert-delete-getrandom-o1",
      "code": "import random\n\nclass RandomizedSet:\n\n    def __init__(self):\n        self._nums_map = {}\n        self._nums = []\n        \n\n    def insert(self, val: int) -\u003e bool:\n        if val in self._nums_map:\n            return False\n        self._nums_map[val] = len(self._nums)\n        self._nums.append(val)\n        return True\n\n    def remove(self, val: int) -\u003e bool:\n        if val not in self._nums_map:\n            return False\n        idx, last_val = self._nums_map.pop(val), self._nums.pop()\n        self._nums[idx] = last_val\n        return True\n        \n    def getRandom(self) -\u003e int:\n        return random.choice(self._nums) \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()",
      "title": "Insert Delete GetRandom O(1)",
      "url": "/submissions/detail/1147630768/",
      "lang_name": "Python3",
      "time": "2 weeks, 5 days",
      "timestamp": 1705391877,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1147629452,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 380,
      "title_slug": "insert-delete-getrandom-o1",
      "code": "import random\n\nclass RandomizedSet:\n\n    def __init__(self):\n        self._nums_map = {}\n        self._nums = []\n        \n\n    def insert(self, val: int) -\u003e bool:\n        if val in self._nums_map:\n            return False\n        self._nums_map[val] = len(self._nums)\n        self._nums.append(val)\n        return True\n\n    def remove(self, val: int) -\u003e bool:\n        if val not in self._nums_map:\n            return False\n        self._nums[self._nums_map.pop(val)] = self._nums.pop()\n        return True\n        \n    def getRandom(self) -\u003e int:\n        return random.choice(self._nums) \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()",
      "title": "Insert Delete GetRandom O(1)",
      "url": "/submissions/detail/1147629452/",
      "lang_name": "Python3",
      "time": "2 weeks, 5 days",
      "timestamp": 1705391754,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1147628905,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 380,
      "title_slug": "insert-delete-getrandom-o1",
      "code": "import random\n\nclass RandomizedSet:\n\n    def __init__(self):\n        self._nums_map = {}\n        self._nums = []\n        \n\n    def insert(self, val: int) -\u003e bool:\n        if val in self._nums_map:\n            return False\n        self._nums_map[val] = len(self._nums)\n        self._nums.append(val)\n        return True\n\n    def remove(self, val: int) -\u003e bool:\n        if val not in self._nums_map:\n            return False\n        idx = self._nums_map[val]\n        self._nums_map.pop(val)\n        self._nums[idx] = self._nums[-1]\n        self._nums.pop()\n        return True\n        \n    def getRandom(self) -\u003e int:\n        return random.choice(self._nums) \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()",
      "title": "Insert Delete GetRandom O(1)",
      "url": "/submissions/detail/1147628905/",
      "lang_name": "Python3",
      "time": "2 weeks, 5 days",
      "timestamp": 1705391699,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110111111110000000",
      "flag_type": 1
    },
    {
      "id": 1147628147,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 380,
      "title_slug": "insert-delete-getrandom-o1",
      "code": "import random\n\nclass RandomizedSet:\n\n    def __init__(self):\n        self._nums_map = {}\n        self._nums = []\n        \n\n    def insert(self, val: int) -\u003e bool:\n        if val in self._nums_map:\n            return False\n        self._nums_map[val] = len(self._nums)\n        self._nums.append(val)\n        return True\n\n    def remove(self, val: int) -\u003e bool:\n        if val not in self._nums_map:\n            return False\n        idx = self._nums_map[val]\n        self._nums_map.pop(val)\n        self._nums[idx] = self._nums[-1]\n        self._nums.pop()\n        return True\n        \n    def getRandom(self) -\u003e int:\n        return random.choice(self._nums) \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()",
      "title": "Insert Delete GetRandom O(1)",
      "url": "/submissions/detail/1147628147/",
      "lang_name": "Python3",
      "time": "2 weeks, 5 days",
      "timestamp": 1705391631,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1110111111110000000",
      "flag_type": 1
    },
    {
      "id": 1146709676,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1354,
      "title_slug": "find-players-with-zero-or-one-losses",
      "code": "class Solution:\n    def findWinners(self, matches):\n        losses = [0] * 100001\n\n        for winner, loser in matches:\n            if losses[winner] == 0:\n                losses[winner] = -1\n\n            if losses[loser] == -1:\n                losses[loser] = 1\n            else:\n                losses[loser] += 1\n\n        zero_loss = [i for i in range(1, 100001) if losses[i] == -1]\n        one_loss = [i for i in range(1, 100001) if losses[i] == 1]\n\n        return [zero_loss, one_loss]",
      "title": "Find Players With Zero or One Losses",
      "url": "/submissions/detail/1146709676/",
      "lang_name": "Python3",
      "time": "2 weeks, 6 days",
      "timestamp": 1705308312,
      "status": 10,
      "runtime": "1779 ms",
      "is_pending": "Not Pending",
      "memory": "73.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1146049646,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1777,
      "title_slug": "determine-if-two-strings-are-close",
      "code": "\nclass Solution:\n    def closeStrings(self, word1: str, word2: str) -\u003e bool:\n        freq1 = [0] * 26\n        freq2 = [0] * 26\n\n        for ch in word1:\n            freq1[ord(ch) - ord('a')] += 1\n\n        for ch in word2:\n            freq2[ord(ch) - ord('a')] += 1\n\n        for i in range(26):\n            if (freq1[i] == 0 and freq2[i] != 0) or (freq1[i] != 0 and freq2[i] == 0):\n                return False\n\n        freq1.sort()\n        freq2.sort()\n\n        for i in range(26):\n            if freq1[i] != freq2[i]:\n                return False\n\n        return True\n\n",
      "title": "Determine if Two Strings Are Close",
      "url": "/submissions/detail/1146049646/",
      "lang_name": "Python3",
      "time": "3 weeks",
      "timestamp": 1705242448,
      "status": 10,
      "runtime": "202 ms",
      "is_pending": "Not Pending",
      "memory": "18.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1145100663,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1469,
      "title_slug": "minimum-number-of-steps-to-make-two-strings-anagram",
      "code": "class Solution:\n    def minSteps(self, s: str, t: str) -\u003e int:\n        count_s = [0] * 26\n        count_t = [0] * 26\n\n        for char in s:\n            count_s[ord(char) - ord('a')] += 1\n\n        for char in t:\n            count_t[ord(char) - ord('a')] += 1\n\n        steps = 0\n        for i in range(26):\n            steps += abs(count_s[i] - count_t[i])\n\n        return steps // 2",
      "title": "Minimum Number of Steps to Make Two Strings Anagram",
      "url": "/submissions/detail/1145100663/",
      "lang_name": "Python3",
      "time": "3 weeks, 1 day",
      "timestamp": 1705156428,
      "status": 10,
      "runtime": "149 ms",
      "is_pending": "Not Pending",
      "memory": "17.8 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1144544966,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1823,
      "title_slug": "determine-if-string-halves-are-alike",
      "code": "class Solution:\n    def halvesAreAlike(self, s: str) -\u003e bool:\n        def count_vowels(string):\n            vowels = set('aeiouAEIOU')\n            return sum(1 for char in string if char in vowels)\n\n        length = len(s)\n        mid_point = length // 2\n\n        first_half = s[:mid_point]\n        second_half = s[mid_point:]\n\n        return count_vowels(first_half) == count_vowels(second_half)",
      "title": "Determine if String Halves Are Alike",
      "url": "/submissions/detail/1144544966/",
      "lang_name": "Python3",
      "time": "3 weeks, 1 day",
      "timestamp": 1705092940,
      "status": 10,
      "runtime": "30 ms",
      "is_pending": "Not Pending",
      "memory": "17.2 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1143178340,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1092,
      "title_slug": "maximum-difference-between-node-and-ancestor",
      "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxAncestorDiff(self, root):\n        if not root:\n            return 0\n        self.diff = 0\n        self.helper(root, root.val, root.val)\n        return self.diff\n    \n    def helper(self, root, min_val, max_val):\n        if not root:\n            return\n        self.diff = max(self.diff, max(abs(min_val - root.val), abs(max_val - root.val)))\n        min_val = min(min_val, root.val)\n        max_val = max(max_val, root.val)\n        self.helper(root.left, min_val, max_val)\n        self.helper(root.right, min_val, max_val)\n        ",
      "title": "Maximum Difference Between Node and Ancestor",
      "url": "/submissions/detail/1143178340/",
      "lang_name": "Python3",
      "time": "3 weeks, 3 days",
      "timestamp": 1704964551,
      "status": 10,
      "runtime": "43 ms",
      "is_pending": "Not Pending",
      "memory": "19 MB",
      "compare_result": "1111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1142229574,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2461,
      "title_slug": "amount-of-time-for-binary-tree-to-be-infected",
      "code": "class Solution:\n    def amountOfTime(self, root: Optional[TreeNode], start: int) -\u003e int:\n        def dfs(node):\n            if node is None:\n                return\n            if node.left:\n                graph[node.val].append(node.left.val)\n                graph[node.left.val].append(node.val)\n            if node.right:\n                graph[node.val].append(node.right.val)\n                graph[node.right.val].append(node.val)\n            dfs(node.left)\n            dfs(node.right)\n\n        graph = defaultdict(list)\n        dfs(root)\n        visited = set()\n        queue = deque([start])\n        time = -1\n        while queue:\n            time += 1\n            for _ in range(len(queue)):\n                current_node = queue.popleft()\n                visited.add(current_node)\n                for neighbor in graph[current_node]:\n                    if neighbor not in visited:\n                        queue.append(neighbor)\n        return time",
      "title": "Amount of Time for Binary Tree to Be Infected",
      "url": "/submissions/detail/1142229574/",
      "lang_name": "Python3",
      "time": "3 weeks, 4 days",
      "timestamp": 1704875666,
      "status": 10,
      "runtime": "414 ms",
      "is_pending": "Not Pending",
      "memory": "63.1 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1141624613,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 904,
      "title_slug": "leaf-similar-trees",
      "code": "class Solution:\n    def leafSimilar(self, root1, root2):\n        def dfs(node):\n            if node:\n                if not node.left and not node.right:\n                    yield node.val\n                yield from dfs(node.left)\n                yield from dfs(node.right)\n\n        return list(dfs(root1)) == list(dfs(root2))",
      "title": "Leaf-Similar Trees",
      "url": "/submissions/detail/1141624613/",
      "lang_name": "Python3",
      "time": "3 weeks, 4 days",
      "timestamp": 1704818740,
      "status": 10,
      "runtime": "35 ms",
      "is_pending": "Not Pending",
      "memory": "17.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1140526976,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 975,
      "title_slug": "range-sum-of-bst",
      "code": "class Solution:\n    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -\u003e int:\n        def dfs(node):\n            if not node:\n                return 0\n            \n            current_val = 0\n            if low \u003c= node.val \u003c= high:\n                current_val = node.val\n            \n            left_sum = dfs(node.left)\n            right_sum = dfs(node.right)\n            \n            return current_val + left_sum + right_sum\n        \n        return dfs(root)",
      "title": "Range Sum of BST",
      "url": "/submissions/detail/1140526976/",
      "lang_name": "Python3",
      "time": "3 weeks, 6 days",
      "timestamp": 1704725060,
      "status": 10,
      "runtime": "143 ms",
      "is_pending": "Not Pending",
      "memory": "24.5 MB",
      "compare_result": "11111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1139390559,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1352,
      "title_slug": "maximum-profit-in-job-scheduling",
      "code": "class Solution:\n    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -\u003e int:\n        jobs = sorted(zip(endTime, startTime, profit))\n      \n        number_of_jobs = len(profit)\n      \n        dp = [0] * (number_of_jobs + 1)\n      \n        for i, (current_end_time, current_start_time, current_profit) in enumerate(jobs):\n            index = bisect_right(jobs, current_start_time, hi=i, key=lambda x: x[0])\n            dp[i + 1] = max(dp[i], dp[index] + current_profit)\n      \n        return dp[number_of_jobs]",
      "title": "Maximum Profit in Job Scheduling",
      "url": "/submissions/detail/1139390559/",
      "lang_name": "Python3",
      "time": "4 weeks",
      "timestamp": 1704619569,
      "status": 10,
      "runtime": "603 ms",
      "is_pending": "Not Pending",
      "memory": "29.3 MB",
      "compare_result": "1111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1139388730,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 446,
      "title_slug": "arithmetic-slices-ii-subsequence",
      "code": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -\u003e int:\n        n = len(nums)\n        total_count = 0  \n        dp = [defaultdict(int) for _ in range(n)]\n\n        for i in range(1, n):\n            for j in range(i):\n                diff = nums[i] - nums[j]\n                dp[i][diff] += 1  \n                if diff in dp[j]:\n                    dp[i][diff] += dp[j][diff]\n                    total_count += dp[j][diff]\n\n        return total_count",
      "title": "Arithmetic Slices II - Subsequence",
      "url": "/submissions/detail/1139388730/",
      "lang_name": "Python3",
      "time": "4 weeks",
      "timestamp": 1704619384,
      "status": 10,
      "runtime": "385 ms",
      "is_pending": "Not Pending",
      "memory": "55.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1137494224,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 300,
      "title_slug": "longest-increasing-subsequence",
      "code": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -\u003e int:\n        if not nums:\n            return 0\n\n        n = len(nums)\n        dp = [1] * n\n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] \u003e nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n\n        return max(dp)\n\n",
      "title": "Longest Increasing Subsequence",
      "url": "/submissions/detail/1137494224/",
      "lang_name": "Python3",
      "time": "1 month",
      "timestamp": 1704448848,
      "status": 10,
      "runtime": "1779 ms",
      "is_pending": "Not Pending",
      "memory": "17.8 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1137469126,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 300,
      "title_slug": "longest-increasing-subsequence",
      "code": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n\n        @cache\n        def dp(start: int) -\u003e int:\n            num = nums[start]\n            max_length = 1\n            for i in range(start + 1, length):\n                new_num, sub_length = nums[i], dp(i)\n                if new_num \u003e num:\n                    sub_length += 1\n                max_length = max(max_length, sub_length)\n            return max_length\n        \n        return dp(0)",
      "title": "Longest Increasing Subsequence",
      "url": "/submissions/detail/1137469126/",
      "lang_name": "Python3",
      "time": "1 month",
      "timestamp": 1704446369,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111010010011111010001010000000000000000000001",
      "flag_type": 1
    },
    {
      "id": 1137464883,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 300,
      "title_slug": "longest-increasing-subsequence",
      "code": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n\n        @cache\n        def dp(start: int) -\u003e tuple[int, int]:\n            num = nums[start]\n            max_length = 1\n            for i in range(start + 1, length):\n                new_num, sub_length = dp(i)\n                if new_num \u003e num:\n                    max_length = max(max_length, sub_length + 1)\n                else:\n                    max_length = max(max_length, sub_length)\n            return num, max_length\n        \n        return dp(0)[1]",
      "title": "Longest Increasing Subsequence",
      "url": "/submissions/detail/1137464883/",
      "lang_name": "Python3",
      "time": "1 month",
      "timestamp": 1704445953,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111010010011111010001010000000000000000000001",
      "flag_type": 1
    },
    {
      "id": 1136562033,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 3094,
      "title_slug": "minimum-number-of-operations-to-make-array-empty",
      "code": "class Solution:\n    def minOperations(self, nums: List[int]) -\u003e int:\n        counter = Counter(nums)\n        ans = 0\n        for c in counter.values():\n            if c == 1: \n                return -1\n            ans += ceil(c / 3)\n        return ans",
      "title": "Minimum Number of Operations to Make Array Empty",
      "url": "/submissions/detail/1136562033/",
      "lang_name": "Python3",
      "time": "1 month",
      "timestamp": 1704366709,
      "status": 10,
      "runtime": "516 ms",
      "is_pending": "Not Pending",
      "memory": "32.3 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1154381353,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1360,
      "title_slug": "maximum-length-of-a-concatenated-string-with-unique-characters",
      "code": "class Solution:\n    def maxLength(self, arr: List[str]) -\u003e int:\n        cur = set()\n        length = len(arr)\n        max_length = 0\n\n        def backtrack(start: int) -\u003e None:\n            nonlocal max_length \n            \n            for i in range(start, length):\n                new_subs = arr[i]\n                new = set(new_subs)\n                if len(new_subs) != len(new) or len(cur.intersection(new)) != 0:\n                    continue\n                cur.update(new)\n                backtrack(i + 1)\n                cur.difference_update(new)\n\n            max_length = max(max_length, len(cur))\n\n        backtrack(0)\n\n        return max_length\n",
      "title": "Maximum Length of a Concatenated String with Unique Characters",
      "url": "/submissions/detail/1154381353/",
      "lang_name": "Python3",
      "time": "1 week, 5 days",
      "timestamp": 1705996478,
      "status": 10,
      "runtime": "60 ms",
      "is_pending": "Not Pending",
      "memory": "16.7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1154377227,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1360,
      "title_slug": "maximum-length-of-a-concatenated-string-with-unique-characters",
      "code": "class Solution:\n    def maxLength(self, arr: List[str]) -\u003e int:\n        cur = set()\n        length = len(arr)\n        max_length = 0\n\n        def backtrack(start: int) -\u003e None:\n            nonlocal max_length \n            if start == length:\n                max_length = max(max_length, len(cur))\n                return\n            \n            for i in range(start, length):\n                new_subs = arr[i]\n                new = set(new_subs)\n                if len(new_subs) != len(new) or len(cur.intersection(new)) != 0:\n                    continue\n                cur.update(new)\n                backtrack(i + 1)\n                cur.difference_update(new)\n\n        backtrack(0)\n\n        return max_length\n",
      "title": "Maximum Length of a Concatenated String with Unique Characters",
      "url": "/submissions/detail/1154377227/",
      "lang_name": "Python3",
      "time": "1 week, 5 days",
      "timestamp": 1705996086,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111110101111110101100101010000000000010101100000001010000000110000000010000000001100",
      "flag_type": 1
    },
    {
      "id": 1154367641,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 1360,
      "title_slug": "maximum-length-of-a-concatenated-string-with-unique-characters",
      "code": "class Solution:\n    def maxLength(self, arr: List[str]) -\u003e int:\n        cur = []\n        cur_chars = set()\n        cur_length = 0\n        length = len(arr)\n        max_length = 0\n\n        def backtrack(start: int) -\u003e None:\n            nonlocal max_length \n            nonlocal cur_length\n            if start == length:\n                max_length = max(max_length, cur_length)\n                return\n            \n            for i in range(start, length):\n                subs = arr[i]\n                if cur_chars.intersection(subs):\n                    continue\n                cur.append(subs)\n                cur_chars.update(subs)\n                cur_length += len(subs)\n                backtrack(i + 1)\n                cur_length -= len(subs)\n                cur.pop()\n                cur_chars.difference_update(subs)\n\n        backtrack(0)\n\n        return max_length\n",
      "title": "Maximum Length of a Concatenated String with Unique Characters",
      "url": "/submissions/detail/1154367641/",
      "lang_name": "Python3",
      "time": "1 week, 5 days",
      "timestamp": 1705995184,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11101111110001111110101100101010000000000000101100000001010000000110000000010000000001000",
      "flag_type": 1
    },
    {
      "id": 1153445153,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 645,
      "title_slug": "set-mismatch",
      "code": "class Solution:\n    def findErrorNums(self, nums: List[int]) -\u003e List[int]:\n        length = len(nums)\n        # dupl_xor_miss = duplicate ^ missing\n        dupl_xor_miss = reduce(lambda total, i: total ^ i ^ nums[i - 1], range(length + 1))\n        rightmost_set_bit = dupl_xor_miss \u0026 -dupl_xor_miss\n        xor_group1 = xor_group2 = 0\n        for i in range(1, length + 1):\n            if i \u0026 rightmost_set_bit:\n                xor_group1 ^= i\n            else:\n                xor_group2 ^= i\n            if nums[i - 1] \u0026 rightmost_set_bit:\n                xor_group1 ^= nums[i - 1]\n            else:\n                xor_group2 ^= nums[i - 1]\n        for num in nums:\n            if num == xor_group1:\n                return num, xor_group2\n            if num == xor_group2:\n                return num, xor_group1 \n        \n        raise Exception()",
      "title": "Set Mismatch",
      "url": "/submissions/detail/1153445153/",
      "lang_name": "Python3",
      "time": "1 week, 6 days",
      "timestamp": 1705916345,
      "status": 10,
      "runtime": "179 ms",
      "is_pending": "Not Pending",
      "memory": "17.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1152842944,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 198,
      "title_slug": "house-robber",
      "code": "class Solution:\n    def rob(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        cache = {}\n\n        def dp(i: int) -\u003e int:\n            if i \u003e= length:\n                return 0\n            val = nums[i]\n            if i in cache:\n                return cache[i]\n            res = max(dp(i + 1), val + dp(i + 2))\n            cache[i] = res\n            return res \n\n        return dp(0)",
      "title": "House Robber",
      "url": "/submissions/detail/1152842944/",
      "lang_name": "Python3",
      "time": "1 week, 6 days",
      "timestamp": 1705860741,
      "status": 10,
      "runtime": "41 ms",
      "is_pending": "Not Pending",
      "memory": "16.5 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1152842416,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 198,
      "title_slug": "house-robber",
      "code": "class Solution:\n    def rob(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        cache = {}\n\n        def dp(i: int) -\u003e int:\n            if i \u003e= length:\n                return 0\n            val = nums[i]\n            if i in cache:\n                return cache[val]\n            res = max(dp(i + 1), val + dp(i + 2))\n            cache[i] = res\n            return res \n\n        return dp(0)",
      "title": "House Robber",
      "url": "/submissions/detail/1152842416/",
      "lang_name": "Python3",
      "time": "1 week, 6 days",
      "timestamp": 1705860704,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1152841842,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 198,
      "title_slug": "house-robber",
      "code": "class Solution:\n    def rob(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        cache = {}\n\n        def dp(i: int) -\u003e int:\n            if i \u003e= length:\n                return 0\n            val = nums[i]\n            if i in cache:\n                return cache[val]\n            res = max(dp(i + 1), val + dp(i + 2))\n            cache[val] = res\n            return res \n\n        return dp(0)",
      "title": "House Robber",
      "url": "/submissions/detail/1152841842/",
      "lang_name": "Python3",
      "time": "1 week, 6 days",
      "timestamp": 1705860664,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111110110011111101111001111011110110000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1152839694,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 198,
      "title_slug": "house-robber",
      "code": "class Solution:\n    def rob(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        cache = {}\n\n        def dp(i: int) -\u003e int:\n            if i \u003e= length:\n                return 0\n            val = nums[i]\n            if val in cache:\n                return cache[val]\n            res = max(dp(i + 1), val + dp(i + 2))\n            cache[val] = res\n            return res \n\n        return dp(0)",
      "title": "House Robber",
      "url": "/submissions/detail/1152839694/",
      "lang_name": "Python3",
      "time": "1 week, 6 days",
      "timestamp": 1705860519,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111100110110011111111111110111110001111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1152838255,
      "status_display": "Time Limit Exceeded",
      "lang": "python3",
      "question_id": 198,
      "title_slug": "house-robber",
      "code": "class Solution:\n    def rob(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n\n        def dp(i: int) -\u003e int:\n            if i \u003e= length:\n                return 0\n            val = nums[i]\n            return max(dp(i + 1), val + dp(i + 2))\n        \n        return dp(0)",
      "title": "House Robber",
      "url": "/submissions/detail/1152838255/",
      "lang_name": "Python3",
      "time": "1 week, 6 days",
      "timestamp": 1705860421,
      "status": 14,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1111111111111111111111111111111111111111111111111100000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1151604111,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 943,
      "title_slug": "sum-of-subarray-minimums",
      "code": "class Solution:\n    def sumSubarrayMins(self, arr: List[int]) -\u003e int:\n        n = len(arr)\n        left = [-1] * n \n        right = [n] * n\n        stack = []\n\n        for i, value in enumerate(arr):\n            while stack and arr[stack[-1]] \u003e= value:  \n                stack.pop()  \n            if stack:\n                left[i] = stack[-1]  \n            stack.append(i) \n\n        stack = [] \n\n        \n        for i in range(n - 1, -1, -1):  \n            while stack and arr[stack[-1]] \u003e arr[i]: \n                stack.pop()  \n            if stack:\n                right[i] = stack[-1]  \n            stack.append(i) \n\n        mod = 10**9 + 7 \n\n        result = sum((i - left[i]) * (right[i] - i) * value for i, value in enumerate(arr)) % mod\n      \n        return result ",
      "title": "Sum of Subarray Minimums",
      "url": "/submissions/detail/1151604111/",
      "lang_name": "Python3",
      "time": "2 weeks, 1 day",
      "timestamp": 1705760503,
      "status": 10,
      "runtime": "368 ms",
      "is_pending": "Not Pending",
      "memory": "21.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1150545529,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 967,
      "title_slug": "minimum-falling-path-sum",
      "code": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -\u003e int:\n        length = len(matrix)\n        cache = {}\n        deltas = ((1, 0), (1, 1), (1, -1))\n        last_row = length - 1\n\n        def dp(row: int, col: int) -\u003e int:\n            if (row, col) in cache:\n                return cache[(row, col)]\n            val = matrix[row][col]\n            if row == last_row:\n                return val\n            min_cost = None\n            for delta_row, delta_col in deltas:\n                new_row, new_col = row + delta_row, col + delta_col\n                if new_col == length or new_col == -1:\n                    continue\n                cost = dp(new_row, new_col)\n                min_cost = cost if min_cost is None else min(min_cost, cost)\n            res = val + min_cost\n            cache[(row, col)] = res\n            return res\n\n        return min(dp(0, col) for col in range(length))",
      "title": "Minimum Falling Path Sum",
      "url": "/submissions/detail/1150545529/",
      "lang_name": "Python3",
      "time": "2 weeks, 2 days",
      "timestamp": 1705653981,
      "status": 10,
      "runtime": "154 ms",
      "is_pending": "Not Pending",
      "memory": "26.9 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1150545002,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 967,
      "title_slug": "minimum-falling-path-sum",
      "code": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -\u003e int:\n        length = len(matrix)\n        max_val = 101 * length * length\n        cache = {}\n        deltas = ((1, 0), (1, 1), (1, -1))\n        last_row = length - 1\n\n        def dp(row: int, col: int) -\u003e int:\n            if (row, col) in cache:\n                return cache[(row, col)]\n            val = matrix[row][col]\n            if row == last_row:\n                return val\n            min_cost = max_val\n            for delta_row, delta_col in deltas:\n                new_row, new_col = row + delta_row, col + delta_col\n                if new_col == length or new_col == -1:\n                    continue\n                cost = dp(new_row, new_col)\n                min_cost = min(min_cost, cost)\n            res = val + min_cost\n            cache[(row, col)] = res\n            return res\n\n        return min(dp(0, col) for col in range(length))",
      "title": "Minimum Falling Path Sum",
      "url": "/submissions/detail/1150545002/",
      "lang_name": "Python3",
      "time": "2 weeks, 2 days",
      "timestamp": 1705653932,
      "status": 10,
      "runtime": "171 ms",
      "is_pending": "Not Pending",
      "memory": "27 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1150542073,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 967,
      "title_slug": "minimum-falling-path-sum",
      "code": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -\u003e int:\n        length = len(matrix)\n        max_val = 101\n        cache = {}\n        deltas = ((1, 0), (1, 1), (1, -1))\n        last_row = length - 1\n\n        def dp(row: int, col: int) -\u003e int:\n            if (row, col) in cache:\n                return cache[(row, col)]\n            val = matrix[row][col]\n            if row == last_row:\n                return val\n            min_cost = max_val\n            for delta_row, delta_col in deltas:\n                new_row, new_col = row + delta_row, col + delta_col\n                if new_col == length or new_col == -1:\n                    continue\n                cost = dp(new_row, new_col)\n                min_cost = min(min_cost, cost)\n            res = val + min_cost\n            cache[(row, col)] = res\n            return res\n\n        return min(dp(0, col) for col in range(length))",
      "title": "Minimum Falling Path Sum",
      "url": "/submissions/detail/1150542073/",
      "lang_name": "Python3",
      "time": "2 weeks, 2 days",
      "timestamp": 1705653637,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111101",
      "flag_type": 1
    },
    {
      "id": 1150538234,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 967,
      "title_slug": "minimum-falling-path-sum",
      "code": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -\u003e int:\n        length = len(matrix)\n        max_val = 101\n\n        @cache\n        def dp(row: int, col: int) -\u003e int:\n            if not 0 \u003c= col \u003c length:\n                return max_val\n            val = matrix[row][col]\n            if row == length - 1:\n                return val\n            new_row = row + 1\n            return val + min(dp(new_row, col + 1), dp(new_row, col), dp(new_row, col - 1))\n\n        return min(dp(0, col) for col in range(length))",
      "title": "Minimum Falling Path Sum",
      "url": "/submissions/detail/1150538234/",
      "lang_name": "Python3",
      "time": "2 weeks, 2 days",
      "timestamp": 1705653246,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111111111111111111111111111111111111111101",
      "flag_type": 1
    },
    {
      "id": 1150532886,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 967,
      "title_slug": "minimum-falling-path-sum",
      "code": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -\u003e int:\n        length = len(matrix)\n\n        deltas = ((1, 0), (1, 1), (1, -1))\n\n        @cache\n        def dp(row: int, col: int) -\u003e int:\n            val = matrix[row][col]\n            min_cost = None\n            for delta_row, delta_col in deltas:\n                new_row, new_col = row + delta_row, col + delta_col\n                if new_row \u003e= length or new_col \u003e= length:\n                    continue\n                new_cost = dp(new_row, new_col)\n                if min_cost is None:\n                    min_cost = new_cost\n                else:\n                    min_cost = min(min_cost, new_cost)\n            return val + (min_cost if min_cost is not None else 0)\n\n        return min(dp(0, col) for col in range(length))",
      "title": "Minimum Falling Path Sum",
      "url": "/submissions/detail/1150532886/",
      "lang_name": "Python3",
      "time": "2 weeks, 2 days",
      "timestamp": 1705652709,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111011110101111110111000111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1149661847,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 70,
      "title_slug": "climbing-stairs",
      "code": "class Solution:\n    def climbStairs(self, n: int) -\u003e int:\n        prev, cur = 1, 2\n        if n == prev:\n            return prev\n        if n == cur:\n            return cur\n        for i in range(2, n):\n            new = prev + cur\n            cur, prev = new, cur\n        return cur",
      "title": "Climbing Stairs",
      "url": "/submissions/detail/1149661847/",
      "lang_name": "Python3",
      "time": "2 weeks, 3 days",
      "timestamp": 1705573630,
      "status": 10,
      "runtime": "29 ms",
      "is_pending": "Not Pending",
      "memory": "17.4 MB",
      "compare_result": "111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1149661487,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 70,
      "title_slug": "climbing-stairs",
      "code": "class Solution:\n    def climbStairs(self, n: int) -\u003e int:\n        prev, cur = 1, 2\n        for i in range(2, n):\n            new = prev + cur\n            cur, prev = new, cur\n        return cur",
      "title": "Climbing Stairs",
      "url": "/submissions/detail/1149661487/",
      "lang_name": "Python3",
      "time": "2 weeks, 3 days",
      "timestamp": 1705573598,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "110111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1148942931,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1319,
      "title_slug": "unique-number-of-occurrences",
      "code": "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -\u003e bool:\n        counts = defaultdict(int)\n        for num in arr:\n            counts[num] += 1\n\n        viewed = set()\n        for _, count in counts.items():\n            if count in viewed:\n                return False\n            viewed.add(count)\n        return True",
      "title": "Unique Number of Occurrences",
      "url": "/submissions/detail/1148942931/",
      "lang_name": "Python3",
      "time": "2 weeks, 3 days",
      "timestamp": 1705508044,
      "status": 10,
      "runtime": "31 ms",
      "is_pending": "Not Pending",
      "memory": "17.3 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1147634540,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 380,
      "title_slug": "insert-delete-getrandom-o1",
      "code": "import random\n\nclass RandomizedSet:\n\n    def __init__(self):\n        self._nums_map = {}\n        self._nums = []\n        \n\n    def insert(self, val: int) -\u003e bool:\n        if val in self._nums_map:\n            return False\n        self._nums_map[val] = len(self._nums)\n        self._nums.append(val)\n        return True\n\n    def remove(self, val: int) -\u003e bool:\n        if val not in self._nums_map:\n            return False\n        last = self._nums[-1]\n        idx = self._nums_map[val]\n        self._nums_map[last] = idx\n        self._nums[idx] = last\n        self._nums.pop()\n        self._nums_map.pop(val)\n        return True\n        \n    def getRandom(self) -\u003e int:\n        return random.choice(self._nums) \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()",
      "title": "Insert Delete GetRandom O(1)",
      "url": "/submissions/detail/1147634540/",
      "lang_name": "Python3",
      "time": "2 weeks, 5 days",
      "timestamp": 1705392241,
      "status": 10,
      "runtime": "259 ms",
      "is_pending": "Not Pending",
      "memory": "64.3 MB",
      "compare_result": "1111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1147633590,
      "status_display": "Wrong Answer",
      "lang": "python3",
      "question_id": 380,
      "title_slug": "insert-delete-getrandom-o1",
      "code": "import random\n\nclass RandomizedSet:\n\n    def __init__(self):\n        self._nums_map = {}\n        self._nums = []\n        \n\n    def insert(self, val: int) -\u003e bool:\n        if val in self._nums_map:\n            return False\n        self._nums_map[val] = len(self._nums)\n        self._nums.append(val)\n        return True\n\n    def remove(self, val: int) -\u003e bool:\n        if val not in self._nums_map:\n            return False\n        last = self._nums[-1]\n        idx = self._nums_map.pop(val)\n        self._nums_map[last] = idx\n        self._nums[idx] = last\n        self._nums.pop()\n        return True\n        \n    def getRandom(self) -\u003e int:\n        return random.choice(self._nums) \n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()",
      "title": "Insert Delete GetRandom O(1)",
      "url": "/submissions/detail/1147633590/",
      "lang_name": "Python3",
      "time": "2 weeks, 5 days",
      "timestamp": 1705392148,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "1011100000000000000",
      "flag_type": 1
    },
    {
      "id": 1173047408,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 169,
      "title_slug": "majority-element",
      "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -\u003e int:\n        counter = defaultdict(int)\n        half = len(nums) // 2\n        for num in nums:\n            counter[num] += 1\n            if counter[num] \u003e half:\n                return num\n        raise Exception()",
      "title": "Majority Element",
      "url": "/submissions/detail/1173047408/",
      "lang_name": "Python3",
      "time": "7 hours, 33 minutes",
      "timestamp": 1707731444,
      "status": 10,
      "runtime": "143 ms",
      "is_pending": "Not Pending",
      "memory": "18 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1174154785,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2231,
      "title_slug": "find-first-palindromic-string-in-the-array",
      "code": "class Solution:\n    def firstPalindrome(self, words: List[str]) -\u003e str:\n        for s in words:\n            for i in range(len(s) // 2):\n                if s[i] != s[-i - 1]:\n                    break\n            else:\n                return s\n        return \"\"",
      "title": "Find First Palindromic String in the Array",
      "url": "/submissions/detail/1174154785/",
      "lang_name": "Python3",
      "time": "2 hours, 30 minutes",
      "timestamp": 1707829854,
      "status": 10,
      "runtime": "96 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1174925506,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2271,
      "title_slug": "rearrange-array-elements-by-sign",
      "code": "class Solution:\n    def rearrangeArray(self, nums: List[int]) -\u003e List[int]:\n        res = []\n        pos, neg = [], []\n        length = len(nums)\n        for i in range(length):\n            num = nums[i]\n            if num \u003e 0:\n                pos.append(num)\n            else:\n                neg.append(num)\n        pos.reverse()\n        neg.reverse()\n        while pos and neg:\n            res.extend((pos.pop(), neg.pop()))\n        return res",
      "title": "Rearrange Array Elements by Sign",
      "url": "/submissions/detail/1174925506/",
      "lang_name": "Python3",
      "time": "8 hours, 19 minutes",
      "timestamp": 1707896896,
      "status": 10,
      "runtime": "1001 ms",
      "is_pending": "Not Pending",
      "memory": "47.9 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1175904450,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 3262,
      "title_slug": "find-polygon-with-the-largest-perimeter",
      "code": "class Solution:\n    def largestPerimeter(self, nums: List[int]) -\u003e int:\n        nums.sort()\n        previous_elements_sum = 0\n        ans = -1\n        for num in nums:\n            if num \u003c previous_elements_sum:\n                ans = num + previous_elements_sum\n            previous_elements_sum += num\n        return ans",
      "title": "Find Polygon With the Largest Perimeter",
      "url": "/submissions/detail/1175904450/",
      "lang_name": "Python3",
      "time": "4 hours, 47 minutes",
      "timestamp": 1707990685,
      "status": 10,
      "runtime": "549 ms",
      "is_pending": "Not Pending",
      "memory": "31.5 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1177051612,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1604,
      "title_slug": "least-number-of-unique-integers-after-k-removals",
      "code": "class Solution:\r\n    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -\u003e int:\r\n        counter = defaultdict(int)\r\n        for num in arr:\r\n            counter[num] += 1\r\n        nums = [(count, num) for num, count in counter.items()]\r\n        nums.sort()\r\n        removed = 0\r\n        for count, num in nums:\r\n            if k \u003c count:\r\n                break\r\n            k -= count\r\n            removed += 1\r\n        return len(counter) - removed",
      "title": "Least Number of Unique Integers after K Removals",
      "url": "/submissions/detail/1177051612/",
      "lang_name": "Python3",
      "time": "13 minutes",
      "timestamp": 1708097348,
      "status": 10,
      "runtime": "426 ms",
      "is_pending": "Not Pending",
      "memory": "37.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1177763433,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1762,
      "title_slug": "furthest-building-you-can-reach",
      "code": "class Solution:\n    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -\u003e int:\n        heap = []\n        i = 0\n        length = len(heights)\n        for i in range(length - 1):\n            diff = heights[i + 1] - heights[i]           \n            if diff \u003c= 0:\n                continue\n            bricks -= diff\n            heapq.heappush(heap, -diff)\n            if bricks \u003c 0:\n                bricks += -heapq.heappop(heap)\n                ladders -= 1\n            if ladders \u003c 0:\n                return i\n        return length - 1\n  \n\n",
      "title": "Furthest Building You Can Reach",
      "url": "/submissions/detail/1177763433/",
      "lang_name": "Python3",
      "time": "48 minutes",
      "timestamp": 1708171657,
      "status": 10,
      "runtime": "412 ms",
      "is_pending": "Not Pending",
      "memory": "31.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1177763016,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1762,
      "title_slug": "furthest-building-you-can-reach",
      "code": "class Solution:\n    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -\u003e int:\n        heap = []\n        i = 0\n        length = len(heights)\n        for i in range(len(h) - 1):\n            diff = h[i + 1] - h[i]            \n            if diff \u003c= 0:\n                continue\n            bricks -= diff\n            heapq.heappush(heap, -diff)\n            if bricks \u003c 0:\n                bricks += -heapq.heappop(heap)\n                ladders -= 1\n            if ladders \u003c 0:\n                return i\n        return length - 1\n  \n\n",
      "title": "Furthest Building You Can Reach",
      "url": "/submissions/detail/1177763016/",
      "lang_name": "Python3",
      "time": "49 minutes",
      "timestamp": 1708171612,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1177761223,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 1762,
      "title_slug": "furthest-building-you-can-reach",
      "code": "class Solution:\n   def furthestBuilding(self, h: List[int], b: int, l: int) -\u003e int:\n       p = []\n       \n       i = 0\n       for i in range(len(h) - 1):\n           diff = h[i + 1] - h[i]\n           \n           if diff \u003c= 0:\n               continue\n           \n           b -= diff\n           x = heapq.heappush(p, -diff)\n           print(x)\n           if b \u003c 0:\n               b += -heapq.heappop(p)\n               l -= 1\n               \n           if l \u003c 0:\n               return i\n       return len(h)-1\n  \n\n",
      "title": "Furthest Building You Can Reach",
      "url": "/submissions/detail/1177761223/",
      "lang_name": "Python3",
      "time": "52 minutes",
      "timestamp": 1708171431,
      "status": 10,
      "runtime": "457 ms",
      "is_pending": "Not Pending",
      "memory": "31 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1177761049,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1762,
      "title_slug": "furthest-building-you-can-reach",
      "code": "\n   def furthestBuilding(self, h: List[int], b: int, l: int) -\u003e int:\n       p = []\n       \n       i = 0\n       for i in range(len(h) - 1):\n           diff = h[i + 1] - h[i]\n           \n           if diff \u003c= 0:\n               continue\n           \n           b -= diff\n           x = heapq.heappush(p, -diff)\n           print(x)\n           if b \u003c 0:\n               b += -heapq.heappop(p)\n               l -= 1\n               \n           if l \u003c 0:\n               return i\n       return len(h)-1\n  \n\n",
      "title": "Furthest Building You Can Reach",
      "url": "/submissions/detail/1177761049/",
      "lang_name": "Python3",
      "time": "52 minutes",
      "timestamp": 1708171412,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1177760922,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 1762,
      "title_slug": "furthest-building-you-can-reach",
      "code": "\tids := map[uint64]struct{}{}\n\tfor _, submission := range curSubmissions.Submissions {\n\t\tids[submission.Id] = struct{}{}\n\t}\n\tfor _, submission := range submissions {\n\t\tif _, ok := ids[submission.Id]; !ok {\n\t\t\tcurSubmissions.Submissions = append(curSubmissions.Submissions, submission)\n\t\t}\n\t}\n",
      "title": "Furthest Building You Can Reach",
      "url": "/submissions/detail/1177760922/",
      "lang_name": "Python3",
      "time": "52 minutes",
      "timestamp": 1708171399,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1178740285,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 2479,
      "title_slug": "meeting-rooms-iii",
      "code": "class Solution:\n    def mostBooked(self, n: int, meetings: List[List[int]]) -\u003e int:\n        unused_rooms, used_rooms = list(range(n)), []\n        heapify(unused_rooms)\n        meeting_count = [0] * n\n        for start, end in sorted(meetings):\n            while used_rooms and used_rooms[0][0] \u003c= start:\n                _, room = heappop(used_rooms)\n                heappush(unused_rooms, room)\n            if unused_rooms:\n                room = heappop(unused_rooms)\n                heappush(used_rooms, [end, room])\n            else:\n                room_availability_time, room = heappop(used_rooms)\n                heappush(\n                    used_rooms,\n                    [room_availability_time + end - start, room]\n                )\n            meeting_count[room] += 1\n        return meeting_count.index(max(meeting_count))",
      "title": "Meeting Rooms III",
      "url": "/submissions/detail/1178740285/",
      "lang_name": "Python3",
      "time": "2 minutes",
      "timestamp": 1708249546,
      "status": 10,
      "runtime": "1199 ms",
      "is_pending": "Not Pending",
      "memory": "62.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1178740201,
      "status_display": "Runtime Error",
      "lang": "python3",
      "question_id": 2479,
      "title_slug": "meeting-rooms-iii",
      "code": "class Solution:\n    def mostBooked(self, n: int, meetings: List[List[int]]) -\u003e int:\n        ",
      "title": "Meeting Rooms III",
      "url": "/submissions/detail/1178740201/",
      "lang_name": "Python3",
      "time": "2 minutes",
      "timestamp": 1708249538,
      "status": 15,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1178740137,
      "status_display": "Compile Error",
      "lang": "cpp",
      "question_id": 2479,
      "title_slug": "meeting-rooms-iii",
      "code": "class Solution:\n    def mostBooked(self, n: int, meetings: List[List[int]]) -\u003e int:\n        unused_rooms, used_rooms = list(range(n)), []\n        heapify(unused_rooms)\n        meeting_count = [0] * n\n        for start, end in sorted(meetings):\n            while used_rooms and used_rooms[0][0] \u003c= start:\n                _, room = heappop(used_rooms)\n                heappush(unused_rooms, room)\n            if unused_rooms:\n                room = heappop(unused_rooms)\n                heappush(used_rooms, [end, room])\n            else:\n                room_availability_time, room = heappop(used_rooms)\n                heappush(\n                    used_rooms,\n                    [room_availability_time + end - start, room]\n                )\n            meeting_count[room] += 1\n        return meeting_count.index(max(meeting_count))",
      "title": "Meeting Rooms III",
      "url": "/submissions/detail/1178740137/",
      "lang_name": "C++",
      "time": "2 minutes",
      "timestamp": 1708249530,
      "status": 20,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "flag_type": 1
    },
    {
      "id": 1179683573,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 231,
      "title_slug": "power-of-two",
      "code": "class Solution:\n    def isPowerOfTwo(self, n: int) -\u003e bool:\n        return n \u003e 0 and n \u0026 (n - 1) == 0",
      "title": "Power of Two",
      "url": "/submissions/detail/1179683573/",
      "lang_name": "Python3",
      "time": "8 hours, 14 minutes",
      "timestamp": 1708333015,
      "status": 10,
      "runtime": "35 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1181061860,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 268,
      "title_slug": "missing-number",
      "code": "import operator\nclass Solution:\n    def missingNumber(self, nums: List[int]) -\u003e int:\n        return reduce(\n            operator.xor, \n            nums, \n            reduce(operator.xor, tuple(range(len(nums) + 1)), 0)\n        )",
      "title": "Missing Number",
      "url": "/submissions/detail/1181061860/",
      "lang_name": "Python3",
      "time": "2 minutes",
      "timestamp": 1708442480,
      "status": 10,
      "runtime": "128 ms",
      "is_pending": "Not Pending",
      "memory": "17.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1181059865,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 268,
      "title_slug": "missing-number",
      "code": "import operator\nclass Solution:\n    def missingNumber(self, nums: List[int]) -\u003e int:\n        nums.extend(range(len(nums) + 1))\n        return reduce(operator.xor, nums, 0)",
      "title": "Missing Number",
      "url": "/submissions/detail/1181059865/",
      "lang_name": "Python3",
      "time": "5 minutes",
      "timestamp": 1708442345,
      "status": 10,
      "runtime": "114 ms",
      "is_pending": "Not Pending",
      "memory": "18.3 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1181057745,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 268,
      "title_slug": "missing-number",
      "code": "import operator\nclass Solution:\n    def missingNumber(self, nums: List[int]) -\u003e int:\n        length = len(nums)\n        return reduce(operator.xor, range(length), reduce(operator.xor, nums, length))",
      "title": "Missing Number",
      "url": "/submissions/detail/1181057745/",
      "lang_name": "Python3",
      "time": "7 minutes",
      "timestamp": 1708442196,
      "status": 10,
      "runtime": "110 ms",
      "is_pending": "Not Pending",
      "memory": "17.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1180911196,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 268,
      "title_slug": "missing-number",
      "code": "class Solution:\n    def missingNumber(self, nums: List[int]) -\u003e int:\n        def xor(total: int, i: int) -\u003e int:\n            return total ^ nums[i] ^ (i + 1)\n        return reduce(xor, chain((0, ), range(len(nums))))",
      "title": "Missing Number",
      "url": "/submissions/detail/1180911196/",
      "lang_name": "Python3",
      "time": "3 hours, 13 minutes",
      "timestamp": 1708431035,
      "status": 10,
      "runtime": "117 ms",
      "is_pending": "Not Pending",
      "memory": "17.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1181809452,
      "status_display": "Accepted",
      "lang": "python3",
      "question_id": 201,
      "title_slug": "bitwise-and-of-numbers-range",
      "code": "class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -\u003e int:\n        shift = 0\n        while left != right:\n            left \u003e\u003e= 1\n            right \u003e\u003e= 1\n            shift += 1\n        return left \u003c\u003c shift\n",
      "title": "Bitwise AND of Numbers Range",
      "url": "/submissions/detail/1181809452/",
      "lang_name": "Python3",
      "time": "4 hours, 41 minutes",
      "timestamp": 1708504927,
      "status": 10,
      "runtime": "56 ms",
      "is_pending": "Not Pending",
      "memory": "16.6 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1182831320,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1039,
      "title_slug": "find-the-town-judge",
      "code": "func findJudge(n int, trust [][]int) int {\n    fromTo := make([][]int, n)\n    toFrom := make([][]int, n)\n    for _, trustArray := range trust {\n        from, to := trustArray[0], trustArray[1]\n        fromTo[from-1] = append(fromTo[from-1], to)\n        toFrom[to-1] = append(toFrom[to-1], from)\n    }\n    for i, from := range toFrom {\n        if len(from) == n - 1 \u0026\u0026 len(fromTo[i]) == 0 {\n            return i + 1\n        }\n    }\n    return -1\n}",
      "title": "Find the Town Judge",
      "url": "/submissions/detail/1182831320/",
      "lang_name": "Go",
      "time": "1 hour, 54 minutes",
      "timestamp": 1708590036,
      "status": 10,
      "runtime": "90 ms",
      "is_pending": "Not Pending",
      "memory": "7.6 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1183855913,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 803,
      "title_slug": "cheapest-flights-within-k-stops",
      "code": "type Connection struct {\n\tcity int\n\tcost int\n}\n\ntype queue []Connection\n\nfunc (q *queue) push(c Connection) {\n\tq1 := []Connection{c}\n\t*q = append(*q, q1...)\n}\n\nfunc (q *queue) pop() (bool, Connection) {\n\n\tif q.isEmpty() {\n\t\treturn false, Connection{}\n\t} else {\n\t\telem := (*q)[0]\n\t\t*q = (*q)[1:]\n\t\treturn true, elem\n\t}\n}\n\nfunc (q queue) isEmpty() bool {\n\treturn q.size() \u003c= 0\n}\n\nfunc (q queue) size() int {\n\treturn len(q)\n}\n\nfunc findCheapestPrice(n int, flights [][]int, src int, dst int, k int) int {\n\n\tminCost := math.MaxInt64\n\n\tfQueue := new(queue)\n\tfQueue.push(Connection{src, 0})\n\n\tmaxStops := k + 1\n\n\tcostOfFlights := make([][]int, n)\n\tfor i := range costOfFlights {\n\t\tcostOfFlights[i] = make([]int, n)\n\t}\n\n\tflightsMap := make(map[int][]int)\n\tfor _, v := range flights {\n\t\tif _, ok := flightsMap[v[0]]; ok {\n\t\t\tflightsMap[v[0]] = append(flightsMap[v[0]], v[1])\n\t\t} else {\n\t\t\tflightsMap[v[0]] = []int{v[1]}\n\t\t}\n\n\t\tcostOfFlights[v[0]][v[1]] = v[2]\n\t}\n\n\tcityPathCost := make([]int, n) // path cost from source\n\tfor i := range cityPathCost {\n\t\tcityPathCost[i] = math.MaxInt64\n\t}\n\n\tcityPathCost[src] = 0\n\n\tfor !fQueue.isEmpty() \u0026\u0026 maxStops \u003e= 0 {\n\n\t\tsize := fQueue.size()\n\t\tmaxStops--\n\n\t\tfor size \u003e 0 {\n\t\t\t_, c := fQueue.pop()\n\t\t\tsize--\n\n\t\t\tif c.city == dst {\n\t\t\t\tif minCost \u003e c.cost {\n\t\t\t\t\tminCost = c.cost\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor _, v := range flightsMap[c.city] {\n\n\t\t\t\tnewCost := c.cost + costOfFlights[c.city][v]\n\n\t\t\t\tif cityPathCost[v] \u003e newCost {\n\t\t\t\t\tfQueue.push(Connection{v, newCost})\n\t\t\t\t\tcityPathCost[v] = newCost\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif minCost == math.MaxInt64 {\n\t\tminCost = -1\n\t}\n\n\treturn minCost\n}",
      "title": "Cheapest Flights Within K Stops",
      "url": "/submissions/detail/1183855913/",
      "lang_name": "Go",
      "time": "6 hours, 46 minutes",
      "timestamp": 1708680624,
      "status": 10,
      "runtime": "9 ms",
      "is_pending": "Not Pending",
      "memory": "5.4 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1185958704,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 2827,
      "title_slug": "greatest-common-divisor-traversal",
      "code": "func canTraverseAllPairs(nums []int) bool {\n    if len(nums) == 1 {\n        return true\n    }\n    n := len(nums)\n    maxElement := nums[0]\n    minElement := nums[0]\n    for _, num := range nums {\n        if num \u003e maxElement {\n            maxElement = num\n        }\n        if num \u003c minElement {\n            minElement = num\n        }\n    }\n    if minElement == 1 {\n        return false\n    }\n    factorArray := factorsCalculator(maxElement)\n\n    parent := make([]int, maxElement+1)\n    rank := make([]int, maxElement+1)\n    for i := 0; i \u003c= maxElement; i++ {\n        parent[i] = i\n        rank[i] = 1\n    }\n\n    for _, num := range nums {\n        x := num\n        for x \u003e 1 {\n            p := factorArray[x]\n            union(parent, rank, p, num)\n            for x%p == 0 {\n                x = x / p\n            }\n        }\n    }\n\n    p := find(parent, nums[0])\n    for i := 1; i \u003c n; i++ {\n        if find(parent, nums[i]) != p {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc factorsCalculator(n int) []int {\n    dp := make([]int, n+2)\n    for i := 0; i \u003c len(dp); i++ {\n        dp[i] = i\n    }\n    for i := 2; i \u003c= n; i++ {\n        if dp[i] == i {\n            for j := i * 2; j \u003c= n; j += i {\n                if dp[j] == j {\n                    dp[j] = i\n                }\n            }\n        }\n    }\n    return dp\n}\n\nfunc find(parent []int, a int) int {\n    if parent[a] == a {\n        return a\n    }\n    parent[a] = find(parent, parent[a])\n    return parent[a]\n}\n\nfunc union(parent []int, rank []int, a int, b int) {\n    a = find(parent, a)\n    b = find(parent, b)\n    if a == b {\n        return\n    }\n    if rank[a] \u003c rank[b] {\n        a, b = b, a\n    }\n    parent[b] = a\n    rank[a] += rank[b]\n}",
      "title": "Greatest Common Divisor Traversal",
      "url": "/submissions/detail/1185958704/",
      "lang_name": "Go",
      "time": "33 minutes",
      "timestamp": 1708880644,
      "status": 10,
      "runtime": "99 ms",
      "is_pending": "Not Pending",
      "memory": "9 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1184803739,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 2213,
      "title_slug": "find-all-people-with-secret",
      "code": "package main\n\nimport (\n\t\"sort\"\n)\n\nfunc find(groups []int, index int) int {\n\tfor index != groups[index] {\n\t\tindex = groups[index]\n\t}\n\treturn index\n}\n\nfunc findAllPeople(n int, meetings [][]int, firstPerson int) []int {\n\tgroups := make([]int, 100000)\n\tvar result []int\n\tvar temp []int\n\n\tfor i := 0; i \u003c n; i++ {\n\t\tgroups[i] = i\n\t}\n\tgroups[firstPerson] = 0\n\n\tsort.Slice(meetings, func(i, j int) bool {\n\t\treturn meetings[i][2] \u003c meetings[j][2]\n\t})\n\n\ti := 0\n\tfor i \u003c len(meetings) {\n\t\tcurrentTime := meetings[i][2]\n\t\ttemp = temp[:0]\n\t\tfor i \u003c len(meetings) \u0026\u0026 meetings[i][2] == currentTime {\n\t\t\tg1 := find(groups, meetings[i][0])\n\t\t\tg2 := find(groups, meetings[i][1])\n\t\t\tgroups[max(g1, g2)] = min(g1, g2)\n\t\t\ttemp = append(temp, meetings[i][0], meetings[i][1])\n\t\t\ti++\n\t\t}\n\t\tfor _, j := range temp {\n\t\t\tif find(groups, j) != 0 {\n\t\t\t\tgroups[j] = j\n\t\t\t}\n\t\t}\n\t}\n\n\tfor j := 0; j \u003c n; j++ {\n\t\tif find(groups, j) == 0 {\n\t\t\tresult = append(result, j)\n\t\t}\n\t}\n\n\treturn result\n}\n\nfunc max(a, b int) int {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc min(a, b int) int {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
      "title": "Find All People With Secret",
      "url": "/submissions/detail/1184803739/",
      "lang_name": "Go",
      "time": "1 day, 4 hours",
      "timestamp": 1708778737,
      "status": 10,
      "runtime": "288 ms",
      "is_pending": "Not Pending",
      "memory": "19.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1186923254,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 100,
      "title_slug": "same-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n    if p == nil \u0026\u0026 q == nil {\n        return true\n    }\n    if p == nil || q == nil || p.Val != q.Val {\n        return false\n    }\n    return isSameTree(p.Left, q.Left) \u0026\u0026 isSameTree(p.Right, q.Right)\n}",
      "title": "Same Tree",
      "url": "/submissions/detail/1186923254/",
      "lang_name": "Go",
      "time": "12 minutes",
      "timestamp": 1708966665,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "2.1 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1187876498,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 543,
      "title_slug": "diameter-of-binary-tree",
      "code": "var maxD int\n\nfunc diameterOfBinaryTree(root *TreeNode) int {\n    maxD = 0\n    find(root)\n    return maxD\n}\n\nfunc find(root *TreeNode) int {\n    if root == nil {\n        return 0\n    }\n    left := find(root.Left)\n    right := find(root.Right)\n    localMax := left + right\n    maxD = max(maxD, localMax)\n    return max(left, right) + 1\n}\n\nfunc max(a, b int) int {\n    if a \u003e b {\n        return a\n    }\n    return b\n}",
      "title": "Diameter of Binary Tree",
      "url": "/submissions/detail/1187876498/",
      "lang_name": "Go",
      "time": "9 minutes",
      "timestamp": 1709051153,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "4.5 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1187875831,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 543,
      "title_slug": "diameter-of-binary-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc diameterOfBinaryTree(root *TreeNode) int {\n    if root == nil {\n        return 0\n    } \n    return findLongest(root.Left) + findLongest(root.Right)\n}\n\nfunc findLongest(node *TreeNode) int {\n    if node == nil {\n        return 0\n    }\n    return 1 + max(findLongest(node.Left), findLongest(node.Right))\n}",
      "title": "Diameter of Binary Tree",
      "url": "/submissions/detail/1187875831/",
      "lang_name": "Go",
      "time": "9 minutes",
      "timestamp": 1709051109,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100010110",
      "flag_type": 1
    },
    {
      "id": 1187655219,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 543,
      "title_slug": "diameter-of-binary-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc diameterOfBinaryTree(root *TreeNode) int {\n    if root == nil {\n        return 0\n    } \n    return findLongest(root.Left) + findLongest(root.Right)\n}\n\nfunc findLongest(node *TreeNode) int {\n    if node == nil {\n        return 0\n    }\n    return 1 + max(findLongest(node.Left), findLongest(node.Right))\n}",
      "title": "Diameter of Binary Tree",
      "url": "/submissions/detail/1187655219/",
      "lang_name": "Go",
      "time": "4 hours, 53 minutes",
      "timestamp": 1709034072,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100010110",
      "flag_type": 1
    },
    {
      "id": 1188569303,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 513,
      "title_slug": "find-bottom-left-tree-value",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findBottomLeftValue(root *TreeNode) int {\n    _, val := getBottomLeft(root)\n    return val\n}\n\nfunc getBottomLeft(root *TreeNode) (int, int) {\n    left, right := root.Left, root.Right\n    if right == nil \u0026\u0026 left == nil {\n        return 0, root.Val\n    }\n    if right == nil {\n        depth, val := getBottomLeft(root.Left)\n        return 1 + depth, val\n    }\n    if left == nil {\n        depth, val := getBottomLeft(root.Right)\n        return 1 + depth, val\n    }\n    leftDepth, leftVal := getBottomLeft(root.Left)\n    rightDepth, rightVal := getBottomLeft(root.Right)\n    if rightDepth \u003e leftDepth {\n        return 1 + rightDepth, rightVal\n    }\n    return 1 + leftDepth, leftVal\n}",
      "title": "Find Bottom Left Tree Value",
      "url": "/submissions/detail/1188569303/",
      "lang_name": "Go",
      "time": "7 hours, 49 minutes",
      "timestamp": 1709112672,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "5.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1188568032,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 513,
      "title_slug": "find-bottom-left-tree-value",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findBottomLeftValue(root *TreeNode) int {\n    _, val := getBottomLeft(root)\n    return val\n}\n\nfunc getBottomLeft(root *TreeNode) (int, int) {\n    left, right := root.Left, root.Right\n    if right == nil \u0026\u0026 left == nil {\n        return 0, root.Val\n    }\n    if right == nil {\n        return getBottomLeft(root.Left)\n    }\n    if left == nil {\n        return getBottomLeft(root.Right)\n    }\n    leftDepth, leftVal := getBottomLeft(root.Left)\n    rightDepth, rightVal := getBottomLeft(root.Right)\n    if rightDepth \u003e leftDepth {\n        return 1 + rightDepth, rightVal\n    }\n    return 1 + leftDepth, leftVal\n}",
      "title": "Find Bottom Left Tree Value",
      "url": "/submissions/detail/1188568032/",
      "lang_name": "Go",
      "time": "7 hours, 51 minutes",
      "timestamp": 1709112559,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "11111111111110111111111111001111111111110011111111111111001111111111111111110",
      "flag_type": 1
    },
    {
      "id": 1189736064,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1731,
      "title_slug": "even-odd-tree",
      "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isEvenOddTree(root *TreeNode) bool {\n    q := []*TreeNode{root}\n    for i:= 0; len(q) \u003e 0; i++ {\n        var prev *TreeNode\n        for _, node := range q {\n            q = q[1:]\n\n            if i % 2 == 0 \u0026\u0026 node.Val % 2 != 1 {\n                return false\n            }\n\n            if i % 2 == 1 \u0026\u0026 node.Val % 2 != 0 {\n                return false\n            }\n\n            if prev != nil \u0026\u0026 i % 2 == 0 \u0026\u0026 prev.Val \u003e= node.Val {\n                return false\n            }\n\n            if prev != nil \u0026\u0026 i % 2 == 1 \u0026\u0026 prev.Val \u003c= node.Val {\n                return false\n            }\n           \n            prev = node\n            if node.Left != nil {\n                q = append(q, node.Left)\n            }\n\n            if node.Right != nil {\n                q = append(q, node.Right)\n            }\n        }\n    }\n    return true\n}",
      "title": "Even Odd Tree",
      "url": "/submissions/detail/1189736064/",
      "lang_name": "Go",
      "time": "1 hour, 51 minutes",
      "timestamp": 1709217523,
      "status": 10,
      "runtime": "177 ms",
      "is_pending": "Not Pending",
      "memory": "22.7 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1190716200,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 3055,
      "title_slug": "maximum-odd-binary-number",
      "code": "func maximumOddBinaryNumber(s string) string {\n\tl := len(s)\n\tres := make([]byte, l)\n\tindex0, index1 := l-2, l-1\n\tfor i := 0; i \u003c l; i++ {\n\t\tif s[i] == '0' {\n\t\t\tres[index0] = '0'\n\t\t\tindex0--\n\t\t} else {\n\t\t\tres[index1] = '1'\n\t\t\tindex1 = (index1 + 1) % l\n\t\t}\n\t}\n\treturn string(res)\n}\n",
      "title": "Maximum Odd Binary Number",
      "url": "/submissions/detail/1190716200/",
      "lang_name": "Go",
      "time": "30 minutes",
      "timestamp": 1709306911,
      "status": 10,
      "runtime": "0 ms",
      "is_pending": "Not Pending",
      "memory": "2.6 MB",
      "compare_result
      "flag_type": 1
    },
    {
      "id": 1191506709,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1019,
      "title_slug": "squares-of-a-sorted-array",
      "code": "func sortedSquares(nums []int) []int {\n    for i, num := range nums {\n        if num \u003c 0 {\n            nums[i] = -num\n        } else { \n            break\n        }\n    }\n    slices.Sort(nums)\n    for i, num := range nums {\n        nums[i] = num * num\n    }\n    return nums\n}",
      "title": "Squares of a Sorted Array",
      "url": "/submissions/detail/1191506709/",
      "lang_name": "Go",
      "time": "2 hours, 8 minutes",
      "timestamp": 1709384353,
      "status": 10,
      "runtime": "18 ms",
      "is_pending": "Not Pending",
      "memory": "6.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1191505496,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1019,
      "title_slug": "squares-of-a-sorted-array",
      "code": "func sortedSquares(nums []int) []int {\n    for i, num := range nums {\n        nums[i] = num * num\n    }\n    slices.Sort(nums)\n    return nums\n}",
      "title": "Squares of a Sorted Array",
      "url": "/submissions/detail/1191505496/",
      "lang_name": "Go",
      "time": "2 hours, 10 minutes",
      "timestamp": 1709384235,
      "status": 10,
      "runtime": "29 ms",
      "is_pending": "Not Pending",
      "memory": "7 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1191505117,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1019,
      "title_slug": "squares-of-a-sorted-array",
      "code": "func sortedSquares(nums []int) []int {\n    for i, num := range nums {\n        if num \u003c 0 {\n            nums[i] = -num\n        }\n    }\n    slices.Sort(nums)\n    for i, num := range nums {\n        nums[i] = num * num\n    }\n    return nums\n}",
      "title": "Squares of a Sorted Array",
      "url": "/submissions/detail/1191505117/",
      "lang_name": "Go",
      "time": "2 hours, 10 minutes",
      "timestamp": 1709384199,
      "status": 10,
      "runtime": "27 ms",
      "is_pending": "Not Pending",
      "memory": "6.8 MB",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1191503451,
      "status_display": "Wrong Answer",
      "lang": "golang",
      "question_id": 1019,
      "title_slug": "squares-of-a-sorted-array",
      "code": "func sortedSquares(nums []int) []int {\n    for i, num := range nums {\n        nums[i] = num * num\n    }\n    return nums\n}",
      "title": "Squares of a Sorted Array",
      "url": "/submissions/detail/1191503451/",
      "lang_name": "Go",
      "time": "2 hours, 13 minutes",
      "timestamp": 1709384045,
      "status": 11,
      "runtime": "N/A",
      "is_pending": "Not Pending",
      "memory": "N/A",
      "compare_result": "00111111111000011111111101100100010011000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "flag_type": 1
    },
    {
      "id": 1192437406,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 19,
      "title_slug": "remove-nth-node-from-end-of-list",
      "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    res := \u0026ListNode{0, head}\n\n    lead := res\n    for i := 0; i \u003c= n; i++ {\n        lead = lead.Next\n    }\n\n    cur := res\n    for lead != nil {\n        cur = cur.Next\n        lead = lead.Next\n    }\n\n    cur.Next = cur.Next.Next\n    return res.Next\n}",
      "title": "Remove Nth Node From End of List",
      "url": "/submissions/detail/1192437406/",
      "lang_name": "Go",
      "time": "1 hour, 42 minutes",
      "timestamp": 1709452665,
      "status": 10,
      "runtime": "2 ms",
      "is_pending": "Not Pending",
      "memory": "2.2 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1193597469,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 985,
      "title_slug": "bag-of-tokens",
      "code": "func bagOfTokensScore(tokens []int, power int) int {\n    n := len(tokens)\n\tsort.Ints(tokens)\n\tres := 0\n\n\tl := 0\n\tr := n - 1\n\n\tfor l \u003c= r {\n\t\tfor l \u003c= r \u0026\u0026 power \u003e= tokens[l] {\n\t\t\tpower -= tokens[l]\n\t\t\tl++\n\t\t\tres++\n\t\t}\n\t\t\n\t\tif res == 0 {\n\t\t\tbreak\n\t\t}\n\n        if r - l + 1 \u003c= 2 {\n\t\t\tbreak\n\t\t}\n\n\t\tpower += tokens[r]\n\t\tr--\n\t\tres--\n\t}\n\n\treturn res\n}",
      "title": "Bag of Tokens",
      "url": "/submissions/detail/1193597469/",
      "lang_name": "Go",
      "time": "41 minutes",
      "timestamp": 1709558500,
      "status": 10,
      "runtime": "5 ms",
      "is_pending": "Not Pending",
      "memory": "2.9 MB",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    },
    {
      "id": 1194470777,
      "status_display": "Accepted",
      "lang": "golang",
      "question_id": 1850,
      "title_slug": "minimum-length-of-string-after-deleting-similar-ends",
      "code": "func minimumLength(s string) int {\n    left := 0\n    right := len(s) - 1\n    \n    for left \u003c right {\n        lc := s[left]\n        rc := s[right]\n        \n        if lc != rc {\n            return right - left + 1\n        }\n        \n        for left + 1 \u003c right \u0026\u0026 lc == s[left + 1] {\n            left++\n        }\n        \n        for left \u003c right - 1 \u0026\u0026 rc == s[right - 1] {\n            right--\n        }\n        \n        right--\n        left++\n    }\n    \n    return right - left + 1\n}",
      "title": "Minimum Length of String After Deleting Similar Ends",
      "url": "/submissions/detail/1194470777/",
      "lang_name": "Go",
      "time": "9 hours, 36 minutes",
      "timestamp": 1709628758,
      "status": 10,
      "runtime": "9 ms",
      "is_pending": "Not Pending",
      "memory": "6.4 MB",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "flag_type": 1
    }
  ]
}
