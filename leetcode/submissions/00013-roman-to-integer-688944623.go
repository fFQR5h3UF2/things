// Submission title: Roman to Integer
// Submission url  : https://leetcode.com/problems/roman-to-integer/description/
// Submission url  : https://leetcode.com/submissions/detail/688944623/
// Submission json : {"id":688944623,"status_display":"Accepted","lang":"golang","question_id":13,"title_slug":"roman-to-integer","code":"\nfunc in(character rune, targets string) bool {\n\tfor _, target := range targets {\n\t\tif character == target {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc romanToInt(roman string) int {\n\ttype dict map[rune]int\n\tvar result int\n\ttypes := dict{\n\t\t'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000,\n\t}\n\tfor index, character := range roman {\n\t\tresult += types[character]\n        if index < 1 {\n            continue}\n        switch {\n\t\tcase roman[index-1] == 'I' && in(character, \"VX\"):\n\t\t\tfallthrough\n\t\tcase roman[index-1] == 'X' && in(character, \"LC\"):\n\t\t\tfallthrough\n\t\tcase roman[index-1] == 'C' && in(character, \"DM\"):\n\t\t\tresult -= types[rune(roman[index-1])] * 2\n\t\t}\n\t}\n\treturn result\n}\n\n","title":"Roman to Integer","url":"/submissions/detail/688944623/","lang_name":"Go","time":"1 year, 9 months","timestamp":1651125545,"status":10,"runtime":"18 ms","is_pending":"Not Pending","memory":"2.9 MB","compare_resulthas_notes":false,"flag_type":1}
package submissions

func in(character rune, targets string) bool {
	for _, target := range targets {
		if character == target {
			return true
		}
	}
	return false
}

func romanToInt(roman string) int {
	type dict map[rune]int
	var result int
	types := dict{
		'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000,
	}
	for index, character := range roman {
		result += types[character]
		if index < 1 {
			continue
		}
		switch {
		case roman[index-1] == 'I' && in(character, "VX"):
			fallthrough
		case roman[index-1] == 'X' && in(character, "LC"):
			fallthrough
		case roman[index-1] == 'C' && in(character, "DM"):
			result -= types[rune(roman[index-1])] * 2
		}
	}
	return result
}
