# Submission title: for Integer to Roman
# Submission url  : https://leetcode.com/submissions/detail/997593623/
# Submission json : {"id": 997593623, "status_display": "Accepted", "lang": "python3", "question_id": 12, "title_slug": "integer-to-roman", "code": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        result: List[str] = []\n        stack: List[int] = deque([\n            1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        ])\n        values = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",\n            40: \"XL\",\n            10: \"X\",\n            9: \"IX\",\n            5: \"V\",\n            4: \"IV\",  \n            1: \"I\"\n        }\n\n        while num:\n            roman = stack[-1]\n            if num < roman:\n                stack.pop()\n                continue\n\n            result.append(values[roman])\n            num -= roman\n\n        return \"\".join(result)", "title": "Integer to Roman", "url": "/submissions/detail/997593623/", "lang_name": "Python3", "time": "6\u00a0months, 3\u00a0weeks", "timestamp": 1689687463, "status": 10, "runtime": "81 ms", "is_pending": "Not Pending", "memory": "16.2 MB", "compare_resulthas_notes": false, "flag_type": 1}


class Solution:
    def intToRoman(self, num: int) -> str:
        result: List[str] = []
        stack: List[int] = deque([1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000])
        values = {
            1000: "M",
            900: "CM",
            500: "D",
            400: "CD",
            100: "C",
            90: "XC",
            50: "L",
            40: "XL",
            10: "X",
            9: "IX",
            5: "V",
            4: "IV",
            1: "I",
        }

        while num:
            roman = stack[-1]
            if num < roman:
                stack.pop()
                continue

            result.append(values[roman])
            num -= roman

        return "".join(result)
