# Submission title: Buy Two Chocolates
# Submission url  : https://leetcode.com/problems/buy-two-chocolates/description/
# Submission url  : https://leetcode.com/submissions/detail/1124175757/
# Submission json : {"id":1124175757,"status_display":"Accepted","lang":"python3","question_id":2756,"title_slug":"buy-two-chocolates","code":"class Solution:\n    def buyChoco(self, prices: List[int], money: int) -> int:\n        # Assume the Minimum Cost to be Infinity\n        min_cost = float('inf')\n\n        # Number of Chocolates\n        n = len(prices)\n\n        # Check Every Pair of Chocolates\n        for first_choco in range(n):\n            for second_choco in range(first_choco + 1, n):\n                # Sum of Prices of the Two Chocolates\n                cost = prices[first_choco] + prices[second_choco]\n\n                # If the Sum of Prices is Less than the Minimum Cost\n                if cost < min_cost:\n                    # Update the Minimum Cost\n                    min_cost = cost\n        \n        # We can buy chocolates only if we have enough money\n        if min_cost <= money:\n            # Return the Amount of Money Left\n            return money - min_cost\n        else:\n            # We cannot buy chocolates. Return the initial amount of money\n            return money","title":"Buy Two Chocolates","url":"/submissions/detail/1124175757/","lang_name":"Python3","time":"1 month, 2 weeks","timestamp":1703070316,"status":10,"runtime":"53 ms","is_pending":"Not Pending","memory":"17.2 MB","compare_resulthas_notes":false,"flag_type":1}


class Solution:
    def buyChoco(self, prices: List[int], money: int) -> int:
        # Assume the Minimum Cost to be Infinity
        min_cost = float("inf")

        # Number of Chocolates
        n = len(prices)

        # Check Every Pair of Chocolates
        for first_choco in range(n):
            for second_choco in range(first_choco + 1, n):
                # Sum of Prices of the Two Chocolates
                cost = prices[first_choco] + prices[second_choco]

                # If the Sum of Prices is Less than the Minimum Cost
                if cost < min_cost:
                    # Update the Minimum Cost
                    min_cost = cost

        # We can buy chocolates only if we have enough money
        if min_cost <= money:
            # Return the Amount of Money Left
            return money - min_cost
        else:
            # We cannot buy chocolates. Return the initial amount of money
            return money
