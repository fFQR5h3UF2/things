// Submission title: Sort Vowels in a String
// Submission url  : https://leetcode.com/problems/sort-vowels-in-a-string/description/
// Submission url  : https://leetcode.com/submissions/detail/1097740468/
// Submission json : {"id":1097740468,"status_display":"Accepted","lang":"cpp","question_id":2887,"title_slug":"sort-vowels-in-a-string","code":"class Solution {\npublic:\n    // Returns true if the character is a vowel.\n    bool isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'o'|| c == 'u'|| c == 'i' \n            || c == 'A' || c == 'E' || c == 'O'|| c == 'U'|| c == 'I';\n    }\n    \n    string sortVowels(string s) {\n        unordered_map<char, int> count;\n\n        // Store the frequencies for each character.\n        for (char c : s) {\n            if (isVowel(c)) {\n                count[c]++;\n            }\n        }\n\n        // Sorted string having all the vowels.\n        string sortedVowel = \"AEIOUaeiou\";\n        string ans;\n        int j = 0;\n        for (int i = 0; i < s.size(); i++) {\n            if (!isVowel(s[i])) {\n                ans += s[i];\n            } else {\n                // Skip to the character which is having remaining count.\n                while (count[sortedVowel[j]] == 0) {\n                    j++;\n                }\n\n                ans += sortedVowel[j];\n                count[sortedVowel[j]]--;\n            }\n        }\n        return ans;\n    }\n};","title":"Sort Vowels in a String","url":"/submissions/detail/1097740468/","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1699861333,"status":10,"runtime":"43 ms","is_pending":"Not Pending","memory":"13.2 MB","compare_resulthas_notes":false,"flag_type":1}

class Solution {
public:
    // Returns true if the character is a vowel.
    bool isVowel(char c) {
        return c == 'a' || c == 'e' || c == 'o'|| c == 'u'|| c == 'i'
            || c == 'A' || c == 'E' || c == 'O'|| c == 'U'|| c == 'I';
    }

    string sortVowels(string s) {
        unordered_map<char, int> count;

        // Store the frequencies for each character.
        for (char c : s) {
            if (isVowel(c)) {
                count[c]++;
            }
        }

        // Sorted string having all the vowels.
        string sortedVowel = "AEIOUaeiou";
        string ans;
        int j = 0;
        for (int i = 0; i < s.size(); i++) {
            if (!isVowel(s[i])) {
                ans += s[i];
            } else {
                // Skip to the character which is having remaining count.
                while (count[sortedVowel[j]] == 0) {
                    j++;
                }

                ans += sortedVowel[j];
                count[sortedVowel[j]]--;
            }
        }
        return ans;
    }
};
