load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

#http_archive(
#    name = "my_ssl",
#    build_file = "@//:openssl.BUILD",
#    sha256 = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
#    url = "http://example.com/openssl.zip",
#)

filegroup(
    name = "packages",
    srcs = glob([
        "shell/**",
        "tmux/**",
        "terraform/**",
        "bin/**",
        "nvim/**",
        "gpg/**",
        "git/**",
        "firefox/**",
    ]),
)

pkg_tar(
    name = "pack",
    srcs = [":packages"],
    extension = "tar.gz",
    mode = "0640",
    strip_prefix = ".",  # if ommited, pkg_tar flattens paths
)

sh_library(
    name = "lib_embed",
    srcs = ["tools/embed"],
)

sh_library(
    name = "lib_scripts",
    srcs = ["tools/scripts"],
)

sh_library(
    name = "lib_install",
    srcs = ["tools/install"],
)

genrule(
    name = "gen_install_script",
    srcs = [":lib_embed"],
    outs = ["install_script"],
    cmd = "'$(<)' '$(@)' '$(location :pack)' '$(location :lib_install)'",
    tools = [
        ":lib_install",
        ":pack",
    ],
    visibility = ["//visibility:public"],
)

sh_binary(
    name = "nvim-lazy-sync",
    srcs = [":lib_scripts"],
    args = ["nvim_lazy_sync"],
    data = [":install"],
    visibility = ["//visibility:public"],
)

sh_binary(
    name = "nvim-lazy-update-lockfile",
    srcs = [":lib_scripts"],
    args = ["nvim_lazy_update_lockfile"],
    data = [":install"],
    visibility = ["//visibility:public"],
)

sh_binary(
    name = "install",
    srcs = [":install_script"],
    args = ["--stow"],
    visibility = ["//visibility:public"],
)

sh_binary(
    name = "simulate",
    srcs = [":install_script"],
    args = ["--simulate"],
    visibility = ["//visibility:public"],
)

sh_binary(
    name = "delete",
    srcs = [":install_script"],
    args = ["--delete"],
    visibility = ["//visibility:public"],
)
